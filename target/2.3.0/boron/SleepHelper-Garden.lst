
/Users/chipmc/Documents/Maker/Particle/Projects/SleepHelper-Garden/target/2.3.0/boron/SleepHelper-Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010e10  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e4e30  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000290  2003e118  000e4e34  0002e118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000448  2003e3a8  2003e3a8  0003e3a8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e50c4  000e50c4  000350c4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e50f0  000e50f0  000350f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0033149f  00000000  00000000  000350f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000291d4  00000000  00000000  00366593  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0006e7a3  00000000  00000000  0038f767  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00004530  00000000  00000000  003fdf0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00011368  00000000  00000000  0040243a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004c50f  00000000  00000000  004137a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000756c4  00000000  00000000  0045fcb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018ecbf  00000000  00000000  004d5375  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000db18  00000000  00000000  00664034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00d fb39 	bl	e16a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00d fb5b 	bl	e16f8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e118 	.word	0x2003e118
   d404c:	000e4e34 	.word	0x000e4e34
   d4050:	2003e3a8 	.word	0x2003e3a8
   d4054:	2003e3a8 	.word	0x2003e3a8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f00c fa17 	bl	e0494 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e4dec 	.word	0x000e4dec
   d4080:	000e4e30 	.word	0x000e4e30

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b860 	b.w	d4148 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f87f 	bl	d418c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f00c b9b7 	b.w	e0404 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f009 b82f 	b.w	dd0f8 <malloc>

000d409a <_Znaj>:
   d409a:	f009 b82d 	b.w	dd0f8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f009 b833 	b.w	dd108 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f009 b831 	b.w	dd108 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f008 fec2 	bl	dce38 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000dca69 	.word	0x000dca69

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d8:	b510      	push	{r4, lr}
   d40da:	4b03      	ldr	r3, [pc, #12]	; (d40e8 <_ZN8MB85RC64D1Ev+0x10>)
   d40dc:	6003      	str	r3, [r0, #0]
   d40de:	4604      	mov	r4, r0
   d40e0:	f004 f9b6 	bl	d8450 <_ZN6MB85RCD1Ev>
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	000e39a0 	.word	0x000e39a0

000d40ec <_ZN8MB85RC64D0Ev>:
   d40ec:	b510      	push	{r4, lr}
   d40ee:	4604      	mov	r4, r0
   d40f0:	f7ff fff2 	bl	d40d8 <_ZN8MB85RC64D1Ev>
   d40f4:	4620      	mov	r0, r4
   d40f6:	2110      	movs	r1, #16
   d40f8:	f00c fb22 	bl	e0740 <_ZdlPvj>
   d40fc:	4620      	mov	r0, r4
   d40fe:	bd10      	pop	{r4, pc}

000d4100 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4100:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4102:	b510      	push	{r4, lr}
   d4104:	4604      	mov	r4, r0
   d4106:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4108:	f00a fc9e 	bl	dea48 <_ZN5spark10LogManager8instanceEv>
   d410c:	4621      	mov	r1, r4
   d410e:	f00a fe60 	bl	dedd2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4112:	f00c f92f 	bl	e0374 <_Z16_fetch_usbserialv>
   d4116:	f00c f921 	bl	e035c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d411a:	4620      	mov	r0, r4
   d411c:	4b04      	ldr	r3, [pc, #16]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411e:	f840 3b04 	str.w	r3, [r0], #4
   d4122:	f00a fd43 	bl	debac <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}
   d412a:	bf00      	nop
   d412c:	000e3988 	.word	0x000e3988
   d4130:	000e3970 	.word	0x000e3970

000d4134 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4134:	b510      	push	{r4, lr}
   d4136:	4604      	mov	r4, r0
    }
   d4138:	f7ff ffe2 	bl	d4100 <_ZN5spark16SerialLogHandlerD1Ev>
   d413c:	4620      	mov	r0, r4
   d413e:	2124      	movs	r1, #36	; 0x24
   d4140:	f00c fafe 	bl	e0740 <_ZdlPvj>
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}

000d4148 <setup>:
// Support for Particle Products (changes coming in 4.x - https://docs.particle.io/cards/firmware/macros/product_id/)
PRODUCT_ID(PLATFORM_ID);                            // Device needs to be added to product ahead of time.  Remove once we go to deviceOS@4.x
PRODUCT_VERSION(0);
char currentPointRelease[6] ="0.02";

void setup() {
   d4148:	b510      	push	{r4, lr}
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h

    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h

    {                                               // Initialize AB1805 Watchdog and RTC                                 
        ab1805.setup();
   d414a:	4c0f      	ldr	r4, [pc, #60]	; (d4188 <setup+0x40>)
    initializePinModes();                           // Sets the pinModes
   d414c:	f000 f93e 	bl	d43cc <_Z18initializePinModesv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d4150:	f001 fce4 	bl	d5b1c <_Z18storageObjectStartv>
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   d4154:	f000 f9bc 	bl	d44d0 <_Z18particleInitializev>
        ab1805.setup();
   d4158:	4620      	mov	r0, r4
   d415a:	2101      	movs	r1, #1
   d415c:	f002 fae0 	bl	d6720 <_ZN6AB18055setupEb>

        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d4160:	2100      	movs	r1, #0
   d4162:	4620      	mov	r0, r4
   d4164:	f002 f8be 	bl	d62e4 <_ZN6AB180511resetConfigEm>

        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d4168:	217c      	movs	r1, #124	; 0x7c
   d416a:	4620      	mov	r0, r4
   d416c:	f002 f836 	bl	d61dc <_ZN6AB18056setWDTEi>
    }

	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   d4170:	f004 fbe8 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d4174:	f004 fe00 	bl	d8d78 <_ZN17PublishQueuePosix5setupEv>

    sleepHelperConfig();                            // This is the function call to configure the sleep helper parameters in sleep_helper_config.h
   d4178:	f001 fa88 	bl	d568c <_Z17sleepHelperConfigv>

    SleepHelper::instance().setup();                // This puts these parameters into action
   d417c:	f006 f984 	bl	da488 <_ZN11SleepHelper8instanceEv>
}
   d4180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SleepHelper::instance().setup();                // This puts these parameters into action
   d4184:	f007 b8f8 	b.w	db378 <_ZN11SleepHelper5setupEv>
   d4188:	2003e3b4 	.word	0x2003e3b4

000d418c <loop>:

void loop() {
   d418c:	b508      	push	{r3, lr}
    SleepHelper::instance().loop();                 // Monitor and manage the sleep helper workflow
   d418e:	f006 f97b 	bl	da488 <_ZN11SleepHelper8instanceEv>
   d4192:	f008 fbc3 	bl	dc91c <_ZN11SleepHelper4loopEv>

    ab1805.loop();                                  // Monitor the real time clock and watchdog
   d4196:	4805      	ldr	r0, [pc, #20]	; (d41ac <loop+0x20>)
   d4198:	f002 fba2 	bl	d68e0 <_ZN6AB18054loopEv>
    
    PublishQueuePosix::instance().loop();           // Monitor and manage the publish queue
   d419c:	f004 fbd2 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d41a0:	f004 fac2 	bl	d8728 <_ZN17PublishQueuePosix4loopEv>

    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
}
   d41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d41a8:	f001 bbf8 	b.w	d599c <_Z17storageObjectLoopv>
   d41ac:	2003e3b4 	.word	0x2003e3b4

000d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d41b2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d41b6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41b8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d41ba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d41be:	42ae      	cmp	r6, r5
   d41c0:	d004      	beq.n	d41cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d41c2:	4628      	mov	r0, r5
   d41c4:	f00b fc70 	bl	dfaa8 <_ZN6StringD1Ev>
   d41c8:	3514      	adds	r5, #20
   d41ca:	e7f8      	b.n	d41be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d41cc:	6820      	ldr	r0, [r4, #0]
   d41ce:	f008 ff9b 	bl	dd108 <free>
    AllocatorT::free(data_);
}
   d41d2:	4620      	mov	r0, r4
   d41d4:	bd70      	pop	{r4, r5, r6, pc}

000d41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d41d6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d41da:	4604      	mov	r4, r0
   d41dc:	460d      	mov	r5, r1
   d41de:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d41e0:	d916      	bls.n	d4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d41e2:	4290      	cmp	r0, r2
   d41e4:	d215      	bcs.n	d4212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d41e6:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d41ea:	1a75      	subs	r5, r6, r1
   d41ec:	f1a1 0714 	sub.w	r7, r1, #20
   d41f0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d41f2:	42b7      	cmp	r7, r6
   d41f4:	d01c      	beq.n	d4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d41f6:	b12c      	cbz	r4, d4204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d41f8:	4631      	mov	r1, r6
   d41fa:	4620      	mov	r0, r4
   d41fc:	f00b fcd0 	bl	dfba0 <_ZN6StringC1EOS_>
   d4200:	7c33      	ldrb	r3, [r6, #16]
   d4202:	7423      	strb	r3, [r4, #16]
   d4204:	4630      	mov	r0, r6
   d4206:	f00b fc4f 	bl	dfaa8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d420a:	3e14      	subs	r6, #20
   d420c:	3c14      	subs	r4, #20
   d420e:	e7f0      	b.n	d41f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4210:	d00e      	beq.n	d4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4212:	42b5      	cmp	r5, r6
   d4214:	d00c      	beq.n	d4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4216:	b12c      	cbz	r4, d4224 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4218:	4629      	mov	r1, r5
   d421a:	4620      	mov	r0, r4
   d421c:	f00b fcc0 	bl	dfba0 <_ZN6StringC1EOS_>
   d4220:	7c2b      	ldrb	r3, [r5, #16]
   d4222:	7423      	strb	r3, [r4, #16]
   d4224:	4628      	mov	r0, r5
   d4226:	f00b fc3f 	bl	dfaa8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d422a:	3514      	adds	r5, #20
   d422c:	3414      	adds	r4, #20
   d422e:	e7f0      	b.n	d4212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4236:	2300      	movs	r3, #0
   d4238:	e9c0 3300 	strd	r3, r3, [r0]
   d423c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d423e:	684f      	ldr	r7, [r1, #4]
   d4240:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4242:	4604      	mov	r4, r0
   d4244:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4246:	dd23      	ble.n	d4290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4248:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d424c:	fb08 f007 	mul.w	r0, r8, r7
   d4250:	f008 ff52 	bl	dd0f8 <malloc>
            if (!d) {
   d4254:	4605      	mov	r5, r0
   d4256:	b1d8      	cbz	r0, d4290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4258:	e9d4 1200 	ldrd	r1, r2, [r4]
   d425c:	fb08 1202 	mla	r2, r8, r2, r1
   d4260:	f7ff ffb9 	bl	d41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4264:	6820      	ldr	r0, [r4, #0]
   d4266:	f008 ff4f 	bl	dd108 <free>
        data_ = d;
   d426a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d426c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d426e:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4272:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4276:	45b8      	cmp	r8, r7
   d4278:	d008      	beq.n	d428c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d427a:	4639      	mov	r1, r7
   d427c:	4628      	mov	r0, r5
   d427e:	f00b fca9 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d4282:	7c3b      	ldrb	r3, [r7, #16]
   d4284:	742b      	strb	r3, [r5, #16]
   d4286:	3714      	adds	r7, #20
   d4288:	3514      	adds	r5, #20
   d428a:	e7f4      	b.n	d4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d428c:	6873      	ldr	r3, [r6, #4]
   d428e:	6063      	str	r3, [r4, #4]
}
   d4290:	4620      	mov	r0, r4
   d4292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4298 <_GLOBAL__sub_I_logHandler>:
}
   d4298:	b5f0      	push	{r4, r5, r6, r7, lr}
   d429a:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   d429c:	2400      	movs	r4, #0
   d429e:	e9cd 4400 	strd	r4, r4, [sp]
   d42a2:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d42a4:	f00c f866 	bl	e0374 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d42a8:	4d33      	ldr	r5, [pc, #204]	; (d4378 <_GLOBAL__sub_I_logHandler+0xe0>)
   d42aa:	4606      	mov	r6, r0
   d42ac:	4669      	mov	r1, sp
   d42ae:	a803      	add	r0, sp, #12
   d42b0:	f7ff ffbf 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42b4:	462f      	mov	r7, r5
        stream_(&stream) {
   d42b6:	a903      	add	r1, sp, #12
   d42b8:	a806      	add	r0, sp, #24
   d42ba:	f7ff ffba 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d42be:	4b2f      	ldr	r3, [pc, #188]	; (d437c <_GLOBAL__sub_I_logHandler+0xe4>)
   d42c0:	f847 3b04 	str.w	r3, [r7], #4
   d42c4:	a906      	add	r1, sp, #24
   d42c6:	a809      	add	r0, sp, #36	; 0x24
   d42c8:	f7ff ffb3 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42cc:	aa09      	add	r2, sp, #36	; 0x24
   d42ce:	211e      	movs	r1, #30
   d42d0:	4638      	mov	r0, r7
   d42d2:	f00a fed8 	bl	df086 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d42d6:	a809      	add	r0, sp, #36	; 0x24
   d42d8:	f7ff ff6a 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d42dc:	a806      	add	r0, sp, #24
   d42de:	f7ff ff67 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d42e2:	4b27      	ldr	r3, [pc, #156]	; (d4380 <_GLOBAL__sub_I_logHandler+0xe8>)
   d42e4:	602b      	str	r3, [r5, #0]
   d42e6:	622e      	str	r6, [r5, #32]
   d42e8:	a803      	add	r0, sp, #12
   d42ea:	f7ff ff61 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d42ee:	4b25      	ldr	r3, [pc, #148]	; (d4384 <_GLOBAL__sub_I_logHandler+0xec>)
   d42f0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d42f2:	f00c f83f 	bl	e0374 <_Z16_fetch_usbserialv>
   d42f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42fa:	f00c f82b 	bl	e0354 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d42fe:	f00a fba3 	bl	dea48 <_ZN5spark10LogManager8instanceEv>
   d4302:	4629      	mov	r1, r5
   d4304:	f00a fe51 	bl	defaa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);       //  Limit logging to information on program flow               
   d4308:	4668      	mov	r0, sp
   d430a:	f7ff ff51 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
SYSTEM_THREAD(ENABLED);
   d430e:	4621      	mov	r1, r4
   d4310:	2001      	movs	r0, #1
   d4312:	f008 fdfb 	bl	dcf0c <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4316:	4b1c      	ldr	r3, [pc, #112]	; (d4388 <_GLOBAL__sub_I_logHandler+0xf0>)
    SleepResult() {}
   d4318:	4a1c      	ldr	r2, [pc, #112]	; (d438c <_GLOBAL__sub_I_logHandler+0xf4>)
              error_(SYSTEM_ERROR_NONE) {
   d431a:	601c      	str	r4, [r3, #0]
   d431c:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d431e:	719c      	strb	r4, [r3, #6]
   d4320:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4322:	2002      	movs	r0, #2
   d4324:	f008 fdda 	bl	dcedc <set_system_mode>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d4328:	2101      	movs	r1, #1
   d432a:	2004      	movs	r0, #4
   d432c:	f008 fb7c 	bl	dca28 <HAL_Feature_Set>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d4330:	f00c f9be 	bl	e06b0 <_Z19__fetch_global_Wirev>
   d4334:	2269      	movs	r2, #105	; 0x69
   d4336:	4601      	mov	r1, r0
   d4338:	4815      	ldr	r0, [pc, #84]	; (d4390 <_GLOBAL__sub_I_logHandler+0xf8>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d433a:	4d16      	ldr	r5, [pc, #88]	; (d4394 <_GLOBAL__sub_I_logHandler+0xfc>)
   d433c:	f001 fe5e 	bl	d5ffc <_ZN6AB1805C1ER7TwoWireh>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d4340:	f00c f9b6 	bl	e06b0 <_Z19__fetch_global_Wirev>
   d4344:	4623      	mov	r3, r4
   d4346:	4601      	mov	r1, r0
   d4348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d434c:	4628      	mov	r0, r5
   d434e:	f004 f88b 	bl	d8468 <_ZN6MB85RCC1ER7TwoWireji>
   d4352:	4b11      	ldr	r3, [pc, #68]	; (d4398 <_GLOBAL__sub_I_logHandler+0x100>)
   d4354:	602b      	str	r3, [r5, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4356:	f00c f8cf 	bl	e04f8 <spark_protocol_instance>
   d435a:	4623      	mov	r3, r4
   d435c:	4622      	mov	r2, r4
   d435e:	210d      	movs	r1, #13
   d4360:	f00c f8d2 	bl	e0508 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4364:	f00c f8c8 	bl	e04f8 <spark_protocol_instance>
   d4368:	4623      	mov	r3, r4
   d436a:	4622      	mov	r2, r4
   d436c:	4621      	mov	r1, r4
   d436e:	f00c f8d3 	bl	e0518 <spark_protocol_set_product_firmware_version>
}
   d4372:	b00d      	add	sp, #52	; 0x34
   d4374:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4376:	bf00      	nop
   d4378:	2003e3e4 	.word	0x2003e3e4
   d437c:	000e3970 	.word	0x000e3970
   d4380:	000e49cc 	.word	0x000e49cc
   d4384:	000e3988 	.word	0x000e3988
   d4388:	2003e3a8 	.word	0x2003e3a8
   d438c:	ffff0000 	.word	0xffff0000
   d4390:	2003e3b4 	.word	0x2003e3b4
   d4394:	2003e3d4 	.word	0x2003e3d4
   d4398:	000e39a0 	.word	0x000e39a0

000d439c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d439c:	b40e      	push	{r1, r2, r3}
   d439e:	b510      	push	{r4, lr}
   d43a0:	b08d      	sub	sp, #52	; 0x34
   d43a2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d43a4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d43a6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d43aa:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d43ac:	2300      	movs	r3, #0
   d43ae:	2020      	movs	r0, #32
   d43b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d43b4:	e9cd 4200 	strd	r4, r2, [sp]
   d43b8:	201e      	movs	r0, #30
   d43ba:	aa04      	add	r2, sp, #16
   d43bc:	f008 fd5c 	bl	dce78 <log_message_v>
}
   d43c0:	b00d      	add	sp, #52	; 0x34
   d43c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d43c6:	b003      	add	sp, #12
   d43c8:	4770      	bx	lr
	...

000d43cc <_Z18initializePinModesv>:

const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d43cc:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d43ce:	490f      	ldr	r1, [pc, #60]	; (d440c <_Z18initializePinModesv+0x40>)
   d43d0:	480f      	ldr	r0, [pc, #60]	; (d4410 <_Z18initializePinModesv+0x44>)
   d43d2:	f7ff ffe3 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(SOIL_MOISTURE_PIN,INPUT);
   d43d6:	2100      	movs	r1, #0
   d43d8:	2013      	movs	r0, #19
   d43da:	f00c f8e3 	bl	e05a4 <pinMode>
    pinMode(SOIL_TEMP_PIN,INPUT);
   d43de:	2100      	movs	r1, #0
   d43e0:	2012      	movs	r0, #18
   d43e2:	f00c f8df 	bl	e05a4 <pinMode>
    pinMode(SOIL_POWER_PIN,OUTPUT);
   d43e6:	2101      	movs	r1, #1
   d43e8:	2011      	movs	r0, #17
   d43ea:	f00c f8db 	bl	e05a4 <pinMode>
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d43ee:	2102      	movs	r1, #2
   d43f0:	2004      	movs	r0, #4
   d43f2:	f00c f8d7 	bl	e05a4 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d43f6:	2100      	movs	r1, #0
   d43f8:	2008      	movs	r0, #8
   d43fa:	f00c f8d3 	bl	e05a4 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d43fe:	2101      	movs	r1, #1
   d4400:	2007      	movs	r0, #7
   d4402:	f00c f8cf 	bl	e05a4 <pinMode>
    return true;
}
   d4406:	2001      	movs	r0, #1
   d4408:	bd08      	pop	{r3, pc}
   d440a:	bf00      	nop
   d440c:	000e39b4 	.word	0x000e39b4
   d4410:	2003e560 	.word	0x2003e560

000d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4414:	2300      	movs	r3, #0
   d4416:	2204      	movs	r2, #4
   d4418:	f008 bdbe 	b.w	dcf98 <spark_variable>

000d441c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d441c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d441e:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4422:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4424:	f88d 5000 	strb.w	r5, [sp]
   d4428:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d442a:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d442c:	f009 f9a6 	bl	dd77c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d4430:	4620      	mov	r0, r4
   d4432:	b003      	add	sp, #12
   d4434:	bd30      	pop	{r4, r5, pc}
	...

000d4438 <_Z20makeUpStringMessagesv>:
  * 
  * @details Looks at all the system setting values and creates the appropriate strings.  Note that this 
  * is a little inefficient but it cleans up a fair bit of code.
  * 
  */
void makeUpStringMessages() {
   d4438:	b513      	push	{r0, r1, r4, lr}

  if (sysStatus.wakeTime == 0 && sysStatus.sleepTime == 24) {                         // Special case for 24 hour operations
   d443a:	4c1b      	ldr	r4, [pc, #108]	; (d44a8 <_Z20makeUpStringMessagesv+0x70>)
   d443c:	8963      	ldrh	r3, [r4, #10]
   d443e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4442:	d123      	bne.n	d448c <_Z20makeUpStringMessagesv+0x54>
    snprintf(wakeTimeStr, sizeof(wakeTimeStr), "NA");
   d4444:	4919      	ldr	r1, [pc, #100]	; (d44ac <_Z20makeUpStringMessagesv+0x74>)
   d4446:	481a      	ldr	r0, [pc, #104]	; (d44b0 <_Z20makeUpStringMessagesv+0x78>)
   d4448:	f00d f9bc 	bl	e17c4 <strcpy>
    snprintf(sleepTimeStr, sizeof(sleepTimeStr), "NA");
   d444c:	4917      	ldr	r1, [pc, #92]	; (d44ac <_Z20makeUpStringMessagesv+0x74>)
   d444e:	4819      	ldr	r0, [pc, #100]	; (d44b4 <_Z20makeUpStringMessagesv+0x7c>)
   d4450:	f00d f9b8 	bl	e17c4 <strcpy>
    snprintf(wakeTimeStr, sizeof(wakeTimeStr), "%i:00", sysStatus.wakeTime);           // Open and Close Times
    snprintf(sleepTimeStr, sizeof(sleepTimeStr), "%i:00", sysStatus.sleepTime);
  }

  // Watering Strings
  snprintf(wateringDurationStr,sizeof(wateringDurationStr),"%isec",sysStatus.wateringDuration);
   d4454:	6923      	ldr	r3, [r4, #16]
   d4456:	4a18      	ldr	r2, [pc, #96]	; (d44b8 <_Z20makeUpStringMessagesv+0x80>)
   d4458:	4818      	ldr	r0, [pc, #96]	; (d44bc <_Z20makeUpStringMessagesv+0x84>)
   d445a:	2110      	movs	r1, #16
   d445c:	f008 fe74 	bl	dd148 <snprintf>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4460:	68e0      	ldr	r0, [r4, #12]
   d4462:	f00c fd25 	bl	e0eb0 <__aeabi_f2d>
   d4466:	4a16      	ldr	r2, [pc, #88]	; (d44c0 <_Z20makeUpStringMessagesv+0x88>)
   d4468:	e9cd 0100 	strd	r0, r1, [sp]
   d446c:	2108      	movs	r1, #8
   d446e:	4815      	ldr	r0, [pc, #84]	; (d44c4 <_Z20makeUpStringMessagesv+0x8c>)
   d4470:	f008 fe6a 	bl	dd148 <snprintf>
  snprintf(heatThresholdStr,sizeof(heatThresholdStr),"%2.1f %%",sysStatus.heatThreshold);
   d4474:	6960      	ldr	r0, [r4, #20]
   d4476:	f00c fd1b 	bl	e0eb0 <__aeabi_f2d>
   d447a:	4a11      	ldr	r2, [pc, #68]	; (d44c0 <_Z20makeUpStringMessagesv+0x88>)
   d447c:	e9cd 0100 	strd	r0, r1, [sp]
   d4480:	2108      	movs	r1, #8
   d4482:	4811      	ldr	r0, [pc, #68]	; (d44c8 <_Z20makeUpStringMessagesv+0x90>)
   d4484:	f008 fe60 	bl	dd148 <snprintf>

  return;
   d4488:	b002      	add	sp, #8
   d448a:	bd10      	pop	{r4, pc}
    snprintf(wakeTimeStr, sizeof(wakeTimeStr), "%i:00", sysStatus.wakeTime);           // Open and Close Times
   d448c:	7aa3      	ldrb	r3, [r4, #10]
   d448e:	4a0f      	ldr	r2, [pc, #60]	; (d44cc <_Z20makeUpStringMessagesv+0x94>)
   d4490:	4807      	ldr	r0, [pc, #28]	; (d44b0 <_Z20makeUpStringMessagesv+0x78>)
   d4492:	2108      	movs	r1, #8
   d4494:	f008 fe58 	bl	dd148 <snprintf>
    snprintf(sleepTimeStr, sizeof(sleepTimeStr), "%i:00", sysStatus.sleepTime);
   d4498:	7ae3      	ldrb	r3, [r4, #11]
   d449a:	4a0c      	ldr	r2, [pc, #48]	; (d44cc <_Z20makeUpStringMessagesv+0x94>)
   d449c:	4805      	ldr	r0, [pc, #20]	; (d44b4 <_Z20makeUpStringMessagesv+0x7c>)
   d449e:	2108      	movs	r1, #8
   d44a0:	f008 fe52 	bl	dd148 <snprintf>
   d44a4:	e7d6      	b.n	d4454 <_Z20makeUpStringMessagesv+0x1c>
   d44a6:	bf00      	nop
   d44a8:	2003e450 	.word	0x2003e450
   d44ac:	000e39d8 	.word	0x000e39d8
   d44b0:	2003e12e 	.word	0x2003e12e
   d44b4:	2003e126 	.word	0x2003e126
   d44b8:	000e39e1 	.word	0x000e39e1
   d44bc:	2003e136 	.word	0x2003e136
   d44c0:	000e39e7 	.word	0x000e39e7
   d44c4:	2003e146 	.word	0x2003e146
   d44c8:	2003e11e 	.word	0x2003e11e
   d44cc:	000e39db 	.word	0x000e39db

000d44d0 <_Z18particleInitializev>:
void particleInitialize() {
   d44d0:	b530      	push	{r4, r5, lr}
   d44d2:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d44d4:	4b3b      	ldr	r3, [pc, #236]	; (d45c4 <_Z18particleInitializev+0xf4>)
   d44d6:	9300      	str	r3, [sp, #0]
   d44d8:	4b3b      	ldr	r3, [pc, #236]	; (d45c8 <_Z18particleInitializev+0xf8>)
   d44da:	9301      	str	r3, [sp, #4]
   d44dc:	4b3b      	ldr	r3, [pc, #236]	; (d45cc <_Z18particleInitializev+0xfc>)
   d44de:	9302      	str	r3, [sp, #8]
   d44e0:	4b3b      	ldr	r3, [pc, #236]	; (d45d0 <_Z18particleInitializev+0x100>)
   d44e2:	9303      	str	r3, [sp, #12]
   d44e4:	4b3b      	ldr	r3, [pc, #236]	; (d45d4 <_Z18particleInitializev+0x104>)
   d44e6:	9304      	str	r3, [sp, #16]
   d44e8:	4b3b      	ldr	r3, [pc, #236]	; (d45d8 <_Z18particleInitializev+0x108>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d44ea:	493c      	ldr	r1, [pc, #240]	; (d45dc <_Z18particleInitializev+0x10c>)
   d44ec:	483c      	ldr	r0, [pc, #240]	; (d45e0 <_Z18particleInitializev+0x110>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d44ee:	9305      	str	r3, [sp, #20]
   d44f0:	2500      	movs	r5, #0
   d44f2:	4b3c      	ldr	r3, [pc, #240]	; (d45e4 <_Z18particleInitializev+0x114>)
   d44f4:	9306      	str	r3, [sp, #24]
   d44f6:	9507      	str	r5, [sp, #28]
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d44f8:	f7ff ff50 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        return _variable(varKey, var, STRING);
   d44fc:	493a      	ldr	r1, [pc, #232]	; (d45e8 <_Z18particleInitializev+0x118>)
   d44fe:	483b      	ldr	r0, [pc, #236]	; (d45ec <_Z18particleInitializev+0x11c>)
  Particle.variable("Sleep Enabled",(sysStatus.enableSleep) ? "Yes" : "No");
   d4500:	4c3b      	ldr	r4, [pc, #236]	; (d45f0 <_Z18particleInitializev+0x120>)
   d4502:	f7ff ff87 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4506:	493b      	ldr	r1, [pc, #236]	; (d45f4 <_Z18particleInitializev+0x124>)
   d4508:	483b      	ldr	r0, [pc, #236]	; (d45f8 <_Z18particleInitializev+0x128>)
   d450a:	f7ff ff83 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d450e:	493b      	ldr	r1, [pc, #236]	; (d45fc <_Z18particleInitializev+0x12c>)
   d4510:	483b      	ldr	r0, [pc, #236]	; (d4600 <_Z18particleInitializev+0x130>)
   d4512:	f7ff ff7f 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4516:	4a3b      	ldr	r2, [pc, #236]	; (d4604 <_Z18particleInitializev+0x134>)
   d4518:	4b3b      	ldr	r3, [pc, #236]	; (d4608 <_Z18particleInitializev+0x138>)
   d451a:	7a61      	ldrb	r1, [r4, #9]
   d451c:	483b      	ldr	r0, [pc, #236]	; (d460c <_Z18particleInitializev+0x13c>)
   d451e:	42a9      	cmp	r1, r5
   d4520:	bf14      	ite	ne
   d4522:	4611      	movne	r1, r2
   d4524:	4619      	moveq	r1, r3
   d4526:	f7ff ff75 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d452a:	4939      	ldr	r1, [pc, #228]	; (d4610 <_Z18particleInitializev+0x140>)
   d452c:	4839      	ldr	r0, [pc, #228]	; (d4614 <_Z18particleInitializev+0x144>)
   d452e:	f7ff ff71 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4532:	4939      	ldr	r1, [pc, #228]	; (d4618 <_Z18particleInitializev+0x148>)
   d4534:	4839      	ldr	r0, [pc, #228]	; (d461c <_Z18particleInitializev+0x14c>)
   d4536:	f7ff ff6d 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d453a:	4939      	ldr	r1, [pc, #228]	; (d4620 <_Z18particleInitializev+0x150>)
   d453c:	4839      	ldr	r0, [pc, #228]	; (d4624 <_Z18particleInitializev+0x154>)
   d453e:	462b      	mov	r3, r5
   d4540:	2202      	movs	r2, #2
   d4542:	f008 fd29 	bl	dcf98 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.batteryState]);
   d4546:	4b38      	ldr	r3, [pc, #224]	; (d4628 <_Z18particleInitializev+0x158>)
        return _variable(varKey, var, STRING);
   d4548:	4838      	ldr	r0, [pc, #224]	; (d462c <_Z18particleInitializev+0x15c>)
   d454a:	7b1b      	ldrb	r3, [r3, #12]
   d454c:	aa08      	add	r2, sp, #32
   d454e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4552:	f853 1c20 	ldr.w	r1, [r3, #-32]
   d4556:	f7ff ff5d 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d455a:	4935      	ldr	r1, [pc, #212]	; (d4630 <_Z18particleInitializev+0x160>)
   d455c:	4835      	ldr	r0, [pc, #212]	; (d4634 <_Z18particleInitializev+0x164>)
   d455e:	f7ff ff59 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4562:	4935      	ldr	r1, [pc, #212]	; (d4638 <_Z18particleInitializev+0x168>)
   d4564:	4835      	ldr	r0, [pc, #212]	; (d463c <_Z18particleInitializev+0x16c>)
   d4566:	f7ff ff55 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d456a:	4935      	ldr	r1, [pc, #212]	; (d4640 <_Z18particleInitializev+0x170>)
   d456c:	4835      	ldr	r0, [pc, #212]	; (d4644 <_Z18particleInitializev+0x174>)
   d456e:	f7ff ff51 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4572:	4935      	ldr	r1, [pc, #212]	; (d4648 <_Z18particleInitializev+0x178>)
   d4574:	4835      	ldr	r0, [pc, #212]	; (d464c <_Z18particleInitializev+0x17c>)
   d4576:	f7ff ff4d 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d457a:	4935      	ldr	r1, [pc, #212]	; (d4650 <_Z18particleInitializev+0x180>)
   d457c:	4835      	ldr	r0, [pc, #212]	; (d4654 <_Z18particleInitializev+0x184>)
   d457e:	f7ff ff49 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4582:	4a35      	ldr	r2, [pc, #212]	; (d4658 <_Z18particleInitializev+0x188>)
   d4584:	4935      	ldr	r1, [pc, #212]	; (d465c <_Z18particleInitializev+0x18c>)
   d4586:	4836      	ldr	r0, [pc, #216]	; (d4660 <_Z18particleInitializev+0x190>)
   d4588:	f008 ffec 	bl	dd564 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d458c:	4a35      	ldr	r2, [pc, #212]	; (d4664 <_Z18particleInitializev+0x194>)
   d458e:	4936      	ldr	r1, [pc, #216]	; (d4668 <_Z18particleInitializev+0x198>)
   d4590:	4833      	ldr	r0, [pc, #204]	; (d4660 <_Z18particleInitializev+0x190>)
   d4592:	f008 ffe7 	bl	dd564 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4596:	4a35      	ldr	r2, [pc, #212]	; (d466c <_Z18particleInitializev+0x19c>)
   d4598:	4935      	ldr	r1, [pc, #212]	; (d4670 <_Z18particleInitializev+0x1a0>)
   d459a:	4831      	ldr	r0, [pc, #196]	; (d4660 <_Z18particleInitializev+0x190>)
   d459c:	f008 ffe2 	bl	dd564 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d45a0:	4a34      	ldr	r2, [pc, #208]	; (d4674 <_Z18particleInitializev+0x1a4>)
   d45a2:	4935      	ldr	r1, [pc, #212]	; (d4678 <_Z18particleInitializev+0x1a8>)
   d45a4:	482e      	ldr	r0, [pc, #184]	; (d4660 <_Z18particleInitializev+0x190>)
   d45a6:	f008 ffdd 	bl	dd564 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (!digitalRead(BUTTON_PIN)) sysStatus.enableSleep = false;     // If the user button is held down while resetting - diable sleep
   d45aa:	4b34      	ldr	r3, [pc, #208]	; (d467c <_Z18particleInitializev+0x1ac>)
   d45ac:	8818      	ldrh	r0, [r3, #0]
   d45ae:	f00c f823 	bl	e05f8 <digitalRead>
   d45b2:	b900      	cbnz	r0, d45b6 <_Z18particleInitializev+0xe6>
   d45b4:	7260      	strb	r0, [r4, #9]
  takeMeasurements();                               // Initialize sensor values
   d45b6:	f001 fc4d 	bl	d5e54 <_Z16takeMeasurementsv>
}
   d45ba:	b009      	add	sp, #36	; 0x24
   d45bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
   d45c0:	f7ff bf3a 	b.w	d4438 <_Z20makeUpStringMessagesv>
   d45c4:	000e39f7 	.word	0x000e39f7
   d45c8:	000e39ff 	.word	0x000e39ff
   d45cc:	000e3a03 	.word	0x000e3a03
   d45d0:	000e3a0c 	.word	0x000e3a0c
   d45d4:	000e3a14 	.word	0x000e3a14
   d45d8:	000e3a20 	.word	0x000e3a20
   d45dc:	000e3a32 	.word	0x000e3a32
   d45e0:	2003e560 	.word	0x2003e560
   d45e4:	000e3a26 	.word	0x000e3a26
   d45e8:	2003e14e 	.word	0x2003e14e
   d45ec:	000e3a60 	.word	0x000e3a60
   d45f0:	2003e450 	.word	0x2003e450
   d45f4:	2003e12e 	.word	0x2003e12e
   d45f8:	000e3a6e 	.word	0x000e3a6e
   d45fc:	2003e126 	.word	0x2003e126
   d4600:	000e3a78 	.word	0x000e3a78
   d4604:	000e39f0 	.word	0x000e39f0
   d4608:	000e39f4 	.word	0x000e39f4
   d460c:	000e3a83 	.word	0x000e3a83
   d4610:	2003e118 	.word	0x2003e118
   d4614:	000e3a91 	.word	0x000e3a91
   d4618:	2003e15e 	.word	0x2003e15e
   d461c:	000e3a99 	.word	0x000e3a99
   d4620:	2003e428 	.word	0x2003e428
   d4624:	000e3aa0 	.word	0x000e3aa0
   d4628:	2003e420 	.word	0x2003e420
   d462c:	000e3aab 	.word	0x000e3aab
   d4630:	2003e19e 	.word	0x2003e19e
   d4634:	000e3aba 	.word	0x000e3aba
   d4638:	2003e1ae 	.word	0x2003e1ae
   d463c:	000e3ac7 	.word	0x000e3ac7
   d4640:	2003e146 	.word	0x2003e146
   d4644:	000e3ad1 	.word	0x000e3ad1
   d4648:	2003e136 	.word	0x2003e136
   d464c:	000e3add 	.word	0x000e3add
   d4650:	2003e11e 	.word	0x2003e11e
   d4654:	000e3b13 	.word	0x000e3b13
   d4658:	000e3aee 	.word	0x000e3aee
   d465c:	000d46ad 	.word	0x000d46ad
   d4660:	000dd539 	.word	0x000dd539
   d4664:	000e3afb 	.word	0x000e3afb
   d4668:	000d4745 	.word	0x000d4745
   d466c:	000e3b0f 	.word	0x000e3b0f
   d4670:	000d47d1 	.word	0x000d47d1
   d4674:	000e3b22 	.word	0x000e3b22
   d4678:	000d4865 	.word	0x000d4865
   d467c:	000e39ce 	.word	0x000e39ce

000d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4680:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4682:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4684:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4686:	b17c      	cbz	r4, d46a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4688:	6863      	ldr	r3, [r4, #4]
   d468a:	3b01      	subs	r3, #1
   d468c:	6063      	str	r3, [r4, #4]
   d468e:	b95b      	cbnz	r3, d46a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4690:	6823      	ldr	r3, [r4, #0]
   d4692:	4620      	mov	r0, r4
   d4694:	689b      	ldr	r3, [r3, #8]
   d4696:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4698:	68a3      	ldr	r3, [r4, #8]
   d469a:	3b01      	subs	r3, #1
   d469c:	60a3      	str	r3, [r4, #8]
   d469e:	b91b      	cbnz	r3, d46a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d46a0:	6823      	ldr	r3, [r4, #0]
   d46a2:	4620      	mov	r0, r4
   d46a4:	68db      	ldr	r3, [r3, #12]
   d46a6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d46a8:	4628      	mov	r0, r5
   d46aa:	bd38      	pop	{r3, r4, r5, pc}

000d46ac <_Z14setEnableSleep6String>:
{
   d46ac:	b510      	push	{r4, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d46ae:	491c      	ldr	r1, [pc, #112]	; (d4720 <_Z14setEnableSleep6String+0x74>)
   d46b0:	b094      	sub	sp, #80	; 0x50
   d46b2:	4604      	mov	r4, r0
   d46b4:	f00b fb1e 	bl	dfcf4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d46b8:	b348      	cbz	r0, d470e <_Z14setEnableSleep6String+0x62>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d46ba:	4919      	ldr	r1, [pc, #100]	; (d4720 <_Z14setEnableSleep6String+0x74>)
   d46bc:	4620      	mov	r0, r4
   d46be:	f00b fb19 	bl	dfcf4 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d46c2:	4b18      	ldr	r3, [pc, #96]	; (d4724 <_Z14setEnableSleep6String+0x78>)
   d46c4:	2800      	cmp	r0, #0
   d46c6:	bf14      	ite	ne
   d46c8:	2201      	movne	r2, #1
   d46ca:	2200      	moveq	r2, #0
   d46cc:	725a      	strb	r2, [r3, #9]
  snprintf(data, sizeof(data), "Enable sleep is %s", (sysStatus.enableSleep) ? "true" : "false");
   d46ce:	4a16      	ldr	r2, [pc, #88]	; (d4728 <_Z14setEnableSleep6String+0x7c>)
   d46d0:	4b16      	ldr	r3, [pc, #88]	; (d472c <_Z14setEnableSleep6String+0x80>)
   d46d2:	f04f 0140 	mov.w	r1, #64	; 0x40
   d46d6:	bf18      	it	ne
   d46d8:	4613      	movne	r3, r2
   d46da:	a804      	add	r0, sp, #16
   d46dc:	4a14      	ldr	r2, [pc, #80]	; (d4730 <_Z14setEnableSleep6String+0x84>)
   d46de:	f008 fd33 	bl	dd148 <snprintf>
  Log.info(data);
   d46e2:	4814      	ldr	r0, [pc, #80]	; (d4734 <_Z14setEnableSleep6String+0x88>)
   d46e4:	a904      	add	r1, sp, #16
   d46e6:	f7ff fe59 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46ea:	f008 fc75 	bl	dcfd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d46ee:	b160      	cbz	r0, d470a <_Z14setEnableSleep6String+0x5e>
    Particle.publish("Mode",data, PRIVATE);
   d46f0:	2300      	movs	r3, #0
   d46f2:	f88d 3000 	strb.w	r3, [sp]
   d46f6:	4b10      	ldr	r3, [pc, #64]	; (d4738 <_Z14setEnableSleep6String+0x8c>)
   d46f8:	4910      	ldr	r1, [pc, #64]	; (d473c <_Z14setEnableSleep6String+0x90>)
   d46fa:	781b      	ldrb	r3, [r3, #0]
   d46fc:	a802      	add	r0, sp, #8
   d46fe:	aa04      	add	r2, sp, #16
   d4700:	f7ff fe8c 	bl	d441c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4704:	a803      	add	r0, sp, #12
   d4706:	f7ff ffbb 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d470a:	2001      	movs	r0, #1
   d470c:	e005      	b.n	d471a <_Z14setEnableSleep6String+0x6e>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d470e:	490c      	ldr	r1, [pc, #48]	; (d4740 <_Z14setEnableSleep6String+0x94>)
   d4710:	4620      	mov	r0, r4
   d4712:	f00b faef 	bl	dfcf4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4716:	2800      	cmp	r0, #0
   d4718:	d1cf      	bne.n	d46ba <_Z14setEnableSleep6String+0xe>
}
   d471a:	b014      	add	sp, #80	; 0x50
   d471c:	bd10      	pop	{r4, pc}
   d471e:	bf00      	nop
   d4720:	000e3d78 	.word	0x000e3d78
   d4724:	2003e450 	.word	0x2003e450
   d4728:	000e3b35 	.word	0x000e3b35
   d472c:	000e3b3a 	.word	0x000e3b3a
   d4730:	000e3b40 	.word	0x000e3b40
   d4734:	2003e560 	.word	0x2003e560
   d4738:	2003e408 	.word	0x2003e408
   d473c:	000e3b53 	.word	0x000e3b53
   d4740:	000e48f6 	.word	0x000e48f6

000d4744 <_Z17setWaterThreshold6String>:
{
   d4744:	b530      	push	{r4, r5, lr}
   d4746:	b087      	sub	sp, #28
  float tempThreshold = strtof(command,&pEND);                         // Looks for the first float and interprets it
   d4748:	6800      	ldr	r0, [r0, #0]
   d474a:	a903      	add	r1, sp, #12
   d474c:	f00d fed2 	bl	e24f4 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4758:	d428      	bmi.n	d47ac <_Z17setWaterThreshold6String+0x68>
   d475a:	eddf 7a16 	vldr	s15, [pc, #88]	; d47b4 <_Z17setWaterThreshold6String+0x70>
   d475e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4766:	bfcc      	ite	gt
   d4768:	2401      	movgt	r4, #1
   d476a:	2400      	movle	r4, #0
   d476c:	dc1e      	bgt.n	d47ac <_Z17setWaterThreshold6String+0x68>
  sysStatus.wateringThresholdPct = tempThreshold;                      // debounce is how long we must space events to prevent overcounting
   d476e:	4d12      	ldr	r5, [pc, #72]	; (d47b8 <_Z17setWaterThreshold6String+0x74>)
   d4770:	ed85 0a03 	vstr	s0, [r5, #12]
  makeUpStringMessages();
   d4774:	f7ff fe60 	bl	d4438 <_Z20makeUpStringMessagesv>
   d4778:	f008 fc2e 	bl	dcfd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {                                         // Publish result if feeling verbose
   d477c:	b1a0      	cbz	r0, d47a8 <_Z17setWaterThreshold6String+0x64>
    if (sysStatus.wateringThresholdPct == 0) Particle.publish("System","Watering function disabled",PRIVATE);
   d477e:	edd5 7a03 	vldr	s15, [r5, #12]
   d4782:	4b0e      	ldr	r3, [pc, #56]	; (d47bc <_Z17setWaterThreshold6String+0x78>)
   d4784:	eef5 7a40 	vcmp.f32	s15, #0.0
   d4788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d478c:	781b      	ldrb	r3, [r3, #0]
   d478e:	bf07      	ittee	eq
   d4790:	4a0b      	ldreq	r2, [pc, #44]	; (d47c0 <_Z17setWaterThreshold6String+0x7c>)
   d4792:	490c      	ldreq	r1, [pc, #48]	; (d47c4 <_Z17setWaterThreshold6String+0x80>)
    else Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d4794:	4a0c      	ldrne	r2, [pc, #48]	; (d47c8 <_Z17setWaterThreshold6String+0x84>)
   d4796:	490d      	ldrne	r1, [pc, #52]	; (d47cc <_Z17setWaterThreshold6String+0x88>)
    if (sysStatus.wateringThresholdPct == 0) Particle.publish("System","Watering function disabled",PRIVATE);
   d4798:	f88d 4000 	strb.w	r4, [sp]
    else Particle.publish("Threshold",wateringThresholdPctStr, PRIVATE);
   d479c:	a804      	add	r0, sp, #16
   d479e:	f7ff fe3d 	bl	d441c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d47a2:	a805      	add	r0, sp, #20
   d47a4:	f7ff ff6c 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;                                                            // Returns 1 to let the user know if was reset
   d47a8:	2001      	movs	r0, #1
   d47aa:	e000      	b.n	d47ae <_Z17setWaterThreshold6String+0x6a>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d47ac:	2000      	movs	r0, #0
}
   d47ae:	b007      	add	sp, #28
   d47b0:	bd30      	pop	{r4, r5, pc}
   d47b2:	bf00      	nop
   d47b4:	42c80000 	.word	0x42c80000
   d47b8:	2003e450 	.word	0x2003e450
   d47bc:	2003e408 	.word	0x2003e408
   d47c0:	000e3b58 	.word	0x000e3b58
   d47c4:	000e3b73 	.word	0x000e3b73
   d47c8:	2003e146 	.word	0x2003e146
   d47cc:	000e3b05 	.word	0x000e3b05

000d47d0 <_Z16setHeatThreshold6String>:
{
   d47d0:	b530      	push	{r4, r5, lr}
   d47d2:	ed2d 8b02 	vpush	{d8}
   d47d6:	b087      	sub	sp, #28
  float tempThreshold = strtof(command,&pEND);                         // Looks for the first float and interprets it
   d47d8:	6800      	ldr	r0, [r0, #0]
   d47da:	a903      	add	r1, sp, #12
   d47dc:	f00d fe8a 	bl	e24f4 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d47e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d47e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47e8:	d428      	bmi.n	d483c <_Z16setHeatThreshold6String+0x6c>
   d47ea:	ed9f 8a17 	vldr	s16, [pc, #92]	; d4848 <_Z16setHeatThreshold6String+0x78>
   d47ee:	eeb4 0ac8 	vcmpe.f32	s0, s16
   d47f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47f6:	bfcc      	ite	gt
   d47f8:	2401      	movgt	r4, #1
   d47fa:	2400      	movle	r4, #0
   d47fc:	dc1e      	bgt.n	d483c <_Z16setHeatThreshold6String+0x6c>
  sysStatus.heatThreshold = tempThreshold;                      // debounce is how long we must space events to prevent overcounting
   d47fe:	4d13      	ldr	r5, [pc, #76]	; (d484c <_Z16setHeatThreshold6String+0x7c>)
   d4800:	ed85 0a05 	vstr	s0, [r5, #20]
  makeUpStringMessages();
   d4804:	f7ff fe18 	bl	d4438 <_Z20makeUpStringMessagesv>
   d4808:	f008 fbe6 	bl	dcfd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {                                         // Publish result if feeling verbose
   d480c:	b1a0      	cbz	r0, d4838 <_Z16setHeatThreshold6String+0x68>
    if (sysStatus.heatThreshold == 100) Particle.publish("System","Heat watering function disabled",PRIVATE);
   d480e:	edd5 7a05 	vldr	s15, [r5, #20]
   d4812:	4b0f      	ldr	r3, [pc, #60]	; (d4850 <_Z16setHeatThreshold6String+0x80>)
   d4814:	eef4 7a48 	vcmp.f32	s15, s16
   d4818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d481c:	781b      	ldrb	r3, [r3, #0]
   d481e:	bf07      	ittee	eq
   d4820:	4a0c      	ldreq	r2, [pc, #48]	; (d4854 <_Z16setHeatThreshold6String+0x84>)
   d4822:	490d      	ldreq	r1, [pc, #52]	; (d4858 <_Z16setHeatThreshold6String+0x88>)
    else Particle.publish("Heat",wateringThresholdPctStr, PRIVATE);
   d4824:	4a0d      	ldrne	r2, [pc, #52]	; (d485c <_Z16setHeatThreshold6String+0x8c>)
   d4826:	490e      	ldrne	r1, [pc, #56]	; (d4860 <_Z16setHeatThreshold6String+0x90>)
    if (sysStatus.heatThreshold == 100) Particle.publish("System","Heat watering function disabled",PRIVATE);
   d4828:	f88d 4000 	strb.w	r4, [sp]
    else Particle.publish("Heat",wateringThresholdPctStr, PRIVATE);
   d482c:	a804      	add	r0, sp, #16
   d482e:	f7ff fdf5 	bl	d441c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4832:	a805      	add	r0, sp, #20
   d4834:	f7ff ff24 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;                                                            // Returns 1 to let the user know if was reset
   d4838:	2001      	movs	r0, #1
   d483a:	e000      	b.n	d483e <_Z16setHeatThreshold6String+0x6e>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d483c:	2000      	movs	r0, #0
}
   d483e:	b007      	add	sp, #28
   d4840:	ecbd 8b02 	vpop	{d8}
   d4844:	bd30      	pop	{r4, r5, pc}
   d4846:	bf00      	nop
   d4848:	42c80000 	.word	0x42c80000
   d484c:	2003e450 	.word	0x2003e450
   d4850:	2003e408 	.word	0x2003e408
   d4854:	000e3b7a 	.word	0x000e3b7a
   d4858:	000e3b73 	.word	0x000e3b73
   d485c:	2003e146 	.word	0x2003e146
   d4860:	000e3b9a 	.word	0x000e3b9a

000d4864 <_Z16setWaterDuration6String>:
{
   d4864:	b510      	push	{r4, lr}
   d4866:	b086      	sub	sp, #24
  float tempValue = strtol(command,&pEND,10);                          // Looks for the first float and interprets it
   d4868:	6800      	ldr	r0, [r0, #0]
   d486a:	220a      	movs	r2, #10
   d486c:	a903      	add	r1, sp, #12
   d486e:	f00d ff41 	bl	e26f4 <strtol>
   d4872:	ee07 0a90 	vmov	s15, r0
   d4876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if ((tempValue < 0) | (tempValue > 1000)) return 0;                  // Make sure it falls in a valid range or send a "fail" result
   d487a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4882:	d421      	bmi.n	d48c8 <_Z16setWaterDuration6String+0x64>
   d4884:	ed9f 7a12 	vldr	s14, [pc, #72]	; d48d0 <_Z16setWaterDuration6String+0x6c>
   d4888:	eef4 7ac7 	vcmpe.f32	s15, s14
   d488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4890:	bfcc      	ite	gt
   d4892:	2401      	movgt	r4, #1
   d4894:	2400      	movle	r4, #0
   d4896:	dc17      	bgt.n	d48c8 <_Z16setWaterDuration6String+0x64>
  sysStatus.wateringDuration = tempValue;                              // debounce is how long we must space events to prevent overcounting
   d4898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d489c:	4b0d      	ldr	r3, [pc, #52]	; (d48d4 <_Z16setWaterDuration6String+0x70>)
   d489e:	edc3 7a04 	vstr	s15, [r3, #16]
  makeUpStringMessages();
   d48a2:	f7ff fdc9 	bl	d4438 <_Z20makeUpStringMessagesv>
   d48a6:	f008 fb97 	bl	dcfd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {                                     // Publish result if feeling verbose
   d48aa:	b158      	cbz	r0, d48c4 <_Z16setWaterDuration6String+0x60>
    Particle.publish("Duration",wateringDurationStr, PRIVATE);
   d48ac:	4b0a      	ldr	r3, [pc, #40]	; (d48d8 <_Z16setWaterDuration6String+0x74>)
   d48ae:	f88d 4000 	strb.w	r4, [sp]
   d48b2:	a804      	add	r0, sp, #16
   d48b4:	781b      	ldrb	r3, [r3, #0]
   d48b6:	4a09      	ldr	r2, [pc, #36]	; (d48dc <_Z16setWaterDuration6String+0x78>)
   d48b8:	4909      	ldr	r1, [pc, #36]	; (d48e0 <_Z16setWaterDuration6String+0x7c>)
   d48ba:	f7ff fdaf 	bl	d441c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d48be:	a805      	add	r0, sp, #20
   d48c0:	f7ff fede 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;                                                            // Returns 1 to let the user know if was reset
   d48c4:	2001      	movs	r0, #1
   d48c6:	e000      	b.n	d48ca <_Z16setWaterDuration6String+0x66>
  if ((tempValue < 0) | (tempValue > 1000)) return 0;                  // Make sure it falls in a valid range or send a "fail" result
   d48c8:	2000      	movs	r0, #0
}
   d48ca:	b006      	add	sp, #24
   d48cc:	bd10      	pop	{r4, pc}
   d48ce:	bf00      	nop
   d48d0:	447a0000 	.word	0x447a0000
   d48d4:	2003e450 	.word	0x2003e450
   d48d8:	2003e408 	.word	0x2003e408
   d48dc:	2003e136 	.word	0x2003e136
   d48e0:	000e3b2c 	.word	0x000e3b2c

000d48e4 <_GLOBAL__sub_I_wateringThresholdPctStr>:
        val_(val) {
   d48e4:	4b01      	ldr	r3, [pc, #4]	; (d48ec <_GLOBAL__sub_I_wateringThresholdPctStr+0x8>)
   d48e6:	2201      	movs	r2, #1
   d48e8:	701a      	strb	r2, [r3, #0]
   d48ea:	4770      	bx	lr
   d48ec:	2003e408 	.word	0x2003e408

000d48f0 <_ZNSt17_Function_handlerIFbmEZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E9_M_invokeERKSt9_Any_dataOm>:
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
	{ return __r; }
   d48f0:	6800      	ldr	r0, [r0, #0]
     * so, however only do so if you use a sleep mode that will completely power down the modem. Otherwise, it's 
     * possible that then modem will never be fully reset.
     */
    SleepHelper &withMaximumTimeToConnect(std::chrono::milliseconds timeMs) { 
        return withMaximumTimeToConnectFunction([timeMs](system_tick_t ms) {
            return (ms >= timeMs.count());
   d48f2:	680a      	ldr	r2, [r1, #0]
   d48f4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d48f8:	2300      	movs	r3, #0
   d48fa:	4282      	cmp	r2, r0
   d48fc:	418b      	sbcs	r3, r1
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d48fe:	bfac      	ite	ge
   d4900:	2001      	movge	r0, #1
   d4902:	2000      	movlt	r0, #0
   d4904:	4770      	bx	lr

000d4906 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4906:	2a02      	cmp	r2, #2
   d4908:	d006      	beq.n	d4918 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
   d490a:	2a03      	cmp	r2, #3
   d490c:	d002      	beq.n	d4914 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
   d490e:	2a01      	cmp	r2, #1
   d4910:	d100      	bne.n	d4914 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4912:	6001      	str	r1, [r0, #0]
	}
   d4914:	2000      	movs	r0, #0
   d4916:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4918:	680b      	ldr	r3, [r1, #0]
   d491a:	6003      	str	r3, [r0, #0]
	}
   d491c:	e7fa      	b.n	d4914 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>

000d491e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d491e:	2a02      	cmp	r2, #2
   d4920:	d006      	beq.n	d4930 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x12>
   d4922:	2a03      	cmp	r2, #3
   d4924:	d002      	beq.n	d492c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   d4926:	2a01      	cmp	r2, #1
   d4928:	d100      	bne.n	d492c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d492a:	6001      	str	r1, [r0, #0]
	}
   d492c:	2000      	movs	r0, #0
   d492e:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4930:	680b      	ldr	r3, [r1, #0]
   d4932:	6003      	str	r3, [r0, #0]
	}
   d4934:	e7fa      	b.n	d492c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>

000d4936 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4936:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4938:	bf08      	it	eq
   d493a:	6001      	streq	r1, [r0, #0]
	}
   d493c:	2000      	movs	r0, #0
   d493e:	4770      	bx	lr

000d4940 <_ZNSt14_Function_base13_Base_managerIZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES3_EUlRN5spark10JSONWriterEE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4940:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4942:	bf08      	it	eq
   d4944:	6001      	streq	r1, [r0, #0]
	}
   d4946:	2000      	movs	r0, #0
   d4948:	4770      	bx	lr

000d494a <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRN11SleepHelper16AppCallbackStateEE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d494a:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d494c:	bf08      	it	eq
   d494e:	6001      	streq	r1, [r0, #0]
	}
   d4950:	2000      	movs	r0, #0
   d4952:	4770      	bx	lr

000d4954 <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEE0_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4954:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4956:	bf08      	it	eq
   d4958:	6001      	streq	r1, [r0, #0]
	}
   d495a:	2000      	movs	r0, #0
   d495c:	4770      	bx	lr

000d495e <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRN11SleepHelper16AppCallbackStateEmE1_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d495e:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4960:	bf08      	it	eq
   d4962:	6001      	streq	r1, [r0, #0]
	}
   d4964:	2000      	movs	r0, #0
   d4966:	4770      	bx	lr

000d4968 <_ZNSt17_Function_handlerIFbbEZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4968:	b508      	push	{r3, lr}
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d496a:	2100      	movs	r1, #0
   d496c:	6800      	ldr	r0, [r0, #0]
   d496e:	f001 fc35 	bl	d61dc <_ZN6AB18056setWDTEi>
      }
   d4972:	2001      	movs	r0, #1
   d4974:	bd08      	pop	{r3, pc}

000d4976 <_ZNSt17_Function_handlerIFbRK17SystemSleepResultEZN11SleepHelper14withAB1805_WDTER6AB1805EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4976:	b508      	push	{r3, lr}
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d497c:	6800      	ldr	r0, [r0, #0]
   d497e:	f001 fc2d 	bl	d61dc <_ZN6AB18056setWDTEi>
      }
   d4982:	2001      	movs	r0, #1
   d4984:	bd08      	pop	{r3, pc}

000d4986 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4986:	b510      	push	{r4, lr}
        });

        withSleepReadyFunction([maxTimeToPublish](AppCallbackState &state, system_tick_t ms) {
            bool canSleep = false;

            if (state.callbackState == AppCallbackState::CALLBACK_STATE_START) { 
   d4988:	680b      	ldr	r3, [r1, #0]
   d498a:	3301      	adds	r3, #1
   d498c:	460c      	mov	r4, r1
   d498e:	d10a      	bne.n	d49a6 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x20>
                // On first call to sleep ready, resume publishing
                PublishQueuePosix::instance().setPausePublishing(false);
   d4990:	f003 ffd8 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d4994:	2100      	movs	r1, #0
   d4996:	f004 f981 	bl	d8c9c <_ZN17PublishQueuePosix18setPausePublishingEb>
                state.callbackState = 1;
   d499a:	2301      	movs	r3, #1
   d499c:	6023      	str	r3, [r4, #0]
            bool canSleep = false;
   d499e:	2400      	movs	r4, #0
      }
   d49a0:	f084 0001 	eor.w	r0, r4, #1
   d49a4:	bd10      	pop	{r4, pc}
   d49a6:	6803      	ldr	r3, [r0, #0]
   d49a8:	e9d3 0100 	ldrd	r0, r1, [r3]
            }
            else {
                if (maxTimeToPublish.count() != 0 && ms >= maxTimeToPublish.count()) {
   d49ac:	ea50 0301 	orrs.w	r3, r0, r1
   d49b0:	d009      	beq.n	d49c6 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x40>
   d49b2:	6812      	ldr	r2, [r2, #0]
   d49b4:	2300      	movs	r3, #0
   d49b6:	4282      	cmp	r2, r0
   d49b8:	418b      	sbcs	r3, r1
   d49ba:	db04      	blt.n	d49c6 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x40>
                    PublishQueuePosix::instance().setPausePublishing(true);
   d49bc:	f003 ffc2 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d49c0:	2101      	movs	r1, #1
   d49c2:	f004 f96b 	bl	d8c9c <_ZN17PublishQueuePosix18setPausePublishingEb>
                }
                canSleep = PublishQueuePosix::instance().getCanSleep();
   d49c6:	f003 ffbd 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d49ca:	f890 40b3 	ldrb.w	r4, [r0, #179]	; 0xb3
                if (canSleep) {
   d49ce:	2c00      	cmp	r4, #0
   d49d0:	d0e6      	beq.n	d49a0 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x1a>
                    PublishQueuePosix::instance().setPausePublishing(true);
   d49d2:	f003 ffb7 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d49d6:	2101      	movs	r1, #1
   d49d8:	f004 f960 	bl	d8c9c <_ZN17PublishQueuePosix18setPausePublishingEb>
                    PublishQueuePosix::instance().writeQueueToFiles();
   d49dc:	f003 ffb2 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d49e0:	f004 f80e 	bl	d8a00 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d49e4:	e7dc      	b.n	d49a0 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x1a>
	...

000d49e8 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZ17sleepHelperConfigvEUlS2_mE1_E9_M_invokeERKSt9_Any_dataS2_Om>:
                Log.info("Button press - sleep enable is %s", (sysStatus.enableSleep) ? "true" : "false");
            }
            return true;
        })
        .withSleepReadyFunction([](SleepHelper::AppCallbackState &, system_tick_t) {
            if (sysStatus.enableSleep) return false;// Boolean set by Particle.function - If sleep is enabled return false
   d49e8:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZ17sleepHelperConfigvEUlS2_mE1_E9_M_invokeERKSt9_Any_dataS2_Om+0xc>)
   d49ea:	7a58      	ldrb	r0, [r3, #9]
   d49ec:	f080 0001 	eor.w	r0, r0, #1
   d49f0:	4770      	bx	lr
   d49f2:	bf00      	nop
   d49f4:	2003e450 	.word	0x2003e450

000d49f8 <_ZNSt17_Function_handlerIFbiEZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E9_M_invokeERKSt9_Any_dataOi>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d49f8:	b508      	push	{r3, lr}
            PublishQueuePosix::instance().setPausePublishing(true);
   d49fa:	f003 ffa3 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
   d49fe:	2101      	movs	r1, #1
   d4a00:	f004 f94c 	bl	d8c9c <_ZN17PublishQueuePosix18setPausePublishingEb>
      }
   d4a04:	2001      	movs	r0, #1
   d4a06:	bd08      	pop	{r3, pc}

000d4a08 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4a08:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4a0a:	b538      	push	{r3, r4, r5, lr}
   d4a0c:	4604      	mov	r4, r0
	  switch (__op)
   d4a0e:	d007      	beq.n	d4a20 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
   d4a10:	2a03      	cmp	r2, #3
   d4a12:	d010      	beq.n	d4a36 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   d4a14:	2a01      	cmp	r2, #1
   d4a16:	d101      	bne.n	d4a1c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4a18:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4a1a:	6003      	str	r3, [r0, #0]
	}
   d4a1c:	2000      	movs	r0, #0
   d4a1e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a20:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4a22:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a24:	f7ff fb37 	bl	d4096 <_Znwj>
   d4a28:	b118      	cbz	r0, d4a32 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2a>
   d4a2a:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4a2e:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   d4a32:	6020      	str	r0, [r4, #0]
	}
   d4a34:	e7f2      	b.n	d4a1c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4a36:	6800      	ldr	r0, [r0, #0]
   d4a38:	2800      	cmp	r0, #0
   d4a3a:	d0ef      	beq.n	d4a1c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
   d4a3c:	2108      	movs	r1, #8
   d4a3e:	f00b fe7f 	bl	e0740 <_ZdlPvj>
   d4a42:	e7eb      	b.n	d4a1c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d4a44 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   d4a44:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4a46:	b538      	push	{r3, r4, r5, lr}
   d4a48:	4604      	mov	r4, r0
	  switch (__op)
   d4a4a:	d007      	beq.n	d4a5c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   d4a4c:	2a03      	cmp	r2, #3
   d4a4e:	d010      	beq.n	d4a72 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
   d4a50:	2a01      	cmp	r2, #1
   d4a52:	d101      	bne.n	d4a58 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4a54:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4a56:	6003      	str	r3, [r0, #0]
	}
   d4a58:	2000      	movs	r0, #0
   d4a5a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a5c:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4a5e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a60:	f7ff fb19 	bl	d4096 <_Znwj>
   d4a64:	b118      	cbz	r0, d4a6e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
   d4a66:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4a6a:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   d4a6e:	6020      	str	r0, [r4, #0]
	}
   d4a70:	e7f2      	b.n	d4a58 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4a72:	6800      	ldr	r0, [r0, #0]
   d4a74:	2800      	cmp	r0, #0
   d4a76:	d0ef      	beq.n	d4a58 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4a78:	2108      	movs	r1, #8
   d4a7a:	f00b fe61 	bl	e0740 <_ZdlPvj>
   d4a7e:	e7eb      	b.n	d4a58 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>

000d4a80 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4a80:	b510      	push	{r4, lr}
      if (_M_manager)
   d4a82:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4a84:	4604      	mov	r4, r0
      if (_M_manager)
   d4a86:	b113      	cbz	r3, d4a8e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a88:	2203      	movs	r2, #3
   d4a8a:	4601      	mov	r1, r0
   d4a8c:	4798      	blx	r3
    }
   d4a8e:	4620      	mov	r0, r4
   d4a90:	bd10      	pop	{r4, pc}

000d4a92 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d4a92:	b513      	push	{r0, r1, r4, lr}
   d4a94:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   d4a96:	4608      	mov	r0, r1
   d4a98:	9101      	str	r1, [sp, #4]
   d4a9a:	f00c feb8 	bl	e180e <strlen>
   d4a9e:	9901      	ldr	r1, [sp, #4]
   d4aa0:	4602      	mov	r2, r0
   d4aa2:	4620      	mov	r0, r4
}
   d4aa4:	b002      	add	sp, #8
   d4aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   d4aaa:	f009 be03 	b.w	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
	...

000d4ab0 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4ab0:	b538      	push	{r3, r4, r5, lr}
   d4ab2:	460c      	mov	r4, r1
                    writer.name("t").value((int) Time.now());
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	4919      	ldr	r1, [pc, #100]	; (d4b1c <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6c>)
   d4ab8:	f7ff ffeb 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
   d4abc:	4605      	mov	r5, r0
   d4abe:	f00b fb58 	bl	e0172 <_ZN9TimeClass3nowEv>
   d4ac2:	4601      	mov	r1, r0
   d4ac4:	4628      	mov	r0, r5
                    writer.name("bs").value(current.batteryState);
   d4ac6:	4d16      	ldr	r5, [pc, #88]	; (d4b20 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x70>)
                    writer.name("t").value((int) Time.now());
   d4ac8:	f009 fd36 	bl	de538 <_ZN5spark10JSONWriter5valueEi>
                    writer.name("bs").value(current.batteryState);
   d4acc:	4915      	ldr	r1, [pc, #84]	; (d4b24 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x74>)
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f7ff ffdf 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
   d4ad4:	7b29      	ldrb	r1, [r5, #12]
   d4ad6:	f009 fd2f 	bl	de538 <_ZN5spark10JSONWriter5valueEi>
                    writer.name("c").value(current.internalTempC);
   d4ada:	4913      	ldr	r1, [pc, #76]	; (d4b28 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x78>)
   d4adc:	4620      	mov	r0, r4
   d4ade:	f7ff ffd8 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
   d4ae2:	ed95 0b00 	vldr	d0, [r5]
   d4ae6:	f009 fd69 	bl	de5bc <_ZN5spark10JSONWriter5valueEd>
                    writer.name("sm").value(current.soilMoisture);
   d4aea:	4910      	ldr	r1, [pc, #64]	; (d4b2c <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x7c>)
   d4aec:	4620      	mov	r0, r4
   d4aee:	f7ff ffd0 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
   d4af2:	ed95 0b08 	vldr	d0, [r5, #32]
   d4af6:	f009 fd61 	bl	de5bc <_ZN5spark10JSONWriter5valueEd>
                    writer.name("st").value(current.soilTempC);
   d4afa:	490d      	ldr	r1, [pc, #52]	; (d4b30 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x80>)
   d4afc:	4620      	mov	r0, r4
   d4afe:	f7ff ffc8 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
   d4b02:	ed95 0b0a 	vldr	d0, [r5, #40]	; 0x28
   d4b06:	f009 fd59 	bl	de5bc <_ZN5spark10JSONWriter5valueEd>
                    writer.name("ws").value(current.wateringState);
   d4b0a:	490a      	ldr	r1, [pc, #40]	; (d4b34 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x84>)
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	f7ff ffc0 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
   d4b12:	7e29      	ldrb	r1, [r5, #24]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4b18:	f009 bd0e 	b.w	de538 <_ZN5spark10JSONWriter5valueEi>
   d4b1c:	000e451c 	.word	0x000e451c
   d4b20:	2003e420 	.word	0x2003e420
   d4b24:	000e3b9f 	.word	0x000e3b9f
   d4b28:	000e39e5 	.word	0x000e39e5
   d4b2c:	000e3ba2 	.word	0x000e3ba2
   d4b30:	000e3ba5 	.word	0x000e3ba5
   d4b34:	000e3ba8 	.word	0x000e3ba8

000d4b38 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b38:	b570      	push	{r4, r5, r6, lr}
            sleepConfig.gpio(BUTTON_PIN, CHANGE);   // My debounce time constant prevents detecting FALLING
   d4b3a:	4b21      	ldr	r3, [pc, #132]	; (d4bc0 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x88>)
   d4b3c:	881e      	ldrh	r6, [r3, #0]
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
   d4b3e:	7d0b      	ldrb	r3, [r1, #20]
   d4b40:	460d      	mov	r5, r1
   d4b42:	b18b      	cbz	r3, d4b68 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4b44:	680b      	ldr	r3, [r1, #0]
   d4b46:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4b48:	b31b      	cbz	r3, d4b92 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x5a>
            if (start->type == type) {
   d4b4a:	889a      	ldrh	r2, [r3, #4]
   d4b4c:	2a01      	cmp	r2, #1
   d4b4e:	d006      	beq.n	d4b5e <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x26>
            start = start->next;
   d4b50:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4b52:	e7f9      	b.n	d4b48 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4b54:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4b56:	b1e3      	cbz	r3, d4b92 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x5a>
            if (start->type == type) {
   d4b58:	889a      	ldrh	r2, [r3, #4]
   d4b5a:	2a01      	cmp	r2, #1
   d4b5c:	d1fa      	bne.n	d4b54 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x1c>
                if (gpioWakeup->pin == pin) {
   d4b5e:	899a      	ldrh	r2, [r3, #12]
   d4b60:	42b2      	cmp	r2, r6
   d4b62:	d1f7      	bne.n	d4b54 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x1c>
                    gpioWakeup->mode = mode;
   d4b64:	2200      	movs	r2, #0
   d4b66:	739a      	strb	r2, [r3, #14]
            delay(2000);                            // This is a debugging line - to connect to USB serial for logging
   d4b68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4b6c:	f008 fb48 	bl	dd200 <delay>
            Log.info("Woke on button press");
   d4b70:	4814      	ldr	r0, [pc, #80]	; (d4bc4 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x8c>)
   d4b72:	4915      	ldr	r1, [pc, #84]	; (d4bc8 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x90>)
   d4b74:	f7ff fc12 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            if (!digitalRead(BUTTON_PIN)) {         // The BUTTON is active low - this is a button press
   d4b78:	4630      	mov	r0, r6
   d4b7a:	f00b fd3d 	bl	e05f8 <digitalRead>
   d4b7e:	b930      	cbnz	r0, d4b8e <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x56>
                sysStatus.enableSleep = false;      // Pressing the button diables sleep - at least that is the intent
   d4b80:	4b12      	ldr	r3, [pc, #72]	; (d4bcc <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x94>)
                Log.info("Button press - sleep enable is %s", (sysStatus.enableSleep) ? "true" : "false");
   d4b82:	4a13      	ldr	r2, [pc, #76]	; (d4bd0 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x98>)
                sysStatus.enableSleep = false;      // Pressing the button diables sleep - at least that is the intent
   d4b84:	7258      	strb	r0, [r3, #9]
                Log.info("Button press - sleep enable is %s", (sysStatus.enableSleep) ? "true" : "false");
   d4b86:	4913      	ldr	r1, [pc, #76]	; (d4bd4 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x9c>)
   d4b88:	480e      	ldr	r0, [pc, #56]	; (d4bc4 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x8c>)
   d4b8a:	f7ff fc07 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
      }
   d4b8e:	2001      	movs	r0, #1
   d4b90:	bd70      	pop	{r4, r5, r6, pc}
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4b92:	4911      	ldr	r1, [pc, #68]	; (d4bd8 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0xa0>)
   d4b94:	2010      	movs	r0, #16
   d4b96:	f00b fe09 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   d4b9a:	4604      	mov	r4, r0
   d4b9c:	b170      	cbz	r0, d4bbc <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x84>
   d4b9e:	2210      	movs	r2, #16
   d4ba0:	2100      	movs	r1, #0
   d4ba2:	f00c fda9 	bl	e16f8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4ba6:	4b0d      	ldr	r3, [pc, #52]	; (d4bdc <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0xa4>)
   d4ba8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4baa:	2301      	movs	r3, #1
   d4bac:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4bae:	692b      	ldr	r3, [r5, #16]
   d4bb0:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
   d4bb2:	2300      	movs	r3, #0
            wakeupSource->pin = pin;
   d4bb4:	81a6      	strh	r6, [r4, #12]
            wakeupSource->mode = mode;
   d4bb6:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4bb8:	612c      	str	r4, [r5, #16]
   d4bba:	e7d5      	b.n	d4b68 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x30>
                valid_ = false;
   d4bbc:	7528      	strb	r0, [r5, #20]
                return *this;
   d4bbe:	e7d3      	b.n	d4b68 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x30>
   d4bc0:	000e39ce 	.word	0x000e39ce
   d4bc4:	2003e560 	.word	0x2003e560
   d4bc8:	000e3bab 	.word	0x000e3bab
   d4bcc:	2003e450 	.word	0x2003e450
   d4bd0:	000e3b3a 	.word	0x000e3b3a
   d4bd4:	000e3bc0 	.word	0x000e3bc0
   d4bd8:	000e4b18 	.word	0x000e4b18
   d4bdc:	00030010 	.word	0x00030010

000d4be0 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d4be0:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d4be2:	247f      	movs	r4, #127	; 0x7f
   d4be4:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d4be6:	2400      	movs	r4, #0
   d4be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d4bec:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d4bf0:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d4bf4:	6849      	ldr	r1, [r1, #4]
   d4bf6:	4c03      	ldr	r4, [pc, #12]	; (d4c04 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d4bf8:	6852      	ldr	r2, [r2, #4]
   d4bfa:	61c4      	str	r4, [r0, #28]
   d4bfc:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d4c00:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d4c02:	bd10      	pop	{r4, pc}
   d4c04:	000e40d0 	.word	0x000e40d0

000d4c08 <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d4c08:	b510      	push	{r4, lr}
   d4c0a:	4604      	mov	r4, r0
   d4c0c:	3024      	adds	r0, #36	; 0x24
   d4c0e:	f002 f8f7 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
   d4c12:	f104 001c 	add.w	r0, r4, #28
   d4c16:	f002 f8f3 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d4c1a:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4c1c:	b108      	cbz	r0, d4c22 <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4c1e:	f7ff fa3e 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d4c22:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d4c24:	b108      	cbz	r0, d4c2a <_ZN14LocalTimeRangeD1Ev+0x22>
   d4c26:	f7ff fa3a 	bl	d409e <_ZdlPv>
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	bd10      	pop	{r4, pc}

000d4c2e <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c2e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4c30:	2300      	movs	r3, #0
   d4c32:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4c34:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4c36:	4604      	mov	r4, r0
   d4c38:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4c3a:	b12b      	cbz	r3, d4c48 <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c3c:	2202      	movs	r2, #2
   d4c3e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c40:	68eb      	ldr	r3, [r5, #12]
   d4c42:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c44:	68ab      	ldr	r3, [r5, #8]
   d4c46:	60a3      	str	r3, [r4, #8]
	}
    }
   d4c48:	4620      	mov	r0, r4
   d4c4a:	bd38      	pop	{r3, r4, r5, pc}

000d4c4c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	b09a      	sub	sp, #104	; 0x68
            if (Time.isValid()) {
   d4c50:	f00b fa72 	bl	e0138 <_ZN9TimeClass7isValidEv>
   d4c54:	2800      	cmp	r0, #0
   d4c56:	d04d      	beq.n	d4cf4 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xa8>
                delay(2000);
   d4c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4c5c:	f008 fad0 	bl	dd200 <delay>
                takeMeasurements();                 // Collect data from the sensors
   d4c60:	f001 f8f8 	bl	d5e54 <_Z16takeMeasurementsv>
                if (current.wateringState == 1) {
   d4c64:	4b25      	ldr	r3, [pc, #148]	; (d4cfc <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xb0>)
   d4c66:	7e1b      	ldrb	r3, [r3, #24]
   d4c68:	2b01      	cmp	r3, #1
   d4c6a:	d126      	bne.n	d4cba <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
                    Log.info("Sending webhook to start watering");
   d4c6c:	4924      	ldr	r1, [pc, #144]	; (d4d00 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xb4>)
   d4c6e:	4825      	ldr	r0, [pc, #148]	; (d4d04 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xb8>)
   d4c70:	f7ff fb94 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
                    snprintf(data, sizeof(data), "{\"duration\":%i}",sysStatus.wateringDuration);
   d4c74:	4b24      	ldr	r3, [pc, #144]	; (d4d08 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xbc>)
   d4c76:	4a25      	ldr	r2, [pc, #148]	; (d4d0c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xc0>)
   d4c78:	691b      	ldr	r3, [r3, #16]
   d4c7a:	2140      	movs	r1, #64	; 0x40
   d4c7c:	a80a      	add	r0, sp, #40	; 0x28
   d4c7e:	f008 fa63 	bl	dd148 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4c82:	4b23      	ldr	r3, [pc, #140]	; (d4d10 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c84:	4923      	ldr	r1, [pc, #140]	; (d4d14 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xc8>)
   d4c86:	781b      	ldrb	r3, [r3, #0]
   d4c88:	f88d 3000 	strb.w	r3, [sp]
   d4c8c:	aa0a      	add	r2, sp, #40	; 0x28
   d4c8e:	233c      	movs	r3, #60	; 0x3c
   d4c90:	a806      	add	r0, sp, #24
   d4c92:	f008 fd73 	bl	dd77c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d4c96:	9c07      	ldr	r4, [sp, #28]
   d4c98:	b17c      	cbz	r4, d4cba <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
      if (--_M_use_count == 0)
   d4c9a:	6863      	ldr	r3, [r4, #4]
   d4c9c:	3b01      	subs	r3, #1
   d4c9e:	6063      	str	r3, [r4, #4]
   d4ca0:	b95b      	cbnz	r3, d4cba <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
          _M_dispose();
   d4ca2:	6823      	ldr	r3, [r4, #0]
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	689b      	ldr	r3, [r3, #8]
   d4ca8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4caa:	68a3      	ldr	r3, [r4, #8]
   d4cac:	3b01      	subs	r3, #1
   d4cae:	60a3      	str	r3, [r4, #8]
   d4cb0:	b91b      	cbnz	r3, d4cba <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
            _M_destroy();
   d4cb2:	6823      	ldr	r3, [r4, #0]
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	68db      	ldr	r3, [r3, #12]
   d4cb8:	4798      	blx	r3
                SleepHelper::instance().addEvent([](JSONWriter &writer) {
   d4cba:	f005 fbe5 	bl	da488 <_ZN11SleepHelper8instanceEv>
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4cbe:	4b16      	ldr	r3, [pc, #88]	; (d4d18 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xcc>)
   d4cc0:	9305      	str	r3, [sp, #20]
   d4cc2:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   d4cc4:	4b15      	ldr	r3, [pc, #84]	; (d4d1c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xd0>)
   d4cc6:	9304      	str	r3, [sp, #16]
        wakeEventFunctions.addEvent(callback);
   d4cc8:	a902      	add	r1, sp, #8
   d4cca:	a806      	add	r0, sp, #24
   d4ccc:	f7ff ffaf 	bl	d4c2e <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
            eventHistory.addEvent(callback);
   d4cd0:	a906      	add	r1, sp, #24
   d4cd2:	a80a      	add	r0, sp, #40	; 0x28
   d4cd4:	f7ff ffab 	bl	d4c2e <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
   d4cd8:	a90a      	add	r1, sp, #40	; 0x28
   d4cda:	f504 60ea 	add.w	r0, r4, #1872	; 0x750
   d4cde:	f005 fc3d 	bl	da55c <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>
    class function<_Res(_ArgTypes...)>
   d4ce2:	a80a      	add	r0, sp, #40	; 0x28
   d4ce4:	f7ff fecc 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4ce8:	a806      	add	r0, sp, #24
   d4cea:	f7ff fec9 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4cee:	a802      	add	r0, sp, #8
   d4cf0:	f7ff fec6 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
      }
   d4cf4:	2000      	movs	r0, #0
   d4cf6:	b01a      	add	sp, #104	; 0x68
   d4cf8:	bd10      	pop	{r4, pc}
   d4cfa:	bf00      	nop
   d4cfc:	2003e420 	.word	0x2003e420
   d4d00:	000e3be2 	.word	0x000e3be2
   d4d04:	2003e560 	.word	0x2003e560
   d4d08:	2003e450 	.word	0x2003e450
   d4d0c:	000e3c04 	.word	0x000e3c04
   d4d10:	2003e409 	.word	0x2003e409
   d4d14:	000e3c14 	.word	0x000e3c14
   d4d18:	000d4ab1 	.word	0x000d4ab1
   d4d1c:	000d4941 	.word	0x000d4941

000d4d20 <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>:
    function<_Res(_ArgTypes...)>::
   d4d20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d22:	2300      	movs	r3, #0
   d4d24:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d28:	4604      	mov	r4, r0
   d4d2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d2c:	b12b      	cbz	r3, d4d3a <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d2e:	2202      	movs	r2, #2
   d4d30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d32:	68eb      	ldr	r3, [r5, #12]
   d4d34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d36:	68ab      	ldr	r3, [r5, #8]
   d4d38:	60a3      	str	r3, [r4, #8]
    }
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	bd38      	pop	{r3, r4, r5, pc}

000d4d3e <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d4d3e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d40:	2300      	movs	r3, #0
   d4d42:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d44:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d46:	4604      	mov	r4, r0
   d4d48:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d4a:	b12b      	cbz	r3, d4d58 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d4c:	2202      	movs	r2, #2
   d4d4e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d50:	68eb      	ldr	r3, [r5, #12]
   d4d52:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d54:	68ab      	ldr	r3, [r5, #8]
   d4d56:	60a3      	str	r3, [r4, #8]
    }
   d4d58:	4620      	mov	r0, r4
   d4d5a:	bd38      	pop	{r3, r4, r5, pc}

000d4d5c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d4d5c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d5e:	2300      	movs	r3, #0
   d4d60:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d62:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d64:	4604      	mov	r4, r0
   d4d66:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d68:	b12b      	cbz	r3, d4d76 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d6a:	2202      	movs	r2, #2
   d4d6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d6e:	68eb      	ldr	r3, [r5, #12]
   d4d70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d72:	68ab      	ldr	r3, [r5, #8]
   d4d74:	60a3      	str	r3, [r4, #8]
    }
   d4d76:	4620      	mov	r0, r4
   d4d78:	bd38      	pop	{r3, r4, r5, pc}

000d4d7a <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d4d7a:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d7c:	2300      	movs	r3, #0
   d4d7e:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d80:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d82:	4604      	mov	r4, r0
   d4d84:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d86:	b12b      	cbz	r3, d4d94 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d88:	2202      	movs	r2, #2
   d4d8a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d8c:	68eb      	ldr	r3, [r5, #12]
   d4d8e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d90:	68ab      	ldr	r3, [r5, #8]
   d4d92:	60a3      	str	r3, [r4, #8]
    }
   d4d94:	4620      	mov	r0, r4
   d4d96:	bd38      	pop	{r3, r4, r5, pc}

000d4d98 <_ZNSt8functionIFbiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4d98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d9a:	2300      	movs	r3, #0
   d4d9c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4da0:	4604      	mov	r4, r0
   d4da2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4da4:	b12b      	cbz	r3, d4db2 <_ZNSt8functionIFbiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4da6:	2202      	movs	r2, #2
   d4da8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4daa:	68eb      	ldr	r3, [r5, #12]
   d4dac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dae:	68ab      	ldr	r3, [r5, #8]
   d4db0:	60a3      	str	r3, [r4, #8]
    }
   d4db2:	4620      	mov	r0, r4
   d4db4:	bd38      	pop	{r3, r4, r5, pc}

000d4db6 <_ZNSt8functionIFbbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4db6:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4db8:	2300      	movs	r3, #0
   d4dba:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4dbc:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4dbe:	4604      	mov	r4, r0
   d4dc0:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4dc2:	b12b      	cbz	r3, d4dd0 <_ZNSt8functionIFbbEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4dc4:	2202      	movs	r2, #2
   d4dc6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4dc8:	68eb      	ldr	r3, [r5, #12]
   d4dca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dcc:	68ab      	ldr	r3, [r5, #8]
   d4dce:	60a3      	str	r3, [r4, #8]
    }
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	bd38      	pop	{r3, r4, r5, pc}

000d4dd4 <_ZNSt8functionIFbmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4dd4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4dd6:	2300      	movs	r3, #0
   d4dd8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4dda:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4ddc:	4604      	mov	r4, r0
   d4dde:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4de0:	b12b      	cbz	r3, d4dee <_ZNSt8functionIFbmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4de2:	2202      	movs	r2, #2
   d4de4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4de6:	68eb      	ldr	r3, [r5, #12]
   d4de8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dea:	68ab      	ldr	r3, [r5, #8]
   d4dec:	60a3      	str	r3, [r4, #8]
    }
   d4dee:	4620      	mov	r0, r4
   d4df0:	bd38      	pop	{r3, r4, r5, pc}

000d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4df2:	b513      	push	{r0, r1, r4, lr}
   d4df4:	460b      	mov	r3, r1
   d4df6:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4df8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4dfc:	466c      	mov	r4, sp
   d4dfe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e02:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e06:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e0a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4e0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e12:	b002      	add	sp, #8
   d4e14:	bd10      	pop	{r4, pc}

000d4e16 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4e16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e1a:	4607      	mov	r7, r0
   d4e1c:	4688      	mov	r8, r1
   d4e1e:	4616      	mov	r6, r2
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   d4e20:	4615      	mov	r5, r2
   d4e22:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4e24:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4e28:	4544      	cmp	r4, r8
   d4e2a:	d014      	beq.n	d4e56 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4e2c:	b16d      	cbz	r5, d4e4a <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d4e2e:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4e32:	4629      	mov	r1, r5
   d4e34:	4620      	mov	r0, r4
   d4e36:	f7ff ffdc 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e3a:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4e3c:	68aa      	ldr	r2, [r5, #8]
   d4e3e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e40:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e42:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e44:	68ea      	ldr	r2, [r5, #12]
   d4e46:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e48:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4e4a:	4620      	mov	r0, r4
   d4e4c:	f7ff fe18 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4e50:	3410      	adds	r4, #16
   d4e52:	3510      	adds	r5, #16
   d4e54:	e7e8      	b.n	d4e28 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
   d4e56:	1be0      	subs	r0, r4, r7
    }
   d4e58:	4430      	add	r0, r6
   d4e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4e5e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4e5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e62:	4607      	mov	r7, r0
   d4e64:	4688      	mov	r8, r1
   d4e66:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4e68:	4615      	mov	r5, r2
   d4e6a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4e6c:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4e70:	4544      	cmp	r4, r8
   d4e72:	d014      	beq.n	d4e9e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d4e74:	b16d      	cbz	r5, d4e92 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4e76:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4e7a:	4629      	mov	r1, r5
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	f7ff ffb8 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e82:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4e84:	68aa      	ldr	r2, [r5, #8]
   d4e86:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e88:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e8a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e8c:	68ea      	ldr	r2, [r5, #12]
   d4e8e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e90:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4e92:	4620      	mov	r0, r4
   d4e94:	f7ff fdf4 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4e98:	3410      	adds	r4, #16
   d4e9a:	3510      	adds	r5, #16
   d4e9c:	e7e8      	b.n	d4e70 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4e9e:	1be0      	subs	r0, r4, r7
    }
   d4ea0:	4430      	add	r0, r6
   d4ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4ea6 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4ea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4eaa:	4607      	mov	r7, r0
   d4eac:	4688      	mov	r8, r1
   d4eae:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4eb0:	4615      	mov	r5, r2
   d4eb2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4eb4:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4eb8:	4544      	cmp	r4, r8
   d4eba:	d014      	beq.n	d4ee6 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d4ebc:	b16d      	cbz	r5, d4eda <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4ebe:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4ec2:	4629      	mov	r1, r5
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	f7ff ff94 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eca:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4ecc:	68aa      	ldr	r2, [r5, #8]
   d4ece:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ed0:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ed2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ed4:	68ea      	ldr	r2, [r5, #12]
   d4ed6:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ed8:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4eda:	4620      	mov	r0, r4
   d4edc:	f7ff fdd0 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4ee0:	3410      	adds	r4, #16
   d4ee2:	3510      	adds	r5, #16
   d4ee4:	e7e8      	b.n	d4eb8 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4ee6:	1be0      	subs	r0, r4, r7
    }
   d4ee8:	4430      	add	r0, r6
   d4eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4eee <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4ef2:	4607      	mov	r7, r0
   d4ef4:	4688      	mov	r8, r1
   d4ef6:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4ef8:	4615      	mov	r5, r2
   d4efa:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4efc:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4f00:	4544      	cmp	r4, r8
   d4f02:	d014      	beq.n	d4f2e <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d4f04:	b16d      	cbz	r5, d4f22 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d4f06:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f0a:	4629      	mov	r1, r5
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	f7ff ff70 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f12:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f14:	68aa      	ldr	r2, [r5, #8]
   d4f16:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f18:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f1a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f1c:	68ea      	ldr	r2, [r5, #12]
   d4f1e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f20:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4f22:	4620      	mov	r0, r4
   d4f24:	f7ff fdac 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4f28:	3410      	adds	r4, #16
   d4f2a:	3510      	adds	r5, #16
   d4f2c:	e7e8      	b.n	d4f00 <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d4f2e:	1be0      	subs	r0, r4, r7
    }
   d4f30:	4430      	add	r0, r6
   d4f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f36 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4f36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f3a:	4607      	mov	r7, r0
   d4f3c:	4688      	mov	r8, r1
   d4f3e:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4f40:	4615      	mov	r5, r2
   d4f42:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4f44:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4f48:	4544      	cmp	r4, r8
   d4f4a:	d014      	beq.n	d4f76 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d4f4c:	b16d      	cbz	r5, d4f6a <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d4f4e:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f52:	4629      	mov	r1, r5
   d4f54:	4620      	mov	r0, r4
   d4f56:	f7ff ff4c 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f5a:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f5c:	68aa      	ldr	r2, [r5, #8]
   d4f5e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f60:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f62:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f64:	68ea      	ldr	r2, [r5, #12]
   d4f66:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f68:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f7ff fd88 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4f70:	3410      	adds	r4, #16
   d4f72:	3510      	adds	r5, #16
   d4f74:	e7e8      	b.n	d4f48 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d4f76:	1be0      	subs	r0, r4, r7
    }
   d4f78:	4430      	add	r0, r6
   d4f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f7e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4f7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f82:	4607      	mov	r7, r0
   d4f84:	4688      	mov	r8, r1
   d4f86:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4f88:	4615      	mov	r5, r2
   d4f8a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4f8c:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4f90:	4544      	cmp	r4, r8
   d4f92:	d014      	beq.n	d4fbe <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d4f94:	b16d      	cbz	r5, d4fb2 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4f96:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f9a:	4629      	mov	r1, r5
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	f7ff ff28 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fa2:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4fa4:	68aa      	ldr	r2, [r5, #8]
   d4fa6:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fa8:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4faa:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4fac:	68ea      	ldr	r2, [r5, #12]
   d4fae:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fb0:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	f7ff fd64 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d4fb8:	3410      	adds	r4, #16
   d4fba:	3510      	adds	r5, #16
   d4fbc:	e7e8      	b.n	d4f90 <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4fbe:	1be0      	subs	r0, r4, r7
    }
   d4fc0:	4430      	add	r0, r6
   d4fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4fc6 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4fca:	4607      	mov	r7, r0
   d4fcc:	4688      	mov	r8, r1
   d4fce:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4fd0:	4615      	mov	r5, r2
   d4fd2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4fd4:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4fd8:	4544      	cmp	r4, r8
   d4fda:	d014      	beq.n	d5006 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0+0x40>
   d4fdc:	b16d      	cbz	r5, d4ffa <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0+0x34>
   d4fde:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4fe2:	4629      	mov	r1, r5
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	f7ff ff04 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fea:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4fec:	68aa      	ldr	r2, [r5, #8]
   d4fee:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ff0:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ff2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ff4:	68ea      	ldr	r2, [r5, #12]
   d4ff6:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ff8:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	f7ff fd40 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d5000:	3410      	adds	r4, #16
   d5002:	3510      	adds	r5, #16
   d5004:	e7e8      	b.n	d4fd8 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0+0x12>
      return __cur;
   d5006:	1be0      	subs	r0, r4, r7
    }
   d5008:	4430      	add	r0, r6
   d500a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d5010 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d5010:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5014:	e9d0 7900 	ldrd	r7, r9, [r0]
   d5018:	4688      	mov	r8, r1

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d501a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d501e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5020:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5024:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d5028:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d502a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d502e:	d102      	bne.n	d5036 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d5030:	481a      	ldr	r0, [pc, #104]	; (d509c <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x8c>)
   d5032:	f00b fbc2 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d5036:	2c01      	cmp	r4, #1
   d5038:	4622      	mov	r2, r4
   d503a:	bf38      	it	cc
   d503c:	2201      	movcc	r2, #1
   d503e:	18a4      	adds	r4, r4, r2
   d5040:	eba8 0a07 	sub.w	sl, r8, r7

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5044:	d228      	bcs.n	d5098 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5046:	b14c      	cbz	r4, d505c <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x4c>
   d5048:	429c      	cmp	r4, r3
   d504a:	bf28      	it	cs
   d504c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d504e:	0120      	lsls	r0, r4, #4
   d5050:	9101      	str	r1, [sp, #4]
   d5052:	f7ff f820 	bl	d4096 <_Znwj>
   d5056:	9901      	ldr	r1, [sp, #4]
   d5058:	4605      	mov	r5, r0
   d505a:	e000      	b.n	d505e <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x4e>
   d505c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d505e:	eb15 000a 	adds.w	r0, r5, sl
   d5062:	d001      	beq.n	d5068 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x58>
   d5064:	f7ff fe5c 	bl	d4d20 <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   d5068:	4641      	mov	r1, r8
   d506a:	462a      	mov	r2, r5
   d506c:	4638      	mov	r0, r7
   d506e:	f7ff ffaa 	bl	d4fc6 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0>
   d5072:	4649      	mov	r1, r9
   d5074:	f100 0210 	add.w	r2, r0, #16
   d5078:	4640      	mov	r0, r8
   d507a:	f7ff ffa4 	bl	d4fc6 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0>
   d507e:	4680      	mov	r8, r0
	if (__p)
   d5080:	b117      	cbz	r7, d5088 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x78>
	::operator delete(__p);
   d5082:	4638      	mov	r0, r7
   d5084:	f7ff f80b 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5088:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d508c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5090:	60b4      	str	r4, [r6, #8]
    }
   d5092:	b002      	add	sp, #8
   d5094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5098:	461c      	mov	r4, r3
   d509a:	e7d8      	b.n	d504e <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x3e>
   d509c:	000e3c27 	.word	0x000e3c27

000d50a0 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d50a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d50a4:	e9d0 7900 	ldrd	r7, r9, [r0]
   d50a8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d50aa:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d50ae:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d50b0:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d50b4:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d50b8:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d50ba:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d50be:	d102      	bne.n	d50c6 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d50c0:	481a      	ldr	r0, [pc, #104]	; (d512c <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d50c2:	f00b fb7a 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d50c6:	2c01      	cmp	r4, #1
   d50c8:	4622      	mov	r2, r4
   d50ca:	bf38      	it	cc
   d50cc:	2201      	movcc	r2, #1
   d50ce:	18a4      	adds	r4, r4, r2
   d50d0:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d50d4:	d228      	bcs.n	d5128 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d50d6:	b14c      	cbz	r4, d50ec <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d50d8:	429c      	cmp	r4, r3
   d50da:	bf28      	it	cs
   d50dc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d50de:	0120      	lsls	r0, r4, #4
   d50e0:	9101      	str	r1, [sp, #4]
   d50e2:	f7fe ffd8 	bl	d4096 <_Znwj>
   d50e6:	9901      	ldr	r1, [sp, #4]
   d50e8:	4605      	mov	r5, r0
   d50ea:	e000      	b.n	d50ee <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d50ec:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d50ee:	eb15 000a 	adds.w	r0, r5, sl
   d50f2:	d001      	beq.n	d50f8 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d50f4:	f7ff fe23 	bl	d4d3e <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
   d50f8:	4641      	mov	r1, r8
   d50fa:	462a      	mov	r2, r5
   d50fc:	4638      	mov	r0, r7
   d50fe:	f7ff fed2 	bl	d4ea6 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d5102:	4649      	mov	r1, r9
   d5104:	f100 0210 	add.w	r2, r0, #16
   d5108:	4640      	mov	r0, r8
   d510a:	f7ff fecc 	bl	d4ea6 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d510e:	4680      	mov	r8, r0
	if (__p)
   d5110:	b117      	cbz	r7, d5118 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d5112:	4638      	mov	r0, r7
   d5114:	f7fe ffc3 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5118:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d511c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5120:	60b4      	str	r4, [r6, #8]
    }
   d5122:	b002      	add	sp, #8
   d5124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5128:	461c      	mov	r4, r3
   d512a:	e7d8      	b.n	d50de <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d512c:	000e3c27 	.word	0x000e3c27

000d5130 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d5130:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5134:	e9d0 7900 	ldrd	r7, r9, [r0]
   d5138:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d513a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d513e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5140:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5144:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d5148:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d514a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d514e:	d102      	bne.n	d5156 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d5150:	481a      	ldr	r0, [pc, #104]	; (d51bc <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d5152:	f00b fb32 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d5156:	2c01      	cmp	r4, #1
   d5158:	4622      	mov	r2, r4
   d515a:	bf38      	it	cc
   d515c:	2201      	movcc	r2, #1
   d515e:	18a4      	adds	r4, r4, r2
   d5160:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5164:	d228      	bcs.n	d51b8 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5166:	b14c      	cbz	r4, d517c <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d5168:	429c      	cmp	r4, r3
   d516a:	bf28      	it	cs
   d516c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d516e:	0120      	lsls	r0, r4, #4
   d5170:	9101      	str	r1, [sp, #4]
   d5172:	f7fe ff90 	bl	d4096 <_Znwj>
   d5176:	9901      	ldr	r1, [sp, #4]
   d5178:	4605      	mov	r5, r0
   d517a:	e000      	b.n	d517e <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d517c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d517e:	eb15 000a 	adds.w	r0, r5, sl
   d5182:	d001      	beq.n	d5188 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d5184:	f7ff fdea 	bl	d4d5c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
   d5188:	4641      	mov	r1, r8
   d518a:	462a      	mov	r2, r5
   d518c:	4638      	mov	r0, r7
   d518e:	f7ff fef6 	bl	d4f7e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d5192:	4649      	mov	r1, r9
   d5194:	f100 0210 	add.w	r2, r0, #16
   d5198:	4640      	mov	r0, r8
   d519a:	f7ff fef0 	bl	d4f7e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d519e:	4680      	mov	r8, r0
	if (__p)
   d51a0:	b117      	cbz	r7, d51a8 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d51a2:	4638      	mov	r0, r7
   d51a4:	f7fe ff7b 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d51a8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d51ac:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d51b0:	60b4      	str	r4, [r6, #8]
    }
   d51b2:	b002      	add	sp, #8
   d51b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d51b8:	461c      	mov	r4, r3
   d51ba:	e7d8      	b.n	d516e <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d51bc:	000e3c27 	.word	0x000e3c27

000d51c0 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d51c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d51c4:	e9d0 7900 	ldrd	r7, r9, [r0]
   d51c8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d51ca:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d51ce:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d51d0:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d51d4:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d51d8:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d51da:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d51de:	d102      	bne.n	d51e6 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d51e0:	481a      	ldr	r0, [pc, #104]	; (d524c <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d51e2:	f00b faea 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d51e6:	2c01      	cmp	r4, #1
   d51e8:	4622      	mov	r2, r4
   d51ea:	bf38      	it	cc
   d51ec:	2201      	movcc	r2, #1
   d51ee:	18a4      	adds	r4, r4, r2
   d51f0:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d51f4:	d228      	bcs.n	d5248 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d51f6:	b14c      	cbz	r4, d520c <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d51f8:	429c      	cmp	r4, r3
   d51fa:	bf28      	it	cs
   d51fc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d51fe:	0120      	lsls	r0, r4, #4
   d5200:	9101      	str	r1, [sp, #4]
   d5202:	f7fe ff48 	bl	d4096 <_Znwj>
   d5206:	9901      	ldr	r1, [sp, #4]
   d5208:	4605      	mov	r5, r0
   d520a:	e000      	b.n	d520e <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d520c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d520e:	eb15 000a 	adds.w	r0, r5, sl
   d5212:	d001      	beq.n	d5218 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d5214:	f7ff fdb1 	bl	d4d7a <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
   d5218:	4641      	mov	r1, r8
   d521a:	462a      	mov	r2, r5
   d521c:	4638      	mov	r0, r7
   d521e:	f7ff fe1e 	bl	d4e5e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d5222:	4649      	mov	r1, r9
   d5224:	f100 0210 	add.w	r2, r0, #16
   d5228:	4640      	mov	r0, r8
   d522a:	f7ff fe18 	bl	d4e5e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d522e:	4680      	mov	r8, r0
	if (__p)
   d5230:	b117      	cbz	r7, d5238 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d5232:	4638      	mov	r0, r7
   d5234:	f7fe ff33 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5238:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d523c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5240:	60b4      	str	r4, [r6, #8]
    }
   d5242:	b002      	add	sp, #8
   d5244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5248:	461c      	mov	r4, r3
   d524a:	e7d8      	b.n	d51fe <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d524c:	000e3c27 	.word	0x000e3c27

000d5250 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d5250:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5254:	e9d0 7900 	ldrd	r7, r9, [r0]
   d5258:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d525a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d525e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5260:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5264:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d5268:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d526a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d526e:	d102      	bne.n	d5276 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d5270:	481a      	ldr	r0, [pc, #104]	; (d52dc <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d5272:	f00b faa2 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d5276:	2c01      	cmp	r4, #1
   d5278:	4622      	mov	r2, r4
   d527a:	bf38      	it	cc
   d527c:	2201      	movcc	r2, #1
   d527e:	18a4      	adds	r4, r4, r2
   d5280:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5284:	d228      	bcs.n	d52d8 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5286:	b14c      	cbz	r4, d529c <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d5288:	429c      	cmp	r4, r3
   d528a:	bf28      	it	cs
   d528c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d528e:	0120      	lsls	r0, r4, #4
   d5290:	9101      	str	r1, [sp, #4]
   d5292:	f7fe ff00 	bl	d4096 <_Znwj>
   d5296:	9901      	ldr	r1, [sp, #4]
   d5298:	4605      	mov	r5, r0
   d529a:	e000      	b.n	d529e <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d529c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d529e:	eb15 000a 	adds.w	r0, r5, sl
   d52a2:	d001      	beq.n	d52a8 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d52a4:	f7ff fd78 	bl	d4d98 <_ZNSt8functionIFbiEEC1ERKS1_>
   d52a8:	4641      	mov	r1, r8
   d52aa:	462a      	mov	r2, r5
   d52ac:	4638      	mov	r0, r7
   d52ae:	f7ff fe42 	bl	d4f36 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d52b2:	4649      	mov	r1, r9
   d52b4:	f100 0210 	add.w	r2, r0, #16
   d52b8:	4640      	mov	r0, r8
   d52ba:	f7ff fe3c 	bl	d4f36 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d52be:	4680      	mov	r8, r0
	if (__p)
   d52c0:	b117      	cbz	r7, d52c8 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d52c2:	4638      	mov	r0, r7
   d52c4:	f7fe feeb 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d52c8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d52cc:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d52d0:	60b4      	str	r4, [r6, #8]
    }
   d52d2:	b002      	add	sp, #8
   d52d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d52d8:	461c      	mov	r4, r3
   d52da:	e7d8      	b.n	d528e <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d52dc:	000e3c27 	.word	0x000e3c27

000d52e0 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d52e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d52e4:	e9d0 7900 	ldrd	r7, r9, [r0]
   d52e8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d52ea:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d52ee:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d52f0:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d52f4:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d52f8:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d52fa:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d52fe:	d102      	bne.n	d5306 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d5300:	481a      	ldr	r0, [pc, #104]	; (d536c <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d5302:	f00b fa5a 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d5306:	2c01      	cmp	r4, #1
   d5308:	4622      	mov	r2, r4
   d530a:	bf38      	it	cc
   d530c:	2201      	movcc	r2, #1
   d530e:	18a4      	adds	r4, r4, r2
   d5310:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5314:	d228      	bcs.n	d5368 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5316:	b14c      	cbz	r4, d532c <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d5318:	429c      	cmp	r4, r3
   d531a:	bf28      	it	cs
   d531c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d531e:	0120      	lsls	r0, r4, #4
   d5320:	9101      	str	r1, [sp, #4]
   d5322:	f7fe feb8 	bl	d4096 <_Znwj>
   d5326:	9901      	ldr	r1, [sp, #4]
   d5328:	4605      	mov	r5, r0
   d532a:	e000      	b.n	d532e <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d532c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d532e:	eb15 000a 	adds.w	r0, r5, sl
   d5332:	d001      	beq.n	d5338 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d5334:	f7ff fd3f 	bl	d4db6 <_ZNSt8functionIFbbEEC1ERKS1_>
   d5338:	4641      	mov	r1, r8
   d533a:	462a      	mov	r2, r5
   d533c:	4638      	mov	r0, r7
   d533e:	f7ff fdd6 	bl	d4eee <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d5342:	4649      	mov	r1, r9
   d5344:	f100 0210 	add.w	r2, r0, #16
   d5348:	4640      	mov	r0, r8
   d534a:	f7ff fdd0 	bl	d4eee <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d534e:	4680      	mov	r8, r0
	if (__p)
   d5350:	b117      	cbz	r7, d5358 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d5352:	4638      	mov	r0, r7
   d5354:	f7fe fea3 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5358:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d535c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5360:	60b4      	str	r4, [r6, #8]
    }
   d5362:	b002      	add	sp, #8
   d5364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5368:	461c      	mov	r4, r3
   d536a:	e7d8      	b.n	d531e <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d536c:	000e3c27 	.word	0x000e3c27

000d5370 <_ZN11SleepHelper14withAB1805_WDTER6AB1805>:
    SleepHelper &withAB1805_WDT(AB1805 &ab1805) {
   d5370:	b530      	push	{r4, r5, lr}
   d5372:	b089      	sub	sp, #36	; 0x24
   d5374:	4604      	mov	r4, r0
	    _M_invoker = &_My_handler::_M_invoke;
   d5376:	4b27      	ldr	r3, [pc, #156]	; (d5414 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xa4>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5378:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   d537a:	9303      	str	r3, [sp, #12]
   d537c:	460d      	mov	r5, r1
	    _M_manager = &_My_handler::_M_manager;
   d537e:	4b26      	ldr	r3, [pc, #152]	; (d5418 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xa8>)
   d5380:	9302      	str	r3, [sp, #8]
        wakeFunctions.add(fn); 
   d5382:	4669      	mov	r1, sp
   d5384:	a804      	add	r0, sp, #16
   d5386:	f7ff fcda 	bl	d4d3e <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d538a:	f8d4 0654 	ldr.w	r0, [r4, #1620]	; 0x654
   d538e:	f8d4 3658 	ldr.w	r3, [r4, #1624]	; 0x658
   d5392:	4298      	cmp	r0, r3
   d5394:	d02f      	beq.n	d53f6 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x86>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5396:	b110      	cbz	r0, d539e <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x2e>
   d5398:	a904      	add	r1, sp, #16
   d539a:	f7ff fcd0 	bl	d4d3e <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d539e:	f8d4 3654 	ldr.w	r3, [r4, #1620]	; 0x654
   d53a2:	3310      	adds	r3, #16
   d53a4:	f8c4 3654 	str.w	r3, [r4, #1620]	; 0x654
    class function<_Res(_ArgTypes...)>
   d53a8:	a804      	add	r0, sp, #16
   d53aa:	f7ff fb69 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d53ae:	4668      	mov	r0, sp
   d53b0:	f7ff fb66 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d53b4:	4b19      	ldr	r3, [pc, #100]	; (d541c <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xac>)
   d53b6:	9303      	str	r3, [sp, #12]
        sleepOrResetFunctions.add(fn); 
   d53b8:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d53ba:	4b19      	ldr	r3, [pc, #100]	; (d5420 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xb0>)
   d53bc:	9302      	str	r3, [sp, #8]
   d53be:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d53c0:	9500      	str	r5, [sp, #0]
   d53c2:	f7ff fcf8 	bl	d4db6 <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d53c6:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   d53ca:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   d53ce:	4298      	cmp	r0, r3
   d53d0:	d018      	beq.n	d5404 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x94>
   d53d2:	b110      	cbz	r0, d53da <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x6a>
   d53d4:	a904      	add	r1, sp, #16
   d53d6:	f7ff fcee 	bl	d4db6 <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d53da:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   d53de:	3310      	adds	r3, #16
   d53e0:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   d53e4:	a804      	add	r0, sp, #16
   d53e6:	f7ff fb4b 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d53ea:	4668      	mov	r0, sp
   d53ec:	f7ff fb48 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    }
   d53f0:	4620      	mov	r0, r4
   d53f2:	b009      	add	sp, #36	; 0x24
   d53f4:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d53f6:	4601      	mov	r1, r0
   d53f8:	aa04      	add	r2, sp, #16
   d53fa:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   d53fe:	f7ff fe4f 	bl	d50a0 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d5402:	e7d1      	b.n	d53a8 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x38>
   d5404:	4601      	mov	r1, r0
   d5406:	aa04      	add	r2, sp, #16
   d5408:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   d540c:	f7ff ff68 	bl	d52e0 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d5410:	e7e8      	b.n	d53e4 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x74>
   d5412:	bf00      	nop
   d5414:	000d4977 	.word	0x000d4977
   d5418:	000d4907 	.word	0x000d4907
   d541c:	000d4969 	.word	0x000d4969
   d5420:	000d491f 	.word	0x000d491f

000d5424 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d5424:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5428:	e9d0 7900 	ldrd	r7, r9, [r0]
   d542c:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d542e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d5432:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5434:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5438:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d543c:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d543e:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d5442:	d102      	bne.n	d544a <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d5444:	481a      	ldr	r0, [pc, #104]	; (d54b0 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d5446:	f00b f9b8 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d544a:	2c01      	cmp	r4, #1
   d544c:	4622      	mov	r2, r4
   d544e:	bf38      	it	cc
   d5450:	2201      	movcc	r2, #1
   d5452:	18a4      	adds	r4, r4, r2
   d5454:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5458:	d228      	bcs.n	d54ac <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d545a:	b14c      	cbz	r4, d5470 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d545c:	429c      	cmp	r4, r3
   d545e:	bf28      	it	cs
   d5460:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5462:	0120      	lsls	r0, r4, #4
   d5464:	9101      	str	r1, [sp, #4]
   d5466:	f7fe fe16 	bl	d4096 <_Znwj>
   d546a:	9901      	ldr	r1, [sp, #4]
   d546c:	4605      	mov	r5, r0
   d546e:	e000      	b.n	d5472 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d5470:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5472:	eb15 000a 	adds.w	r0, r5, sl
   d5476:	d001      	beq.n	d547c <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d5478:	f7ff fcac 	bl	d4dd4 <_ZNSt8functionIFbmEEC1ERKS1_>
   d547c:	4641      	mov	r1, r8
   d547e:	462a      	mov	r2, r5
   d5480:	4638      	mov	r0, r7
   d5482:	f7ff fcc8 	bl	d4e16 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d5486:	4649      	mov	r1, r9
   d5488:	f100 0210 	add.w	r2, r0, #16
   d548c:	4640      	mov	r0, r8
   d548e:	f7ff fcc2 	bl	d4e16 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d5492:	4680      	mov	r8, r0
	if (__p)
   d5494:	b117      	cbz	r7, d549c <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d5496:	4638      	mov	r0, r7
   d5498:	f7fe fe01 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d549c:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d54a0:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d54a4:	60b4      	str	r4, [r6, #8]
    }
   d54a6:	b002      	add	sp, #8
   d54a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d54ac:	461c      	mov	r4, r3
   d54ae:	e7d8      	b.n	d5462 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d54b0:	000e3c27 	.word	0x000e3c27

000d54b4 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d54b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d54b8:	e9d0 8a00 	ldrd	r8, sl, [r0]
   d54bc:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   d54be:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d54c2:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   d54c6:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   d54ca:	4607      	mov	r7, r0
   d54cc:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d54ce:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   d54d2:	d102      	bne.n	d54da <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d54d4:	4825      	ldr	r0, [pc, #148]	; (d556c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   d54d6:	f00b f970 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d54da:	2c01      	cmp	r4, #1
   d54dc:	4622      	mov	r2, r4
   d54de:	bf38      	it	cc
   d54e0:	2201      	movcc	r2, #1
   d54e2:	18a4      	adds	r4, r4, r2
   d54e4:	eba1 0608 	sub.w	r6, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d54e8:	d23d      	bcs.n	d5566 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d54ea:	b13c      	cbz	r4, d54fc <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   d54ec:	429c      	cmp	r4, r3
   d54ee:	bf28      	it	cs
   d54f0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d54f2:	00e0      	lsls	r0, r4, #3
   d54f4:	f7fe fdcf 	bl	d4096 <_Znwj>
   d54f8:	4605      	mov	r5, r0
   d54fa:	e000      	b.n	d54fe <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   d54fc:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d54fe:	19ab      	adds	r3, r5, r6
   d5500:	bf1c      	itt	ne
   d5502:	e9db 0100 	ldrdne	r0, r1, [fp]
   d5506:	e9c3 0100 	strdne	r0, r1, [r3]
   d550a:	2300      	movs	r3, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d550c:	eb08 0203 	add.w	r2, r8, r3
   d5510:	4591      	cmp	r9, r2
   d5512:	d00a      	beq.n	d552a <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
   d5514:	eb15 0c03 	adds.w	ip, r5, r3
   d5518:	bf18      	it	ne
   d551a:	e9d2 0100 	ldrdne	r0, r1, [r2]
   d551e:	f103 0308 	add.w	r3, r3, #8
   d5522:	bf18      	it	ne
   d5524:	e9cc 0100 	strdne	r0, r1, [ip]
   d5528:	e7f0      	b.n	d550c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x58>
	      ++__new_finish;
   d552a:	3608      	adds	r6, #8
   d552c:	442e      	add	r6, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d552e:	4632      	mov	r2, r6
   d5530:	464b      	mov	r3, r9
      for (; __first != __last; ++__first, (void)++__cur)
   d5532:	4553      	cmp	r3, sl
   d5534:	f102 0208 	add.w	r2, r2, #8
   d5538:	d005      	beq.n	d5546 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x92>
   d553a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d553e:	3308      	adds	r3, #8
   d5540:	e902 0003 	stmdb	r2, {r0, r1}
   d5544:	e7f5      	b.n	d5532 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
   d5546:	eba3 0309 	sub.w	r3, r3, r9
   d554a:	441e      	add	r6, r3
	if (__p)
   d554c:	f1b8 0f00 	cmp.w	r8, #0
   d5550:	d002      	beq.n	d5558 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
	::operator delete(__p);
   d5552:	4640      	mov	r0, r8
   d5554:	f7fe fda3 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5558:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   d555c:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5560:	60bc      	str	r4, [r7, #8]
    }
   d5562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5566:	461c      	mov	r4, r3
   d5568:	e7c3      	b.n	d54f2 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
   d556a:	bf00      	nop
   d556c:	000e3c27 	.word	0x000e3c27

000d5570 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   d5570:	b510      	push	{r4, lr}
   d5572:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d5574:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   d5578:	428c      	cmp	r4, r1
      vector<_Tp, _Alloc>::
   d557a:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d557c:	d008      	beq.n	d5590 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d557e:	b11c      	cbz	r4, d5588 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x18>
   d5580:	e892 0003 	ldmia.w	r2, {r0, r1}
   d5584:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   d5588:	685a      	ldr	r2, [r3, #4]
   d558a:	3208      	adds	r2, #8
   d558c:	605a      	str	r2, [r3, #4]
      }
   d558e:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   d5590:	4621      	mov	r1, r4
   d5592:	f7ff ff8f 	bl	d54b4 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   d5596:	e7fa      	b.n	d558e <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1e>

000d5598 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>:
    SleepHelper &withSleepReadyFunction(std::function<bool(AppCallbackState &, system_tick_t)> fn) {
   d5598:	b510      	push	{r4, lr}
   d559a:	4604      	mov	r4, r0
   d559c:	b086      	sub	sp, #24
        sleepReadyFunctions.add(fn); 
   d559e:	a802      	add	r0, sp, #8
   d55a0:	f7ff fbeb 	bl	d4d7a <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d55a4:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
   d55a8:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
   d55ac:	4298      	cmp	r0, r3
   d55ae:	d018      	beq.n	d55e2 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x4a>
   d55b0:	b110      	cbz	r0, d55b8 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x20>
   d55b2:	a902      	add	r1, sp, #8
   d55b4:	f7ff fbe1 	bl	d4d7a <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d55b8:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
   d55bc:	3310      	adds	r3, #16
   d55be:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
    class AppCallbackState {
   d55c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d55c6:	2200      	movs	r2, #0
      { emplace_back(std::move(__x)); }
   d55c8:	4669      	mov	r1, sp
   d55ca:	f204 60d4 	addw	r0, r4, #1748	; 0x6d4
   d55ce:	e9cd 3200 	strd	r3, r2, [sp]
   d55d2:	f7ff ffcd 	bl	d5570 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
   d55d6:	a802      	add	r0, sp, #8
   d55d8:	f7ff fa52 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    }
   d55dc:	4620      	mov	r0, r4
   d55de:	b006      	add	sp, #24
   d55e0:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   d55e2:	4601      	mov	r1, r0
   d55e4:	aa02      	add	r2, sp, #8
   d55e6:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   d55ea:	f7ff fde9 	bl	d51c0 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d55ee:	e7e8      	b.n	d55c2 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x2a>

000d55f0 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>:
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   d55f0:	b570      	push	{r4, r5, r6, lr}
   d55f2:	b088      	sub	sp, #32
   d55f4:	4604      	mov	r4, r0
   d55f6:	461d      	mov	r5, r3
	    _M_invoker = &_My_handler::_M_invoke;
   d55f8:	4b1d      	ldr	r3, [pc, #116]	; (d5670 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x80>)
   d55fa:	9303      	str	r3, [sp, #12]
        wakeOrBootFunctions.add(fn); 
   d55fc:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d55fe:	4b1d      	ldr	r3, [pc, #116]	; (d5674 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x84>)
   d5600:	9302      	str	r3, [sp, #8]
   d5602:	a804      	add	r0, sp, #16
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   d5604:	4616      	mov	r6, r2
        wakeOrBootFunctions.add(fn); 
   d5606:	f7ff fbc7 	bl	d4d98 <_ZNSt8functionIFbiEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d560a:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
   d560e:	f8d4 36f4 	ldr.w	r3, [r4, #1780]	; 0x6f4
   d5612:	4298      	cmp	r0, r3
   d5614:	d025      	beq.n	d5662 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x72>
   d5616:	b110      	cbz	r0, d561e <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x2e>
   d5618:	a904      	add	r1, sp, #16
   d561a:	f7ff fbbd 	bl	d4d98 <_ZNSt8functionIFbiEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d561e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   d5622:	3310      	adds	r3, #16
   d5624:	f8c4 36f0 	str.w	r3, [r4, #1776]	; 0x6f0
    class function<_Res(_ArgTypes...)>
   d5628:	a804      	add	r0, sp, #16
   d562a:	f7ff fa29 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d562e:	4668      	mov	r0, sp
   d5630:	f7ff fa26 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    _Function_base() : _M_manager(nullptr) { }
   d5634:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5636:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   d5638:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d563a:	f7fe fd2c 	bl	d4096 <_Znwj>
   d563e:	b108      	cbz	r0, d5644 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x54>
   d5640:	e9c0 6500 	strd	r6, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d5644:	4b0c      	ldr	r3, [pc, #48]	; (d5678 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x88>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5646:	9004      	str	r0, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5648:	9307      	str	r3, [sp, #28]
                }
            }

            // This callback returns false when you can sleep, and true to stay awake, so reverse boolean
            return !canSleep;
        });
   d564a:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d564c:	4b0b      	ldr	r3, [pc, #44]	; (d567c <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x8c>)
   d564e:	9306      	str	r3, [sp, #24]
   d5650:	4620      	mov	r0, r4
   d5652:	f7ff ffa1 	bl	d5598 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
    class function<_Res(_ArgTypes...)>
   d5656:	a804      	add	r0, sp, #16
   d5658:	f7ff fa12 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>

        return *this;
    }
   d565c:	4620      	mov	r0, r4
   d565e:	b008      	add	sp, #32
   d5660:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   d5662:	4601      	mov	r1, r0
   d5664:	aa04      	add	r2, sp, #16
   d5666:	f204 60ec 	addw	r0, r4, #1772	; 0x6ec
   d566a:	f7ff fdf1 	bl	d5250 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d566e:	e7db      	b.n	d5628 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x38>
   d5670:	000d49f9 	.word	0x000d49f9
   d5674:	000d4937 	.word	0x000d4937
   d5678:	000d4987 	.word	0x000d4987
   d567c:	000d4a45 	.word	0x000d4a45

000d5680 <_GLOBAL__sub_I_batteryContext>:
        val_(val) {
   d5680:	4b01      	ldr	r3, [pc, #4]	; (d5688 <_GLOBAL__sub_I_batteryContext+0x8>)
   d5682:	2201      	movs	r2, #1
   d5684:	701a      	strb	r2, [r3, #0]
        .withMinuteOfHour(60, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));

    // Data capture every 15 minutes during these same hours 
    SleepHelper::instance().getScheduleDataCapture()
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));
}
   d5686:	4770      	bx	lr
   d5688:	2003e409 	.word	0x2003e409

000d568c <_Z17sleepHelperConfigv>:
void sleepHelperConfig() {
   d568c:	b530      	push	{r4, r5, lr}
   d568e:	b09f      	sub	sp, #124	; 0x7c
    SleepHelper::instance()
   d5690:	f004 fefa 	bl	da488 <_ZN11SleepHelper8instanceEv>
        minimumCellularOffTimeMs = timeMs.count();
   d5694:	4b87      	ldr	r3, [pc, #540]	; (d58b4 <_Z17sleepHelperConfigv+0x228>)
   d5696:	f8c0 37a0 	str.w	r3, [r0, #1952]	; 0x7a0
   d569a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d569c:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d569e:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   d56a0:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56a2:	f7fe fcf8 	bl	d4096 <_Znwj>
   d56a6:	b118      	cbz	r0, d56b0 <_Z17sleepHelperConfigv+0x24>
   d56a8:	4a83      	ldr	r2, [pc, #524]	; (d58b8 <_Z17sleepHelperConfigv+0x22c>)
   d56aa:	2300      	movs	r3, #0
   d56ac:	e9c0 2300 	strd	r2, r3, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d56b0:	4b82      	ldr	r3, [pc, #520]	; (d58bc <_Z17sleepHelperConfigv+0x230>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56b2:	9004      	str	r0, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d56b4:	9307      	str	r3, [sp, #28]
        maximumTimeToConnectFunctions.add(fn); 
   d56b6:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d56b8:	4b81      	ldr	r3, [pc, #516]	; (d58c0 <_Z17sleepHelperConfigv+0x234>)
   d56ba:	9306      	str	r3, [sp, #24]
   d56bc:	a808      	add	r0, sp, #32
   d56be:	f7ff fb89 	bl	d4dd4 <_ZNSt8functionIFbmEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d56c2:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
   d56c6:	f8d4 370c 	ldr.w	r3, [r4, #1804]	; 0x70c
   d56ca:	4298      	cmp	r0, r3
   d56cc:	f000 80dc 	beq.w	d5888 <_Z17sleepHelperConfigv+0x1fc>
   d56d0:	b110      	cbz	r0, d56d8 <_Z17sleepHelperConfigv+0x4c>
   d56d2:	a908      	add	r1, sp, #32
   d56d4:	f7ff fb7e 	bl	d4dd4 <_ZNSt8functionIFbmEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d56d8:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
   d56dc:	3310      	adds	r3, #16
   d56de:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
    class function<_Res(_ArgTypes...)>
   d56e2:	a808      	add	r0, sp, #32
   d56e4:	f7ff f9cc 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d56e8:	a804      	add	r0, sp, #16
   d56ea:	f7ff f9c9 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
     * | Sydney, Australia   | "AEST-10AEDT,M10.1.0/02:00:00,M4.1.0/03:00:00" | 
     * | Adelaide, Australia | "ACST-9:30ACDT,M10.1.0/02:00:00,M4.1.0/03:00:00" |
     * 
     */
    SleepHelper &withTimeConfig(const char *tzConfig) {
        LocalTime::instance().withConfig(tzConfig);
   d56ee:	f001 fff1 	bl	d76d4 <_ZN9LocalTime8instanceEv>
   d56f2:	4974      	ldr	r1, [pc, #464]	; (d58c4 <_Z17sleepHelperConfigv+0x238>)
   d56f4:	4605      	mov	r5, r0
   d56f6:	a808      	add	r0, sp, #32
   d56f8:	f001 ff10 	bl	d751c <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d56fc:	a909      	add	r1, sp, #36	; 0x24
   d56fe:	f105 0008 	add.w	r0, r5, #8
   d5702:	f00a fa58 	bl	dfbb6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d5706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5708:	61eb      	str	r3, [r5, #28]
class LocalTimePosixTimezone {
   d570a:	a90f      	add	r1, sp, #60	; 0x3c
   d570c:	f105 0020 	add.w	r0, r5, #32
   d5710:	f00a fa51 	bl	dfbb6 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d5714:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d5716:	636b      	str	r3, [r5, #52]	; 0x34
class LocalTimeChange {
   d5718:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d571a:	63eb      	str	r3, [r5, #60]	; 0x3c
class LocalTimeHMS {
   d571c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d571e:	646b      	str	r3, [r5, #68]	; 0x44
class LocalTimeChange {
   d5720:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d5722:	64eb      	str	r3, [r5, #76]	; 0x4c
class LocalTimeHMS {
   d5724:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5726:	656b      	str	r3, [r5, #84]	; 0x54
class LocalTimePosixTimezone {
   d5728:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   d572c:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
   d5730:	a808      	add	r0, sp, #32
   d5732:	f001 fb7d 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
            this->path = path;
   d5736:	4964      	ldr	r1, [pc, #400]	; (d58c8 <_Z17sleepHelperConfigv+0x23c>)
   d5738:	f204 7054 	addw	r0, r4, #1876	; 0x754
   d573c:	f00a fa5d 	bl	dfbfa <_ZN6StringaSEPKc>
            this->eventHistoryKey = key;
   d5740:	4962      	ldr	r1, [pc, #392]	; (d58cc <_Z17sleepHelperConfigv+0x240>)
   d5742:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   d5746:	f00a fa58 	bl	dfbfa <_ZN6StringaSEPKc>
	    _M_invoker = &_My_handler::_M_invoke;
   d574a:	4b61      	ldr	r3, [pc, #388]	; (d58d0 <_Z17sleepHelperConfigv+0x244>)
   d574c:	9303      	str	r3, [sp, #12]
        dataCaptureFunctions.add(fn);
   d574e:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d5750:	4b60      	ldr	r3, [pc, #384]	; (d58d4 <_Z17sleepHelperConfigv+0x248>)
   d5752:	9302      	str	r3, [sp, #8]
   d5754:	a808      	add	r0, sp, #32
   d5756:	f7ff fb01 	bl	d4d5c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d575a:	f8d4 06b4 	ldr.w	r0, [r4, #1716]	; 0x6b4
   d575e:	f8d4 36b8 	ldr.w	r3, [r4, #1720]	; 0x6b8
   d5762:	4298      	cmp	r0, r3
   d5764:	f000 8097 	beq.w	d5896 <_Z17sleepHelperConfigv+0x20a>
   d5768:	b110      	cbz	r0, d5770 <_Z17sleepHelperConfigv+0xe4>
   d576a:	a908      	add	r1, sp, #32
   d576c:	f7ff faf6 	bl	d4d5c <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d5770:	f8d4 36b4 	ldr.w	r3, [r4, #1716]	; 0x6b4
   d5774:	3310      	adds	r3, #16
   d5776:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
    class AppCallbackState {
   d577a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d577e:	2200      	movs	r2, #0
      { emplace_back(std::move(__x)); }
   d5780:	a904      	add	r1, sp, #16
   d5782:	f204 60bc 	addw	r0, r4, #1724	; 0x6bc
   d5786:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d578a:	f7ff fef1 	bl	d5570 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    class function<_Res(_ArgTypes...)>
   d578e:	a808      	add	r0, sp, #32
   d5790:	f7ff f976 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d5794:	4b50      	ldr	r3, [pc, #320]	; (d58d8 <_Z17sleepHelperConfigv+0x24c>)
   d5796:	9307      	str	r3, [sp, #28]
        sleepConfigurationFunctions.add(fn); 
   d5798:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d579a:	4b50      	ldr	r3, [pc, #320]	; (d58dc <_Z17sleepHelperConfigv+0x250>)
   d579c:	9306      	str	r3, [sp, #24]
   d579e:	a808      	add	r0, sp, #32
   d57a0:	f7ff fabe 	bl	d4d20 <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d57a4:	f8d4 0648 	ldr.w	r0, [r4, #1608]	; 0x648
   d57a8:	f8d4 364c 	ldr.w	r3, [r4, #1612]	; 0x64c
   d57ac:	4298      	cmp	r0, r3
   d57ae:	d079      	beq.n	d58a4 <_Z17sleepHelperConfigv+0x218>
   d57b0:	b110      	cbz	r0, d57b8 <_Z17sleepHelperConfigv+0x12c>
   d57b2:	a908      	add	r1, sp, #32
   d57b4:	f7ff fab4 	bl	d4d20 <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>
	    ++this->_M_impl._M_finish;
   d57b8:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
   d57bc:	3310      	adds	r3, #16
   d57be:	f8c4 3648 	str.w	r3, [r4, #1608]	; 0x648
    class function<_Res(_ArgTypes...)>
   d57c2:	a808      	add	r0, sp, #32
   d57c4:	f7ff f95c 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d57c8:	4b45      	ldr	r3, [pc, #276]	; (d58e0 <_Z17sleepHelperConfigv+0x254>)
   d57ca:	930b      	str	r3, [sp, #44]	; 0x2c
        })
   d57cc:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   d57ce:	4b45      	ldr	r3, [pc, #276]	; (d58e4 <_Z17sleepHelperConfigv+0x258>)
   d57d0:	930a      	str	r3, [sp, #40]	; 0x28
   d57d2:	4620      	mov	r0, r4
   d57d4:	f7ff fee0 	bl	d5598 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
        .withAB1805_WDT(ab1805)                     // Stop the watchdog before sleep or reset, and resume after wake
   d57d8:	4943      	ldr	r1, [pc, #268]	; (d58e8 <_Z17sleepHelperConfigv+0x25c>)
   d57da:	f7ff fdc9 	bl	d5370 <_ZN11SleepHelper14withAB1805_WDTER6AB1805>
        .withPublishQueuePosixRK()                  // Manage both internal publish queueing and PublishQueuePosixRK
   d57de:	2300      	movs	r3, #0
   d57e0:	2200      	movs	r2, #0
   d57e2:	f7ff ff05 	bl	d55f0 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>
    class function<_Res(_ArgTypes...)>
   d57e6:	a808      	add	r0, sp, #32
   d57e8:	f7ff f94a 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d57ec:	a804      	add	r0, sp, #16
   d57ee:	f7ff f947 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d57f2:	4668      	mov	r0, sp
   d57f4:	f7ff f944 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().getScheduleFull()
   d57f8:	f004 fe46 	bl	da488 <_ZN11SleepHelper8instanceEv>
     * @brief Get the full wake schedule
     * 
     * @return LocalTimeSchedule& 
     */
    LocalTimeSchedule &getScheduleFull() {
        return scheduleManager.getScheduleByName("full");
   d57fc:	493b      	ldr	r1, [pc, #236]	; (d58ec <_Z17sleepHelperConfigv+0x260>)
   d57fe:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   d5802:	f002 fdcb 	bl	d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        .withMinuteOfHour(60, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));
   d5806:	493a      	ldr	r1, [pc, #232]	; (d58f0 <_Z17sleepHelperConfigv+0x264>)
   d5808:	4604      	mov	r4, r0
   d580a:	4668      	mov	r0, sp
   d580c:	f001 fcaa 	bl	d7164 <_ZN12LocalTimeHMSC1EPKc>
   d5810:	4938      	ldr	r1, [pc, #224]	; (d58f4 <_Z17sleepHelperConfigv+0x268>)
   d5812:	a804      	add	r0, sp, #16
   d5814:	f001 fca6 	bl	d7164 <_ZN12LocalTimeHMSC1EPKc>
   d5818:	aa04      	add	r2, sp, #16
   d581a:	4669      	mov	r1, sp
   d581c:	a808      	add	r0, sp, #32
   d581e:	f7ff f9df 	bl	d4be0 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d5822:	aa08      	add	r2, sp, #32
   d5824:	213c      	movs	r1, #60	; 0x3c
   d5826:	4620      	mov	r0, r4
   d5828:	f002 fcbf 	bl	d81aa <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d582c:	a808      	add	r0, sp, #32
   d582e:	f7ff f9eb 	bl	d4c08 <_ZN14LocalTimeRangeD1Ev>
   d5832:	a804      	add	r0, sp, #16
   d5834:	f001 fae4 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
   d5838:	4668      	mov	r0, sp
   d583a:	f001 fae1 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
    SleepHelper::instance().getScheduleDataCapture()
   d583e:	f004 fe23 	bl	da488 <_ZN11SleepHelper8instanceEv>
     * 
     * @return LocalTimeSchedule& 
     * 
     */
    LocalTimeSchedule &getScheduleDataCapture() {
        return scheduleManager.getScheduleByName("data");
   d5842:	492d      	ldr	r1, [pc, #180]	; (d58f8 <_Z17sleepHelperConfigv+0x26c>)
   d5844:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   d5848:	f002 fda8 	bl	d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));
   d584c:	4928      	ldr	r1, [pc, #160]	; (d58f0 <_Z17sleepHelperConfigv+0x264>)
   d584e:	4604      	mov	r4, r0
   d5850:	4668      	mov	r0, sp
   d5852:	f001 fc87 	bl	d7164 <_ZN12LocalTimeHMSC1EPKc>
   d5856:	4927      	ldr	r1, [pc, #156]	; (d58f4 <_Z17sleepHelperConfigv+0x268>)
   d5858:	a804      	add	r0, sp, #16
   d585a:	f001 fc83 	bl	d7164 <_ZN12LocalTimeHMSC1EPKc>
   d585e:	aa04      	add	r2, sp, #16
   d5860:	4669      	mov	r1, sp
   d5862:	a808      	add	r0, sp, #32
   d5864:	f7ff f9bc 	bl	d4be0 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d5868:	aa08      	add	r2, sp, #32
   d586a:	210f      	movs	r1, #15
   d586c:	4620      	mov	r0, r4
   d586e:	f002 fc9c 	bl	d81aa <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d5872:	a808      	add	r0, sp, #32
   d5874:	f7ff f9c8 	bl	d4c08 <_ZN14LocalTimeRangeD1Ev>
   d5878:	a804      	add	r0, sp, #16
   d587a:	f001 fac1 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
   d587e:	4668      	mov	r0, sp
   d5880:	f001 fabe 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
}
   d5884:	b01f      	add	sp, #124	; 0x7c
   d5886:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d5888:	4601      	mov	r1, r0
   d588a:	aa08      	add	r2, sp, #32
   d588c:	f204 7004 	addw	r0, r4, #1796	; 0x704
   d5890:	f7ff fdc8 	bl	d5424 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d5894:	e725      	b.n	d56e2 <_Z17sleepHelperConfigv+0x56>
   d5896:	4601      	mov	r1, r0
   d5898:	aa08      	add	r2, sp, #32
   d589a:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   d589e:	f7ff fc47 	bl	d5130 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d58a2:	e76a      	b.n	d577a <_Z17sleepHelperConfigv+0xee>
   d58a4:	4601      	mov	r1, r0
   d58a6:	aa08      	add	r2, sp, #32
   d58a8:	f204 6044 	addw	r0, r4, #1604	; 0x644
   d58ac:	f7ff fbb0 	bl	d5010 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_>
   d58b0:	e787      	b.n	d57c2 <_Z17sleepHelperConfigv+0x136>
   d58b2:	bf00      	nop
   d58b4:	000493e0 	.word	0x000493e0
   d58b8:	000a1220 	.word	0x000a1220
   d58bc:	000d48f1 	.word	0x000d48f1
   d58c0:	000d4a09 	.word	0x000d4a09
   d58c4:	000e3c41 	.word	0x000e3c41
   d58c8:	000e3c6a 	.word	0x000e3c6a
   d58cc:	000e3c7a 	.word	0x000e3c7a
   d58d0:	000d4c4d 	.word	0x000d4c4d
   d58d4:	000d494b 	.word	0x000d494b
   d58d8:	000d4b39 	.word	0x000d4b39
   d58dc:	000d4955 	.word	0x000d4955
   d58e0:	000d49e9 	.word	0x000d49e9
   d58e4:	000d495f 	.word	0x000d495f
   d58e8:	2003e3b4 	.word	0x2003e3b4
   d58ec:	000e3c7d 	.word	0x000e3c7d
   d58f0:	000e3c82 	.word	0x000e3c82
   d58f4:	000e3c8b 	.word	0x000e3c8b
   d58f8:	000e419f 	.word	0x000e419f

000d58fc <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d58fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d58fe:	f007 fb6b 	bl	dcfd8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d5902:	b1d8      	cbz	r0, d593c <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5904:	4b17      	ldr	r3, [pc, #92]	; (d5964 <_Z18loadSystemDefaultsv+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5906:	4a18      	ldr	r2, [pc, #96]	; (d5968 <_Z18loadSystemDefaultsv+0x6c>)
   d5908:	781b      	ldrb	r3, [r3, #0]
   d590a:	f88d 3000 	strb.w	r3, [sp]
   d590e:	4917      	ldr	r1, [pc, #92]	; (d596c <_Z18loadSystemDefaultsv+0x70>)
   d5910:	233c      	movs	r3, #60	; 0x3c
   d5912:	a802      	add	r0, sp, #8
   d5914:	f007 ff32 	bl	dd77c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d5918:	9c03      	ldr	r4, [sp, #12]
   d591a:	b17c      	cbz	r4, d593c <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d591c:	6863      	ldr	r3, [r4, #4]
   d591e:	3b01      	subs	r3, #1
   d5920:	6063      	str	r3, [r4, #4]
   d5922:	b95b      	cbnz	r3, d593c <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d5924:	6823      	ldr	r3, [r4, #0]
   d5926:	4620      	mov	r0, r4
   d5928:	689b      	ldr	r3, [r3, #8]
   d592a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d592c:	68a3      	ldr	r3, [r4, #8]
   d592e:	3b01      	subs	r3, #1
   d5930:	60a3      	str	r3, [r4, #8]
   d5932:	b91b      	cbnz	r3, d593c <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d5934:	6823      	ldr	r3, [r4, #0]
   d5936:	4620      	mov	r0, r4
   d5938:	68db      	ldr	r3, [r3, #12]
   d593a:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d593c:	490c      	ldr	r1, [pc, #48]	; (d5970 <_Z18loadSystemDefaultsv+0x74>)
   d593e:	480d      	ldr	r0, [pc, #52]	; (d5974 <_Z18loadSystemDefaultsv+0x78>)
   d5940:	f7fe fd2c 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d5944:	4b0c      	ldr	r3, [pc, #48]	; (d5978 <_Z18loadSystemDefaultsv+0x7c>)
   d5946:	2201      	movs	r2, #1
   d5948:	701a      	strb	r2, [r3, #0]
  sysStatus.currentConnectionLimit = 10;
  sysStatus.verboseMode = false;
   d594a:	4a0c      	ldr	r2, [pc, #48]	; (d597c <_Z18loadSystemDefaultsv+0x80>)
   d594c:	210a      	movs	r1, #10
   d594e:	e9c3 1201 	strd	r1, r2, [r3, #4]
  sysStatus.enableSleep = true;
  sysStatus.wakeTime = 6;
  sysStatus.sleepTime = 22;
  sysStatus.wateringDuration = 0;
  sysStatus.wateringThresholdPct = 0;
   d5952:	2200      	movs	r2, #0
   d5954:	60da      	str	r2, [r3, #12]
  sysStatus.wateringDuration = 0;
   d5956:	2200      	movs	r2, #0
   d5958:	611a      	str	r2, [r3, #16]
  sysStatus.heatThreshold = 100;
   d595a:	4a09      	ldr	r2, [pc, #36]	; (d5980 <_Z18loadSystemDefaultsv+0x84>)
   d595c:	615a      	str	r2, [r3, #20]
   d595e:	b004      	add	sp, #16
   d5960:	bd10      	pop	{r4, pc}
   d5962:	bf00      	nop
   d5964:	2003e40a 	.word	0x2003e40a
   d5968:	000e3c94 	.word	0x000e3c94
   d596c:	000e3b53 	.word	0x000e3b53
   d5970:	000e3cac 	.word	0x000e3cac
   d5974:	2003e560 	.word	0x2003e560
   d5978:	2003e450 	.word	0x2003e450
   d597c:	16060100 	.word	0x16060100
   d5980:	42c80000 	.word	0x42c80000

000d5984 <_ZNSt10_Hash_impl4hashIdEEjRKT_>:
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
	 size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }
   d5984:	4a01      	ldr	r2, [pc, #4]	; (d598c <_ZNSt10_Hash_impl4hashIdEEjRKT_+0x8>)
   d5986:	2108      	movs	r1, #8
   d5988:	f00a bedc 	b.w	e0744 <_ZSt11_Hash_bytesPKvjj>
   d598c:	c70f6907 	.word	0xc70f6907

000d5990 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d5990:	4b01      	ldr	r3, [pc, #4]	; (d5998 <_GLOBAL__sub_I_sysStatus+0x8>)
   d5992:	2201      	movs	r2, #1
   d5994:	701a      	strb	r2, [r3, #0]
   d5996:	4770      	bx	lr
   d5998:	2003e40a 	.word	0x2003e40a

000d599c <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d599c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59a0:	ed2d 8b02 	vpush	{d8}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d59a4:	4c54      	ldr	r4, [pc, #336]	; (d5af8 <_Z17storageObjectLoopv+0x15c>)
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d59a6:	b082      	sub	sp, #8
  if (Time.now() - lastCheckTime) {          // Check once a second
   d59a8:	f00a fbe3 	bl	e0172 <_ZN9TimeClass3nowEv>
   d59ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   d59b0:	17c1      	asrs	r1, r0, #31
   d59b2:	4299      	cmp	r1, r3
   d59b4:	bf08      	it	eq
   d59b6:	4290      	cmpeq	r0, r2
   d59b8:	f000 809c 	beq.w	d5af4 <_Z17storageObjectLoopv+0x158>
    size_t sysStatusHash =  std::hash<byte>{}(sysStatus.structuresVersion) + \
   d59bc:	4f4f      	ldr	r7, [pc, #316]	; (d5afc <_Z17storageObjectLoopv+0x160>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d59be:	f00a fbd8 	bl	e0172 <_ZN9TimeClass3nowEv>
   d59c2:	687b      	ldr	r3, [r7, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d59c4:	783e      	ldrb	r6, [r7, #0]
  _Cxx_hashtable_define_trivial_hash(bool)
   d59c6:	7a7d      	ldrb	r5, [r7, #9]
                      std::hash<double>{}(sysStatus.wateringThresholdPct) + \
   d59c8:	ed97 8a03 	vldr	s16, [r7, #12]
   d59cc:	441e      	add	r6, r3
   d59ce:	7a3b      	ldrb	r3, [r7, #8]
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d59d0:	17c1      	asrs	r1, r0, #31
   d59d2:	441e      	add	r6, r3
   d59d4:	e9c4 0100 	strd	r0, r1, [r4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d59d8:	442e      	add	r6, r5
                      std::hash<double>{}(sysStatus.wateringThresholdPct) + \
   d59da:	ee18 0a10 	vmov	r0, s16
   d59de:	7abd      	ldrb	r5, [r7, #10]
   d59e0:	f00b fa66 	bl	e0eb0 <__aeabi_f2d>
   d59e4:	442e      	add	r6, r5
    {
      size_t
      operator()(double __val) const noexcept
      {
	// 0 and -0 both hash to zero.
	return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
   d59e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d59ea:	7afd      	ldrb	r5, [r7, #11]
	return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
   d59ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d59f0:	e9cd 0100 	strd	r0, r1, [sp]
   d59f4:	442e      	add	r6, r5
   d59f6:	d071      	beq.n	d5adc <_Z17storageObjectLoopv+0x140>
   d59f8:	4668      	mov	r0, sp
   d59fa:	f7ff ffc3 	bl	d5984 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
   d59fe:	693d      	ldr	r5, [r7, #16]
                      std::hash<double>{}(sysStatus.heatThreshold);
   d5a00:	ed97 8a05 	vldr	s16, [r7, #20]
                      std::hash<double>{}(sysStatus.wateringThresholdPct) + \
   d5a04:	442e      	add	r6, r5
   d5a06:	1834      	adds	r4, r6, r0
                      std::hash<double>{}(sysStatus.heatThreshold);
   d5a08:	ee18 0a10 	vmov	r0, s16
   d5a0c:	f00b fa50 	bl	e0eb0 <__aeabi_f2d>
   d5a10:	eeb5 8a40 	vcmp.f32	s16, #0.0
   d5a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5a18:	e9cd 0100 	strd	r0, r1, [sp]
   d5a1c:	d060      	beq.n	d5ae0 <_Z17storageObjectLoopv+0x144>
   d5a1e:	4668      	mov	r0, sp
   d5a20:	f7ff ffb0 	bl	d5984 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d5a24:	4d36      	ldr	r5, [pc, #216]	; (d5b00 <_Z17storageObjectLoopv+0x164>)
   d5a26:	682b      	ldr	r3, [r5, #0]
                      std::hash<double>{}(sysStatus.heatThreshold);
   d5a28:	4404      	add	r4, r0
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d5a2a:	429c      	cmp	r4, r3
   d5a2c:	d05a      	beq.n	d5ae4 <_Z17storageObjectLoopv+0x148>
      Log.info("sysStaus object stored and hash updated");
   d5a2e:	4935      	ldr	r1, [pc, #212]	; (d5b04 <_Z17storageObjectLoopv+0x168>)
   d5a30:	4835      	ldr	r0, [pc, #212]	; (d5b08 <_Z17storageObjectLoopv+0x16c>)
   d5a32:	f7fe fcb3 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5a36:	4a31      	ldr	r2, [pc, #196]	; (d5afc <_Z17storageObjectLoopv+0x160>)
   d5a38:	4834      	ldr	r0, [pc, #208]	; (d5b0c <_Z17storageObjectLoopv+0x170>)
   d5a3a:	2318      	movs	r3, #24
   d5a3c:	2101      	movs	r1, #1
   d5a3e:	f002 fdaa 	bl	d8596 <_ZN6MB85RC9writeDataEjPKhj>
      returnValue = true;                           // In case I want to test whether values changed
   d5a42:	2701      	movs	r7, #1
      lastSysStatusHash = sysStatusHash;
   d5a44:	602c      	str	r4, [r5, #0]
    size_t currentHash =  std::hash<double>{}(current.internalTempC) + \
   d5a46:	4c32      	ldr	r4, [pc, #200]	; (d5b10 <_Z17storageObjectLoopv+0x174>)
   d5a48:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5a4c:	2200      	movs	r2, #0
   d5a4e:	2300      	movs	r3, #0
   d5a50:	e9cd 0100 	strd	r0, r1, [sp]
   d5a54:	f00b fcec 	bl	e1430 <__aeabi_dcmpeq>
   d5a58:	46a0      	mov	r8, r4
   d5a5a:	2800      	cmp	r0, #0
   d5a5c:	d144      	bne.n	d5ae8 <_Z17storageObjectLoopv+0x14c>
   d5a5e:	4668      	mov	r0, sp
   d5a60:	f7ff ff90 	bl	d5984 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d5a64:	f8d8 6008 	ldr.w	r6, [r8, #8]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d5a68:	f898 300c 	ldrb.w	r3, [r8, #12]
   d5a6c:	4433      	add	r3, r6
   d5a6e:	f8d8 6010 	ldr.w	r6, [r8, #16]
   d5a72:	4433      	add	r3, r6
   d5a74:	f898 6018 	ldrb.w	r6, [r8, #24]
   d5a78:	4433      	add	r3, r6
   d5a7a:	181c      	adds	r4, r3, r0
                      std::hash<double>{}(current.soilMoisture) + \
   d5a7c:	e9d8 0108 	ldrd	r0, r1, [r8, #32]
	return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
   d5a80:	2200      	movs	r2, #0
   d5a82:	2300      	movs	r3, #0
   d5a84:	e9cd 0100 	strd	r0, r1, [sp]
   d5a88:	f00b fcd2 	bl	e1430 <__aeabi_dcmpeq>
   d5a8c:	bb70      	cbnz	r0, d5aec <_Z17storageObjectLoopv+0x150>
   d5a8e:	4668      	mov	r0, sp
   d5a90:	f7ff ff78 	bl	d5984 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
                      std::hash<byte>{}(current.wateringState) + \
   d5a94:	4404      	add	r4, r0
                      std::hash<double>{}(current.soilTempC);
   d5a96:	e9d8 010a 	ldrd	r0, r1, [r8, #40]	; 0x28
   d5a9a:	2200      	movs	r2, #0
   d5a9c:	2300      	movs	r3, #0
   d5a9e:	e9cd 0100 	strd	r0, r1, [sp]
   d5aa2:	f00b fcc5 	bl	e1430 <__aeabi_dcmpeq>
   d5aa6:	bb18      	cbnz	r0, d5af0 <_Z17storageObjectLoopv+0x154>
   d5aa8:	4668      	mov	r0, sp
   d5aaa:	f7ff ff6b 	bl	d5984 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5aae:	4d19      	ldr	r5, [pc, #100]	; (d5b14 <_Z17storageObjectLoopv+0x178>)
   d5ab0:	682b      	ldr	r3, [r5, #0]
                      std::hash<double>{}(current.soilTempC);
   d5ab2:	4404      	add	r4, r0
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5ab4:	429c      	cmp	r4, r3
   d5ab6:	d00b      	beq.n	d5ad0 <_Z17storageObjectLoopv+0x134>
      Log.info("current object stored and hash updated");
   d5ab8:	4917      	ldr	r1, [pc, #92]	; (d5b18 <_Z17storageObjectLoopv+0x17c>)
   d5aba:	4813      	ldr	r0, [pc, #76]	; (d5b08 <_Z17storageObjectLoopv+0x16c>)
   d5abc:	f7fe fc6e 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d5ac0:	4a13      	ldr	r2, [pc, #76]	; (d5b10 <_Z17storageObjectLoopv+0x174>)
   d5ac2:	4812      	ldr	r0, [pc, #72]	; (d5b0c <_Z17storageObjectLoopv+0x170>)
   d5ac4:	2330      	movs	r3, #48	; 0x30
   d5ac6:	2150      	movs	r1, #80	; 0x50
   d5ac8:	f002 fd65 	bl	d8596 <_ZN6MB85RC9writeDataEjPKhj>
      returnValue = true;
   d5acc:	2701      	movs	r7, #1
      lastCurrentHash = currentHash;
   d5ace:	602c      	str	r4, [r5, #0]
}
   d5ad0:	4638      	mov	r0, r7
   d5ad2:	b002      	add	sp, #8
   d5ad4:	ecbd 8b02 	vpop	{d8}
   d5ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5adc:	2000      	movs	r0, #0
   d5ade:	e78e      	b.n	d59fe <_Z17storageObjectLoopv+0x62>
   d5ae0:	2000      	movs	r0, #0
   d5ae2:	e79f      	b.n	d5a24 <_Z17storageObjectLoopv+0x88>
  bool returnValue = false;
   d5ae4:	2700      	movs	r7, #0
   d5ae6:	e7ae      	b.n	d5a46 <_Z17storageObjectLoopv+0xaa>
   d5ae8:	2000      	movs	r0, #0
   d5aea:	e7bb      	b.n	d5a64 <_Z17storageObjectLoopv+0xc8>
   d5aec:	2000      	movs	r0, #0
   d5aee:	e7d1      	b.n	d5a94 <_Z17storageObjectLoopv+0xf8>
   d5af0:	2000      	movs	r0, #0
   d5af2:	e7dc      	b.n	d5aae <_Z17storageObjectLoopv+0x112>
   d5af4:	2700      	movs	r7, #0
   d5af6:	e7eb      	b.n	d5ad0 <_Z17storageObjectLoopv+0x134>
   d5af8:	2003e410 	.word	0x2003e410
   d5afc:	2003e450 	.word	0x2003e450
   d5b00:	2003e41c 	.word	0x2003e41c
   d5b04:	000e3cc4 	.word	0x000e3cc4
   d5b08:	2003e560 	.word	0x2003e560
   d5b0c:	2003e3d4 	.word	0x2003e3d4
   d5b10:	2003e420 	.word	0x2003e420
   d5b14:	2003e418 	.word	0x2003e418
   d5b18:	000e3cec 	.word	0x000e3cec

000d5b1c <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d5b1c:	b513      	push	{r0, r1, r4, lr}
  fram.begin();                                     // Initialize the FRAM module
   d5b1e:	481d      	ldr	r0, [pc, #116]	; (d5b94 <_Z18storageObjectStartv+0x78>)
   d5b20:	f002 fcac 	bl	d847c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5b24:	481b      	ldr	r0, [pc, #108]	; (d5b94 <_Z18storageObjectStartv+0x78>)
   d5b26:	2301      	movs	r3, #1
   d5b28:	f10d 0207 	add.w	r2, sp, #7
   d5b2c:	2100      	movs	r1, #0
   d5b2e:	f002 fce7 	bl	d8500 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d5b32:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d5b36:	2c01      	cmp	r4, #1
   d5b38:	d018      	beq.n	d5b6c <_Z18storageObjectStartv+0x50>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d5b3a:	4816      	ldr	r0, [pc, #88]	; (d5b94 <_Z18storageObjectStartv+0x78>)
   d5b3c:	f002 fca8 	bl	d8490 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5b40:	4a15      	ldr	r2, [pc, #84]	; (d5b98 <_Z18storageObjectStartv+0x7c>)
   d5b42:	4814      	ldr	r0, [pc, #80]	; (d5b94 <_Z18storageObjectStartv+0x78>)
   d5b44:	2304      	movs	r3, #4
   d5b46:	2100      	movs	r1, #0
   d5b48:	f002 fd25 	bl	d8596 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5b4c:	4811      	ldr	r0, [pc, #68]	; (d5b94 <_Z18storageObjectStartv+0x78>)
   d5b4e:	2301      	movs	r3, #1
   d5b50:	f10d 0207 	add.w	r2, sp, #7
   d5b54:	2100      	movs	r1, #0
   d5b56:	f002 fcd3 	bl	d8500 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d5b5a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d5b5e:	2c01      	cmp	r4, #1
   d5b60:	d115      	bne.n	d5b8e <_Z18storageObjectStartv+0x72>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d5b62:	f7ff fecb 	bl	d58fc <_Z18loadSystemDefaultsv>
   d5b66:	4620      	mov	r0, r4
}
   d5b68:	b002      	add	sp, #8
   d5b6a:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d5b6c:	490b      	ldr	r1, [pc, #44]	; (d5b9c <_Z18storageObjectStartv+0x80>)
   d5b6e:	480c      	ldr	r0, [pc, #48]	; (d5ba0 <_Z18storageObjectStartv+0x84>)
   d5b70:	f7fe fc14 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d5b74:	4621      	mov	r1, r4
   d5b76:	4a0b      	ldr	r2, [pc, #44]	; (d5ba4 <_Z18storageObjectStartv+0x88>)
   d5b78:	4806      	ldr	r0, [pc, #24]	; (d5b94 <_Z18storageObjectStartv+0x78>)
   d5b7a:	2318      	movs	r3, #24
   d5b7c:	f002 fcc0 	bl	d8500 <_ZN6MB85RC8readDataEjPhj>
   d5b80:	4a09      	ldr	r2, [pc, #36]	; (d5ba8 <_Z18storageObjectStartv+0x8c>)
   d5b82:	4804      	ldr	r0, [pc, #16]	; (d5b94 <_Z18storageObjectStartv+0x78>)
   d5b84:	2330      	movs	r3, #48	; 0x30
   d5b86:	2150      	movs	r1, #80	; 0x50
   d5b88:	f002 fcba 	bl	d8500 <_ZN6MB85RC8readDataEjPhj>
   d5b8c:	e7eb      	b.n	d5b66 <_Z18storageObjectStartv+0x4a>
      return false;
   d5b8e:	2000      	movs	r0, #0
   d5b90:	e7ea      	b.n	d5b68 <_Z18storageObjectStartv+0x4c>
   d5b92:	bf00      	nop
   d5b94:	2003e3d4 	.word	0x2003e3d4
   d5b98:	000e3d38 	.word	0x000e3d38
   d5b9c:	000e3d13 	.word	0x000e3d13
   d5ba0:	2003e560 	.word	0x2003e560
   d5ba4:	2003e450 	.word	0x2003e450
   d5ba8:	2003e420 	.word	0x2003e420

000d5bac <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d5bac:	ee07 0a90 	vmov	s15, r0
   d5bb0:	ed9f 7a09 	vldr	s14, [pc, #36]	; d5bd8 <_Z17tmp36TemperatureCi+0x2c>
   d5bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
   d5bbc:	ed9f 7a07 	vldr	s14, [pc, #28]	; d5bdc <_Z17tmp36TemperatureCi+0x30>
   d5bc0:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d5bc4:	eddf 7a06 	vldr	s15, [pc, #24]	; d5be0 <_Z17tmp36TemperatureCi+0x34>
   d5bc8:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d5bcc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d5bd0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5bd4:	4770      	bx	lr
   d5bd6:	bf00      	nop
   d5bd8:	454e4000 	.word	0x454e4000
   d5bdc:	457ff000 	.word	0x457ff000
   d5be0:	43fa0000 	.word	0x43fa0000
   d5be4:	00000000 	.word	0x00000000

000d5be8 <_Z16soilTemperarureCi>:
 * 
 */
float soilTemperarureC (int adcValue) {
  // c1, c2, c3 are calibration coefficients for a particular thermistor
  float Vex = 2500.0;                               // circuit excitation in mV
  float Vo = (((float)adcValue) * 3300 / 4095);
   d5be8:	ee07 0a90 	vmov	s15, r0
float soilTemperarureC (int adcValue) {
   d5bec:	b510      	push	{r4, lr}
  float Vo = (((float)adcValue) * 3300 / 4095);
   d5bee:	ed9f 7a36 	vldr	s14, [pc, #216]	; d5cc8 <_Z16soilTemperarureCi+0xe0>
   d5bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
float soilTemperarureC (int adcValue) {
   d5bf6:	ed2d 8b02 	vpush	{d8}
  float Vo = (((float)adcValue) * 3300 / 4095);
   d5bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
   d5bfe:	ed9f 7a33 	vldr	s14, [pc, #204]	; d5ccc <_Z16soilTemperarureCi+0xe4>
   d5c02:	eec7 8a87 	vdiv.f32	s17, s15, s14
float soilTemperarureC (int adcValue) {
   d5c06:	b086      	sub	sp, #24
  float c1 = 0.901747748E-03, c2=2.489190310E-04, c3 = 2.043213857E-07; // Murata NCP18XH103F03RB
  float logRt,Rt,T;
  float R = 10000.0;                                // fixed resistor, 10K

  Rt=R/(Vex/Vo-1);            // calc thermistor resistance, therm next to gnd
   d5c08:	ed9f 7a31 	vldr	s14, [pc, #196]	; d5cd0 <_Z16soilTemperarureCi+0xe8>
   d5c0c:	eec7 7a28 	vdiv.f32	s15, s14, s17
   d5c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d5c18:	ed9f 7a2e 	vldr	s14, [pc, #184]	; d5cd4 <_Z16soilTemperarureCi+0xec>
   d5c1c:	ee87 8a27 	vdiv.f32	s16, s14, s15
  
  if (Rt>0) {
   d5c20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d5c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5c28:	dd46      	ble.n	d5cb8 <_Z16soilTemperarureCi+0xd0>
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
   d5c2a:	eeb0 0a48 	vmov.f32	s0, s16
   d5c2e:	f00a fe4f 	bl	e08d0 <logf>
    logRt = log(Rt);                                //calc log of R
    T = ( 1.0 / (c1 + c2*logRt + c3*logRt*logRt*logRt ) ) - 273.15; // Steinhart Hart, 3nd order, Celcius
   d5c32:	eddf 7a29 	vldr	s15, [pc, #164]	; d5cd8 <_Z16soilTemperarureCi+0xf0>
   d5c36:	ed9f 7a29 	vldr	s14, [pc, #164]	; d5cdc <_Z16soilTemperarureCi+0xf4>
   d5c3a:	eea0 7a27 	vfma.f32	s14, s0, s15
   d5c3e:	eddf 7a28 	vldr	s15, [pc, #160]	; d5ce0 <_Z16soilTemperarureCi+0xf8>
   d5c42:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5c46:	ee67 7a80 	vmul.f32	s15, s15, s0
   d5c4a:	eea7 7a80 	vfma.f32	s14, s15, s0
   d5c4e:	ee17 0a10 	vmov	r0, s14
   d5c52:	f00b f92d 	bl	e0eb0 <__aeabi_f2d>
   d5c56:	4602      	mov	r2, r0
   d5c58:	460b      	mov	r3, r1
   d5c5a:	2000      	movs	r0, #0
   d5c5c:	4921      	ldr	r1, [pc, #132]	; (d5ce4 <_Z16soilTemperarureCi+0xfc>)
   d5c5e:	f00b faa9 	bl	e11b4 <__aeabi_ddiv>
   d5c62:	a317      	add	r3, pc, #92	; (adr r3, d5cc0 <_Z16soilTemperarureCi+0xd8>)
   d5c64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c68:	f00a ffc2 	bl	e0bf0 <__aeabi_dsub>
   d5c6c:	f00b fc70 	bl	e1550 <__aeabi_d2f>
   d5c70:	4604      	mov	r4, r0
  } 
  else T=-99.9;                                     // Invalid Reading

  delay(1000);
   d5c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5c76:	f007 fac3 	bl	dd200 <delay>
  Log.info("Vo: %4.2f mV  Rt= %4.2f mV  T = %4.2f", Vo, Rt, T);
   d5c7a:	ee18 0a90 	vmov	r0, s17
   d5c7e:	f00b f917 	bl	e0eb0 <__aeabi_f2d>
   d5c82:	4602      	mov	r2, r0
   d5c84:	460b      	mov	r3, r1
   d5c86:	4620      	mov	r0, r4
   d5c88:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d5c8c:	f00b f910 	bl	e0eb0 <__aeabi_f2d>
   d5c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5c94:	ee18 0a10 	vmov	r0, s16
   d5c98:	f00b f90a 	bl	e0eb0 <__aeabi_f2d>
   d5c9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5ca0:	e9cd 0100 	strd	r0, r1, [sp]
   d5ca4:	4910      	ldr	r1, [pc, #64]	; (d5ce8 <_Z16soilTemperarureCi+0x100>)
   d5ca6:	4811      	ldr	r0, [pc, #68]	; (d5cec <_Z16soilTemperarureCi+0x104>)
   d5ca8:	f7fe fb78 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>

  return T;
}
   d5cac:	ee00 4a10 	vmov	s0, r4
   d5cb0:	b006      	add	sp, #24
   d5cb2:	ecbd 8b02 	vpop	{d8}
   d5cb6:	bd10      	pop	{r4, pc}
  else T=-99.9;                                     // Invalid Reading
   d5cb8:	4c0d      	ldr	r4, [pc, #52]	; (d5cf0 <_Z16soilTemperarureCi+0x108>)
   d5cba:	e7da      	b.n	d5c72 <_Z16soilTemperarureCi+0x8a>
   d5cbc:	f3af 8000 	nop.w
   d5cc0:	66666666 	.word	0x66666666
   d5cc4:	40711266 	.word	0x40711266
   d5cc8:	454e4000 	.word	0x454e4000
   d5ccc:	457ff000 	.word	0x457ff000
   d5cd0:	451c4000 	.word	0x451c4000
   d5cd4:	461c4000 	.word	0x461c4000
   d5cd8:	39828159 	.word	0x39828159
   d5cdc:	3a6c6344 	.word	0x3a6c6344
   d5ce0:	345b636f 	.word	0x345b636f
   d5ce4:	3ff00000 	.word	0x3ff00000
   d5ce8:	000e3d7a 	.word	0x000e3d7a
   d5cec:	2003e560 	.word	0x2003e560
   d5cf0:	c2c7cccd 	.word	0xc2c7cccd

000d5cf4 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d5cf4:	b510      	push	{r4, lr}
   d5cf6:	b086      	sub	sp, #24
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d5cf8:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d5cfa:	a902      	add	r1, sp, #8
   d5cfc:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d5cfe:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d5d00:	f007 f8da 	bl	dceb8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5d04:	b9b8      	cbnz	r0, d5d36 <_Z12batteryStatev+0x42>
        return ret;
    }
    return get(src, val);
   d5d06:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d5d08:	b10c      	cbz	r4, d5d0e <_Z12batteryStatev+0x1a>
   d5d0a:	6923      	ldr	r3, [r4, #16]
   d5d0c:	b923      	cbnz	r3, d5d18 <_Z12batteryStatev+0x24>
   d5d0e:	4a19      	ldr	r2, [pc, #100]	; (d5d74 <_Z12batteryStatev+0x80>)
   d5d10:	2100      	movs	r1, #0
   d5d12:	200a      	movs	r0, #10
   d5d14:	f007 f890 	bl	dce38 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d5d18:	2300      	movs	r3, #0
   d5d1a:	f8ad 300e 	strh.w	r3, [sp, #14]
   d5d1e:	230c      	movs	r3, #12
   d5d20:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5d24:	ab01      	add	r3, sp, #4
   d5d26:	9304      	str	r3, [sp, #16]
   d5d28:	2304      	movs	r3, #4
   d5d2a:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d5d2c:	aa03      	add	r2, sp, #12
   d5d2e:	6923      	ldr	r3, [r4, #16]
   d5d30:	2101      	movs	r1, #1
   d5d32:	4620      	mov	r0, r4
   d5d34:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.enableSleep) {                                        // Need to take these steps if we are sleeping
   d5d36:	4a10      	ldr	r2, [pc, #64]	; (d5d78 <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d5d38:	4c10      	ldr	r4, [pc, #64]	; (d5d7c <_Z12batteryStatev+0x88>)
  if (sysStatus.enableSleep) {                                        // Need to take these steps if we are sleeping
   d5d3a:	7a52      	ldrb	r2, [r2, #9]
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d5d3c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d5d3e:	bfa8      	it	ge
   d5d40:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d5d42:	7320      	strb	r0, [r4, #12]
  if (sysStatus.enableSleep) {                                        // Need to take these steps if we are sleeping
   d5d44:	b132      	cbz	r2, d5d54 <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d5d46:	480e      	ldr	r0, [pc, #56]	; (d5d80 <_Z12batteryStatev+0x8c>)
   d5d48:	f007 ff86 	bl	ddc58 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d5d4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5d50:	f007 fa56 	bl	dd200 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5d54:	480a      	ldr	r0, [pc, #40]	; (d5d80 <_Z12batteryStatev+0x8c>)
   d5d56:	f007 ff1f 	bl	ddb98 <_ZN9FuelGauge6getSoCEv>
   d5d5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d5d5e:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d5d62:	283c      	cmp	r0, #60	; 0x3c
   d5d64:	bfd4      	ite	le
   d5d66:	2000      	movle	r0, #0
   d5d68:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5d6a:	edc4 7a02 	vstr	s15, [r4, #8]
}
   d5d6e:	b006      	add	sp, #24
   d5d70:	bd10      	pop	{r4, pc}
   d5d72:	bf00      	nop
   d5d74:	000dca69 	.word	0x000dca69
   d5d78:	2003e450 	.word	0x2003e450
   d5d7c:	2003e420 	.word	0x2003e420
   d5d80:	2003e468 	.word	0x2003e468

000d5d84 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d5d84:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5d86:	4c13      	ldr	r4, [pc, #76]	; (d5dd4 <_Z16isItSafeToChargev+0x50>)
  PMIC pmic(true);
   d5d88:	2101      	movs	r1, #1
   d5d8a:	a801      	add	r0, sp, #4
   d5d8c:	f009 fd4d 	bl	df82a <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5d90:	e9d4 6700 	ldrd	r6, r7, [r4]
   d5d94:	2200      	movs	r2, #0
   d5d96:	2300      	movs	r3, #0
   d5d98:	4630      	mov	r0, r6
   d5d9a:	4639      	mov	r1, r7
   d5d9c:	f00b fb52 	bl	e1444 <__aeabi_dcmplt>
   d5da0:	b930      	cbnz	r0, d5db0 <_Z16isItSafeToChargev+0x2c>
   d5da2:	4b0d      	ldr	r3, [pc, #52]	; (d5dd8 <_Z16isItSafeToChargev+0x54>)
   d5da4:	2200      	movs	r2, #0
   d5da6:	4630      	mov	r0, r6
   d5da8:	4639      	mov	r1, r7
   d5daa:	f00b fb69 	bl	e1480 <__aeabi_dcmpgt>
   d5dae:	b158      	cbz	r0, d5dc8 <_Z16isItSafeToChargev+0x44>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5db0:	a801      	add	r0, sp, #4
   d5db2:	f009 fdcd 	bl	df950 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d5db6:	2301      	movs	r3, #1
   d5db8:	7323      	strb	r3, [r4, #12]
    return false;
   d5dba:	2400      	movs	r4, #0
  PMIC pmic(true);
   d5dbc:	a801      	add	r0, sp, #4
   d5dbe:	f009 fd43 	bl	df848 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d5dc2:	4620      	mov	r0, r4
   d5dc4:	b002      	add	sp, #8
   d5dc6:	bdd0      	pop	{r4, r6, r7, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d5dc8:	a801      	add	r0, sp, #4
   d5dca:	f009 fdaa 	bl	df922 <_ZN4PMIC14enableChargingEv>
    return true;
   d5dce:	2401      	movs	r4, #1
   d5dd0:	e7f4      	b.n	d5dbc <_Z16isItSafeToChargev+0x38>
   d5dd2:	bf00      	nop
   d5dd4:	2003e420 	.word	0x2003e420
   d5dd8:	40428000 	.word	0x40428000

000d5ddc <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d5ddc:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5dde:	4d19      	ldr	r5, [pc, #100]	; (d5e44 <_Z17getSignalStrengthv+0x68>)
   d5de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d5de2:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5de4:	ac04      	add	r4, sp, #16
   d5de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5dec:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5df0:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d5df4:	4914      	ldr	r1, [pc, #80]	; (d5e48 <_Z17getSignalStrengthv+0x6c>)
   d5df6:	a80e      	add	r0, sp, #56	; 0x38
   d5df8:	f007 fa56 	bl	dd2a8 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d5dfc:	a80e      	add	r0, sp, #56	; 0x38
   d5dfe:	f007 faa6 	bl	dd34e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d5e02:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d5e04:	a80e      	add	r0, sp, #56	; 0x38
   d5e06:	f007 fabd 	bl	dd384 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d5e0a:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d5e0c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d5e10:	f007 fae8 	bl	dd3e4 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5e14:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d5e16:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5e1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d5e1e:	f00b f847 	bl	e0eb0 <__aeabi_f2d>
   d5e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5e26:	4628      	mov	r0, r5
   d5e28:	f00b f842 	bl	e0eb0 <__aeabi_f2d>
   d5e2c:	e9cd 0100 	strd	r0, r1, [sp]
   d5e30:	4a06      	ldr	r2, [pc, #24]	; (d5e4c <_Z17getSignalStrengthv+0x70>)
   d5e32:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d5e36:	4806      	ldr	r0, [pc, #24]	; (d5e50 <_Z17getSignalStrengthv+0x74>)
   d5e38:	2140      	movs	r1, #64	; 0x40
   d5e3a:	f007 f985 	bl	dd148 <snprintf>
   d5e3e:	b019      	add	sp, #100	; 0x64
   d5e40:	bd30      	pop	{r4, r5, pc}
   d5e42:	bf00      	nop
   d5e44:	000e3e10 	.word	0x000e3e10
   d5e48:	2003e51c 	.word	0x2003e51c
   d5e4c:	000e3da0 	.word	0x000e3da0
   d5e50:	2003e15e 	.word	0x2003e15e

000d5e54 <_Z16takeMeasurementsv>:
    digitalWrite(SOIL_POWER_PIN, HIGH);             // Power up the soil sensor
   d5e54:	4b3b      	ldr	r3, [pc, #236]	; (d5f44 <_Z16takeMeasurementsv+0xf0>)
bool takeMeasurements() { 
   d5e56:	b537      	push	{r0, r1, r2, r4, r5, lr}
    digitalWrite(SOIL_POWER_PIN, HIGH);             // Power up the soil sensor
   d5e58:	2101      	movs	r1, #1
   d5e5a:	8818      	ldrh	r0, [r3, #0]
    current.internalTempC = tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5e5c:	4c3a      	ldr	r4, [pc, #232]	; (d5f48 <_Z16takeMeasurementsv+0xf4>)
    digitalWrite(SOIL_POWER_PIN, HIGH);             // Power up the soil sensor
   d5e5e:	f00a fbb2 	bl	e05c6 <digitalWrite>
    delay(100);                                     // Recommendation from Jay Ham at CSU - have not tested to see if it can be shorter
   d5e62:	2064      	movs	r0, #100	; 0x64
   d5e64:	f007 f9cc 	bl	dd200 <delay>
    current.internalTempC = tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5e68:	4b38      	ldr	r3, [pc, #224]	; (d5f4c <_Z16takeMeasurementsv+0xf8>)
   d5e6a:	8818      	ldrh	r0, [r3, #0]
   d5e6c:	f00a fbd7 	bl	e061e <analogRead>
   d5e70:	f7ff fe9c 	bl	d5bac <_Z17tmp36TemperatureCi>
   d5e74:	ee10 0a10 	vmov	r0, s0
   d5e78:	f00b f81a 	bl	e0eb0 <__aeabi_f2d>
    snprintf(internalTempStr,sizeof(internalTempStr), "%4.2f C", current.internalTempC);
   d5e7c:	4a34      	ldr	r2, [pc, #208]	; (d5f50 <_Z16takeMeasurementsv+0xfc>)
    current.internalTempC = tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5e7e:	e9c4 0100 	strd	r0, r1, [r4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%4.2f C", current.internalTempC);
   d5e82:	e9cd 0100 	strd	r0, r1, [sp]
   d5e86:	2110      	movs	r1, #16
   d5e88:	4832      	ldr	r0, [pc, #200]	; (d5f54 <_Z16takeMeasurementsv+0x100>)
   d5e8a:	f007 f95d 	bl	dd148 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d5e8e:	4a31      	ldr	r2, [pc, #196]	; (d5f54 <_Z16takeMeasurementsv+0x100>)
   d5e90:	4931      	ldr	r1, [pc, #196]	; (d5f58 <_Z16takeMeasurementsv+0x104>)
   d5e92:	4832      	ldr	r0, [pc, #200]	; (d5f5c <_Z16takeMeasurementsv+0x108>)
   d5e94:	f7fe fa82 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    current.soilTempC = soilTemperarureC(analogRead(SOIL_TEMP_PIN));
   d5e98:	4b31      	ldr	r3, [pc, #196]	; (d5f60 <_Z16takeMeasurementsv+0x10c>)
   d5e9a:	8818      	ldrh	r0, [r3, #0]
   d5e9c:	f00a fbbf 	bl	e061e <analogRead>
   d5ea0:	f7ff fea2 	bl	d5be8 <_Z16soilTemperarureCi>
   d5ea4:	ee10 0a10 	vmov	r0, s0
   d5ea8:	f00b f802 	bl	e0eb0 <__aeabi_f2d>
    snprintf(soilTempStr,sizeof(soilTempStr), "%4.2f C", current.soilTempC);
   d5eac:	4a28      	ldr	r2, [pc, #160]	; (d5f50 <_Z16takeMeasurementsv+0xfc>)
    current.soilTempC = soilTemperarureC(analogRead(SOIL_TEMP_PIN));
   d5eae:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    snprintf(soilTempStr,sizeof(soilTempStr), "%4.2f C", current.soilTempC);
   d5eb2:	e9cd 0100 	strd	r0, r1, [sp]
   d5eb6:	2110      	movs	r1, #16
   d5eb8:	482a      	ldr	r0, [pc, #168]	; (d5f64 <_Z16takeMeasurementsv+0x110>)
   d5eba:	f007 f945 	bl	dd148 <snprintf>
    Log.info("Soil Temperature is %s",soilTempStr);
   d5ebe:	4a29      	ldr	r2, [pc, #164]	; (d5f64 <_Z16takeMeasurementsv+0x110>)
   d5ec0:	4929      	ldr	r1, [pc, #164]	; (d5f68 <_Z16takeMeasurementsv+0x114>)
   d5ec2:	4826      	ldr	r0, [pc, #152]	; (d5f5c <_Z16takeMeasurementsv+0x108>)
   d5ec4:	f7fe fa6a 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    current.soilMoisture = map(analogRead(SOIL_MOISTURE_PIN),0,3722,0,100);        // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5ec8:	4b28      	ldr	r3, [pc, #160]	; (d5f6c <_Z16takeMeasurementsv+0x118>)
   d5eca:	8818      	ldrh	r0, [r3, #0]
   d5ecc:	f00a fba7 	bl	e061e <analogRead>
   d5ed0:	2364      	movs	r3, #100	; 0x64
   d5ed2:	9300      	str	r3, [sp, #0]
   d5ed4:	2300      	movs	r3, #0
   d5ed6:	4619      	mov	r1, r3
   d5ed8:	f640 628a 	movw	r2, #3722	; 0xe8a
   d5edc:	f007 f984 	bl	dd1e8 <_Z3mapiiiii>
   d5ee0:	f00a ffd4 	bl	e0e8c <__aeabi_i2d>
    snprintf(soilMoistureStr,sizeof(soilMoistureStr), "%4.2f%%", current.soilMoisture);
   d5ee4:	4a22      	ldr	r2, [pc, #136]	; (d5f70 <_Z16takeMeasurementsv+0x11c>)
    current.soilMoisture = map(analogRead(SOIL_MOISTURE_PIN),0,3722,0,100);        // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5ee6:	e9c4 0108 	strd	r0, r1, [r4, #32]
    snprintf(soilMoistureStr,sizeof(soilMoistureStr), "%4.2f%%", current.soilMoisture);
   d5eea:	e9cd 0100 	strd	r0, r1, [sp]
   d5eee:	2110      	movs	r1, #16
   d5ef0:	4820      	ldr	r0, [pc, #128]	; (d5f74 <_Z16takeMeasurementsv+0x120>)
   d5ef2:	f007 f929 	bl	dd148 <snprintf>
    Log.info("Soil Moisture is %s",soilMoistureStr);
   d5ef6:	4a1f      	ldr	r2, [pc, #124]	; (d5f74 <_Z16takeMeasurementsv+0x120>)
   d5ef8:	491f      	ldr	r1, [pc, #124]	; (d5f78 <_Z16takeMeasurementsv+0x124>)
   d5efa:	4818      	ldr	r0, [pc, #96]	; (d5f5c <_Z16takeMeasurementsv+0x108>)
   d5efc:	f7fe fa4e 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    if (current.soilMoisture < sysStatus.wateringThresholdPct) current.wateringState = 1;         // If the soil is too dry, water
   d5f00:	4b1e      	ldr	r3, [pc, #120]	; (d5f7c <_Z16takeMeasurementsv+0x128>)
   d5f02:	68d8      	ldr	r0, [r3, #12]
   d5f04:	f00a ffd4 	bl	e0eb0 <__aeabi_f2d>
   d5f08:	4602      	mov	r2, r0
   d5f0a:	460b      	mov	r3, r1
   d5f0c:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   d5f10:	f00b fa98 	bl	e1444 <__aeabi_dcmplt>
   d5f14:	4625      	mov	r5, r4
   d5f16:	b150      	cbz	r0, d5f2e <_Z16takeMeasurementsv+0xda>
   d5f18:	2301      	movs	r3, #1
   d5f1a:	762b      	strb	r3, [r5, #24]
    batteryState();
   d5f1c:	f7ff feea 	bl	d5cf4 <_Z12batteryStatev>
    isItSafeToCharge();
   d5f20:	f7ff ff30 	bl	d5d84 <_Z16isItSafeToChargev>
    getSignalStrength();
   d5f24:	f7ff ff5a 	bl	d5ddc <_Z17getSignalStrengthv>
}
   d5f28:	2001      	movs	r0, #1
   d5f2a:	b003      	add	sp, #12
   d5f2c:	bd30      	pop	{r4, r5, pc}
    else if (current.soilTempC > 38) current.wateringState = 1;                                   // If the soil it too hot, water           
   d5f2e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   d5f32:	4b13      	ldr	r3, [pc, #76]	; (d5f80 <_Z16takeMeasurementsv+0x12c>)
   d5f34:	2200      	movs	r2, #0
   d5f36:	f00b faa3 	bl	e1480 <__aeabi_dcmpgt>
   d5f3a:	2800      	cmp	r0, #0
   d5f3c:	d1ec      	bne.n	d5f18 <_Z16takeMeasurementsv+0xc4>
    else current.wateringState = 0;                                                               // Else, don't
   d5f3e:	7620      	strb	r0, [r4, #24]
   d5f40:	e7ec      	b.n	d5f1c <_Z16takeMeasurementsv+0xc8>
   d5f42:	bf00      	nop
   d5f44:	000e39d2 	.word	0x000e39d2
   d5f48:	2003e420 	.word	0x2003e420
   d5f4c:	000e39d6 	.word	0x000e39d6
   d5f50:	000e3db9 	.word	0x000e3db9
   d5f54:	2003e14e 	.word	0x2003e14e
   d5f58:	000e3dc1 	.word	0x000e3dc1
   d5f5c:	2003e560 	.word	0x2003e560
   d5f60:	000e39d4 	.word	0x000e39d4
   d5f64:	2003e1ae 	.word	0x2003e1ae
   d5f68:	000e3ddc 	.word	0x000e3ddc
   d5f6c:	000e39d0 	.word	0x000e39d0
   d5f70:	000e3df3 	.word	0x000e3df3
   d5f74:	2003e19e 	.word	0x2003e19e
   d5f78:	000e3dfb 	.word	0x000e3dfb
   d5f7c:	2003e450 	.word	0x2003e450
   d5f80:	40430000 	.word	0x40430000

000d5f84 <_GLOBAL__sub_I_fuelGauge>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d5f84:	4801      	ldr	r0, [pc, #4]	; (d5f8c <_GLOBAL__sub_I_fuelGauge+0x8>)
   d5f86:	2100      	movs	r1, #0
   d5f88:	f007 bdb8 	b.w	ddafc <_ZN9FuelGaugeC1Eb>
   d5f8c:	2003e468 	.word	0x2003e468

000d5f90 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5f90:	4770      	bx	lr

000d5f92 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5f92:	b510      	push	{r4, lr}
}
   d5f94:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5f96:	4604      	mov	r4, r0
}
   d5f98:	f00a fbd2 	bl	e0740 <_ZdlPvj>
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	bd10      	pop	{r4, pc}

000d5fa0 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5fa0:	b40e      	push	{r1, r2, r3}
   d5fa2:	b510      	push	{r4, lr}
   d5fa4:	b08d      	sub	sp, #52	; 0x34
   d5fa6:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5fa8:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5faa:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5fae:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5fb0:	2300      	movs	r3, #0
   d5fb2:	2020      	movs	r0, #32
   d5fb4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5fb8:	e9cd 4200 	strd	r4, r2, [sp]
   d5fbc:	2001      	movs	r0, #1
   d5fbe:	aa04      	add	r2, sp, #16
   d5fc0:	f006 ff5a 	bl	dce78 <log_message_v>
}
   d5fc4:	b00d      	add	sp, #52	; 0x34
   d5fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5fca:	b003      	add	sp, #12
   d5fcc:	4770      	bx	lr

000d5fce <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d5fce:	b40e      	push	{r1, r2, r3}
   d5fd0:	b510      	push	{r4, lr}
   d5fd2:	b08d      	sub	sp, #52	; 0x34
   d5fd4:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5fd6:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5fd8:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5fdc:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5fde:	2300      	movs	r3, #0
   d5fe0:	2020      	movs	r0, #32
   d5fe2:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5fe6:	e9cd 4200 	strd	r4, r2, [sp]
   d5fea:	2032      	movs	r0, #50	; 0x32
   d5fec:	aa04      	add	r2, sp, #16
   d5fee:	f006 ff43 	bl	dce78 <log_message_v>
}
   d5ff2:	b00d      	add	sp, #52	; 0x34
   d5ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5ff8:	b003      	add	sp, #12
   d5ffa:	4770      	bx	lr

000d5ffc <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5ffc:	b510      	push	{r4, lr}
   d5ffe:	7202      	strb	r2, [r0, #8]
   d6000:	22ff      	movs	r2, #255	; 0xff
   d6002:	8142      	strh	r2, [r0, #10]
   d6004:	2200      	movs	r2, #0
   d6006:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d600a:	6142      	str	r2, [r0, #20]
   d600c:	7602      	strb	r2, [r0, #24]
   d600e:	61c2      	str	r2, [r0, #28]
    instance = this;
   d6010:	4a02      	ldr	r2, [pc, #8]	; (d601c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6012:	4c03      	ldr	r4, [pc, #12]	; (d6020 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d6014:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6016:	e9c0 4100 	strd	r4, r1, [r0]
}
   d601a:	bd10      	pop	{r4, pc}
   d601c:	2003e474 	.word	0x2003e474
   d6020:	000e403c 	.word	0x000e403c

000d6024 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d6024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6028:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d602c:	4604      	mov	r4, r0
   d602e:	4689      	mov	r9, r1
   d6030:	4616      	mov	r6, r2
   d6032:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d6034:	f1b8 0f00 	cmp.w	r8, #0
   d6038:	d002      	beq.n	d6040 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f007 fea6 	bl	ddd8c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6040:	7a21      	ldrb	r1, [r4, #8]
   d6042:	6860      	ldr	r0, [r4, #4]
   d6044:	f007 fe7f 	bl	ddd46 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6048:	6860      	ldr	r0, [r4, #4]
   d604a:	6803      	ldr	r3, [r0, #0]
   d604c:	4649      	mov	r1, r9
   d604e:	689b      	ldr	r3, [r3, #8]
   d6050:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d6052:	6860      	ldr	r0, [r4, #4]
   d6054:	2100      	movs	r1, #0
   d6056:	f007 fe95 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d605a:	4605      	mov	r5, r0
   d605c:	bb00      	cbnz	r0, d60a0 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d605e:	2301      	movs	r3, #1
   d6060:	7a21      	ldrb	r1, [r4, #8]
   d6062:	6860      	ldr	r0, [r4, #4]
   d6064:	463a      	mov	r2, r7
   d6066:	f007 fe5c 	bl	ddd22 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d606a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d606c:	4603      	mov	r3, r0
        if (count == num) {
   d606e:	d109      	bne.n	d6084 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d6070:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d6072:	42be      	cmp	r6, r7
   d6074:	d01c      	beq.n	d60b0 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d6076:	6860      	ldr	r0, [r4, #4]
   d6078:	6803      	ldr	r3, [r0, #0]
   d607a:	695b      	ldr	r3, [r3, #20]
   d607c:	4798      	blx	r3
   d607e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d6082:	e7f6      	b.n	d6072 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d6084:	490b      	ldr	r1, [pc, #44]	; (d60b4 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d6086:	480c      	ldr	r0, [pc, #48]	; (d60b8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6088:	464a      	mov	r2, r9
   d608a:	f7ff ffa0 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d608e:	f1b8 0f00 	cmp.w	r8, #0
   d6092:	d002      	beq.n	d609a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d6094:	6860      	ldr	r0, [r4, #4]
   d6096:	f007 fe82 	bl	ddd9e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d609a:	4628      	mov	r0, r5
   d609c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d60a0:	4603      	mov	r3, r0
   d60a2:	4906      	ldr	r1, [pc, #24]	; (d60bc <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d60a4:	4804      	ldr	r0, [pc, #16]	; (d60b8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d60a6:	464a      	mov	r2, r9
   d60a8:	f7ff ff91 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d60ac:	2500      	movs	r5, #0
   d60ae:	e7ee      	b.n	d608e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d60b0:	2501      	movs	r5, #1
   d60b2:	e7ec      	b.n	d608e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d60b4:	000e3e38 	.word	0x000e3e38
   d60b8:	2003e470 	.word	0x2003e470
   d60bc:	000e3e5d 	.word	0x000e3e5d

000d60c0 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d60c0:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d60c2:	9300      	str	r3, [sp, #0]
   d60c4:	2301      	movs	r3, #1
   d60c6:	f7ff ffad 	bl	d6024 <_ZN6AB180513readRegistersEhPhjb>
}
   d60ca:	b003      	add	sp, #12
   d60cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d60d0 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d60d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d60d2:	8943      	ldrh	r3, [r0, #10]
   d60d4:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d60d6:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d60d8:	d010      	beq.n	d60fc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d60da:	4e19      	ldr	r6, [pc, #100]	; (d6140 <_ZN6AB180510detectChipEv+0x70>)
   d60dc:	4d19      	ldr	r5, [pc, #100]	; (d6144 <_ZN6AB180510detectChipEv+0x74>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d60de:	f006 fccb 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d60e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d60e6:	d209      	bcs.n	d60fc <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d60e8:	8960      	ldrh	r0, [r4, #10]
   d60ea:	f00a fa85 	bl	e05f8 <digitalRead>
   d60ee:	2801      	cmp	r0, #1
   d60f0:	d004      	beq.n	d60fc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d60f2:	4631      	mov	r1, r6
   d60f4:	4628      	mov	r0, r5
   d60f6:	f7fe f951 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d60fa:	e7f0      	b.n	d60de <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d60fc:	2301      	movs	r3, #1
   d60fe:	f10d 0207 	add.w	r2, sp, #7
   d6102:	2128      	movs	r1, #40	; 0x28
   d6104:	4620      	mov	r0, r4
   d6106:	f7ff ffdb 	bl	d60c0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d610a:	b930      	cbnz	r0, d611a <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d610c:	480d      	ldr	r0, [pc, #52]	; (d6144 <_ZN6AB180510detectChipEv+0x74>)
   d610e:	490e      	ldr	r1, [pc, #56]	; (d6148 <_ZN6AB180510detectChipEv+0x78>)
   d6110:	f7fe f944 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d6114:	2000      	movs	r0, #0
}
   d6116:	b002      	add	sp, #8
   d6118:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d611a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d611e:	2b18      	cmp	r3, #24
   d6120:	d1f4      	bne.n	d610c <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d6122:	2301      	movs	r3, #1
   d6124:	f10d 0207 	add.w	r2, sp, #7
   d6128:	2129      	movs	r1, #41	; 0x29
   d612a:	4620      	mov	r0, r4
   d612c:	f7ff ffc8 	bl	d60c0 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d6130:	2800      	cmp	r0, #0
   d6132:	d0eb      	beq.n	d610c <_ZN6AB180510detectChipEv+0x3c>
   d6134:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6138:	2b05      	cmp	r3, #5
   d613a:	d1e7      	bne.n	d610c <_ZN6AB180510detectChipEv+0x3c>
   d613c:	e7eb      	b.n	d6116 <_ZN6AB180510detectChipEv+0x46>
   d613e:	bf00      	nop
   d6140:	000e3e81 	.word	0x000e3e81
   d6144:	2003e470 	.word	0x2003e470
   d6148:	000e3e96 	.word	0x000e3e96

000d614c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6150:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d6154:	4604      	mov	r4, r0
   d6156:	460f      	mov	r7, r1
   d6158:	4615      	mov	r5, r2
   d615a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d615c:	f1b8 0f00 	cmp.w	r8, #0
   d6160:	d002      	beq.n	d6168 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d6162:	6840      	ldr	r0, [r0, #4]
   d6164:	f007 fe12 	bl	ddd8c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6168:	7a21      	ldrb	r1, [r4, #8]
   d616a:	6860      	ldr	r0, [r4, #4]
   d616c:	f007 fdeb 	bl	ddd46 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6170:	6860      	ldr	r0, [r4, #4]
   d6172:	6803      	ldr	r3, [r0, #0]
   d6174:	4639      	mov	r1, r7
   d6176:	689b      	ldr	r3, [r3, #8]
   d6178:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d617a:	442e      	add	r6, r5
   d617c:	42b5      	cmp	r5, r6
   d617e:	6860      	ldr	r0, [r4, #4]
   d6180:	d005      	beq.n	d618e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d6182:	6803      	ldr	r3, [r0, #0]
   d6184:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6188:	689b      	ldr	r3, [r3, #8]
   d618a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d618c:	e7f6      	b.n	d617c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d618e:	2101      	movs	r1, #1
   d6190:	f007 fdf8 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6194:	4603      	mov	r3, r0
   d6196:	b170      	cbz	r0, d61b6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d6198:	4908      	ldr	r1, [pc, #32]	; (d61bc <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d619a:	4809      	ldr	r0, [pc, #36]	; (d61c0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d619c:	463a      	mov	r2, r7
   d619e:	f7ff ff16 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d61a2:	2500      	movs	r5, #0
    }

    if (lock) {
   d61a4:	f1b8 0f00 	cmp.w	r8, #0
   d61a8:	d002      	beq.n	d61b0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d61aa:	6860      	ldr	r0, [r4, #4]
   d61ac:	f007 fdf7 	bl	ddd9e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d61b0:	4628      	mov	r0, r5
   d61b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d61b6:	2501      	movs	r5, #1
   d61b8:	e7f4      	b.n	d61a4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d61ba:	bf00      	nop
   d61bc:	000e3ea3 	.word	0x000e3ea3
   d61c0:	2003e470 	.word	0x2003e470

000d61c4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d61c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d61c6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d61ca:	9300      	str	r3, [sp, #0]
   d61cc:	f10d 020f 	add.w	r2, sp, #15
   d61d0:	2301      	movs	r3, #1
   d61d2:	f7ff ffbb 	bl	d614c <_ZN6AB180514writeRegistersEhPKhjb>
}
   d61d6:	b005      	add	sp, #20
   d61d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d61dc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d61dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d61de:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d61e0:	460c      	mov	r4, r1
   d61e2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d61e4:	491a      	ldr	r1, [pc, #104]	; (d6250 <_ZN6AB18056setWDTEi+0x74>)
   d61e6:	481b      	ldr	r0, [pc, #108]	; (d6254 <_ZN6AB18056setWDTEi+0x78>)
   d61e8:	f7fe f8d8 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d61ec:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d61ee:	bfb8      	it	lt
   d61f0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d61f2:	b97c      	cbnz	r4, d6214 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d61f4:	2301      	movs	r3, #1
   d61f6:	4622      	mov	r2, r4
   d61f8:	211b      	movs	r1, #27
   d61fa:	4628      	mov	r0, r5
   d61fc:	f7ff ffe2 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6200:	4915      	ldr	r1, [pc, #84]	; (d6258 <_ZN6AB18056setWDTEi+0x7c>)
   d6202:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d6204:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6206:	4813      	ldr	r0, [pc, #76]	; (d6254 <_ZN6AB18056setWDTEi+0x78>)
   d6208:	f7ff feca 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d620c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d620e:	616c      	str	r4, [r5, #20]
}
   d6210:	4630      	mov	r0, r6
   d6212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d6214:	2c03      	cmp	r4, #3
   d6216:	dd19      	ble.n	d624c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d6218:	10a7      	asrs	r7, r4, #2
   d621a:	2f1f      	cmp	r7, #31
   d621c:	bfa8      	it	ge
   d621e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6220:	00ba      	lsls	r2, r7, #2
   d6222:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d6226:	2301      	movs	r3, #1
   d6228:	b2d2      	uxtb	r2, r2
   d622a:	211b      	movs	r1, #27
   d622c:	4628      	mov	r0, r5
   d622e:	f7ff ffc9 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6232:	463a      	mov	r2, r7
   d6234:	4603      	mov	r3, r0
   d6236:	4909      	ldr	r1, [pc, #36]	; (d625c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6238:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d623a:	4806      	ldr	r0, [pc, #24]	; (d6254 <_ZN6AB18056setWDTEi+0x78>)
   d623c:	f7ff feb0 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6240:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6244:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d6246:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6248:	616f      	str	r7, [r5, #20]
   d624a:	e7e1      	b.n	d6210 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d624c:	2701      	movs	r7, #1
   d624e:	e7e7      	b.n	d6220 <_ZN6AB18056setWDTEi+0x44>
   d6250:	000e3ec8 	.word	0x000e3ec8
   d6254:	2003e470 	.word	0x2003e470
   d6258:	000e3ed2 	.word	0x000e3ed2
   d625c:	000e3eee 	.word	0x000e3eee

000d6260 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6260:	460b      	mov	r3, r1
    if (instance) {
   d6262:	4907      	ldr	r1, [pc, #28]	; (d6280 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6264:	4602      	mov	r2, r0
    if (instance) {
   d6266:	6808      	ldr	r0, [r1, #0]
   d6268:	b148      	cbz	r0, d627e <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d626a:	2b00      	cmp	r3, #0
   d626c:	bf08      	it	eq
   d626e:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d6272:	d104      	bne.n	d627e <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d6274:	68c3      	ldr	r3, [r0, #12]
   d6276:	b113      	cbz	r3, d627e <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d6278:	2100      	movs	r1, #0
   d627a:	f7ff bfaf 	b.w	d61dc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d627e:	4770      	bx	lr
   d6280:	2003e474 	.word	0x2003e474

000d6284 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d6284:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6288:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d628c:	4605      	mov	r5, r0
   d628e:	4616      	mov	r6, r2
   d6290:	461f      	mov	r7, r3
    if (lock) {
   d6292:	f1b8 0f00 	cmp.w	r8, #0
   d6296:	d004      	beq.n	d62a2 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d6298:	6840      	ldr	r0, [r0, #4]
   d629a:	9101      	str	r1, [sp, #4]
   d629c:	f007 fd76 	bl	ddd8c <_ZN7TwoWire4lockEv>
   d62a0:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d62a2:	9101      	str	r1, [sp, #4]
   d62a4:	2300      	movs	r3, #0
   d62a6:	f10d 020f 	add.w	r2, sp, #15
   d62aa:	4628      	mov	r0, r5
   d62ac:	f7ff ff08 	bl	d60c0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d62b0:	4604      	mov	r4, r0
   d62b2:	b160      	cbz	r0, d62ce <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d62b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d62b8:	ea03 0206 	and.w	r2, r3, r6
   d62bc:	433a      	orrs	r2, r7
        if (newValue != value) {
   d62be:	4293      	cmp	r3, r2
   d62c0:	d005      	beq.n	d62ce <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d62c2:	9901      	ldr	r1, [sp, #4]
   d62c4:	2300      	movs	r3, #0
   d62c6:	4628      	mov	r0, r5
   d62c8:	f7ff ff7c 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
   d62cc:	4604      	mov	r4, r0
    if (lock) {
   d62ce:	f1b8 0f00 	cmp.w	r8, #0
   d62d2:	d002      	beq.n	d62da <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d62d4:	6868      	ldr	r0, [r5, #4]
   d62d6:	f007 fd62 	bl	ddd9e <_ZN7TwoWire6unlockEv>
}
   d62da:	4620      	mov	r0, r4
   d62dc:	b004      	add	sp, #16
   d62de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d62e4 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d62e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d62e6:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d62e8:	460a      	mov	r2, r1
   d62ea:	483f      	ldr	r0, [pc, #252]	; (d63e8 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d62ec:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d62ee:	493f      	ldr	r1, [pc, #252]	; (d63ec <_ZN6AB180511resetConfigEm+0x108>)
   d62f0:	f7ff fe56 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d62f4:	6860      	ldr	r0, [r4, #4]
   d62f6:	f007 fd49 	bl	ddd8c <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d62fa:	2300      	movs	r3, #0
   d62fc:	461a      	mov	r2, r3
   d62fe:	210f      	movs	r1, #15
   d6300:	4620      	mov	r0, r4
   d6302:	f7ff ff5f 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d6306:	2300      	movs	r3, #0
   d6308:	2213      	movs	r2, #19
   d630a:	2110      	movs	r1, #16
   d630c:	4620      	mov	r0, r4
   d630e:	f7ff ff59 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d6312:	2300      	movs	r3, #0
   d6314:	223c      	movs	r2, #60	; 0x3c
   d6316:	2111      	movs	r1, #17
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff ff53 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d631e:	2300      	movs	r3, #0
   d6320:	22e0      	movs	r2, #224	; 0xe0
   d6322:	2112      	movs	r1, #18
   d6324:	4620      	mov	r0, r4
   d6326:	f7ff ff4d 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d632a:	2300      	movs	r3, #0
   d632c:	2226      	movs	r2, #38	; 0x26
   d632e:	2113      	movs	r1, #19
   d6330:	4620      	mov	r0, r4
   d6332:	f7ff ff47 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d6336:	2300      	movs	r3, #0
   d6338:	461a      	mov	r2, r3
   d633a:	2117      	movs	r1, #23
   d633c:	4620      	mov	r0, r4
   d633e:	f7ff ff41 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d6342:	f015 0301 	ands.w	r3, r5, #1
   d6346:	d048      	beq.n	d63da <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d6348:	2300      	movs	r3, #0
   d634a:	9300      	str	r3, [sp, #0]
   d634c:	22e3      	movs	r2, #227	; 0xe3
   d634e:	2323      	movs	r3, #35	; 0x23
   d6350:	2118      	movs	r1, #24
   d6352:	4620      	mov	r0, r4
   d6354:	f7ff ff96 	bl	d6284 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d6358:	2300      	movs	r3, #0
   d635a:	461a      	mov	r2, r3
   d635c:	2119      	movs	r1, #25
   d635e:	4620      	mov	r0, r4
   d6360:	f7ff ff30 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d6364:	2300      	movs	r3, #0
   d6366:	461a      	mov	r2, r3
   d6368:	211a      	movs	r1, #26
   d636a:	4620      	mov	r0, r4
   d636c:	f7ff ff2a 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d6370:	2300      	movs	r3, #0
   d6372:	461a      	mov	r2, r3
   d6374:	211b      	movs	r1, #27
   d6376:	4620      	mov	r0, r4
   d6378:	f7ff ff24 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d637c:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d6380:	f04f 0300 	mov.w	r3, #0
   d6384:	bf0c      	ite	eq
   d6386:	461a      	moveq	r2, r3
   d6388:	2288      	movne	r2, #136	; 0x88
   d638a:	211c      	movs	r1, #28
   d638c:	4620      	mov	r0, r4
   d638e:	f7ff ff19 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d6392:	2300      	movs	r3, #0
   d6394:	461a      	mov	r2, r3
   d6396:	2120      	movs	r1, #32
   d6398:	4620      	mov	r0, r4
   d639a:	f7ff ff13 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d639e:	2300      	movs	r3, #0
   d63a0:	22f0      	movs	r2, #240	; 0xf0
   d63a2:	2121      	movs	r1, #33	; 0x21
   d63a4:	4620      	mov	r0, r4
   d63a6:	f7ff ff0d 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d63aa:	2300      	movs	r3, #0
   d63ac:	461a      	mov	r2, r3
   d63ae:	2126      	movs	r1, #38	; 0x26
   d63b0:	4620      	mov	r0, r4
   d63b2:	f7ff ff07 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d63b6:	2300      	movs	r3, #0
   d63b8:	2280      	movs	r2, #128	; 0x80
   d63ba:	2127      	movs	r1, #39	; 0x27
   d63bc:	4620      	mov	r0, r4
   d63be:	f7ff ff01 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d63c2:	2300      	movs	r3, #0
   d63c4:	461a      	mov	r2, r3
   d63c6:	2130      	movs	r1, #48	; 0x30
   d63c8:	4620      	mov	r0, r4
   d63ca:	f7ff fefb 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d63ce:	6860      	ldr	r0, [r4, #4]
   d63d0:	f007 fce5 	bl	ddd9e <_ZN7TwoWire6unlockEv>
}
   d63d4:	2001      	movs	r0, #1
   d63d6:	b003      	add	sp, #12
   d63d8:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d63da:	2223      	movs	r2, #35	; 0x23
   d63dc:	2118      	movs	r1, #24
   d63de:	4620      	mov	r0, r4
   d63e0:	f7ff fef0 	bl	d61c4 <_ZN6AB180513writeRegisterEhhb>
   d63e4:	e7b8      	b.n	d6358 <_ZN6AB180511resetConfigEm+0x74>
   d63e6:	bf00      	nop
   d63e8:	2003e470 	.word	0x2003e470
   d63ec:	000e3f12 	.word	0x000e3f12

000d63f0 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d63f0:	b513      	push	{r0, r1, r4, lr}
   d63f2:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d63f4:	f10d 0207 	add.w	r2, sp, #7
   d63f8:	f7ff fe62 	bl	d60c0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d63fc:	b128      	cbz	r0, d640a <_ZN6AB180510isBitClearEhhb+0x1a>
   d63fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6402:	421c      	tst	r4, r3
   d6404:	bf0c      	ite	eq
   d6406:	2001      	moveq	r0, #1
   d6408:	2000      	movne	r0, #0
}
   d640a:	b002      	add	sp, #8
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d640e:	b513      	push	{r0, r1, r4, lr}
   d6410:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6412:	f10d 0207 	add.w	r2, sp, #7
   d6416:	f7ff fe53 	bl	d60c0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d641a:	b128      	cbz	r0, d6428 <_ZN6AB18058isBitSetEhhb+0x1a>
   d641c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6420:	421c      	tst	r4, r3
   d6422:	bf14      	ite	ne
   d6424:	2001      	movne	r0, #1
   d6426:	2000      	moveq	r0, #0
}
   d6428:	b002      	add	sp, #8
   d642a:	bd10      	pop	{r4, pc}

000d642c <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d642c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d642e:	43d2      	mvns	r2, r2
   d6430:	9300      	str	r3, [sp, #0]
   d6432:	b2d2      	uxtb	r2, r2
   d6434:	2300      	movs	r3, #0
   d6436:	f7ff ff25 	bl	d6284 <_ZN6AB180512maskRegisterEhhhb>
}
   d643a:	b003      	add	sp, #12
   d643c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6440 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6440:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d6442:	2301      	movs	r3, #1
   d6444:	f10d 0207 	add.w	r2, sp, #7
   d6448:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d644a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d644c:	f7ff fe38 	bl	d60c0 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6450:	4605      	mov	r5, r0
   d6452:	b938      	cbnz	r0, d6464 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d6454:	491e      	ldr	r1, [pc, #120]	; (d64d0 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d6456:	481f      	ldr	r0, [pc, #124]	; (d64d4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6458:	22ad      	movs	r2, #173	; 0xad
   d645a:	f7ff fdb8 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
}
   d645e:	4628      	mov	r0, r5
   d6460:	b003      	add	sp, #12
   d6462:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d6464:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6468:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d646c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d6470:	d00b      	beq.n	d648a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6472:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d6474:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6476:	210f      	movs	r1, #15
   d6478:	4620      	mov	r0, r4
   d647a:	f7ff ffd7 	bl	d642c <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d647e:	4a16      	ldr	r2, [pc, #88]	; (d64d8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6480:	4916      	ldr	r1, [pc, #88]	; (d64dc <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d6482:	4814      	ldr	r0, [pc, #80]	; (d64d4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6484:	f7fd ff8a 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d6488:	e7e9      	b.n	d645e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d648a:	2208      	movs	r2, #8
   d648c:	2117      	movs	r1, #23
   d648e:	4620      	mov	r0, r4
   d6490:	f7ff ffbd 	bl	d640e <_ZN6AB18058isBitSetEhhb>
   d6494:	b118      	cbz	r0, d649e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6496:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d6498:	4a11      	ldr	r2, [pc, #68]	; (d64e0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d649a:	61e3      	str	r3, [r4, #28]
   d649c:	e7f0      	b.n	d6480 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d649e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d64a2:	071a      	lsls	r2, r3, #28
   d64a4:	d509      	bpl.n	d64ba <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d64a6:	2303      	movs	r3, #3
   d64a8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d64aa:	2208      	movs	r2, #8
   d64ac:	2301      	movs	r3, #1
   d64ae:	210f      	movs	r1, #15
   d64b0:	4620      	mov	r0, r4
   d64b2:	f7ff ffbb 	bl	d642c <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d64b6:	4a0b      	ldr	r2, [pc, #44]	; (d64e4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d64b8:	e7e2      	b.n	d6480 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d64ba:	075b      	lsls	r3, r3, #29
   d64bc:	d5cf      	bpl.n	d645e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d64be:	2204      	movs	r2, #4
   d64c0:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d64c2:	2301      	movs	r3, #1
   d64c4:	210f      	movs	r1, #15
   d64c6:	4620      	mov	r0, r4
   d64c8:	f7ff ffb0 	bl	d642c <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d64cc:	4a06      	ldr	r2, [pc, #24]	; (d64e8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d64ce:	e7d7      	b.n	d6480 <_ZN6AB180516updateWakeReasonEv+0x40>
   d64d0:	000e3f56 	.word	0x000e3f56
   d64d4:	2003e470 	.word	0x2003e470
   d64d8:	000e3f27 	.word	0x000e3f27
   d64dc:	000e3f75 	.word	0x000e3f75
   d64e0:	000e3f30 	.word	0x000e3f30
   d64e4:	000e3f40 	.word	0x000e3f40
   d64e8:	000e3f50 	.word	0x000e3f50

000d64ec <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d64ec:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d64ee:	9300      	str	r3, [sp, #0]
   d64f0:	4613      	mov	r3, r2
   d64f2:	22ff      	movs	r2, #255	; 0xff
   d64f4:	f7ff fec6 	bl	d6284 <_ZN6AB180512maskRegisterEhhhb>
}
   d64f8:	b003      	add	sp, #12
   d64fa:	f85d fb04 	ldr.w	pc, [sp], #4

000d64fe <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d64fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6502:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6506:	4605      	mov	r5, r0
   d6508:	460c      	mov	r4, r1
   d650a:	4691      	mov	r9, r2
   d650c:	461f      	mov	r7, r3
    if (lock) {
   d650e:	f1ba 0f00 	cmp.w	sl, #0
   d6512:	d002      	beq.n	d651a <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6514:	6840      	ldr	r0, [r0, #4]
   d6516:	f007 fc39 	bl	ddd8c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d651a:	b307      	cbz	r7, d655e <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d651c:	2f20      	cmp	r7, #32
   d651e:	463e      	mov	r6, r7
   d6520:	bf28      	it	cs
   d6522:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6524:	2c7f      	cmp	r4, #127	; 0x7f
   d6526:	d826      	bhi.n	d6576 <_ZN6AB18057readRamEjPhjb+0x78>
   d6528:	1933      	adds	r3, r6, r4
   d652a:	2b80      	cmp	r3, #128	; 0x80
   d652c:	d901      	bls.n	d6532 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d652e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6532:	2301      	movs	r3, #1
   d6534:	2204      	movs	r2, #4
   d6536:	213f      	movs	r1, #63	; 0x3f
   d6538:	4628      	mov	r0, r5
   d653a:	f7ff ff77 	bl	d642c <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d653e:	2300      	movs	r3, #0
   d6540:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6544:	9300      	str	r3, [sp, #0]
   d6546:	464a      	mov	r2, r9
   d6548:	4633      	mov	r3, r6
   d654a:	b2c9      	uxtb	r1, r1
   d654c:	4628      	mov	r0, r5
   d654e:	f7ff fd69 	bl	d6024 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6552:	4680      	mov	r8, r0
   d6554:	b128      	cbz	r0, d6562 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6556:	4434      	add	r4, r6
        dataLen -= count;
   d6558:	1bbf      	subs	r7, r7, r6
        data += count;
   d655a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d655c:	e7dd      	b.n	d651a <_ZN6AB18057readRamEjPhjb+0x1c>
   d655e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6562:	f1ba 0f00 	cmp.w	sl, #0
   d6566:	d002      	beq.n	d656e <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6568:	6868      	ldr	r0, [r5, #4]
   d656a:	f007 fc18 	bl	ddd9e <_ZN7TwoWire6unlockEv>
}
   d656e:	4640      	mov	r0, r8
   d6570:	b002      	add	sp, #8
   d6572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6576:	2301      	movs	r3, #1
   d6578:	2204      	movs	r2, #4
   d657a:	213f      	movs	r1, #63	; 0x3f
   d657c:	4628      	mov	r0, r5
   d657e:	f7ff ffb5 	bl	d64ec <_ZN6AB180514setRegisterBitEhhb>
   d6582:	e7dc      	b.n	d653e <_ZN6AB18057readRamEjPhjb+0x40>

000d6584 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6584:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6588:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d658c:	4605      	mov	r5, r0
   d658e:	460c      	mov	r4, r1
   d6590:	4691      	mov	r9, r2
   d6592:	461f      	mov	r7, r3
    if (lock) {
   d6594:	f1ba 0f00 	cmp.w	sl, #0
   d6598:	d002      	beq.n	d65a0 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d659a:	6840      	ldr	r0, [r0, #4]
   d659c:	f007 fbf6 	bl	ddd8c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d65a0:	b307      	cbz	r7, d65e4 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d65a2:	2f1f      	cmp	r7, #31
   d65a4:	463e      	mov	r6, r7
   d65a6:	bf28      	it	cs
   d65a8:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d65aa:	2c7f      	cmp	r4, #127	; 0x7f
   d65ac:	d826      	bhi.n	d65fc <_ZN6AB18058writeRamEjPKhjb+0x78>
   d65ae:	1933      	adds	r3, r6, r4
   d65b0:	2b80      	cmp	r3, #128	; 0x80
   d65b2:	d901      	bls.n	d65b8 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d65b4:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d65b8:	2301      	movs	r3, #1
   d65ba:	2204      	movs	r2, #4
   d65bc:	213f      	movs	r1, #63	; 0x3f
   d65be:	4628      	mov	r0, r5
   d65c0:	f7ff ff34 	bl	d642c <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d65c4:	2300      	movs	r3, #0
   d65c6:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d65ca:	9300      	str	r3, [sp, #0]
   d65cc:	464a      	mov	r2, r9
   d65ce:	4633      	mov	r3, r6
   d65d0:	b2c9      	uxtb	r1, r1
   d65d2:	4628      	mov	r0, r5
   d65d4:	f7ff fdba 	bl	d614c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d65d8:	4680      	mov	r8, r0
   d65da:	b128      	cbz	r0, d65e8 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d65dc:	4434      	add	r4, r6
        dataLen -= count;
   d65de:	1bbf      	subs	r7, r7, r6
        data += count;
   d65e0:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d65e2:	e7dd      	b.n	d65a0 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d65e4:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d65e8:	f1ba 0f00 	cmp.w	sl, #0
   d65ec:	d002      	beq.n	d65f4 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d65ee:	6868      	ldr	r0, [r5, #4]
   d65f0:	f007 fbd5 	bl	ddd9e <_ZN7TwoWire6unlockEv>
}
   d65f4:	4640      	mov	r0, r8
   d65f6:	b002      	add	sp, #8
   d65f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d65fc:	2301      	movs	r3, #1
   d65fe:	2204      	movs	r2, #4
   d6600:	213f      	movs	r1, #63	; 0x3f
   d6602:	4628      	mov	r0, r5
   d6604:	f7ff ff72 	bl	d64ec <_ZN6AB180514setRegisterBitEhhb>
   d6608:	e7dc      	b.n	d65c4 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d660c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d660c:	b530      	push	{r4, r5, lr}
   d660e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6610:	680d      	ldr	r5, [r1, #0]
   d6612:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6616:	9503      	str	r5, [sp, #12]
   d6618:	684d      	ldr	r5, [r1, #4]
   d661a:	9502      	str	r5, [sp, #8]
   d661c:	688d      	ldr	r5, [r1, #8]
   d661e:	9501      	str	r5, [sp, #4]
   d6620:	68c9      	ldr	r1, [r1, #12]
   d6622:	9100      	str	r1, [sp, #0]
   d6624:	3301      	adds	r3, #1
   d6626:	4904      	ldr	r1, [pc, #16]	; (d6638 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6628:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d662c:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d662e:	f009 fba9 	bl	dfd84 <_ZN6String6formatEPKcz>
}
   d6632:	4620      	mov	r0, r4
   d6634:	b005      	add	sp, #20
   d6636:	bd30      	pop	{r4, r5, pc}
   d6638:	000e3f86 	.word	0x000e3f86

000d663c <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d663c:	1103      	asrs	r3, r0, #4
}
   d663e:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6640:	f000 000f 	and.w	r0, r0, #15
}
   d6644:	fb02 0003 	mla	r0, r2, r3, r0
   d6648:	4770      	bx	lr

000d664a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d664a:	b538      	push	{r3, r4, r5, lr}
   d664c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d664e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6650:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6652:	f7ff fff3 	bl	d663c <_ZN6AB180510bcdToValueEh>
   d6656:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6658:	7860      	ldrb	r0, [r4, #1]
   d665a:	f7ff ffef 	bl	d663c <_ZN6AB180510bcdToValueEh>
   d665e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6660:	78a0      	ldrb	r0, [r4, #2]
   d6662:	f7ff ffeb 	bl	d663c <_ZN6AB180510bcdToValueEh>
   d6666:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6668:	78e0      	ldrb	r0, [r4, #3]
   d666a:	f7ff ffe7 	bl	d663c <_ZN6AB180510bcdToValueEh>
   d666e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6670:	7920      	ldrb	r0, [r4, #4]
   d6672:	f7ff ffe3 	bl	d663c <_ZN6AB180510bcdToValueEh>
   d6676:	3801      	subs	r0, #1
   d6678:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d667a:	b92d      	cbnz	r5, d6688 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d667c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d667e:	7828      	ldrb	r0, [r5, #0]
   d6680:	f7ff ffdc 	bl	d663c <_ZN6AB180510bcdToValueEh>
   d6684:	6188      	str	r0, [r1, #24]
}
   d6686:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6688:	7960      	ldrb	r0, [r4, #5]
   d668a:	f7ff ffd7 	bl	d663c <_ZN6AB180510bcdToValueEh>
   d668e:	3064      	adds	r0, #100	; 0x64
   d6690:	1da5      	adds	r5, r4, #6
   d6692:	6148      	str	r0, [r1, #20]
   d6694:	e7f3      	b.n	d667e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6698 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6698:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d669a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d669c:	b088      	sub	sp, #32
   d669e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d66a0:	461a      	mov	r2, r3
   d66a2:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d66a4:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d66a6:	f7ff fea3 	bl	d63f0 <_ZN6AB180510isBitClearEhhb>
   d66aa:	b1f0      	cbz	r0, d66ea <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d66ac:	2308      	movs	r3, #8
   d66ae:	2601      	movs	r6, #1
   d66b0:	4620      	mov	r0, r4
   d66b2:	9600      	str	r6, [sp, #0]
   d66b4:	eb0d 0203 	add.w	r2, sp, r3
   d66b8:	2100      	movs	r1, #0
   d66ba:	f7ff fcb3 	bl	d6024 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d66be:	4604      	mov	r4, r0
   d66c0:	b198      	cbz	r0, d66ea <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d66c2:	4632      	mov	r2, r6
   d66c4:	4629      	mov	r1, r5
   d66c6:	f10d 0009 	add.w	r0, sp, #9
   d66ca:	f7ff ffbe 	bl	d664a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d66ce:	a804      	add	r0, sp, #16
   d66d0:	f7ff ff9c 	bl	d660c <_ZN6AB180510tmToStringEPK2tm>
   d66d4:	4808      	ldr	r0, [pc, #32]	; (d66f8 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d66d6:	9a04      	ldr	r2, [sp, #16]
   d66d8:	4908      	ldr	r1, [pc, #32]	; (d66fc <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d66da:	f7fd fe5f 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d66de:	a804      	add	r0, sp, #16
   d66e0:	f009 f9e2 	bl	dfaa8 <_ZN6StringD1Ev>
}
   d66e4:	4620      	mov	r0, r4
   d66e6:	b008      	add	sp, #32
   d66e8:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d66ea:	2224      	movs	r2, #36	; 0x24
   d66ec:	2100      	movs	r1, #0
   d66ee:	4628      	mov	r0, r5
   d66f0:	f00b f802 	bl	e16f8 <memset>
   d66f4:	2400      	movs	r4, #0
   d66f6:	e7f5      	b.n	d66e4 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d66f8:	2003e470 	.word	0x2003e470
   d66fc:	000e3fa4 	.word	0x000e3fa4

000d6700 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6700:	b530      	push	{r4, r5, lr}
   d6702:	b08b      	sub	sp, #44	; 0x2c
   d6704:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6706:	a901      	add	r1, sp, #4
   d6708:	f7ff ffc6 	bl	d6698 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d670c:	4604      	mov	r4, r0
   d670e:	b120      	cbz	r0, d671a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6710:	a801      	add	r0, sp, #4
   d6712:	f006 fd61 	bl	dd1d8 <mktime>
   d6716:	e9c5 0100 	strd	r0, r1, [r5]
}
   d671a:	4620      	mov	r0, r4
   d671c:	b00b      	add	sp, #44	; 0x2c
   d671e:	bd30      	pop	{r4, r5, pc}

000d6720 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d6720:	b510      	push	{r4, lr}
   d6722:	4604      	mov	r4, r0
   d6724:	b088      	sub	sp, #32
    if (callBegin) {
   d6726:	b111      	cbz	r1, d672e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6728:	6840      	ldr	r0, [r0, #4]
   d672a:	f007 fadd 	bl	ddce8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d672e:	4620      	mov	r0, r4
   d6730:	f7ff fcce 	bl	d60d0 <_ZN6AB180510detectChipEv>
   d6734:	b370      	cbz	r0, d6794 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6736:	4620      	mov	r0, r4
   d6738:	f7ff fe82 	bl	d6440 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d673c:	2301      	movs	r3, #1
   d673e:	461a      	mov	r2, r3
   d6740:	2110      	movs	r1, #16
   d6742:	4620      	mov	r0, r4
   d6744:	f7ff fe54 	bl	d63f0 <_ZN6AB180510isBitClearEhhb>
   d6748:	b1d8      	cbz	r0, d6782 <_ZN6AB18055setupEb+0x62>
   d674a:	f009 fcf5 	bl	e0138 <_ZN9TimeClass7isValidEv>
   d674e:	b9c0      	cbnz	r0, d6782 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6750:	a902      	add	r1, sp, #8
   d6752:	4620      	mov	r0, r4
   d6754:	f7ff ffd4 	bl	d6700 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d675c:	f009 fbf3 	bl	dff46 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6760:	4b0f      	ldr	r3, [pc, #60]	; (d67a0 <_ZN6AB18055setupEb+0x80>)
   d6762:	4910      	ldr	r1, [pc, #64]	; (d67a4 <_ZN6AB18055setupEb+0x84>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	9300      	str	r3, [sp, #0]
   d6768:	a804      	add	r0, sp, #16
   d676a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d676e:	f009 fca1 	bl	e00b4 <_ZN9TimeClass6formatExPKc>
   d6772:	480d      	ldr	r0, [pc, #52]	; (d67a8 <_ZN6AB18055setupEb+0x88>)
   d6774:	9a04      	ldr	r2, [sp, #16]
   d6776:	490d      	ldr	r1, [pc, #52]	; (d67ac <_ZN6AB18055setupEb+0x8c>)
   d6778:	f7fd fe10 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d677c:	a804      	add	r0, sp, #16
   d677e:	f009 f993 	bl	dfaa8 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6782:	4a0b      	ldr	r2, [pc, #44]	; (d67b0 <_ZN6AB18055setupEb+0x90>)
   d6784:	2300      	movs	r3, #0
   d6786:	2100      	movs	r1, #0
   d6788:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d678c:	f006 fbb6 	bl	dcefc <system_subscribe_event>
}
   d6790:	b008      	add	sp, #32
   d6792:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6794:	4907      	ldr	r1, [pc, #28]	; (d67b4 <_ZN6AB18055setupEb+0x94>)
   d6796:	4804      	ldr	r0, [pc, #16]	; (d67a8 <_ZN6AB18055setupEb+0x88>)
   d6798:	f7ff fc19 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
   d679c:	e7f1      	b.n	d6782 <_ZN6AB18055setupEb+0x62>
   d679e:	bf00      	nop
   d67a0:	2003e1c8 	.word	0x2003e1c8
   d67a4:	2003e5b4 	.word	0x2003e5b4
   d67a8:	2003e470 	.word	0x2003e470
   d67ac:	000e3fb2 	.word	0x000e3fb2
   d67b0:	000d6261 	.word	0x000d6261
   d67b4:	000e3fcf 	.word	0x000e3fcf

000d67b8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d67b8:	220a      	movs	r2, #10
   d67ba:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d67be:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d67c2:	fb93 f1f2 	sdiv	r1, r3, r2
   d67c6:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d67ca:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d67ce:	b2c0      	uxtb	r0, r0
   d67d0:	4770      	bx	lr

000d67d2 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d67d2:	b570      	push	{r4, r5, r6, lr}
   d67d4:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d67d6:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d67d8:	460c      	mov	r4, r1
   d67da:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d67dc:	f7ff ffec 	bl	d67b8 <_ZN6AB180510valueToBcdEi>
   d67e0:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d67e2:	6868      	ldr	r0, [r5, #4]
   d67e4:	f7ff ffe8 	bl	d67b8 <_ZN6AB180510valueToBcdEi>
   d67e8:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d67ea:	68a8      	ldr	r0, [r5, #8]
   d67ec:	f7ff ffe4 	bl	d67b8 <_ZN6AB180510valueToBcdEi>
   d67f0:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d67f2:	68e8      	ldr	r0, [r5, #12]
   d67f4:	f7ff ffe0 	bl	d67b8 <_ZN6AB180510valueToBcdEi>
   d67f8:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d67fa:	6928      	ldr	r0, [r5, #16]
   d67fc:	3001      	adds	r0, #1
   d67fe:	f7ff ffdb 	bl	d67b8 <_ZN6AB180510valueToBcdEi>
   d6802:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6804:	b92e      	cbnz	r6, d6812 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6806:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6808:	69a8      	ldr	r0, [r5, #24]
   d680a:	f7ff ffd5 	bl	d67b8 <_ZN6AB180510valueToBcdEi>
   d680e:	7030      	strb	r0, [r6, #0]
}
   d6810:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d6812:	696a      	ldr	r2, [r5, #20]
   d6814:	2364      	movs	r3, #100	; 0x64
   d6816:	fb92 f0f3 	sdiv	r0, r2, r3
   d681a:	fb03 2010 	mls	r0, r3, r0, r2
   d681e:	f7ff ffcb 	bl	d67b8 <_ZN6AB180510valueToBcdEi>
   d6822:	1da6      	adds	r6, r4, #6
   d6824:	7160      	strb	r0, [r4, #5]
   d6826:	e7ef      	b.n	d6808 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6828 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6828:	b5f0      	push	{r4, r5, r6, r7, lr}
   d682a:	b087      	sub	sp, #28
   d682c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d682e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6830:	4616      	mov	r6, r2
   d6832:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6834:	f7ff feea 	bl	d660c <_ZN6AB180510tmToStringEPK2tm>
   d6838:	481e      	ldr	r0, [pc, #120]	; (d68b4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d683a:	9a02      	ldr	r2, [sp, #8]
   d683c:	491e      	ldr	r1, [pc, #120]	; (d68b8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d683e:	f7fd fdad 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d6842:	a802      	add	r0, sp, #8
   d6844:	f009 f930 	bl	dfaa8 <_ZN6StringD1Ev>
    if (lock) {
   d6848:	b116      	cbz	r6, d6850 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d684a:	6868      	ldr	r0, [r5, #4]
   d684c:	f007 fa9e 	bl	ddd8c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6850:	4620      	mov	r0, r4
   d6852:	2201      	movs	r2, #1
   d6854:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6858:	2700      	movs	r7, #0
   d685a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d685e:	f7ff ffb8 	bl	d67d2 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6862:	2301      	movs	r3, #1
   d6864:	461a      	mov	r2, r3
   d6866:	2110      	movs	r1, #16
   d6868:	4628      	mov	r0, r5
   d686a:	f7ff fe3f 	bl	d64ec <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d686e:	4604      	mov	r4, r0
   d6870:	b1e8      	cbz	r0, d68ae <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6872:	2308      	movs	r3, #8
   d6874:	9700      	str	r7, [sp, #0]
   d6876:	eb0d 0203 	add.w	r2, sp, r3
   d687a:	4639      	mov	r1, r7
   d687c:	4628      	mov	r0, r5
   d687e:	f7ff fc65 	bl	d614c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d6882:	4604      	mov	r4, r0
   d6884:	b160      	cbz	r0, d68a0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6886:	2301      	movs	r3, #1
   d6888:	461a      	mov	r2, r3
   d688a:	2110      	movs	r1, #16
   d688c:	4628      	mov	r0, r5
   d688e:	f7ff fdcd 	bl	d642c <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d6892:	b116      	cbz	r6, d689a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6894:	6868      	ldr	r0, [r5, #4]
   d6896:	f007 fa82 	bl	ddd9e <_ZN7TwoWire6unlockEv>
}
   d689a:	4620      	mov	r0, r4
   d689c:	b007      	add	sp, #28
   d689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d68a0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d68a4:	4905      	ldr	r1, [pc, #20]	; (d68bc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d68a6:	4803      	ldr	r0, [pc, #12]	; (d68b4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d68a8:	f7ff fb91 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
   d68ac:	e7f1      	b.n	d6892 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d68ae:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d68b2:	e7f7      	b.n	d68a4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d68b4:	2003e470 	.word	0x2003e470
   d68b8:	000e3fe7 	.word	0x000e3fe7
   d68bc:	000e3ff5 	.word	0x000e3ff5

000d68c0 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d68c0:	b513      	push	{r0, r1, r4, lr}
   d68c2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d68c4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d68c6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d68ca:	f00a fedb 	bl	e1684 <gmtime>
    return setRtcFromTm(tm, lock);
   d68ce:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d68d2:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d68d4:	4620      	mov	r0, r4
   d68d6:	f7ff ffa7 	bl	d6828 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d68da:	b002      	add	sp, #8
   d68dc:	bd10      	pop	{r4, pc}
	...

000d68e0 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d68e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d68e2:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d68e4:	b089      	sub	sp, #36	; 0x24
   d68e6:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d68e8:	bb75      	cbnz	r5, d6948 <_ZN6AB18054loopEv+0x68>
   d68ea:	f009 fc25 	bl	e0138 <_ZN9TimeClass7isValidEv>
   d68ee:	b358      	cbz	r0, d6948 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d68f0:	2600      	movs	r6, #0
   d68f2:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d68f4:	a904      	add	r1, sp, #16
   d68f6:	4628      	mov	r0, r5
        tm = 0;
   d68f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d68fc:	f006 fb84 	bl	dd008 <spark_sync_time_last>
   d6900:	b310      	cbz	r0, d6948 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d6902:	2501      	movs	r5, #1
   d6904:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d6906:	f009 fc34 	bl	e0172 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d690a:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d690c:	4602      	mov	r2, r0
   d690e:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d6910:	4620      	mov	r0, r4
        time_t time = Time.now();
   d6912:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d6916:	f7ff ffd3 	bl	d68c0 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d691a:	a902      	add	r1, sp, #8
   d691c:	4620      	mov	r0, r4
        time = 0;
   d691e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d6922:	f7ff feed 	bl	d6700 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6926:	4b12      	ldr	r3, [pc, #72]	; (d6970 <_ZN6AB18054loopEv+0x90>)
   d6928:	4912      	ldr	r1, [pc, #72]	; (d6974 <_ZN6AB18054loopEv+0x94>)
   d692a:	681b      	ldr	r3, [r3, #0]
   d692c:	9300      	str	r3, [sp, #0]
   d692e:	a804      	add	r0, sp, #16
   d6930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6934:	f009 fbbe 	bl	e00b4 <_ZN9TimeClass6formatExPKc>
   d6938:	480f      	ldr	r0, [pc, #60]	; (d6978 <_ZN6AB18054loopEv+0x98>)
   d693a:	9a04      	ldr	r2, [sp, #16]
   d693c:	490f      	ldr	r1, [pc, #60]	; (d697c <_ZN6AB18054loopEv+0x9c>)
   d693e:	f7fd fd2d 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d6942:	a804      	add	r0, sp, #16
   d6944:	f009 f8b0 	bl	dfaa8 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6948:	6963      	ldr	r3, [r4, #20]
   d694a:	b173      	cbz	r3, d696a <_ZN6AB18054loopEv+0x8a>
   d694c:	f006 f894 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6950:	6923      	ldr	r3, [r4, #16]
   d6952:	1ac0      	subs	r0, r0, r3
   d6954:	6963      	ldr	r3, [r4, #20]
   d6956:	4298      	cmp	r0, r3
   d6958:	d307      	bcc.n	d696a <_ZN6AB18054loopEv+0x8a>
   d695a:	f006 f88d 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d695e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6962:	6120      	str	r0, [r4, #16]
            setWDT();
   d6964:	4620      	mov	r0, r4
   d6966:	f7ff fc39 	bl	d61dc <_ZN6AB18056setWDTEi>
}
   d696a:	b009      	add	sp, #36	; 0x24
   d696c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d696e:	bf00      	nop
   d6970:	2003e1c8 	.word	0x2003e1c8
   d6974:	2003e5b4 	.word	0x2003e5b4
   d6978:	2003e470 	.word	0x2003e470
   d697c:	000e4010 	.word	0x000e4010

000d6980 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6980:	4b01      	ldr	r3, [pc, #4]	; (d6988 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6982:	4a02      	ldr	r2, [pc, #8]	; (d698c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6984:	601a      	str	r2, [r3, #0]
}
   d6986:	4770      	bx	lr
   d6988:	2003e470 	.word	0x2003e470
   d698c:	000e4026 	.word	0x000e4026

000d6990 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d6990:	2a02      	cmp	r2, #2
   d6992:	d006      	beq.n	d69a2 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d6994:	2a03      	cmp	r2, #3
   d6996:	d002      	beq.n	d699e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d6998:	2a01      	cmp	r2, #1
   d699a:	d100      	bne.n	d699e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d699c:	6001      	str	r1, [r0, #0]
	}
   d699e:	2000      	movs	r0, #0
   d69a0:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d69a2:	680b      	ldr	r3, [r1, #0]
   d69a4:	6003      	str	r3, [r0, #0]
	}
   d69a6:	e7fa      	b.n	d699e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d69a8 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d69a8:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d69aa:	2301      	movs	r3, #1
   d69ac:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d69ae:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d69b0:	4604      	mov	r4, r0
        if (th->func) {
   d69b2:	b143      	cbz	r3, d69c6 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d69b4:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69b6:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d69b8:	2301      	movs	r3, #1
   d69ba:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d69bc:	2000      	movs	r0, #0
    }
   d69be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d69c2:	f006 b829 	b.w	dca18 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d69c6:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d69c8:	2800      	cmp	r0, #0
   d69ca:	d0f5      	beq.n	d69b8 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d69cc:	6883      	ldr	r3, [r0, #8]
   d69ce:	b90b      	cbnz	r3, d69d4 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d69d0:	f009 fef6 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69d4:	68c3      	ldr	r3, [r0, #12]
   d69d6:	e7ee      	b.n	d69b6 <_ZN6Thread3runEPv+0xe>

000d69d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d69d8:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d69da:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d69dc:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d69de:	b135      	cbz	r5, d69ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d69e0:	4628      	mov	r0, r5
   d69e2:	f7fe f84d 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d69e6:	2110      	movs	r1, #16
   d69e8:	4628      	mov	r0, r5
   d69ea:	f009 fea9 	bl	e0740 <_ZdlPvj>
   d69ee:	4620      	mov	r0, r4
   d69f0:	2114      	movs	r1, #20
      }
   d69f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d69f6:	f009 bea3 	b.w	e0740 <_ZdlPvj>

000d69fa <_ZN6Thread7disposeEv>:
    void dispose()
   d69fa:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d69fc:	6803      	ldr	r3, [r0, #0]
   d69fe:	4604      	mov	r4, r0
        if (!isValid())
   d6a00:	b1ab      	cbz	r3, d6a2e <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d6a02:	6858      	ldr	r0, [r3, #4]
   d6a04:	f005 ffb8 	bl	dc978 <os_thread_is_current>
   d6a08:	b988      	cbnz	r0, d6a2e <_ZN6Thread7disposeEv+0x34>
   d6a0a:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d6a0c:	7c5a      	ldrb	r2, [r3, #17]
   d6a0e:	b912      	cbnz	r2, d6a16 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d6a10:	6858      	ldr	r0, [r3, #4]
   d6a12:	f005 ffb9 	bl	dc988 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d6a16:	6823      	ldr	r3, [r4, #0]
   d6a18:	6858      	ldr	r0, [r3, #4]
   d6a1a:	f005 ffbd 	bl	dc998 <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a1e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6a20:	2300      	movs	r3, #0
   d6a22:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6a24:	b118      	cbz	r0, d6a2e <_ZN6Thread7disposeEv+0x34>
    }
   d6a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6a2a:	f7ff bfd5 	b.w	d69d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d6a2e:	bd10      	pop	{r4, pc}

000d6a30 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d6a30:	4a05      	ldr	r2, [pc, #20]	; (d6a48 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d6a32:	6002      	str	r2, [r0, #0]
   d6a34:	2200      	movs	r2, #0
   d6a36:	6042      	str	r2, [r0, #4]
   d6a38:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d6a3a:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d6a3e:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d6a42:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d6a46:	4770      	bx	lr
   d6a48:	000e4068 	.word	0x000e4068

000d6a4c <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d6a4c:	b510      	push	{r4, lr}
    if (!_instance) {
   d6a4e:	4c07      	ldr	r4, [pc, #28]	; (d6a6c <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d6a50:	6823      	ldr	r3, [r4, #0]
   d6a52:	b943      	cbnz	r3, d6a66 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d6a54:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d6a58:	f7fd fb1d 	bl	d4096 <_Znwj>
   d6a5c:	4603      	mov	r3, r0
   d6a5e:	b108      	cbz	r0, d6a64 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d6a60:	f7ff ffe6 	bl	d6a30 <_ZN19BackgroundPublishRKC1Ev>
   d6a64:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d6a66:	6820      	ldr	r0, [r4, #0]
   d6a68:	bd10      	pop	{r4, pc}
   d6a6a:	bf00      	nop
   d6a6c:	2003e478 	.word	0x2003e478

000d6a70 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d6a70:	b538      	push	{r3, r4, r5, lr}
   d6a72:	4604      	mov	r4, r0
    if(thread)
   d6a74:	6840      	ldr	r0, [r0, #4]
   d6a76:	b190      	cbz	r0, d6a9e <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d6a78:	2302      	movs	r3, #2
   d6a7a:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d6a7c:	f7ff ffbd 	bl	d69fa <_ZN6Thread7disposeEv>
        delete thread;
   d6a80:	6865      	ldr	r5, [r4, #4]
   d6a82:	b155      	cbz	r5, d6a9a <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d6a84:	4628      	mov	r0, r5
   d6a86:	f7ff ffb8 	bl	d69fa <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d6a8a:	6828      	ldr	r0, [r5, #0]
   d6a8c:	b108      	cbz	r0, d6a92 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d6a8e:	f7ff ffa3 	bl	d69d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d6a92:	2104      	movs	r1, #4
   d6a94:	4628      	mov	r0, r5
   d6a96:	f009 fe53 	bl	e0740 <_ZdlPvj>
        thread = NULL;
   d6a9a:	2300      	movs	r3, #0
   d6a9c:	6063      	str	r3, [r4, #4]
    }
}
   d6a9e:	bd38      	pop	{r3, r4, r5, pc}

000d6aa0 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d6aa0:	b510      	push	{r4, lr}
   d6aa2:	4b05      	ldr	r3, [pc, #20]	; (d6ab8 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d6aa4:	6003      	str	r3, [r0, #0]
   d6aa6:	4604      	mov	r4, r0
    stop();
   d6aa8:	f7ff ffe2 	bl	d6a70 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d6aac:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6ab0:	f7fd ffe6 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
}
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	bd10      	pop	{r4, pc}
   d6ab8:	000e4068 	.word	0x000e4068

000d6abc <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d6abc:	b510      	push	{r4, lr}
   d6abe:	4604      	mov	r4, r0
}
   d6ac0:	f7ff ffee 	bl	d6aa0 <_ZN19BackgroundPublishRKD1Ev>
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d6aca:	f009 fe39 	bl	e0740 <_ZdlPvj>
   d6ace:	4620      	mov	r0, r4
   d6ad0:	bd10      	pop	{r4, pc}

000d6ad2 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d6ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ad4:	4604      	mov	r4, r0
   d6ad6:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d6ad8:	f100 060d 	add.w	r6, r0, #13
   d6adc:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d6ae0:	7b23      	ldrb	r3, [r4, #12]
   d6ae2:	b91b      	cbnz	r3, d6aec <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d6ae4:	2001      	movs	r0, #1
   d6ae6:	f006 fb8b 	bl	dd200 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d6aea:	e7f9      	b.n	d6ae0 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d6aec:	7b23      	ldrb	r3, [r4, #12]
   d6aee:	2b02      	cmp	r3, #2
   d6af0:	d062      	beq.n	d6bb8 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d6af2:	68a0      	ldr	r0, [r4, #8]
   d6af4:	f005 ff60 	bl	dc9b8 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d6af8:	68a0      	ldr	r0, [r4, #8]
   d6afa:	f005 ff65 	bl	dc9c8 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d6afe:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6b02:	f88d 3000 	strb.w	r3, [sp]
   d6b06:	463a      	mov	r2, r7
   d6b08:	233c      	movs	r3, #60	; 0x3c
   d6b0a:	4631      	mov	r1, r6
   d6b0c:	a806      	add	r0, sp, #24
   d6b0e:	f006 fe35 	bl	dd77c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6b12:	9d06      	ldr	r5, [sp, #24]
   d6b14:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6b16:	b933      	cbnz	r3, d6b26 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d6b18:	7b23      	ldrb	r3, [r4, #12]
   d6b1a:	2b02      	cmp	r3, #2
   d6b1c:	d003      	beq.n	d6b26 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d6b1e:	2001      	movs	r0, #1
   d6b20:	f006 fb6e 	bl	dd200 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6b24:	e7f5      	b.n	d6b12 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d6b26:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6b2a:	b31b      	cbz	r3, d6b74 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6b2c:	2000      	movs	r0, #0
   d6b2e:	f006 f9f5 	bl	dcf1c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6b32:	b120      	cbz	r0, d6b3e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d6b34:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6b36:	b913      	cbnz	r3, d6b3e <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d6b38:	f006 fa3e 	bl	dcfb8 <spark_process>
    }
   d6b3c:	e7fa      	b.n	d6b34 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6b3e:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d6b40:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d6b44:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d6b46:	1e59      	subs	r1, r3, #1
   d6b48:	424b      	negs	r3, r1
   d6b4a:	414b      	adcs	r3, r1
   d6b4c:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d6b50:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6b54:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d6b58:	b90b      	cbnz	r3, d6b5e <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d6b5a:	f009 fe31 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b5e:	ab05      	add	r3, sp, #20
   d6b60:	9300      	str	r3, [sp, #0]
   d6b62:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d6b66:	ab04      	add	r3, sp, #16
   d6b68:	aa03      	add	r2, sp, #12
   d6b6a:	f10d 010b 	add.w	r1, sp, #11
   d6b6e:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6b72:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d6b74:	68a0      	ldr	r0, [r4, #8]
   d6b76:	f005 ff1f 	bl	dc9b8 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d6b7a:	7b23      	ldrb	r3, [r4, #12]
   d6b7c:	2b02      	cmp	r3, #2
   d6b7e:	d015      	beq.n	d6bac <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d6b80:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d6b84:	2500      	movs	r5, #0
   d6b86:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d6b8a:	b133      	cbz	r3, d6b9a <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d6b8c:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b90:	2203      	movs	r2, #3
   d6b92:	4608      	mov	r0, r1
   d6b94:	4798      	blx	r3
	    _M_invoker = nullptr;
   d6b96:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d6b9a:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d6b9c:	68a0      	ldr	r0, [r4, #8]
   d6b9e:	7323      	strb	r3, [r4, #12]
   d6ba0:	f005 ff12 	bl	dc9c8 <os_mutex_unlock>
      ~__shared_ptr() = default;
   d6ba4:	a807      	add	r0, sp, #28
   d6ba6:	f7fd fd6b 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6baa:	e799      	b.n	d6ae0 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d6bac:	68a0      	ldr	r0, [r4, #8]
   d6bae:	f005 ff0b 	bl	dc9c8 <os_mutex_unlock>
   d6bb2:	a807      	add	r0, sp, #28
   d6bb4:	f7fd fd64 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6bb8:	b009      	add	sp, #36	; 0x24
   d6bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6bbc <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d6bbc:	6800      	ldr	r0, [r0, #0]
   d6bbe:	f7ff bf88 	b.w	d6ad2 <_ZN19BackgroundPublishRK8thread_fEv>
	...

000d6bc4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d6bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6bc8:	4606      	mov	r6, r0
   d6bca:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d6bcc:	2014      	movs	r0, #20
   d6bce:	4926      	ldr	r1, [pc, #152]	; (d6c68 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d6bd0:	4617      	mov	r7, r2
   d6bd2:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d6bd4:	f009 fdea 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   d6bd8:	4604      	mov	r4, r0
   d6bda:	b130      	cbz	r0, d6bea <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6bdc:	2200      	movs	r2, #0
            exited(false) {
   d6bde:	e9c0 2200 	strd	r2, r2, [r0]
   d6be2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d6be6:	7402      	strb	r2, [r0, #16]
   d6be8:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6bea:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d6bec:	2c00      	cmp	r4, #0
   d6bee:	d031      	beq.n	d6c54 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d6bf0:	491d      	ldr	r1, [pc, #116]	; (d6c68 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d6bf2:	2010      	movs	r0, #16
   d6bf4:	f009 fdda 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   d6bf8:	4605      	mov	r5, r0
   d6bfa:	b168      	cbz	r0, d6c18 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d6bfc:	2300      	movs	r3, #0
   d6bfe:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6c00:	4601      	mov	r1, r0
   d6c02:	4638      	mov	r0, r7
   d6c04:	f7fe f8f5 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c08:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6c0a:	68aa      	ldr	r2, [r5, #8]
   d6c0c:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c0e:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6c10:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c12:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c14:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6c16:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c18:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6c1a:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d6c1c:	b137      	cbz	r7, d6c2c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d6c1e:	4638      	mov	r0, r7
   d6c20:	f7fd ff2e 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6c24:	2110      	movs	r1, #16
   d6c26:	4638      	mov	r0, r7
   d6c28:	f009 fd8a 	bl	e0740 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6c2c:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d6c2e:	6803      	ldr	r3, [r0, #0]
   d6c30:	b183      	cbz	r3, d6c54 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c34:	464a      	mov	r2, r9
   d6c36:	e9cd 0300 	strd	r0, r3, [sp]
   d6c3a:	4641      	mov	r1, r8
   d6c3c:	4b0b      	ldr	r3, [pc, #44]	; (d6c6c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d6c3e:	3004      	adds	r0, #4
   d6c40:	f005 fe92 	bl	dc968 <os_thread_create>
   d6c44:	b930      	cbnz	r0, d6c54 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d6c46:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d6c48:	7c1b      	ldrb	r3, [r3, #16]
   d6c4a:	b94b      	cbnz	r3, d6c60 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d6c4c:	2001      	movs	r0, #1
   d6c4e:	f005 ff03 	bl	dca58 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6c52:	e7f8      	b.n	d6c46 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c54:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6c56:	2300      	movs	r3, #0
   d6c58:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d6c5a:	b108      	cbz	r0, d6c60 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d6c5c:	f7ff febc 	bl	d69d8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d6c60:	4630      	mov	r0, r6
   d6c62:	b003      	add	sp, #12
   d6c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6c68:	000e4b18 	.word	0x000e4b18
   d6c6c:	000d69a9 	.word	0x000d69a9

000d6c70 <_ZN19BackgroundPublishRK5startEv>:
{
   d6c70:	b530      	push	{r4, r5, lr}
    if(!thread)
   d6c72:	6843      	ldr	r3, [r0, #4]
{
   d6c74:	b087      	sub	sp, #28
   d6c76:	4604      	mov	r4, r0
    if(!thread)
   d6c78:	b9c3      	cbnz	r3, d6cac <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d6c7a:	3008      	adds	r0, #8
   d6c7c:	f005 fe94 	bl	dc9a8 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d6c80:	4b0b      	ldr	r3, [pc, #44]	; (d6cb0 <_ZN19BackgroundPublishRK5startEv+0x40>)
   d6c82:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d6c84:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d6c86:	4b0b      	ldr	r3, [pc, #44]	; (d6cb4 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6c88:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d6c8a:	9304      	str	r3, [sp, #16]
   d6c8c:	f7fd fa03 	bl	d4096 <_Znwj>
   d6c90:	4605      	mov	r5, r0
   d6c92:	b138      	cbz	r0, d6ca4 <_ZN19BackgroundPublishRK5startEv+0x34>
   d6c94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d6c98:	9300      	str	r3, [sp, #0]
   d6c9a:	4907      	ldr	r1, [pc, #28]	; (d6cb8 <_ZN19BackgroundPublishRK5startEv+0x48>)
   d6c9c:	2302      	movs	r3, #2
   d6c9e:	aa02      	add	r2, sp, #8
   d6ca0:	f7ff ff90 	bl	d6bc4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d6ca4:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d6ca6:	a802      	add	r0, sp, #8
   d6ca8:	f7fd feea 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
}
   d6cac:	b007      	add	sp, #28
   d6cae:	bd30      	pop	{r4, r5, pc}
   d6cb0:	000d6bbd 	.word	0x000d6bbd
   d6cb4:	000d6991 	.word	0x000d6991
   d6cb8:	000e404c 	.word	0x000e404c

000d6cbc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d6cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6cc0:	4604      	mov	r4, r0
   d6cc2:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d6cc4:	6880      	ldr	r0, [r0, #8]
   d6cc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d6cc8:	4698      	mov	r8, r3
   d6cca:	460d      	mov	r5, r1
   d6ccc:	4616      	mov	r6, r2
   d6cce:	f005 fe73 	bl	dc9b8 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d6cd2:	6863      	ldr	r3, [r4, #4]
   d6cd4:	b11b      	cbz	r3, d6cde <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d6cd6:	7b23      	ldrb	r3, [r4, #12]
   d6cd8:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d6cdc:	b133      	cbz	r3, d6cec <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d6cde:	68a0      	ldr	r0, [r4, #8]
   d6ce0:	f005 fe72 	bl	dc9c8 <os_mutex_unlock>
    {
        return false;
   d6ce4:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d6ce6:	b005      	add	sp, #20
   d6ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6cec:	68a0      	ldr	r0, [r4, #8]
   d6cee:	f005 fe6b 	bl	dc9c8 <os_mutex_unlock>
    if(!name)
   d6cf2:	2d00      	cmp	r5, #0
   d6cf4:	d03d      	beq.n	d6d72 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d6cf6:	2241      	movs	r2, #65	; 0x41
   d6cf8:	4629      	mov	r1, r5
   d6cfa:	f104 000d 	add.w	r0, r4, #13
   d6cfe:	f00a fda0 	bl	e1842 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d6d02:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d6d06:	b38e      	cbz	r6, d6d6c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d6d08:	f240 226f 	movw	r2, #623	; 0x26f
   d6d0c:	4631      	mov	r1, r6
   d6d0e:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d6d12:	f00a fd96 	bl	e1842 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d6d16:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d6d1a:	2300      	movs	r3, #0
   d6d1c:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d6d1e:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d6d20:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d6d24:	b13b      	cbz	r3, d6d36 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6d26:	2202      	movs	r2, #2
   d6d28:	4639      	mov	r1, r7
   d6d2a:	4668      	mov	r0, sp
   d6d2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6d2e:	68fb      	ldr	r3, [r7, #12]
   d6d30:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d6d32:	68bb      	ldr	r3, [r7, #8]
   d6d34:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6d36:	4629      	mov	r1, r5
   d6d38:	4668      	mov	r0, sp
   d6d3a:	f7fe f85a 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d3e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6d40:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d6d44:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d48:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6d4a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6d4c:	4668      	mov	r0, sp
   d6d4e:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d6d52:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d6d56:	9203      	str	r2, [sp, #12]
   d6d58:	f7fd fe92 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d6d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6d5e:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d6d62:	2001      	movs	r0, #1
    event_flags = flags;
   d6d64:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d6d68:	7320      	strb	r0, [r4, #12]
    return true;
   d6d6a:	e7bc      	b.n	d6ce6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d6d6c:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d6d70:	e7d3      	b.n	d6d1a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d6d72:	4628      	mov	r0, r5
   d6d74:	e7b7      	b.n	d6ce6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000d6d78 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6d78:	b510      	push	{r4, lr}
   d6d7a:	4b05      	ldr	r3, [pc, #20]	; (d6d90 <_ZN10JsonBufferD1Ev+0x18>)
   d6d7c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d6d7e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d6d80:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d6d82:	b91b      	cbnz	r3, d6d8c <_ZN10JsonBufferD1Ev+0x14>
   d6d84:	6840      	ldr	r0, [r0, #4]
   d6d86:	b108      	cbz	r0, d6d8c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d6d88:	f006 f9be 	bl	dd108 <free>
	}
}
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	bd10      	pop	{r4, pc}
   d6d90:	000e4078 	.word	0x000e4078

000d6d94 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d6d94:	b510      	push	{r4, lr}
   d6d96:	4604      	mov	r4, r0
}
   d6d98:	f7ff ffee 	bl	d6d78 <_ZN10JsonBufferD1Ev>
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	2114      	movs	r1, #20
   d6da0:	f009 fcce 	bl	e0740 <_ZdlPvj>
   d6da4:	4620      	mov	r0, r4
   d6da6:	bd10      	pop	{r4, pc}

000d6da8 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d6da8:	b510      	push	{r4, lr}
   d6daa:	4b07      	ldr	r3, [pc, #28]	; (d6dc8 <_ZN10JsonParserD1Ev+0x20>)
   d6dac:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d6dae:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   d6db0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d6db2:	b91b      	cbnz	r3, d6dbc <_ZN10JsonParserD1Ev+0x14>
   d6db4:	6940      	ldr	r0, [r0, #20]
   d6db6:	b108      	cbz	r0, d6dbc <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d6db8:	f006 f9a6 	bl	dd108 <free>
JsonParser::~JsonParser() {
   d6dbc:	4620      	mov	r0, r4
   d6dbe:	f7ff ffdb 	bl	d6d78 <_ZN10JsonBufferD1Ev>
	}
}
   d6dc2:	4620      	mov	r0, r4
   d6dc4:	bd10      	pop	{r4, pc}
   d6dc6:	bf00      	nop
   d6dc8:	000e4088 	.word	0x000e4088

000d6dcc <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   d6dcc:	b510      	push	{r4, lr}
   d6dce:	4604      	mov	r4, r0
}
   d6dd0:	f7ff ffea 	bl	d6da8 <_ZN10JsonParserD1Ev>
   d6dd4:	4620      	mov	r0, r4
   d6dd6:	212c      	movs	r1, #44	; 0x2c
   d6dd8:	f009 fcb2 	bl	e0740 <_ZdlPvj>
   d6ddc:	4620      	mov	r0, r4
   d6dde:	bd10      	pop	{r4, pc}

000d6de0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d6de0:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d6de2:	e9c0 1201 	strd	r1, r2, [r0, #4]
   d6de6:	2200      	movs	r2, #0
   d6de8:	60c2      	str	r2, [r0, #12]
   d6dea:	2201      	movs	r2, #1
   d6dec:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d6dee:	6143      	str	r3, [r0, #20]
   d6df0:	4a02      	ldr	r2, [pc, #8]	; (d6dfc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d6df2:	9b02      	ldr	r3, [sp, #8]
   d6df4:	6002      	str	r2, [r0, #0]
   d6df6:	61c3      	str	r3, [r0, #28]
}
   d6df8:	bd10      	pop	{r4, pc}
   d6dfa:	bf00      	nop
   d6dfc:	000e4088 	.word	0x000e4088

000d6e00 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d6e00:	4770      	bx	lr

000d6e02 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d6e02:	4770      	bx	lr

000d6e04 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d6e04:	2001      	movs	r0, #1
   d6e06:	4770      	bx	lr

000d6e08 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d6e08:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6e0a:	bf08      	it	eq
   d6e0c:	6001      	streq	r1, [r0, #0]
	}
   d6e0e:	2000      	movs	r0, #0
   d6e10:	4770      	bx	lr

000d6e12 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d6e12:	b510      	push	{r4, lr}
}
   d6e14:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d6e16:	4604      	mov	r4, r0
}
   d6e18:	f009 fc92 	bl	e0740 <_ZdlPvj>
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	bd10      	pop	{r4, pc}

000d6e20 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d6e20:	b510      	push	{r4, lr}
}
   d6e22:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d6e24:	4604      	mov	r4, r0
}
   d6e26:	f009 fc8b 	bl	e0740 <_ZdlPvj>
   d6e2a:	4620      	mov	r0, r4
   d6e2c:	bd10      	pop	{r4, pc}
	...

000d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6e30:	b510      	push	{r4, lr}
   d6e32:	4b05      	ldr	r3, [pc, #20]	; (d6e48 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d6e34:	4604      	mov	r4, r0
   d6e36:	f840 3b1c 	str.w	r3, [r0], #28
   d6e3a:	f008 fe35 	bl	dfaa8 <_ZN6StringD1Ev>
   d6e3e:	1d20      	adds	r0, r4, #4
   d6e40:	f008 fe32 	bl	dfaa8 <_ZN6StringD1Ev>
}
   d6e44:	4620      	mov	r0, r4
   d6e46:	bd10      	pop	{r4, pc}
   d6e48:	000e40f0 	.word	0x000e40f0

000d6e4c <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6e4c:	b510      	push	{r4, lr}
   d6e4e:	4604      	mov	r4, r0
}
   d6e50:	f7ff ffee 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
   d6e54:	4620      	mov	r0, r4
   d6e56:	2158      	movs	r1, #88	; 0x58
   d6e58:	f009 fc72 	bl	e0740 <_ZdlPvj>
   d6e5c:	4620      	mov	r0, r4
   d6e5e:	bd10      	pop	{r4, pc}

000d6e60 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d6e60:	b510      	push	{r4, lr}
   d6e62:	4b04      	ldr	r3, [pc, #16]	; (d6e74 <_ZN9LocalTimeD1Ev+0x14>)
   d6e64:	4604      	mov	r4, r0
   d6e66:	f840 3b04 	str.w	r3, [r0], #4
   d6e6a:	f7ff ffe1 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
   d6e6e:	4620      	mov	r0, r4
   d6e70:	bd10      	pop	{r4, pc}
   d6e72:	bf00      	nop
   d6e74:	000e40c0 	.word	0x000e40c0

000d6e78 <_ZN9LocalTimeD0Ev>:
   d6e78:	b510      	push	{r4, lr}
   d6e7a:	4604      	mov	r4, r0
   d6e7c:	f7ff fff0 	bl	d6e60 <_ZN9LocalTimeD1Ev>
   d6e80:	4620      	mov	r0, r4
   d6e82:	2160      	movs	r1, #96	; 0x60
   d6e84:	f009 fc5c 	bl	e0740 <_ZdlPvj>
   d6e88:	4620      	mov	r0, r4
   d6e8a:	bd10      	pop	{r4, pc}

000d6e8c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d6e8c:	f020 0302 	bic.w	r3, r0, #2
   d6e90:	2b01      	cmp	r3, #1
   d6e92:	d003      	beq.n	d6e9c <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d6e94:	1f43      	subs	r3, r0, #5
   d6e96:	4258      	negs	r0, r3
   d6e98:	4158      	adcs	r0, r3
   d6e9a:	4770      	bx	lr
   d6e9c:	4618      	mov	r0, r3
   d6e9e:	4770      	bx	lr

000d6ea0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d6ea0:	b108      	cbz	r0, d6ea6 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
	::operator delete(__p);
   d6ea2:	f7fd b8fc 	b.w	d409e <_ZdlPv>
      }
   d6ea6:	4770      	bx	lr

000d6ea8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d6ea8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6eaa:	b148      	cbz	r0, d6ec0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d6eac:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d6eb0:	d301      	bcc.n	d6eb6 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d6eb2:	f009 fc7f 	bl	e07b4 <_ZSt17__throw_bad_allocv>
      }
   d6eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6eba:	0080      	lsls	r0, r0, #2
   d6ebc:	f7fd b8eb 	b.w	d4096 <_Znwj>
   d6ec0:	bd08      	pop	{r3, pc}

000d6ec2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ec2:	680b      	ldr	r3, [r1, #0]
   d6ec4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d6ec6:	684b      	ldr	r3, [r1, #4]
   d6ec8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d6eca:	b113      	cbz	r3, d6ed2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d6ecc:	685a      	ldr	r2, [r3, #4]
   d6ece:	3201      	adds	r2, #1
   d6ed0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ed2:	4770      	bx	lr

000d6ed4 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d6ed4:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d6ed8:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d6edc:	429a      	cmp	r2, r3
   d6ede:	db13      	blt.n	d6f08 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d6ee0:	dc10      	bgt.n	d6f04 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d6ee2:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d6ee6:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d6eea:	429a      	cmp	r2, r3
   d6eec:	db0c      	blt.n	d6f08 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d6eee:	dc09      	bgt.n	d6f04 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d6ef0:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d6ef4:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6ef8:	429a      	cmp	r2, r3
   d6efa:	db05      	blt.n	d6f08 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d6efc:	bfcc      	ite	gt
   d6efe:	2001      	movgt	r0, #1
   d6f00:	2000      	movle	r0, #0
   d6f02:	4770      	bx	lr
            return +1;
   d6f04:	2001      	movs	r0, #1
   d6f06:	4770      	bx	lr
            return -1;
   d6f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d6f0c:	4770      	bx	lr
	...

000d6f10 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d6f10:	4a02      	ldr	r2, [pc, #8]	; (d6f1c <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d6f12:	6002      	str	r2, [r0, #0]
   d6f14:	684a      	ldr	r2, [r1, #4]
   d6f16:	6042      	str	r2, [r0, #4]
   d6f18:	4770      	bx	lr
   d6f1a:	bf00      	nop
   d6f1c:	000e40d0 	.word	0x000e40d0

000d6f20 <_ZN12LocalTimeHMSaSERKS_>:
   d6f20:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d6f24:	7102      	strb	r2, [r0, #4]
   d6f26:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d6f2a:	7142      	strb	r2, [r0, #5]
   d6f2c:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d6f30:	7182      	strb	r2, [r0, #6]
   d6f32:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d6f36:	71c2      	strb	r2, [r0, #7]
   d6f38:	4770      	bx	lr

000d6f3a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d6f3a:	b538      	push	{r3, r4, r5, lr}
   d6f3c:	460c      	mov	r4, r1
   d6f3e:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d6f40:	f100 011c 	add.w	r1, r0, #28
   d6f44:	4620      	mov	r0, r4
   d6f46:	f7ff ffc5 	bl	d6ed4 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d6f4a:	2800      	cmp	r0, #0
   d6f4c:	db09      	blt.n	d6f62 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d6f4e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d6f52:	4620      	mov	r0, r4
   d6f54:	f7ff ffbe 	bl	d6ed4 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d6f58:	2800      	cmp	r0, #0
   d6f5a:	bfd4      	ite	le
   d6f5c:	2000      	movle	r0, #0
   d6f5e:	2001      	movgt	r0, #1
    }
   d6f60:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d6f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6f66:	e7fb      	b.n	d6f60 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d6f68 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d6f68:	b538      	push	{r3, r4, r5, lr}
   d6f6a:	4604      	mov	r4, r0
   d6f6c:	460d      	mov	r5, r1
   d6f6e:	3004      	adds	r0, #4
   d6f70:	3104      	adds	r1, #4
   d6f72:	f008 fe20 	bl	dfbb6 <_ZN6StringaSERKS_>
   d6f76:	f105 0114 	add.w	r1, r5, #20
   d6f7a:	f104 0014 	add.w	r0, r4, #20
   d6f7e:	f7ff ffcf 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
   d6f82:	f105 011c 	add.w	r1, r5, #28
   d6f86:	f104 001c 	add.w	r0, r4, #28
   d6f8a:	f008 fe14 	bl	dfbb6 <_ZN6StringaSERKS_>
   d6f8e:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d6f92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6f96:	f7ff ffc3 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d6f9a:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d6f9e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d6fa2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d6fa6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d6faa:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d6fae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d6fb2:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d6fb6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d6fba:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6fbe:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6fc2:	f7ff ffad 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
   d6fc6:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d6fca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d6fce:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d6fd2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d6fd6:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d6fda:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d6fde:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d6fe2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d6fe6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6fea:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6fee:	f7ff ff97 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d6ff2:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6ff6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6ffa:	4620      	mov	r0, r4
   d6ffc:	bd38      	pop	{r3, r4, r5, pc}

000d6ffe <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d6ffe:	694a      	ldr	r2, [r1, #20]
   d7000:	6803      	ldr	r3, [r0, #0]
   d7002:	f362 0316 	bfi	r3, r2, #0, #23
   d7006:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d7008:	690b      	ldr	r3, [r1, #16]
   d700a:	1c5a      	adds	r2, r3, #1
   d700c:	8843      	ldrh	r3, [r0, #2]
   d700e:	f362 13ca 	bfi	r3, r2, #7, #4
   d7012:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d7014:	68ca      	ldr	r2, [r1, #12]
   d7016:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d701a:	f362 03c7 	bfi	r3, r2, #3, #5
   d701e:	70c3      	strb	r3, [r0, #3]
}
   d7020:	4770      	bx	lr

000d7022 <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d7022:	b510      	push	{r4, lr}
   d7024:	4604      	mov	r4, r0
   d7026:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d7028:	2224      	movs	r2, #36	; 0x24
   d702a:	2100      	movs	r1, #0
   d702c:	a803      	add	r0, sp, #12
   d702e:	f00a fb63 	bl	e16f8 <memset>
    timeInfo.tm_year = ymd.year;
   d7032:	6823      	ldr	r3, [r4, #0]
   d7034:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d7038:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d703a:	8863      	ldrh	r3, [r4, #2]
   d703c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d7040:	3b01      	subs	r3, #1
   d7042:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d7044:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d7046:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d7048:	08db      	lsrs	r3, r3, #3
   d704a:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d704c:	f006 f8c4 	bl	dd1d8 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d7050:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d7054:	a903      	add	r1, sp, #12
   d7056:	4668      	mov	r0, sp
   d7058:	f006 f8ae 	bl	dd1b8 <localtime_r>
}
   d705c:	9809      	ldr	r0, [sp, #36]	; 0x24
   d705e:	b00c      	add	sp, #48	; 0x30
   d7060:	bd10      	pop	{r4, pc}

000d7062 <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d7062:	b530      	push	{r4, r5, lr}
   d7064:	4604      	mov	r4, r0
   d7066:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d7068:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d706a:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d706c:	a803      	add	r0, sp, #12
   d706e:	2100      	movs	r1, #0
   d7070:	f00a fb42 	bl	e16f8 <memset>
    timeInfo.tm_year = ymd.year;
   d7074:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d7076:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d7078:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d707c:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d707e:	8863      	ldrh	r3, [r4, #2]
   d7080:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d7084:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d7086:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d708a:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d708c:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d708e:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d7090:	f006 f8a2 	bl	dd1d8 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d7094:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d7098:	a903      	add	r1, sp, #12
   d709a:	4668      	mov	r0, sp
   d709c:	f006 f88c 	bl	dd1b8 <localtime_r>
    fromTimeInfo(&timeInfo);
   d70a0:	a903      	add	r1, sp, #12
   d70a2:	4620      	mov	r0, r4
   d70a4:	f7ff ffab 	bl	d6ffe <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d70a8:	b00d      	add	sp, #52	; 0x34
   d70aa:	bd30      	pop	{r4, r5, pc}

000d70ac <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d70ac:	6803      	ldr	r3, [r0, #0]
   d70ae:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d70b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d70b6:	4293      	cmp	r3, r2
   d70b8:	d313      	bcc.n	d70e2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d70ba:	d810      	bhi.n	d70de <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d70bc:	8842      	ldrh	r2, [r0, #2]
   d70be:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d70c2:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d70c6:	429a      	cmp	r2, r3
   d70c8:	d30b      	bcc.n	d70e2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d70ca:	d808      	bhi.n	d70de <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d70cc:	78c3      	ldrb	r3, [r0, #3]
   d70ce:	08db      	lsrs	r3, r3, #3
   d70d0:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d70d4:	d305      	bcc.n	d70e2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d70d6:	bf8c      	ite	hi
   d70d8:	2001      	movhi	r0, #1
   d70da:	2000      	movls	r0, #0
   d70dc:	4770      	bx	lr
        cmp = +1;
   d70de:	2001      	movs	r0, #1
   d70e0:	4770      	bx	lr
        cmp = -1;
   d70e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d70e6:	4770      	bx	lr

000d70e8 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d70e8:	4a02      	ldr	r2, [pc, #8]	; (d70f4 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d70ea:	6002      	str	r2, [r0, #0]
   d70ec:	2200      	movs	r2, #0
   d70ee:	6042      	str	r2, [r0, #4]
}
   d70f0:	4770      	bx	lr
   d70f2:	bf00      	nop
   d70f4:	000e40d0 	.word	0x000e40d0

000d70f8 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d70f8:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d70fa:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d70fc:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d70fe:	8083      	strh	r3, [r0, #4]
   d7100:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d7102:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d7104:	ab05      	add	r3, sp, #20
   d7106:	9300      	str	r3, [sp, #0]
   d7108:	4913      	ldr	r1, [pc, #76]	; (d7158 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d710a:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d710c:	ab04      	add	r3, sp, #16
   d710e:	aa03      	add	r2, sp, #12
   d7110:	4628      	mov	r0, r5
   d7112:	f006 f811 	bl	dd138 <sscanf>
   d7116:	2803      	cmp	r0, #3
   d7118:	d107      	bne.n	d712a <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d711a:	9b03      	ldr	r3, [sp, #12]
   d711c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d711e:	9b04      	ldr	r3, [sp, #16]
   d7120:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d7122:	9b05      	ldr	r3, [sp, #20]
   d7124:	71a3      	strb	r3, [r4, #6]
}
   d7126:	b007      	add	sp, #28
   d7128:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d712a:	490c      	ldr	r1, [pc, #48]	; (d715c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d712c:	ab04      	add	r3, sp, #16
   d712e:	aa03      	add	r2, sp, #12
   d7130:	4628      	mov	r0, r5
   d7132:	f006 f801 	bl	dd138 <sscanf>
   d7136:	2802      	cmp	r0, #2
   d7138:	d104      	bne.n	d7144 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d713a:	9b03      	ldr	r3, [sp, #12]
   d713c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d713e:	9b04      	ldr	r3, [sp, #16]
   d7140:	7163      	strb	r3, [r4, #5]
   d7142:	e7f0      	b.n	d7126 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d7144:	4906      	ldr	r1, [pc, #24]	; (d7160 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d7146:	aa03      	add	r2, sp, #12
   d7148:	4628      	mov	r0, r5
   d714a:	f005 fff5 	bl	dd138 <sscanf>
   d714e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d7150:	bf04      	itt	eq
   d7152:	9b03      	ldreq	r3, [sp, #12]
   d7154:	7123      	strbeq	r3, [r4, #4]
}
   d7156:	e7e6      	b.n	d7126 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d7158:	000e4090 	.word	0x000e4090
   d715c:	000e4093 	.word	0x000e4093
   d7160:	000e3ecf 	.word	0x000e3ecf

000d7164 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d7164:	b510      	push	{r4, lr}
   d7166:	4b04      	ldr	r3, [pc, #16]	; (d7178 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d7168:	6003      	str	r3, [r0, #0]
   d716a:	2300      	movs	r3, #0
   d716c:	4604      	mov	r4, r0
   d716e:	6043      	str	r3, [r0, #4]
    parse(str);
   d7170:	f7ff ffc2 	bl	d70f8 <_ZN12LocalTimeHMS5parseEPKc>
}
   d7174:	4620      	mov	r0, r4
   d7176:	bd10      	pop	{r4, pc}
   d7178:	000e40d0 	.word	0x000e40d0

000d717c <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d717c:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d717e:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d7180:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d7182:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d7184:	7003      	strb	r3, [r0, #0]
   d7186:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d718a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d718e:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d7192:	490a      	ldr	r1, [pc, #40]	; (d71bc <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d7194:	301c      	adds	r0, #28
   d7196:	f7ff ffe5 	bl	d7164 <_ZN12LocalTimeHMSC1EPKc>
   d719a:	4909      	ldr	r1, [pc, #36]	; (d71c0 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d719c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d71a0:	f7ff ffe0 	bl	d7164 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d71a4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d71a8:	4906      	ldr	r1, [pc, #24]	; (d71c4 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d71aa:	6365      	str	r5, [r4, #52]	; 0x34
   d71ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d71b0:	f008 fcc5 	bl	dfb3e <_ZN6StringC1EPKc>
   d71b4:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d71b6:	4620      	mov	r0, r4
   d71b8:	bd38      	pop	{r3, r4, r5, pc}
   d71ba:	bf00      	nop
   d71bc:	000e4099 	.word	0x000e4099
   d71c0:	000e40a2 	.word	0x000e40a2
   d71c4:	000e4537 	.word	0x000e4537

000d71c8 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d71c8:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d71cc:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d71d0:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d71d4:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d71d6:	bfb8      	it	lt
   d71d8:	4808      	ldrlt	r0, [pc, #32]	; (d71fc <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d71da:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d71de:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d71e2:	bfbd      	ittte	lt
   d71e4:	fb00 2003 	mlalt	r0, r0, r3, r2
   d71e8:	1840      	addlt	r0, r0, r1
   d71ea:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d71ec:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d71f0:	bfa4      	itt	ge
   d71f2:	fb00 2303 	mlage	r3, r0, r3, r2
   d71f6:	1858      	addge	r0, r3, r1
}
   d71f8:	4770      	bx	lr
   d71fa:	bf00      	nop
   d71fc:	fffff1f0 	.word	0xfffff1f0

000d7200 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d7200:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d7204:	b943      	cbnz	r3, d7218 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d7206:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d720a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d720c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d7210:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d7212:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d7216:	600b      	str	r3, [r1, #0]
}
   d7218:	4770      	bx	lr

000d721a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d721a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d721e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d7220:	b9b3      	cbnz	r3, d7250 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d7222:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d7226:	688c      	ldr	r4, [r1, #8]
   d7228:	442c      	add	r4, r5
   d722a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d722e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d7230:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d7234:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d7236:	bfb5      	itete	lt
   d7238:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d723a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d723c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d723e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d7240:	bfb5      	itete	lt
   d7242:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d7246:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d724a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d724c:	189b      	addge	r3, r3, r2
   d724e:	600b      	str	r3, [r1, #0]
}
   d7250:	bd30      	pop	{r4, r5, pc}

000d7252 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d7252:	b538      	push	{r3, r4, r5, lr}
   d7254:	6844      	ldr	r4, [r0, #4]
   d7256:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d7258:	68ab      	ldr	r3, [r5, #8]
   d725a:	42a3      	cmp	r3, r4
   d725c:	d007      	beq.n	d726e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d725e:	4620      	mov	r0, r4
   d7260:	f7ff ff24 	bl	d70ac <_ZNK12LocalTimeYMD9compareToES_>
   d7264:	3404      	adds	r4, #4
        if (*it == ymd) {
   d7266:	2800      	cmp	r0, #0
   d7268:	d1f6      	bne.n	d7258 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d726a:	2001      	movs	r0, #1
}
   d726c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d726e:	2000      	movs	r0, #0
   d7270:	e7fc      	b.n	d726c <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d7272 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d7272:	b538      	push	{r3, r4, r5, lr}
   d7274:	6904      	ldr	r4, [r0, #16]
   d7276:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d7278:	696b      	ldr	r3, [r5, #20]
   d727a:	42a3      	cmp	r3, r4
   d727c:	d007      	beq.n	d728e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d727e:	4620      	mov	r0, r4
   d7280:	f7ff ff14 	bl	d70ac <_ZNK12LocalTimeYMD9compareToES_>
   d7284:	3404      	adds	r4, #4
        if (*it == ymd) {
   d7286:	2800      	cmp	r0, #0
   d7288:	d1f6      	bne.n	d7278 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d728a:	2001      	movs	r0, #1
}
   d728c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d728e:	2000      	movs	r0, #0
   d7290:	e7fc      	b.n	d728c <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d7292 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d7292:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7294:	4605      	mov	r5, r0
   d7296:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d7298:	f7ff ffeb 	bl	d7272 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d729c:	b990      	cbnz	r0, d72c4 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d729e:	a801      	add	r0, sp, #4
   d72a0:	9101      	str	r1, [sp, #4]
   d72a2:	f7ff febe 	bl	d7022 <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d72a6:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d72a8:	4631      	mov	r1, r6
   d72aa:	fa43 f400 	asr.w	r4, r3, r0
   d72ae:	4628      	mov	r0, r5
   d72b0:	f7ff ffcf 	bl	d7252 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d72b4:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d72b8:	2c00      	cmp	r4, #0
   d72ba:	bf08      	it	eq
   d72bc:	4604      	moveq	r4, r0
}
   d72be:	4620      	mov	r0, r4
   d72c0:	b002      	add	sp, #8
   d72c2:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d72c4:	2400      	movs	r4, #0
   d72c6:	e7fa      	b.n	d72be <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d72c8 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d72c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d72cc:	2400      	movs	r4, #0
   d72ce:	6845      	ldr	r5, [r0, #4]
   d72d0:	4680      	mov	r8, r0
   d72d2:	4626      	mov	r6, r4
   d72d4:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d72d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d72da:	429d      	cmp	r5, r3
   d72dc:	d01e      	beq.n	d731c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d72de:	f367 0916 	bfi	r9, r7, #0, #23
   d72e2:	f366 59da 	bfi	r9, r6, #23, #4
   d72e6:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d72ea:	f1b9 0f00 	cmp.w	r9, #0
   d72ee:	d109      	bne.n	d7304 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d72f0:	682f      	ldr	r7, [r5, #0]
   d72f2:	886e      	ldrh	r6, [r5, #2]
   d72f4:	78ec      	ldrb	r4, [r5, #3]
   d72f6:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d72fa:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d72fe:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d7300:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d7302:	e7e8      	b.n	d72d6 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d7304:	f367 0116 	bfi	r1, r7, #0, #23
   d7308:	f366 51da 	bfi	r1, r6, #23, #4
   d730c:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d7310:	4628      	mov	r0, r5
   d7312:	f7ff fecb 	bl	d70ac <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d7316:	2800      	cmp	r0, #0
   d7318:	dcea      	bgt.n	d72f0 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d731a:	e7f1      	b.n	d7300 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d731c:	2000      	movs	r0, #0
   d731e:	f367 0016 	bfi	r0, r7, #0, #23
   d7322:	f366 50da 	bfi	r0, r6, #23, #4
   d7326:	f364 60df 	bfi	r0, r4, #27, #5
}
   d732a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d7330 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d7330:	4a05      	ldr	r2, [pc, #20]	; (d7348 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d7332:	b508      	push	{r3, lr}
   d7334:	6002      	str	r2, [r0, #0]
   d7336:	2200      	movs	r2, #0
   d7338:	4603      	mov	r3, r0
   d733a:	6042      	str	r2, [r0, #4]
   d733c:	3008      	adds	r0, #8
   d733e:	f7ff fed3 	bl	d70e8 <_ZN12LocalTimeHMSC1Ev>
}
   d7342:	4618      	mov	r0, r3
   d7344:	bd08      	pop	{r3, pc}
   d7346:	bf00      	nop
   d7348:	000e40e0 	.word	0x000e40e0

000d734c <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d734c:	2300      	movs	r3, #0
   d734e:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d7350:	8183      	strh	r3, [r0, #12]
   d7352:	7383      	strb	r3, [r0, #14]
}
   d7354:	4770      	bx	lr
	...

000d7358 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d7358:	b530      	push	{r4, r5, lr}
   d735a:	4604      	mov	r4, r0
   d735c:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d735e:	460d      	mov	r5, r1
   d7360:	b111      	cbz	r1, d7368 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d7362:	780b      	ldrb	r3, [r1, #0]
   d7364:	2b4d      	cmp	r3, #77	; 0x4d
   d7366:	d003      	beq.n	d7370 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d7368:	4620      	mov	r0, r4
   d736a:	f7ff ffef 	bl	d734c <_ZN15LocalTimeChange5clearEv>
   d736e:	e01b      	b.n	d73a8 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d7370:	ab05      	add	r3, sp, #20
   d7372:	9300      	str	r3, [sp, #0]
   d7374:	490f      	ldr	r1, [pc, #60]	; (d73b4 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d7376:	ab04      	add	r3, sp, #16
   d7378:	aa03      	add	r2, sp, #12
   d737a:	4628      	mov	r0, r5
   d737c:	f005 fedc 	bl	dd138 <sscanf>
   d7380:	2803      	cmp	r0, #3
   d7382:	d1f1      	bne.n	d7368 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d7384:	9b03      	ldr	r3, [sp, #12]
   d7386:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d7388:	9b04      	ldr	r3, [sp, #16]
   d738a:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d738c:	9b05      	ldr	r3, [sp, #20]
   d738e:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d7390:	212f      	movs	r1, #47	; 0x2f
   d7392:	4628      	mov	r0, r5
   d7394:	f00a f9f5 	bl	e1782 <strchr>
        if (cp) {
   d7398:	b140      	cbz	r0, d73ac <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d739a:	1c41      	adds	r1, r0, #1
   d739c:	f104 0008 	add.w	r0, r4, #8
   d73a0:	f7ff feaa 	bl	d70f8 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d73a4:	2301      	movs	r3, #1
   d73a6:	71e3      	strb	r3, [r4, #7]
}
   d73a8:	b007      	add	sp, #28
   d73aa:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d73ac:	81a0      	strh	r0, [r4, #12]
   d73ae:	73a0      	strb	r0, [r4, #14]
}
   d73b0:	e7f8      	b.n	d73a4 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d73b2:	bf00      	nop
   d73b4:	000e40ab 	.word	0x000e40ab

000d73b8 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d73b8:	4b10      	ldr	r3, [pc, #64]	; (d73fc <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d73ba:	4911      	ldr	r1, [pc, #68]	; (d7400 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d73bc:	b510      	push	{r4, lr}
   d73be:	4604      	mov	r4, r0
   d73c0:	f840 3b04 	str.w	r3, [r0], #4
   d73c4:	f008 fbbb 	bl	dfb3e <_ZN6StringC1EPKc>
   d73c8:	f104 0014 	add.w	r0, r4, #20
   d73cc:	f7ff fe8c 	bl	d70e8 <_ZN12LocalTimeHMSC1Ev>
   d73d0:	490b      	ldr	r1, [pc, #44]	; (d7400 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d73d2:	f104 001c 	add.w	r0, r4, #28
   d73d6:	f008 fbb2 	bl	dfb3e <_ZN6StringC1EPKc>
   d73da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d73de:	f7ff fe83 	bl	d70e8 <_ZN12LocalTimeHMSC1Ev>
   d73e2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d73e6:	f7ff ffa3 	bl	d7330 <_ZN15LocalTimeChangeC1Ev>
   d73ea:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d73ee:	f7ff ff9f 	bl	d7330 <_ZN15LocalTimeChangeC1Ev>
   d73f2:	2300      	movs	r3, #0
   d73f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d73f8:	4620      	mov	r0, r4
   d73fa:	bd10      	pop	{r4, pc}
   d73fc:	000e40f0 	.word	0x000e40f0
   d7400:	000e4537 	.word	0x000e4537

000d7404 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d7404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7408:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d740a:	4608      	mov	r0, r1
   d740c:	f00a f9e2 	bl	e17d4 <strdup>
    size_t ii = 0;
   d7410:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d7412:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d7414:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d7416:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d741a:	493f      	ldr	r1, [pc, #252]	; (d7518 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d741c:	9801      	ldr	r0, [sp, #4]
   d741e:	aa01      	add	r2, sp, #4
   d7420:	f00b f8ea 	bl	e25f8 <strtok_r>
   d7424:	4601      	mov	r1, r0
   d7426:	2800      	cmp	r0, #0
   d7428:	d062      	beq.n	d74f0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d742a:	2d01      	cmp	r5, #1
   d742c:	f105 0301 	add.w	r3, r5, #1
   d7430:	d053      	beq.n	d74da <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d7432:	2d02      	cmp	r5, #2
   d7434:	d056      	beq.n	d74e4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d7436:	2d00      	cmp	r5, #0
   d7438:	d146      	bne.n	d74c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d743a:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d743c:	f892 9000 	ldrb.w	r9, [r2]
   d7440:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d7444:	4615      	mov	r5, r2
   d7446:	4617      	mov	r7, r2
   d7448:	f102 0201 	add.w	r2, r2, #1
   d744c:	d8f6      	bhi.n	d743c <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d744e:	2200      	movs	r2, #0
   d7450:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d7452:	f104 001c 	add.w	r0, r4, #28
   d7456:	f008 fbd0 	bl	dfbfa <_ZN6StringaSEPKc>
                valid = true;
   d745a:	2201      	movs	r2, #1
                *cp = save2;
   d745c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d7460:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d7464:	782a      	ldrb	r2, [r5, #0]
   d7466:	b36a      	cbz	r2, d74c4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d7468:	f897 a000 	ldrb.w	sl, [r7]
   d746c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d7470:	2a3f      	cmp	r2, #63	; 0x3f
   d7472:	46b9      	mov	r9, r7
   d7474:	46bb      	mov	fp, r7
   d7476:	f107 0701 	add.w	r7, r7, #1
   d747a:	d9f5      	bls.n	d7468 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d747c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d747e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d7482:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d7486:	4629      	mov	r1, r5
   d7488:	4638      	mov	r0, r7
   d748a:	f7ff fe35 	bl	d70f8 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d748e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d7492:	f1ba 0f00 	cmp.w	sl, #0
   d7496:	d015      	beq.n	d74c4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d7498:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d749a:	f81b ab01 	ldrb.w	sl, [fp], #1
   d749e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d74a2:	d8f9      	bhi.n	d7498 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d74a4:	2200      	movs	r2, #0
   d74a6:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d74a8:	4649      	mov	r1, r9
   d74aa:	1d20      	adds	r0, r4, #4
   d74ac:	f008 fba5 	bl	dfbfa <_ZN6StringaSEPKc>
                        *cp = save2;
   d74b0:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d74b4:	f104 0014 	add.w	r0, r4, #20
   d74b8:	f1ba 0f00 	cmp.w	sl, #0
   d74bc:	d006      	beq.n	d74cc <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d74be:	4629      	mov	r1, r5
   d74c0:	f7ff fe1a 	bl	d70f8 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d74c4:	2501      	movs	r5, #1
   d74c6:	e7a8      	b.n	d741a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d74c8:	461d      	mov	r5, r3
   d74ca:	e7a6      	b.n	d741a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d74cc:	4639      	mov	r1, r7
   d74ce:	f7ff fd27 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d74d2:	7e23      	ldrb	r3, [r4, #24]
   d74d4:	3b01      	subs	r3, #1
   d74d6:	7623      	strb	r3, [r4, #24]
   d74d8:	e7f4      	b.n	d74c4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d74da:	4640      	mov	r0, r8
   d74dc:	f7ff ff3c 	bl	d7358 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d74e0:	2502      	movs	r5, #2
   d74e2:	e79a      	b.n	d741a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d74e4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d74e8:	f7ff ff36 	bl	d7358 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d74ec:	2503      	movs	r5, #3
   d74ee:	e794      	b.n	d741a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d74f0:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d74f4:	b143      	cbz	r3, d7508 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d74f6:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d74fa:	b92a      	cbnz	r2, d7508 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d74fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d7500:	f7ff ff24 	bl	d734c <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d7504:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d7508:	4630      	mov	r0, r6
   d750a:	f005 fdfd 	bl	dd108 <free>
}
   d750e:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d7512:	b003      	add	sp, #12
   d7514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7518:	000e40b5 	.word	0x000e40b5

000d751c <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d751c:	b538      	push	{r3, r4, r5, lr}
   d751e:	4b13      	ldr	r3, [pc, #76]	; (d756c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d7520:	4604      	mov	r4, r0
   d7522:	460d      	mov	r5, r1
   d7524:	f840 3b04 	str.w	r3, [r0], #4
   d7528:	4911      	ldr	r1, [pc, #68]	; (d7570 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d752a:	f008 fb08 	bl	dfb3e <_ZN6StringC1EPKc>
   d752e:	f104 0014 	add.w	r0, r4, #20
   d7532:	f7ff fdd9 	bl	d70e8 <_ZN12LocalTimeHMSC1Ev>
   d7536:	490e      	ldr	r1, [pc, #56]	; (d7570 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d7538:	f104 001c 	add.w	r0, r4, #28
   d753c:	f008 faff 	bl	dfb3e <_ZN6StringC1EPKc>
   d7540:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d7544:	f7ff fdd0 	bl	d70e8 <_ZN12LocalTimeHMSC1Ev>
   d7548:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d754c:	f7ff fef0 	bl	d7330 <_ZN15LocalTimeChangeC1Ev>
   d7550:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d7554:	f7ff feec 	bl	d7330 <_ZN15LocalTimeChangeC1Ev>
   d7558:	2300      	movs	r3, #0
   d755a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d755e:	4629      	mov	r1, r5
   d7560:	4620      	mov	r0, r4
   d7562:	f7ff ff4f 	bl	d7404 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d7566:	4620      	mov	r0, r4
   d7568:	bd38      	pop	{r3, r4, r5, pc}
   d756a:	bf00      	nop
   d756c:	000e40f0 	.word	0x000e40f0
   d7570:	000e4537 	.word	0x000e4537

000d7574 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d7574:	b508      	push	{r3, lr}
   d7576:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d7578:	f7ff fdb6 	bl	d70e8 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d757c:	688a      	ldr	r2, [r1, #8]
   d757e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d7580:	684a      	ldr	r2, [r1, #4]
   d7582:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d7584:	680a      	ldr	r2, [r1, #0]
   d7586:	719a      	strb	r2, [r3, #6]
}
   d7588:	4618      	mov	r0, r3
   d758a:	bd08      	pop	{r3, pc}

000d758c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d758c:	b513      	push	{r0, r1, r4, lr}
   d758e:	4b07      	ldr	r3, [pc, #28]	; (d75ac <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d7590:	6003      	str	r3, [r0, #0]
   d7592:	2300      	movs	r3, #0
   d7594:	4604      	mov	r4, r0
   d7596:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d7598:	4668      	mov	r0, sp
   d759a:	f7ff ffeb 	bl	d7574 <_ZNK14LocalTimeValue3hmsEv>
   d759e:	4669      	mov	r1, sp
   d75a0:	4620      	mov	r0, r4
   d75a2:	f7ff fcbd 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
}
   d75a6:	4620      	mov	r0, r4
   d75a8:	b002      	add	sp, #8
   d75aa:	bd10      	pop	{r4, pc}
   d75ac:	000e40d0 	.word	0x000e40d0

000d75b0 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d75b0:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d75b4:	b943      	cbnz	r3, d75c8 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d75b6:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d75ba:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d75bc:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d75c0:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d75c2:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d75c6:	6003      	str	r3, [r0, #0]
}
   d75c8:	4770      	bx	lr

000d75ca <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d75ca:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d75cc:	2300      	movs	r3, #0
   d75ce:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d75d0:	a801      	add	r0, sp, #4
   d75d2:	9301      	str	r3, [sp, #4]
   d75d4:	f7ff fd13 	bl	d6ffe <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d75d8:	9801      	ldr	r0, [sp, #4]
   d75da:	b003      	add	sp, #12
   d75dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d75e0 <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d75e0:	4b19      	ldr	r3, [pc, #100]	; (d7648 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d75e2:	b570      	push	{r4, r5, r6, lr}
   d75e4:	4604      	mov	r4, r0
   d75e6:	460d      	mov	r5, r1
   d75e8:	f840 3b04 	str.w	r3, [r0], #4
   d75ec:	3104      	adds	r1, #4
   d75ee:	f008 faf1 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d75f2:	f105 0114 	add.w	r1, r5, #20
   d75f6:	f104 0014 	add.w	r0, r4, #20
   d75fa:	f7ff fc89 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d75fe:	f105 011c 	add.w	r1, r5, #28
   d7602:	f104 001c 	add.w	r0, r4, #28
   d7606:	f008 fae5 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d760a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d760e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d7612:	f7ff fc7d 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d7616:	4e0d      	ldr	r6, [pc, #52]	; (d764c <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d7618:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d761a:	63a3      	str	r3, [r4, #56]	; 0x38
   d761c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d7620:	6366      	str	r6, [r4, #52]	; 0x34
   d7622:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7626:	f7ff fc73 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d762a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d762c:	64a3      	str	r3, [r4, #72]	; 0x48
   d762e:	6466      	str	r6, [r4, #68]	; 0x44
   d7630:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d7634:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d7638:	f7ff fc6a 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d763c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d7640:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d7644:	4620      	mov	r0, r4
   d7646:	bd70      	pop	{r4, r5, r6, pc}
   d7648:	000e40f0 	.word	0x000e40f0
   d764c:	000e40e0 	.word	0x000e40e0

000d7650 <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d7650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7652:	460c      	mov	r4, r1
   d7654:	f851 3b04 	ldr.w	r3, [r1], #4
   d7658:	4607      	mov	r7, r0
   d765a:	f840 3b04 	str.w	r3, [r0], #4
   d765e:	f7ff ffbf 	bl	d75e0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d7662:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d7666:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d766a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d766e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7670:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d7674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d767a:	6833      	ldr	r3, [r6, #0]
   d767c:	602b      	str	r3, [r5, #0]
   d767e:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d7682:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d7686:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d768a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d768c:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d7690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7692:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7696:	6833      	ldr	r3, [r6, #0]
   d7698:	602b      	str	r3, [r5, #0]
   d769a:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d769e:	34c8      	adds	r4, #200	; 0xc8
   d76a0:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d76a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d76a6:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d76aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d76ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d76ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d76b0:	6823      	ldr	r3, [r4, #0]
   d76b2:	602b      	str	r3, [r5, #0]
   d76b4:	4638      	mov	r0, r7
   d76b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76b8 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d76b8:	b510      	push	{r4, lr}
   d76ba:	4604      	mov	r4, r0
   d76bc:	3038      	adds	r0, #56	; 0x38
   d76be:	f008 f9f3 	bl	dfaa8 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d76c2:	6920      	ldr	r0, [r4, #16]
   d76c4:	f7ff fbec 	bl	d6ea0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d76c8:	6860      	ldr	r0, [r4, #4]
   d76ca:	f7ff fbe9 	bl	d6ea0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d76ce:	4620      	mov	r0, r4
   d76d0:	bd10      	pop	{r4, pc}
	...

000d76d4 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d76d4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d76d6:	4d09      	ldr	r5, [pc, #36]	; (d76fc <_ZN9LocalTime8instanceEv+0x28>)
   d76d8:	682b      	ldr	r3, [r5, #0]
   d76da:	b963      	cbnz	r3, d76f6 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d76dc:	2060      	movs	r0, #96	; 0x60
   d76de:	f7fc fcda 	bl	d4096 <_Znwj>
   d76e2:	4604      	mov	r4, r0
   d76e4:	b130      	cbz	r0, d76f4 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d76e6:	4b06      	ldr	r3, [pc, #24]	; (d7700 <_ZN9LocalTime8instanceEv+0x2c>)
   d76e8:	f840 3b04 	str.w	r3, [r0], #4
   d76ec:	f7ff fe64 	bl	d73b8 <_ZN22LocalTimePosixTimezoneC1Ev>
   d76f0:	2364      	movs	r3, #100	; 0x64
   d76f2:	65e3      	str	r3, [r4, #92]	; 0x5c
   d76f4:	602c      	str	r4, [r5, #0]
}
   d76f6:	6828      	ldr	r0, [r5, #0]
   d76f8:	bd38      	pop	{r3, r4, r5, pc}
   d76fa:	bf00      	nop
   d76fc:	2003e47c 	.word	0x2003e47c
   d7700:	000e40c0 	.word	0x000e40c0

000d7704 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d7704:	f005 bd68 	b.w	dd1d8 <mktime>

000d7708 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d7708:	3901      	subs	r1, #1
   d770a:	290b      	cmp	r1, #11
   d770c:	d815      	bhi.n	d773a <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d770e:	e8df f001 	tbb	[pc, r1]
   d7712:	0816      	.short	0x0816
   d7714:	06160616 	.word	0x06160616
   d7718:	16061616 	.word	0x16061616
   d771c:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d771e:	201e      	movs	r0, #30
   d7720:	4770      	bx	lr
            if ((year % 4) == 0) {
   d7722:	0783      	lsls	r3, r0, #30
   d7724:	d10d      	bne.n	d7742 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d7726:	2264      	movs	r2, #100	; 0x64
   d7728:	fb90 f3f2 	sdiv	r3, r0, r2
   d772c:	fb02 0013 	mls	r0, r2, r3, r0
   d7730:	2800      	cmp	r0, #0
                    return 29;
   d7732:	bf0c      	ite	eq
   d7734:	201c      	moveq	r0, #28
   d7736:	201d      	movne	r0, #29
   d7738:	4770      	bx	lr
    return 0;
   d773a:	2000      	movs	r0, #0
   d773c:	4770      	bx	lr
            return 31;
   d773e:	201f      	movs	r0, #31
   d7740:	4770      	bx	lr
                return 28;
   d7742:	201c      	movs	r0, #28
}
   d7744:	4770      	bx	lr

000d7746 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d7746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d7748:	2301      	movs	r3, #1
   d774a:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d774c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d7750:	3b01      	subs	r3, #1
   d7752:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d7754:	2300      	movs	r3, #0
   d7756:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d775a:	4606      	mov	r6, r0
   d775c:	460c      	mov	r4, r1
   d775e:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d7760:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d7762:	4620      	mov	r0, r4
   d7764:	f7ff ffce 	bl	d7704 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d7768:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d776c:	69a2      	ldr	r2, [r4, #24]
   d776e:	429a      	cmp	r2, r3
   d7770:	d003      	beq.n	d777a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d7772:	68e3      	ldr	r3, [r4, #12]
   d7774:	3301      	adds	r3, #1
   d7776:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d7778:	e7f3      	b.n	d7762 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d777a:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d777e:	2d01      	cmp	r5, #1
   d7780:	d013      	beq.n	d77aa <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d7782:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d7784:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d7786:	3d01      	subs	r5, #1
   d7788:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d778c:	441d      	add	r5, r3
   d778e:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d7790:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d7794:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7798:	f7ff ffb6 	bl	d7708 <_ZN9LocalTime14lastDayOfMonthEii>
   d779c:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d779e:	bfc4      	itt	gt
   d77a0:	3d07      	subgt	r5, #7
   d77a2:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d77a4:	4620      	mov	r0, r4
   d77a6:	f7ff ffad 	bl	d7704 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d77aa:	4621      	mov	r1, r4
   d77ac:	f106 0008 	add.w	r0, r6, #8
   d77b0:	f7ff fd26 	bl	d7200 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d77b4:	4638      	mov	r0, r7
   d77b6:	f7ff fd30 	bl	d721a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d77ba:	4620      	mov	r0, r4
}
   d77bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d77c0:	f005 bd0a 	b.w	dd1d8 <mktime>

000d77c4 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d77c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d77c6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d77ca:	b085      	sub	sp, #20
   d77cc:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d77ce:	b92b      	cbnz	r3, d77dc <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d77d0:	f7ff ff80 	bl	d76d4 <_ZN9LocalTime8instanceEv>
   d77d4:	1d01      	adds	r1, r0, #4
   d77d6:	1d20      	adds	r0, r4, #4
   d77d8:	f7ff fbc6 	bl	d6f68 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d77dc:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d77e0:	2b00      	cmp	r3, #0
   d77e2:	d069      	beq.n	d78b8 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d77e4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d77e8:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d77ec:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d77ee:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d77f0:	a802      	add	r0, sp, #8
   d77f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d77f6:	f005 fcdf 	bl	dd1b8 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d77fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d77fc:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d7800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7802:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7806:	6833      	ldr	r3, [r6, #0]
   d7808:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d780a:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d780e:	a802      	add	r0, sp, #8
   d7810:	f7ff fb7e 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d7814:	aa02      	add	r2, sp, #8
   d7816:	4639      	mov	r1, r7
   d7818:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d781c:	f7ff ff93 	bl	d7746 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d7820:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7824:	f104 0118 	add.w	r1, r4, #24
   d7828:	a802      	add	r0, sp, #8
   d782a:	f7ff fb71 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d782e:	aa02      	add	r2, sp, #8
   d7830:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d7834:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d7838:	f7ff ff85 	bl	d7746 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d783c:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7840:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d7842:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7844:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d7846:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d784a:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d784e:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d7852:	da24      	bge.n	d789e <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d7854:	42b0      	cmp	r0, r6
   d7856:	eb71 0507 	sbcs.w	r5, r1, r7
   d785a:	da19      	bge.n	d7890 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d785c:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d785e:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d7860:	6820      	ldr	r0, [r4, #0]
   d7862:	f7ff fb13 	bl	d6e8c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d7866:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d786a:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d786e:	9101      	str	r1, [sp, #4]
   d7870:	bb20      	cbnz	r0, d78bc <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d7872:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d7876:	f7ff fca7 	bl	d71c8 <_ZNK12LocalTimeHMS9toSecondsEv>
   d787a:	1a36      	subs	r6, r6, r0
   d787c:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d7880:	9901      	ldr	r1, [sp, #4]
   d7882:	a802      	add	r0, sp, #8
   d7884:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7888:	f005 fc96 	bl	dd1b8 <localtime_r>
}
   d788c:	b005      	add	sp, #20
   d788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d7890:	4290      	cmp	r0, r2
   d7892:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d7896:	bfb4      	ite	lt
   d7898:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d789a:	2302      	movge	r3, #2
   d789c:	e7df      	b.n	d785e <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d789e:	4290      	cmp	r0, r2
   d78a0:	eb71 0303 	sbcs.w	r3, r1, r3
   d78a4:	da01      	bge.n	d78aa <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d78a6:	2303      	movs	r3, #3
   d78a8:	e7d9      	b.n	d785e <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d78aa:	42b0      	cmp	r0, r6
   d78ac:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d78b0:	bfb4      	ite	lt
   d78b2:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d78b4:	2305      	movge	r3, #5
   d78b6:	e7d2      	b.n	d785e <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d78b8:	2306      	movs	r3, #6
   d78ba:	e7d0      	b.n	d785e <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d78bc:	f104 0018 	add.w	r0, r4, #24
   d78c0:	e7d9      	b.n	d7876 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d78c2 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d78c2:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d78c6:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d78c8:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d78ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d78cc:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d78ce:	ad01      	add	r5, sp, #4
   d78d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d78d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d78d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d78d6:	6823      	ldr	r3, [r4, #0]
   d78d8:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d78da:	a801      	add	r0, sp, #4
   d78dc:	f005 fc7c 	bl	dd1d8 <mktime>
   d78e0:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d78e2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d78e6:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d78e8:	f7ff fc6e 	bl	d71c8 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d78ec:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d78f0:	eb14 0800 	adds.w	r8, r4, r0
   d78f4:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d78f8:	b31b      	cbz	r3, d7942 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d78fa:	2306      	movs	r3, #6
   d78fc:	a821      	add	r0, sp, #132	; 0x84
   d78fe:	9320      	str	r3, [sp, #128]	; 0x80
   d7900:	f7ff fd5a 	bl	d73b8 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d7904:	4631      	mov	r1, r6
   d7906:	a80a      	add	r0, sp, #40	; 0x28
   d7908:	f7ff fe6a 	bl	d75e0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d790c:	a90a      	add	r1, sp, #40	; 0x28
   d790e:	a821      	add	r0, sp, #132	; 0x84
   d7910:	f7ff fb2a 	bl	d6f68 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d7914:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d7916:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d791a:	f7ff ff53 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
   d791e:	a80a      	add	r0, sp, #40	; 0x28
   d7920:	f7ff fa86 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d7924:	9820      	ldr	r0, [sp, #128]	; 0x80
   d7926:	f7ff fab1 	bl	d6e8c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d792a:	b138      	cbz	r0, d793c <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d792c:	f106 0014 	add.w	r0, r6, #20
   d7930:	f7ff fc4a 	bl	d71c8 <_ZNK12LocalTimeHMS9toSecondsEv>
   d7934:	eb14 0800 	adds.w	r8, r4, r0
   d7938:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d793c:	a821      	add	r0, sp, #132	; 0x84
   d793e:	f7ff fa77 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7942:	4640      	mov	r0, r8
   d7944:	4649      	mov	r1, r9
   d7946:	b05c      	add	sp, #368	; 0x170
   d7948:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d794c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d794c:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d794e:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d7952:	b097      	sub	sp, #92	; 0x5c
   d7954:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d7956:	b9c3      	cbnz	r3, d798a <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d7958:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d795c:	4668      	mov	r0, sp
   d795e:	f7ff fad7 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d7962:	4669      	mov	r1, sp
   d7964:	4628      	mov	r0, r5
   d7966:	f7ff fe23 	bl	d75b0 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d796a:	1d21      	adds	r1, r4, #4
   d796c:	4668      	mov	r0, sp
   d796e:	f7ff fe37 	bl	d75e0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d7972:	4669      	mov	r1, sp
   d7974:	4628      	mov	r0, r5
   d7976:	f7ff ffa4 	bl	d78c2 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d797a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d797e:	4668      	mov	r0, sp
   d7980:	f7ff fa56 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d7984:	4620      	mov	r0, r4
   d7986:	f7ff ff1d 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
}
   d798a:	b017      	add	sp, #92	; 0x5c
   d798c:	bd30      	pop	{r4, r5, pc}
	...

000d7990 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d7990:	b530      	push	{r4, r5, lr}
    time += 86400;
   d7992:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d7996:	4d0b      	ldr	r5, [pc, #44]	; (d79c4 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d7998:	195b      	adds	r3, r3, r5
   d799a:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d799e:	b085      	sub	sp, #20
    time += 86400;
   d79a0:	eb45 0202 	adc.w	r2, r5, r2
   d79a4:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d79a8:	4604      	mov	r4, r0
   d79aa:	9101      	str	r1, [sp, #4]
    convert();
   d79ac:	f7ff ff0a 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d79b0:	9901      	ldr	r1, [sp, #4]
   d79b2:	a802      	add	r0, sp, #8
   d79b4:	f7ff faac 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d79b8:	a902      	add	r1, sp, #8
   d79ba:	4620      	mov	r0, r4
   d79bc:	f7ff ffc6 	bl	d794c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d79c0:	b005      	add	sp, #20
   d79c2:	bd30      	pop	{r4, r5, pc}
   d79c4:	00015180 	.word	0x00015180

000d79c8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d79c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79cc:	b08a      	sub	sp, #40	; 0x28
   d79ce:	4617      	mov	r7, r2
   d79d0:	4606      	mov	r6, r0
   d79d2:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d79d4:	2224      	movs	r2, #36	; 0x24
   d79d6:	2100      	movs	r1, #0
   d79d8:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d79da:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d79dc:	f009 fe8c 	bl	e16f8 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d79e0:	2f06      	cmp	r7, #6
   d79e2:	d829      	bhi.n	d7a38 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d79e4:	4629      	mov	r1, r5
   d79e6:	4630      	mov	r0, r6
   d79e8:	f7ff fe8e 	bl	d7708 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d79ec:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d79ee:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d79f0:	dd24      	ble.n	d7a3c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d79f2:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d79f6:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d79f8:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d79fa:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d79fc:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d79fe:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d7a00:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d7a02:	f7ff fe7f 	bl	d7704 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d7a06:	9a07      	ldr	r2, [sp, #28]
   d7a08:	9b04      	ldr	r3, [sp, #16]
   d7a0a:	42ba      	cmp	r2, r7
   d7a0c:	d001      	beq.n	d7a12 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d7a0e:	3301      	adds	r3, #1
   d7a10:	e7f5      	b.n	d79fe <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d7a12:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d7a14:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d7a16:	4294      	cmp	r4, r2
   d7a18:	d106      	bne.n	d7a28 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d7a1a:	b101      	cbz	r1, d7a1e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d7a1c:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d7a1e:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d7a20:	4620      	mov	r0, r4
   d7a22:	b00a      	add	sp, #40	; 0x28
   d7a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d7a28:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d7a2a:	4543      	cmp	r3, r8
   d7a2c:	dc04      	bgt.n	d7a38 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d7a2e:	3201      	adds	r2, #1
   d7a30:	2a06      	cmp	r2, #6
   d7a32:	f04f 0101 	mov.w	r1, #1
   d7a36:	d1ee      	bne.n	d7a16 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d7a38:	2400      	movs	r4, #0
   d7a3a:	e7f1      	b.n	d7a20 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d7a3c:	d0f0      	beq.n	d7a20 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d7a3e:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d7a40:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d7a44:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d7a48:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d7a4a:	a801      	add	r0, sp, #4
   d7a4c:	f7ff fe5a 	bl	d7704 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d7a50:	9b07      	ldr	r3, [sp, #28]
   d7a52:	9904      	ldr	r1, [sp, #16]
   d7a54:	42bb      	cmp	r3, r7
   d7a56:	d002      	beq.n	d7a5e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d7a58:	3901      	subs	r1, #1
   d7a5a:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d7a5c:	e7f5      	b.n	d7a4a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d7a5e:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d7a60:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d7a62:	4264      	negs	r4, r4
   d7a64:	4294      	cmp	r4, r2
   d7a66:	dc03      	bgt.n	d7a70 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d7a68:	2800      	cmp	r0, #0
   d7a6a:	d0d8      	beq.n	d7a1e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d7a6c:	9104      	str	r1, [sp, #16]
   d7a6e:	e7d6      	b.n	d7a1e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d7a70:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d7a72:	2900      	cmp	r1, #0
   d7a74:	dde0      	ble.n	d7a38 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d7a76:	3201      	adds	r2, #1
   d7a78:	2a06      	cmp	r2, #6
   d7a7a:	f04f 0001 	mov.w	r0, #1
   d7a7e:	d1f1      	bne.n	d7a64 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d7a80:	e7da      	b.n	d7a38 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d7a84 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7a84:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d7a88:	b0cd      	sub	sp, #308	; 0x134
   d7a8a:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d7a8c:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7a8e:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d7a90:	f7ff fdde 	bl	d7650 <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d7a94:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d7a96:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d7a98:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d7a9a:	f7ff fc15 	bl	d72c8 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d7a9e:	bb58      	cbnz	r0, d7af8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d7aa0:	a82a      	add	r0, sp, #168	; 0xa8
   d7aa2:	f7ff fd92 	bl	d75ca <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d7aa6:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d7aa8:	f7ff fe14 	bl	d76d4 <_ZN9LocalTime8instanceEv>
   d7aac:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d7aae:	a802      	add	r0, sp, #8
   d7ab0:	f7ff fad7 	bl	d7062 <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7ab4:	f8df a20c 	ldr.w	sl, [pc, #524]	; d7cc4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d7ab8:	a82a      	add	r0, sp, #168	; 0xa8
   d7aba:	f7ff fd86 	bl	d75ca <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d7abe:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d7ac0:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d7ac2:	4606      	mov	r6, r0
   d7ac4:	a803      	add	r0, sp, #12
   d7ac6:	f7ff faf1 	bl	d70ac <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d7aca:	2800      	cmp	r0, #0
   d7acc:	f300 80f2 	bgt.w	d7cb4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d7ad0:	4631      	mov	r1, r6
   d7ad2:	4620      	mov	r0, r4
   d7ad4:	f7ff fbdd 	bl	d7292 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d7ad8:	4607      	mov	r7, r0
   d7ada:	2800      	cmp	r0, #0
   d7adc:	f000 8094 	beq.w	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d7ae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d7ae2:	3b01      	subs	r3, #1
   d7ae4:	2b04      	cmp	r3, #4
   d7ae6:	f200 808f 	bhi.w	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d7aea:	e8df f013 	tbh	[pc, r3, lsl #1]
   d7aee:	0007      	.short	0x0007
   d7af0:	00960007 	.word	0x00960007
   d7af4:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d7af8:	9002      	str	r0, [sp, #8]
   d7afa:	e7db      	b.n	d7ab4 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7afc:	a92a      	add	r1, sp, #168	; 0xa8
   d7afe:	a807      	add	r0, sp, #28
   d7b00:	f7ff fd38 	bl	d7574 <_ZNK14LocalTimeValue3hmsEv>
   d7b04:	a907      	add	r1, sp, #28
   d7b06:	4620      	mov	r0, r4
   d7b08:	f7ff fa17 	bl	d6f3a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d7b0c:	2800      	cmp	r0, #0
   d7b0e:	da0d      	bge.n	d7b2c <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d7b10:	f104 011c 	add.w	r1, r4, #28
   d7b14:	a807      	add	r0, sp, #28
   d7b16:	f7ff f9fb 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d7b1a:	a907      	add	r1, sp, #28
   d7b1c:	a810      	add	r0, sp, #64	; 0x40
   d7b1e:	f7ff ff15 	bl	d794c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d7b22:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7b26:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d7b2a:	e094      	b.n	d7c56 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d7b2c:	d16c      	bne.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d7b2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d7b30:	2b01      	cmp	r3, #1
   d7b32:	d025      	beq.n	d7b80 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d7b34:	2b02      	cmp	r3, #2
   d7b36:	d167      	bne.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7b38:	f104 011c 	add.w	r1, r4, #28
   d7b3c:	a804      	add	r0, sp, #16
   d7b3e:	f7ff f9e7 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d7b42:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d7b46:	4649      	mov	r1, r9
   d7b48:	a804      	add	r0, sp, #16
   d7b4a:	f7ff f9c3 	bl	d6ed4 <_ZNK12LocalTimeHMS9compareToERKS_>
   d7b4e:	2800      	cmp	r0, #0
   d7b50:	dc5a      	bgt.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d7b52:	a904      	add	r1, sp, #16
   d7b54:	a807      	add	r0, sp, #28
   d7b56:	f7ff f9db 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d7b5a:	a907      	add	r1, sp, #28
   d7b5c:	a810      	add	r0, sp, #64	; 0x40
   d7b5e:	f7ff fef5 	bl	d794c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d7b62:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d7b66:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7b6a:	4290      	cmp	r0, r2
   d7b6c:	eb71 0303 	sbcs.w	r3, r1, r3
   d7b70:	db41      	blt.n	d7bf6 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7b72:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7b78:	4413      	add	r3, r2
   d7b7a:	f88d 3014 	strb.w	r3, [sp, #20]
   d7b7e:	e7e2      	b.n	d7b46 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7b80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7b82:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d7b86:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d7b8a:	213c      	movs	r1, #60	; 0x3c
   d7b8c:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7b8e:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d7b92:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7b96:	1852      	adds	r2, r2, r1
   d7b98:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d7b9c:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d7b9e:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d7ba2:	f7ff fe0f 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d7ba6:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d7baa:	a907      	add	r1, sp, #28
   d7bac:	a804      	add	r0, sp, #16
   d7bae:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d7bb2:	f005 fb01 	bl	dd1b8 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7bb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d7bb8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7bba:	1b9b      	subs	r3, r3, r6
   d7bbc:	fb93 f2f1 	sdiv	r2, r3, r1
   d7bc0:	fb01 3312 	mls	r3, r1, r2, r3
   d7bc4:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d7bc6:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7bc8:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d7bca:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7bce:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d7bd0:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d7bd2:	f005 fb01 	bl	dd1d8 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d7bd6:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d7bda:	a810      	add	r0, sp, #64	; 0x40
   d7bdc:	f7ff fdf2 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d7be0:	a92a      	add	r1, sp, #168	; 0xa8
   d7be2:	a804      	add	r0, sp, #16
   d7be4:	f7ff fcd2 	bl	d758c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d7be8:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d7bec:	a804      	add	r0, sp, #16
   d7bee:	f7ff f971 	bl	d6ed4 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d7bf2:	2800      	cmp	r0, #0
   d7bf4:	da08      	bge.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d7bf6:	a82a      	add	r0, sp, #168	; 0xa8
   d7bf8:	f7ff fce7 	bl	d75ca <_ZNK14LocalTimeValue3ymdEv>
   d7bfc:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d7bfe:	4620      	mov	r0, r4
   d7c00:	f7ff fb47 	bl	d7292 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d7c04:	2800      	cmp	r0, #0
   d7c06:	d18c      	bne.n	d7b22 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7c08:	4651      	mov	r1, sl
   d7c0a:	a807      	add	r0, sp, #28
   d7c0c:	f7ff faaa 	bl	d7164 <_ZN12LocalTimeHMSC1EPKc>
   d7c10:	a907      	add	r1, sp, #28
   d7c12:	a810      	add	r0, sp, #64	; 0x40
   d7c14:	f7ff febc 	bl	d7990 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d7c18:	e74e      	b.n	d7ab8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d7c1a:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7c1c:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7c1e:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d7c22:	3101      	adds	r1, #1
   d7c24:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7c28:	f7ff fece 	bl	d79c8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d7c2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d7c2e:	4298      	cmp	r0, r3
   d7c30:	d1ea      	bne.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d7c32:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d7c36:	a807      	add	r0, sp, #28
   d7c38:	f7ff f96a 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d7c3c:	a907      	add	r1, sp, #28
   d7c3e:	a810      	add	r0, sp, #64	; 0x40
   d7c40:	f7ff fe84 	bl	d794c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d7c44:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d7c48:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d7c4c:	4282      	cmp	r2, r0
   d7c4e:	418b      	sbcs	r3, r1
   d7c50:	dada      	bge.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d7c52:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d7c56:	4628      	mov	r0, r5
   d7c58:	f7ff fdb4 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d7c5c:	e02b      	b.n	d7cb6 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d7c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d7c60:	2e00      	cmp	r6, #0
   d7c62:	da08      	bge.n	d7c76 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d7c64:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7c66:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7c68:	3101      	adds	r1, #1
   d7c6a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7c6e:	f7ff fd4b 	bl	d7708 <_ZN9LocalTime14lastDayOfMonthEii>
   d7c72:	4430      	add	r0, r6
   d7c74:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d7c76:	a82a      	add	r0, sp, #168	; 0xa8
   d7c78:	f7ff fca7 	bl	d75ca <_ZNK14LocalTimeValue3ymdEv>
   d7c7c:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d7c80:	d1c2      	bne.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7c82:	a92a      	add	r1, sp, #168	; 0xa8
   d7c84:	a807      	add	r0, sp, #28
   d7c86:	f7ff fc75 	bl	d7574 <_ZNK14LocalTimeValue3hmsEv>
   d7c8a:	a907      	add	r1, sp, #28
   d7c8c:	4620      	mov	r0, r4
   d7c8e:	f7ff f954 	bl	d6f3a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d7c92:	2800      	cmp	r0, #0
   d7c94:	dcb8      	bgt.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d7c96:	e7cc      	b.n	d7c32 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d7c98:	a92a      	add	r1, sp, #168	; 0xa8
   d7c9a:	a807      	add	r0, sp, #28
   d7c9c:	f7ff fc6a 	bl	d7574 <_ZNK14LocalTimeValue3hmsEv>
   d7ca0:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d7ca4:	a807      	add	r0, sp, #28
   d7ca6:	9101      	str	r1, [sp, #4]
   d7ca8:	f7ff f914 	bl	d6ed4 <_ZNK12LocalTimeHMS9compareToERKS_>
   d7cac:	2800      	cmp	r0, #0
   d7cae:	9901      	ldr	r1, [sp, #4]
   d7cb0:	dcaa      	bgt.n	d7c08 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d7cb2:	e7c0      	b.n	d7c36 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d7cb4:	2700      	movs	r7, #0
class LocalTimeConvert {
   d7cb6:	a811      	add	r0, sp, #68	; 0x44
   d7cb8:	f7ff f8ba 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7cbc:	4638      	mov	r0, r7
   d7cbe:	b04d      	add	sp, #308	; 0x134
   d7cc0:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d7cc4:	000e4099 	.word	0x000e4099

000d7cc8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d7cca:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7ccc:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7cce:	4668      	mov	r0, sp
   d7cd0:	f7ff f8f7 	bl	d6ec2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d7cd4:	466a      	mov	r2, sp
   d7cd6:	4629      	mov	r1, r5
   d7cd8:	4620      	mov	r0, r4
   d7cda:	f006 fb8b 	bl	de3f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7cde:	a801      	add	r0, sp, #4
   d7ce0:	f7fc fcce 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7ce4:	4620      	mov	r0, r4
   d7ce6:	b003      	add	sp, #12
   d7ce8:	bd30      	pop	{r4, r5, pc}

000d7cea <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d7cec:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7cee:	4604      	mov	r4, r0
   d7cf0:	4668      	mov	r0, sp
   d7cf2:	f7ff f8e6 	bl	d6ec2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d7cf6:	466a      	mov	r2, sp
   d7cf8:	4629      	mov	r1, r5
   d7cfa:	4620      	mov	r0, r4
   d7cfc:	f006 fb56 	bl	de3ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7d00:	a801      	add	r0, sp, #4
   d7d02:	f7fc fcbd 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7d06:	4620      	mov	r0, r4
   d7d08:	b003      	add	sp, #12
   d7d0a:	bd30      	pop	{r4, r5, pc}

000d7d0c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7d0e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7d10:	4604      	mov	r4, r0
   d7d12:	4668      	mov	r0, sp
   d7d14:	f7ff f8d5 	bl	d6ec2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d7d18:	466a      	mov	r2, sp
   d7d1a:	4629      	mov	r1, r5
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	f006 f992 	bl	de046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7d22:	a801      	add	r0, sp, #4
   d7d24:	f7fc fcac 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7d28:	4620      	mov	r0, r4
   d7d2a:	b003      	add	sp, #12
   d7d2c:	bd30      	pop	{r4, r5, pc}

000d7d2e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   d7d2e:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7d30:	e9d1 3600 	ldrd	r3, r6, [r1]
   d7d34:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d7d36:	2300      	movs	r3, #0
   d7d38:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d7d3c:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d7d3e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d7d40:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d7d42:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d7d44:	f7ff f8b0 	bl	d6ea8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7d48:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d7d4c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d7d50:	4406      	add	r6, r0
   d7d52:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d7d54:	462a      	mov	r2, r5
	  _ForwardIterator __cur = __result;
   d7d56:	4601      	mov	r1, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d7d58:	4293      	cmp	r3, r2
   d7d5a:	d005      	beq.n	d7d68 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d7d5c:	b109      	cbz	r1, d7d62 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d7d5e:	6816      	ldr	r6, [r2, #0]
   d7d60:	600e      	str	r6, [r1, #0]
   d7d62:	3104      	adds	r1, #4
   d7d64:	3204      	adds	r2, #4
   d7d66:	e7f7      	b.n	d7d58 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d7d68:	1b5b      	subs	r3, r3, r5
   d7d6a:	4418      	add	r0, r3
   d7d6c:	6060      	str	r0, [r4, #4]
      }
   d7d6e:	4620      	mov	r0, r4
   d7d70:	bd70      	pop	{r4, r5, r6, pc}

000d7d72 <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d7d72:	b538      	push	{r3, r4, r5, lr}
   d7d74:	460d      	mov	r5, r1
   d7d76:	f811 3b04 	ldrb.w	r3, [r1], #4
   d7d7a:	4604      	mov	r4, r0
   d7d7c:	f800 3b04 	strb.w	r3, [r0], #4
   d7d80:	f7ff ffd5 	bl	d7d2e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7d84:	f105 0110 	add.w	r1, r5, #16
   d7d88:	f104 0010 	add.w	r0, r4, #16
   d7d8c:	f7ff ffcf 	bl	d7d2e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7d90:	4620      	mov	r0, r4
   d7d92:	bd38      	pop	{r3, r4, r5, pc}

000d7d94 <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d7d94:	b538      	push	{r3, r4, r5, lr}
   d7d96:	4604      	mov	r4, r0
   d7d98:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7d9a:	f7ff ffea 	bl	d7d72 <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d7d9e:	f105 011c 	add.w	r1, r5, #28
   d7da2:	f104 001c 	add.w	r0, r4, #28
   d7da6:	f7ff f8b3 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
   d7daa:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d7dae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7db2:	f7ff f8ad 	bl	d6f10 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d7db6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d7db8:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7dba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d7dbc:	6323      	str	r3, [r4, #48]	; 0x30
   d7dbe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d7dc0:	6363      	str	r3, [r4, #52]	; 0x34
   d7dc2:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d7dc6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7dca:	f007 ff03 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d7dce:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d7dd0:	64a3      	str	r3, [r4, #72]	; 0x48
   d7dd2:	4620      	mov	r0, r4
   d7dd4:	bd38      	pop	{r3, r4, r5, pc}

000d7dd6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d7dd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7dda:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7dde:	b0d1      	sub	sp, #324	; 0x144
   d7de0:	4681      	mov	r9, r0
   d7de2:	460c      	mov	r4, r1
   d7de4:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d7de6:	2600      	movs	r6, #0
   d7de8:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d7dea:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d7dee:	4543      	cmp	r3, r8
   d7df0:	d029      	beq.n	d7e46 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d7df2:	4641      	mov	r1, r8
   d7df4:	a801      	add	r0, sp, #4
   d7df6:	f7ff ffcd 	bl	d7d94 <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d7dfa:	68ab      	ldr	r3, [r5, #8]
   d7dfc:	b90b      	cbnz	r3, d7e02 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d7dfe:	f008 fcdf 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e02:	68eb      	ldr	r3, [r5, #12]
   d7e04:	a901      	add	r1, sp, #4
   d7e06:	4628      	mov	r0, r5
   d7e08:	4798      	blx	r3
        if (filter(item)) {
   d7e0a:	b1b0      	cbz	r0, d7e3a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d7e0c:	4621      	mov	r1, r4
   d7e0e:	a814      	add	r0, sp, #80	; 0x50
   d7e10:	f7ff fc1e 	bl	d7650 <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d7e14:	a914      	add	r1, sp, #80	; 0x50
   d7e16:	a801      	add	r0, sp, #4
   d7e18:	f7ff fe34 	bl	d7a84 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d7e1c:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d7e20:	b110      	cbz	r0, d7e28 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d7e22:	ea56 0107 	orrs.w	r1, r6, r7
   d7e26:	d003      	beq.n	d7e30 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d7e28:	42b2      	cmp	r2, r6
   d7e2a:	eb73 0107 	sbcs.w	r1, r3, r7
   d7e2e:	da01      	bge.n	d7e34 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d7e30:	4616      	mov	r6, r2
   d7e32:	461f      	mov	r7, r3
class LocalTimeConvert {
   d7e34:	a815      	add	r0, sp, #84	; 0x54
   d7e36:	f7fe fffb 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d7e3a:	a801      	add	r0, sp, #4
   d7e3c:	f7ff fc3c 	bl	d76b8 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d7e40:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d7e44:	e7d1      	b.n	d7dea <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d7e46:	ea56 0307 	orrs.w	r3, r6, r7
   d7e4a:	d008      	beq.n	d7e5e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d7e4c:	4620      	mov	r0, r4
        conv.time = closestTime;
   d7e4e:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d7e52:	f7ff fcb7 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d7e56:	2001      	movs	r0, #1
}
   d7e58:	b051      	add	sp, #324	; 0x144
   d7e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d7e5e:	2000      	movs	r0, #0
   d7e60:	e7fa      	b.n	d7e58 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d7e64 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d7e66:	4b08      	ldr	r3, [pc, #32]	; (d7e88 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d7e68:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d7e6a:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d7e6c:	4b07      	ldr	r3, [pc, #28]	; (d7e8c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d7e6e:	9302      	str	r3, [sp, #8]
   d7e70:	f7ff ffb1 	bl	d7dd6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d7e74:	9b02      	ldr	r3, [sp, #8]
   d7e76:	4604      	mov	r4, r0
   d7e78:	b11b      	cbz	r3, d7e82 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7e7a:	4669      	mov	r1, sp
   d7e7c:	2203      	movs	r2, #3
   d7e7e:	4608      	mov	r0, r1
   d7e80:	4798      	blx	r3
}
   d7e82:	4620      	mov	r0, r4
   d7e84:	b004      	add	sp, #16
   d7e86:	bd10      	pop	{r4, pc}
   d7e88:	000d6e05 	.word	0x000d6e05
   d7e8c:	000d6e09 	.word	0x000d6e09

000d7e90 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextWake(const LocalTimeConvert &conv) const {
   d7e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7e94:	6806      	ldr	r6, [r0, #0]
   d7e96:	b0bc      	sub	sp, #240	; 0xf0
   d7e98:	4607      	mov	r7, r0
   d7e9a:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7e9c:	2400      	movs	r4, #0
   d7e9e:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7ea0:	687b      	ldr	r3, [r7, #4]
   d7ea2:	429e      	cmp	r6, r3
   d7ea4:	d01c      	beq.n	d7ee0 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x50>
        if ((it->flags & LocalTimeSchedule::FLAG_ANY_WAKE) != 0) {
   d7ea6:	7c33      	ldrb	r3, [r6, #16]
   d7ea8:	b1c3      	cbz	r3, d7edc <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x4c>
            LocalTimeConvert tempConv(conv);
   d7eaa:	4651      	mov	r1, sl
   d7eac:	4668      	mov	r0, sp
   d7eae:	f7ff fbcf 	bl	d7650 <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d7eb2:	4669      	mov	r1, sp
   d7eb4:	4630      	mov	r0, r6
   d7eb6:	f7ff ffd5 	bl	d7e64 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7eba:	b140      	cbz	r0, d7ece <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x3e>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7ebc:	ea54 0305 	orrs.w	r3, r4, r5
   d7ec0:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d7ec4:	d005      	beq.n	d7ed2 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d7ec6:	45a0      	cmp	r8, r4
   d7ec8:	eb79 0305 	sbcs.w	r3, r9, r5
   d7ecc:	db01      	blt.n	d7ed2 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d7ece:	46a0      	mov	r8, r4
   d7ed0:	46a9      	mov	r9, r5
   d7ed2:	a801      	add	r0, sp, #4
   d7ed4:	f7fe ffac 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
   d7ed8:	4644      	mov	r4, r8
   d7eda:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7edc:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7ede:	e7df      	b.n	d7ea0 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x10>
}
   d7ee0:	4620      	mov	r0, r4
   d7ee2:	4629      	mov	r1, r5
   d7ee4:	b03c      	add	sp, #240	; 0xf0
   d7ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7eea <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextFullWake(const LocalTimeConvert &conv) const {
   d7eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7eee:	6806      	ldr	r6, [r0, #0]
   d7ef0:	b0bc      	sub	sp, #240	; 0xf0
   d7ef2:	4607      	mov	r7, r0
   d7ef4:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7ef6:	2400      	movs	r4, #0
   d7ef8:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7efa:	687b      	ldr	r3, [r7, #4]
   d7efc:	429e      	cmp	r6, r3
   d7efe:	d01d      	beq.n	d7f3c <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x52>
        if ((it->flags & LocalTimeSchedule::FLAG_FULL_WAKE) != 0) {
   d7f00:	6933      	ldr	r3, [r6, #16]
   d7f02:	079b      	lsls	r3, r3, #30
   d7f04:	d518      	bpl.n	d7f38 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x4e>
            LocalTimeConvert tempConv(conv);
   d7f06:	4651      	mov	r1, sl
   d7f08:	4668      	mov	r0, sp
   d7f0a:	f7ff fba1 	bl	d7650 <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d7f0e:	4669      	mov	r1, sp
   d7f10:	4630      	mov	r0, r6
   d7f12:	f7ff ffa7 	bl	d7e64 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7f16:	b140      	cbz	r0, d7f2a <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x40>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7f18:	ea54 0305 	orrs.w	r3, r4, r5
   d7f1c:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d7f20:	d005      	beq.n	d7f2e <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d7f22:	45a0      	cmp	r8, r4
   d7f24:	eb79 0305 	sbcs.w	r3, r9, r5
   d7f28:	db01      	blt.n	d7f2e <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d7f2a:	46a0      	mov	r8, r4
   d7f2c:	46a9      	mov	r9, r5
   d7f2e:	a801      	add	r0, sp, #4
   d7f30:	f7fe ff7e 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
   d7f34:	4644      	mov	r4, r8
   d7f36:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7f38:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7f3a:	e7de      	b.n	d7efa <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x10>
}
   d7f3c:	4620      	mov	r0, r4
   d7f3e:	4629      	mov	r1, r5
   d7f40:	b03c      	add	sp, #240	; 0xf0
   d7f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d7f48 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d7f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (it->name.equals("data")) {
   d7f4c:	f8df b05c 	ldr.w	fp, [pc, #92]	; d7fac <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x64>
   d7f50:	6806      	ldr	r6, [r0, #0]
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d7f52:	b0bd      	sub	sp, #244	; 0xf4
   d7f54:	4607      	mov	r7, r0
   d7f56:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7f58:	2400      	movs	r4, #0
   d7f5a:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7f5c:	687b      	ldr	r3, [r7, #4]
   d7f5e:	429e      	cmp	r6, r3
   d7f60:	d01f      	beq.n	d7fa2 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x5a>
        if (it->name.equals("data")) {
   d7f62:	4659      	mov	r1, fp
   d7f64:	4630      	mov	r0, r6
   d7f66:	f007 fec5 	bl	dfcf4 <_ZNK6String6equalsEPKc>
   d7f6a:	b1c0      	cbz	r0, d7f9e <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x56>
            LocalTimeConvert tempConv(conv);
   d7f6c:	4651      	mov	r1, sl
   d7f6e:	4668      	mov	r0, sp
   d7f70:	f7ff fb6e 	bl	d7650 <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d7f74:	4669      	mov	r1, sp
   d7f76:	4630      	mov	r0, r6
   d7f78:	f7ff ff74 	bl	d7e64 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7f7c:	b140      	cbz	r0, d7f90 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x48>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7f7e:	ea54 0305 	orrs.w	r3, r4, r5
   d7f82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d7f86:	d005      	beq.n	d7f94 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d7f88:	45a0      	cmp	r8, r4
   d7f8a:	eb79 0305 	sbcs.w	r3, r9, r5
   d7f8e:	db01      	blt.n	d7f94 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d7f90:	46a0      	mov	r8, r4
   d7f92:	46a9      	mov	r9, r5
   d7f94:	a801      	add	r0, sp, #4
   d7f96:	f7fe ff4b 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
   d7f9a:	4644      	mov	r4, r8
   d7f9c:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7f9e:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7fa0:	e7dc      	b.n	d7f5c <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x14>
}
   d7fa2:	4620      	mov	r0, r4
   d7fa4:	4629      	mov	r1, r5
   d7fa6:	b03d      	add	sp, #244	; 0xf4
   d7fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7fac:	000e419f 	.word	0x000e419f

000d7fb0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
      if (&__x != this)
   d7fb0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d7fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7fb6:	4604      	mov	r4, r0
   d7fb8:	460e      	mov	r6, r1
      if (&__x != this)
   d7fba:	d022      	beq.n	d8002 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7fbc:	e9d1 5800 	ldrd	r5, r8, [r1]
			 - this->_M_impl._M_start); }
   d7fc0:	6800      	ldr	r0, [r0, #0]
   d7fc2:	68a3      	ldr	r3, [r4, #8]
   d7fc4:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7fc6:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d7fca:	109b      	asrs	r3, r3, #2
	  if (__xlen > capacity())
   d7fcc:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7fd0:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d7fd4:	d218      	bcs.n	d8008 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
	  pointer __result = this->_M_allocate(__n);
   d7fd6:	4608      	mov	r0, r1
   d7fd8:	f7fe ff66 	bl	d6ea8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7fdc:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d7fde:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d7fe0:	45a8      	cmp	r8, r5
   d7fe2:	d005      	beq.n	d7ff0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d7fe4:	b10b      	cbz	r3, d7fea <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d7fe6:	682a      	ldr	r2, [r5, #0]
   d7fe8:	601a      	str	r2, [r3, #0]
   d7fea:	3304      	adds	r3, #4
   d7fec:	3504      	adds	r5, #4
   d7fee:	e7f7      	b.n	d7fe0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	      _M_deallocate(this->_M_impl._M_start,
   d7ff0:	6820      	ldr	r0, [r4, #0]
   d7ff2:	f7fe ff55 	bl	d6ea0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
	      this->_M_impl._M_start = __tmp;
   d7ff6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d7ff8:	443e      	add	r6, r7
   d7ffa:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d7ffc:	6823      	ldr	r3, [r4, #0]
   d7ffe:	441f      	add	r7, r3
   d8000:	6067      	str	r7, [r4, #4]
    }
   d8002:	4620      	mov	r0, r4
   d8004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d8008:	6862      	ldr	r2, [r4, #4]
   d800a:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d800c:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d8010:	d806      	bhi.n	d8020 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d8012:	45a8      	cmp	r8, r5
   d8014:	d0f2      	beq.n	d7ffc <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8016:	463a      	mov	r2, r7
   d8018:	4629      	mov	r1, r5
   d801a:	f009 fb53 	bl	e16c4 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d801e:	e7ed      	b.n	d7ffc <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d8020:	b112      	cbz	r2, d8028 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8022:	4629      	mov	r1, r5
   d8024:	f009 fb4e 	bl	e16c4 <memmove>
   d8028:	e9d4 3200 	ldrd	r3, r2, [r4]
   d802c:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d802e:	6833      	ldr	r3, [r6, #0]
   d8030:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d8032:	6871      	ldr	r1, [r6, #4]
   d8034:	4299      	cmp	r1, r3
   d8036:	d0e1      	beq.n	d7ffc <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d8038:	b10a      	cbz	r2, d803e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d803a:	6818      	ldr	r0, [r3, #0]
   d803c:	6010      	str	r0, [r2, #0]
   d803e:	3304      	adds	r3, #4
   d8040:	3204      	adds	r2, #4
   d8042:	e7f7      	b.n	d8034 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d8044 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d8044:	b538      	push	{r3, r4, r5, lr}
   d8046:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d8048:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d804c:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d804e:	f800 3b04 	strb.w	r3, [r0], #4
   d8052:	f7ff ffad 	bl	d7fb0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d8056:	f105 0110 	add.w	r1, r5, #16
   d805a:	f104 0010 	add.w	r0, r4, #16
   d805e:	f7ff ffa7 	bl	d7fb0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d8062:	f105 011c 	add.w	r1, r5, #28
   d8066:	f104 001c 	add.w	r0, r4, #28
   d806a:	f7fe ff59 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
   d806e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d8072:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8076:	f7fe ff53 	bl	d6f20 <_ZN12LocalTimeHMSaSERKS_>
   d807a:	4620      	mov	r0, r4
   d807c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8080 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d8080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8084:	e9d0 6900 	ldrd	r6, r9, [r0]
   d8088:	4d3b      	ldr	r5, [pc, #236]	; (d8178 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
	if (max_size() - size() < __n)
   d808a:	4b3c      	ldr	r3, [pc, #240]	; (d817c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d808c:	eba9 0406 	sub.w	r4, r9, r6
   d8090:	10a4      	asrs	r4, r4, #2
   d8092:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d8094:	429c      	cmp	r4, r3
   d8096:	468a      	mov	sl, r1
   d8098:	4607      	mov	r7, r0
   d809a:	4611      	mov	r1, r2
   d809c:	46a8      	mov	r8, r5
   d809e:	d102      	bne.n	d80a6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d80a0:	4837      	ldr	r0, [pc, #220]	; (d8180 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d80a2:	f008 fb8a 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d80a6:	2c01      	cmp	r4, #1
   d80a8:	4622      	mov	r2, r4
   d80aa:	bf38      	it	cc
   d80ac:	2201      	movcc	r2, #1
   d80ae:	18a4      	adds	r4, r4, r2
   d80b0:	ebaa 0506 	sub.w	r5, sl, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d80b4:	d25d      	bcs.n	d8172 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d80b6:	b154      	cbz	r4, d80ce <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d80b8:	429c      	cmp	r4, r3
   d80ba:	bf28      	it	cs
   d80bc:	461c      	movcs	r4, r3
   d80be:	204c      	movs	r0, #76	; 0x4c
   d80c0:	4360      	muls	r0, r4
   d80c2:	9100      	str	r1, [sp, #0]
   d80c4:	f7fb ffe7 	bl	d4096 <_Znwj>
   d80c8:	9900      	ldr	r1, [sp, #0]
   d80ca:	4683      	mov	fp, r0
   d80cc:	e000      	b.n	d80d0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d80ce:	46a3      	mov	fp, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d80d0:	eb1b 0005 	adds.w	r0, fp, r5
   d80d4:	d001      	beq.n	d80da <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d80d6:	f7ff fe5d 	bl	d7d94 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d80da:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d80dc:	4631      	mov	r1, r6
   d80de:	458a      	cmp	sl, r1
   d80e0:	d00a      	beq.n	d80f8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d80e2:	b133      	cbz	r3, d80f2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d80e4:	4618      	mov	r0, r3
   d80e6:	9101      	str	r1, [sp, #4]
   d80e8:	9300      	str	r3, [sp, #0]
   d80ea:	f7ff fe53 	bl	d7d94 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d80ee:	e9dd 3100 	ldrd	r3, r1, [sp]
   d80f2:	314c      	adds	r1, #76	; 0x4c
   d80f4:	334c      	adds	r3, #76	; 0x4c
   d80f6:	e7f2      	b.n	d80de <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d80f8:	08ad      	lsrs	r5, r5, #2
   d80fa:	fb08 fa05 	mul.w	sl, r8, r5
   d80fe:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d8102:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d8106:	fb0a fa05 	mul.w	sl, sl, r5
   d810a:	eb06 050a 	add.w	r5, r6, sl
	      ++__new_finish;
   d810e:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d8112:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d8114:	4653      	mov	r3, sl
   d8116:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d8118:	4549      	cmp	r1, r9
   d811a:	d113      	bne.n	d8144 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d811c:	eba9 0505 	sub.w	r5, r9, r5
   d8120:	08ad      	lsrs	r5, r5, #2
   d8122:	fb08 f505 	mul.w	r5, r8, r5
   d8126:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d812a:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d812e:	fb08 a505 	mla	r5, r8, r5, sl
   d8132:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d8134:	45c8      	cmp	r8, r9
   d8136:	d00f      	beq.n	d8158 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d8138:	4640      	mov	r0, r8
   d813a:	f7ff fabd 	bl	d76b8 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d813e:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d8142:	e7f7      	b.n	d8134 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d8144:	4618      	mov	r0, r3
   d8146:	9101      	str	r1, [sp, #4]
   d8148:	9300      	str	r3, [sp, #0]
   d814a:	f7ff fe23 	bl	d7d94 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d814e:	9901      	ldr	r1, [sp, #4]
   d8150:	9b00      	ldr	r3, [sp, #0]
   d8152:	314c      	adds	r1, #76	; 0x4c
   d8154:	334c      	adds	r3, #76	; 0x4c
   d8156:	e7df      	b.n	d8118 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d8158:	b116      	cbz	r6, d8160 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d815a:	4630      	mov	r0, r6
   d815c:	f7fb ff9f 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d8160:	204c      	movs	r0, #76	; 0x4c
   d8162:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d8166:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d816a:	60bc      	str	r4, [r7, #8]
    }
   d816c:	b003      	add	sp, #12
   d816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d8172:	461c      	mov	r4, r3
   d8174:	e7a3      	b.n	d80be <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d8176:	bf00      	nop
   d8178:	286bca1b 	.word	0x286bca1b
   d817c:	01af286b 	.word	0x01af286b
   d8180:	000e3c27 	.word	0x000e3c27

000d8184 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d8184:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d8186:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d818a:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d818c:	4604      	mov	r4, r0
   d818e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d8190:	d007      	beq.n	d81a2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8192:	b113      	cbz	r3, d819a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d8194:	4618      	mov	r0, r3
   d8196:	f7ff fdfd 	bl	d7d94 <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d819a:	6863      	ldr	r3, [r4, #4]
   d819c:	334c      	adds	r3, #76	; 0x4c
   d819e:	6063      	str	r3, [r4, #4]
      }
   d81a0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d81a2:	4619      	mov	r1, r3
   d81a4:	f7ff ff6c 	bl	d8080 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d81a8:	e7fa      	b.n	d81a0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d81aa <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d81aa:	b530      	push	{r4, r5, lr}
   d81ac:	b097      	sub	sp, #92	; 0x5c
   d81ae:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d81b0:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d81b2:	9201      	str	r2, [sp, #4]
   d81b4:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d81b6:	f7fe ffe1 	bl	d717c <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d81ba:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d81bc:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d81be:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d81c0:	a803      	add	r0, sp, #12
    item.increment = increment;
   d81c2:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d81c4:	f7ff ff3e 	bl	d8044 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d81c8:	a903      	add	r1, sp, #12
   d81ca:	f104 0020 	add.w	r0, r4, #32
   d81ce:	f7ff ffd9 	bl	d8184 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d81d2:	a803      	add	r0, sp, #12
   d81d4:	f7ff fa70 	bl	d76b8 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d81d8:	4620      	mov	r0, r4
   d81da:	b017      	add	sp, #92	; 0x5c
   d81dc:	bd30      	pop	{r4, r5, pc}
	...

000d81e0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   d81e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d81e4:	e9d1 3700 	ldrd	r3, r7, [r1]
   d81e8:	4d1b      	ldr	r5, [pc, #108]	; (d8258 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x78>)
   d81ea:	1aff      	subs	r7, r7, r3
   d81ec:	10bc      	asrs	r4, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   d81ee:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d81f0:	436c      	muls	r4, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
   d81f2:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d81f6:	4606      	mov	r6, r0
   d81f8:	4688      	mov	r8, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
   d81fa:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d81fc:	d008      	beq.n	d8210 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x30>
	if (__n > this->max_size())
   d81fe:	4b17      	ldr	r3, [pc, #92]	; (d825c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x7c>)
   d8200:	429c      	cmp	r4, r3
   d8202:	d901      	bls.n	d8208 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x28>
	  std::__throw_bad_alloc();
   d8204:	f008 fad6 	bl	e07b4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8208:	4638      	mov	r0, r7
   d820a:	f7fb ff44 	bl	d4096 <_Znwj>
   d820e:	4604      	mov	r4, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d8210:	4427      	add	r7, r4
   d8212:	60b7      	str	r7, [r6, #8]
   d8214:	e9d8 a700 	ldrd	sl, r7, [r8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d8218:	e9c6 4400 	strd	r4, r4, [r6]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d821c:	46d0      	mov	r8, sl
	  _ForwardIterator __cur = __result;
   d821e:	46a1      	mov	r9, r4
	      for (; __first != __last; ++__first, (void)++__cur)
   d8220:	4547      	cmp	r7, r8
   d8222:	d00b      	beq.n	d823c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x5c>
   d8224:	f1b9 0f00 	cmp.w	r9, #0
   d8228:	d003      	beq.n	d8232 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x52>
   d822a:	4641      	mov	r1, r8
   d822c:	4648      	mov	r0, r9
   d822e:	f7ff fdb1 	bl	d7d94 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d8232:	f109 094c 	add.w	r9, r9, #76	; 0x4c
   d8236:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d823a:	e7f1      	b.n	d8220 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x40>
	this->_M_impl._M_finish =
   d823c:	eba7 070a 	sub.w	r7, r7, sl
   d8240:	08bf      	lsrs	r7, r7, #2
   d8242:	437d      	muls	r5, r7
   d8244:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d8248:	204c      	movs	r0, #76	; 0x4c
   d824a:	fb00 4405 	mla	r4, r0, r5, r4
   d824e:	6074      	str	r4, [r6, #4]
      }
   d8250:	4630      	mov	r0, r6
   d8252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8256:	bf00      	nop
   d8258:	286bca1b 	.word	0x286bca1b
   d825c:	01af286b 	.word	0x01af286b

000d8260 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   d8260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8264:	4607      	mov	r7, r0
   d8266:	4688      	mov	r8, r1
   d8268:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   d826a:	4615      	mov	r5, r2
   d826c:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d826e:	4544      	cmp	r4, r8
   d8270:	d013      	beq.n	d829a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x3a>
   d8272:	b17d      	cbz	r5, d8294 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x34>
class LocalTimeSchedule {
   d8274:	4621      	mov	r1, r4
   d8276:	4628      	mov	r0, r5
   d8278:	f007 fcac 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d827c:	6923      	ldr	r3, [r4, #16]
   d827e:	612b      	str	r3, [r5, #16]
   d8280:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d8284:	f104 0120 	add.w	r1, r4, #32
   d8288:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d828c:	f105 0020 	add.w	r0, r5, #32
   d8290:	f7ff ffa6 	bl	d81e0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
   d8294:	3430      	adds	r4, #48	; 0x30
   d8296:	3530      	adds	r5, #48	; 0x30
   d8298:	e7e9      	b.n	d826e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0xe>
	      return __cur;
   d829a:	1be0      	subs	r0, r4, r7
   d829c:	0904      	lsrs	r4, r0, #4
   d829e:	4804      	ldr	r0, [pc, #16]	; (d82b0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x50>)
   d82a0:	4344      	muls	r4, r0
   d82a2:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
	}
   d82a6:	2030      	movs	r0, #48	; 0x30
   d82a8:	fb00 6004 	mla	r0, r0, r4, r6
   d82ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82b0:	0aaaaaab 	.word	0x0aaaaaab

000d82b4 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d82b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d82b8:	e9d0 6800 	ldrd	r6, r8, [r0]
   d82bc:	eba8 0406 	sub.w	r4, r8, r6
   d82c0:	1123      	asrs	r3, r4, #4
   d82c2:	4c33      	ldr	r4, [pc, #204]	; (d8390 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xdc>)
   d82c4:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   d82c6:	4b33      	ldr	r3, [pc, #204]	; (d8394 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>)
   d82c8:	429c      	cmp	r4, r3
   d82ca:	4605      	mov	r5, r0
   d82cc:	460f      	mov	r7, r1
   d82ce:	4693      	mov	fp, r2
   d82d0:	d102      	bne.n	d82d8 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   d82d2:	4831      	ldr	r0, [pc, #196]	; (d8398 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe4>)
   d82d4:	f008 fa71 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   d82d8:	2c01      	cmp	r4, #1
   d82da:	4622      	mov	r2, r4
   d82dc:	bf38      	it	cc
   d82de:	2201      	movcc	r2, #1
   d82e0:	18a4      	adds	r4, r4, r2
   d82e2:	eba1 0a06 	sub.w	sl, r1, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d82e6:	d250      	bcs.n	d838a <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d82e8:	b144      	cbz	r4, d82fc <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
   d82ea:	429c      	cmp	r4, r3
   d82ec:	bf28      	it	cs
   d82ee:	461c      	movcs	r4, r3
   d82f0:	2030      	movs	r0, #48	; 0x30
   d82f2:	4360      	muls	r0, r4
   d82f4:	f7fb fecf 	bl	d4096 <_Znwj>
   d82f8:	4681      	mov	r9, r0
   d82fa:	e000      	b.n	d82fe <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   d82fc:	46a1      	mov	r9, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d82fe:	eb19 0a0a 	adds.w	sl, r9, sl
   d8302:	d011      	beq.n	d8328 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
   d8304:	4659      	mov	r1, fp
   d8306:	4650      	mov	r0, sl
   d8308:	f007 fc64 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d830c:	f8db 3010 	ldr.w	r3, [fp, #16]
   d8310:	f8ca 3010 	str.w	r3, [sl, #16]
   d8314:	e9db 2306 	ldrd	r2, r3, [fp, #24]
   d8318:	f10b 0120 	add.w	r1, fp, #32
   d831c:	e9ca 2306 	strd	r2, r3, [sl, #24]
   d8320:	f10a 0020 	add.w	r0, sl, #32
   d8324:	f7ff ff5c 	bl	d81e0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
	__uninit_copy(__first, __last, __result);
   d8328:	4639      	mov	r1, r7
   d832a:	464a      	mov	r2, r9
   d832c:	4630      	mov	r0, r6
   d832e:	f7ff ff97 	bl	d8260 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
   d8332:	4641      	mov	r1, r8
   d8334:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d8338:	4638      	mov	r0, r7
   d833a:	f7ff ff91 	bl	d8260 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d833e:	4637      	mov	r7, r6
   d8340:	4683      	mov	fp, r0
	  for (; __first != __last; ++__first)
   d8342:	4547      	cmp	r7, r8
   d8344:	d014      	beq.n	d8370 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d8346:	e9d7 a308 	ldrd	sl, r3, [r7, #32]
   d834a:	4553      	cmp	r3, sl
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	d006      	beq.n	d835e <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
    { __pointer->~_Tp(); }
   d8350:	4650      	mov	r0, sl
   d8352:	f7ff f9b1 	bl	d76b8 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d8356:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d835a:	9b01      	ldr	r3, [sp, #4]
   d835c:	e7f5      	b.n	d834a <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
	_M_deallocate(_M_impl._M_start,
   d835e:	6a38      	ldr	r0, [r7, #32]
	if (__p)
   d8360:	b108      	cbz	r0, d8366 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb2>
	::operator delete(__p);
   d8362:	f7fb fe9c 	bl	d409e <_ZdlPv>
   d8366:	4638      	mov	r0, r7
   d8368:	f007 fb9e 	bl	dfaa8 <_ZN6StringD1Ev>
   d836c:	3730      	adds	r7, #48	; 0x30
   d836e:	e7e8      	b.n	d8342 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8e>
   d8370:	b116      	cbz	r6, d8378 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d8372:	4630      	mov	r0, r6
   d8374:	f7fb fe93 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d8378:	2030      	movs	r0, #48	; 0x30
   d837a:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   d837e:	e9c5 9b00 	strd	r9, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d8382:	60ac      	str	r4, [r5, #8]
    }
   d8384:	b003      	add	sp, #12
   d8386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d838a:	461c      	mov	r4, r3
   d838c:	e7b0      	b.n	d82f0 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
   d838e:	bf00      	nop
   d8390:	aaaaaaab 	.word	0xaaaaaaab
   d8394:	02aaaaaa 	.word	0x02aaaaaa
   d8398:	000e3c27 	.word	0x000e3c27

000d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>:
LocalTimeSchedule &LocalTimeScheduleManager::getScheduleByName(const char *name) {
   d839c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d839e:	6805      	ldr	r5, [r0, #0]
   d83a0:	b08d      	sub	sp, #52	; 0x34
   d83a2:	4604      	mov	r4, r0
   d83a4:	460e      	mov	r6, r1
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d83a6:	6863      	ldr	r3, [r4, #4]
   d83a8:	429d      	cmp	r5, r3
   d83aa:	462f      	mov	r7, r5
   d83ac:	d009      	beq.n	d83c2 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x26>
        if (it->name.equals(name)) {
   d83ae:	4628      	mov	r0, r5
   d83b0:	4631      	mov	r1, r6
   d83b2:	f007 fc9f 	bl	dfcf4 <_ZNK6String6equalsEPKc>
   d83b6:	3530      	adds	r5, #48	; 0x30
   d83b8:	2800      	cmp	r0, #0
   d83ba:	d0f4      	beq.n	d83a6 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa>
}
   d83bc:	4638      	mov	r0, r7
   d83be:	b00d      	add	sp, #52	; 0x34
   d83c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LocalTimeSchedule() {
   d83c2:	4922      	ldr	r1, [pc, #136]	; (d844c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xb0>)
   d83c4:	4668      	mov	r0, sp
   d83c6:	f007 fbba 	bl	dfb3e <_ZN6StringC1EPKc>
   d83ca:	2000      	movs	r0, #0
   d83cc:	2100      	movs	r1, #0
   d83ce:	2300      	movs	r3, #0
   d83d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
    sch.name = name;
   d83d4:	4631      	mov	r1, r6
   d83d6:	4668      	mov	r0, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
   d83d8:	e9cd 3308 	strd	r3, r3, [sp, #32]
   d83dc:	9304      	str	r3, [sp, #16]
   d83de:	930a      	str	r3, [sp, #40]	; 0x28
   d83e0:	f007 fc0b 	bl	dfbfa <_ZN6StringaSEPKc>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d83e4:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
   d83e8:	429d      	cmp	r5, r3
   d83ea:	d020      	beq.n	d842e <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d83ec:	b175      	cbz	r5, d840c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x70>
class LocalTimeSchedule {
   d83ee:	4669      	mov	r1, sp
   d83f0:	4628      	mov	r0, r5
   d83f2:	f007 fbef 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d83f6:	9b04      	ldr	r3, [sp, #16]
   d83f8:	612b      	str	r3, [r5, #16]
   d83fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d83fe:	a908      	add	r1, sp, #32
   d8400:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d8404:	f105 0020 	add.w	r0, r5, #32
   d8408:	f7ff feea 	bl	d81e0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   d840c:	6863      	ldr	r3, [r4, #4]
   d840e:	3330      	adds	r3, #48	; 0x30
   d8410:	6063      	str	r3, [r4, #4]
    return getScheduleByName(name);
   d8412:	4620      	mov	r0, r4
   d8414:	4631      	mov	r1, r6
   d8416:	f7ff ffc1 	bl	d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d841a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   d841e:	4607      	mov	r7, r0
   d8420:	42a5      	cmp	r5, r4
   d8422:	d00a      	beq.n	d843a <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x9e>
    { __pointer->~_Tp(); }
   d8424:	4620      	mov	r0, r4
   d8426:	f7ff f947 	bl	d76b8 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d842a:	344c      	adds	r4, #76	; 0x4c
   d842c:	e7f8      	b.n	d8420 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x84>
	  _M_realloc_insert(end(), __x);
   d842e:	466a      	mov	r2, sp
   d8430:	4629      	mov	r1, r5
   d8432:	4620      	mov	r0, r4
   d8434:	f7ff ff3e 	bl	d82b4 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   d8438:	e7eb      	b.n	d8412 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x76>
	_M_deallocate(_M_impl._M_start,
   d843a:	9808      	ldr	r0, [sp, #32]
	if (__p)
   d843c:	b108      	cbz	r0, d8442 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa6>
	::operator delete(__p);
   d843e:	f7fb fe2e 	bl	d409e <_ZdlPv>
   d8442:	4668      	mov	r0, sp
   d8444:	f007 fb30 	bl	dfaa8 <_ZN6StringD1Ev>
   d8448:	e7b8      	b.n	d83bc <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x20>
   d844a:	bf00      	nop
   d844c:	000e4537 	.word	0x000e4537

000d8450 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d8450:	4770      	bx	lr

000d8452 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d8452:	b510      	push	{r4, lr}
}
   d8454:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d8456:	4604      	mov	r4, r0
}
   d8458:	f008 f972 	bl	e0740 <_ZdlPvj>
   d845c:	4620      	mov	r0, r4
   d845e:	bd10      	pop	{r4, pc}

000d8460 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d8460:	6803      	ldr	r3, [r0, #0]
   d8462:	b2c9      	uxtb	r1, r1
   d8464:	689b      	ldr	r3, [r3, #8]
   d8466:	4718      	bx	r3

000d8468 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d8468:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d846a:	4d03      	ldr	r5, [pc, #12]	; (d8478 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d846c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d8470:	e9c0 5100 	strd	r5, r1, [r0]
}
   d8474:	bd30      	pop	{r4, r5, pc}
   d8476:	bf00      	nop
   d8478:	000e412c 	.word	0x000e412c

000d847c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d847c:	6840      	ldr	r0, [r0, #4]
   d847e:	f005 bc33 	b.w	ddce8 <_ZN7TwoWire5beginEv>

000d8482 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d8482:	b510      	push	{r4, lr}
   d8484:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d8486:	6800      	ldr	r0, [r0, #0]
   d8488:	f005 fc89 	bl	ddd9e <_ZN7TwoWire6unlockEv>
   d848c:	4620      	mov	r0, r4
   d848e:	bd10      	pop	{r4, pc}

000d8490 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d8490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8494:	b08a      	sub	sp, #40	; 0x28
   d8496:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d8498:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d849a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d849c:	f005 fc76 	bl	ddd8c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d84a0:	221e      	movs	r2, #30
   d84a2:	2100      	movs	r1, #0
   d84a4:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d84a6:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d84a8:	f009 f926 	bl	e16f8 <memset>
		size_t framAddr = 0;
   d84ac:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d84ae:	b1ef      	cbz	r7, d84ec <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d84b0:	6823      	ldr	r3, [r4, #0]
   d84b2:	2f1e      	cmp	r7, #30
   d84b4:	46b8      	mov	r8, r7
   d84b6:	bf28      	it	cs
   d84b8:	f04f 081e 	movcs.w	r8, #30
   d84bc:	68dd      	ldr	r5, [r3, #12]
   d84be:	aa02      	add	r2, sp, #8
   d84c0:	4643      	mov	r3, r8
   d84c2:	4631      	mov	r1, r6
   d84c4:	4620      	mov	r0, r4
   d84c6:	47a8      	blx	r5
			if (!result) {
   d84c8:	4605      	mov	r5, r0
   d84ca:	b958      	cbnz	r0, d84e4 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d84cc:	480a      	ldr	r0, [pc, #40]	; (d84f8 <_ZN6MB85RC5eraseEv+0x68>)
   d84ce:	490b      	ldr	r1, [pc, #44]	; (d84fc <_ZN6MB85RC5eraseEv+0x6c>)
   d84d0:	4632      	mov	r2, r6
   d84d2:	f7fb ff63 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d84d6:	a801      	add	r0, sp, #4
   d84d8:	f7ff ffd3 	bl	d8482 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d84dc:	4628      	mov	r0, r5
   d84de:	b00a      	add	sp, #40	; 0x28
   d84e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d84e4:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d84e8:	4446      	add	r6, r8
		while(totalLen > 0) {
   d84ea:	e7e0      	b.n	d84ae <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d84ec:	a801      	add	r0, sp, #4
   d84ee:	f7ff ffc8 	bl	d8482 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d84f2:	2501      	movs	r5, #1
   d84f4:	e7f2      	b.n	d84dc <_ZN6MB85RC5eraseEv+0x4c>
   d84f6:	bf00      	nop
   d84f8:	2003e560 	.word	0x2003e560
   d84fc:	000e40f8 	.word	0x000e40f8

000d8500 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d8500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8504:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d8506:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8508:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d850a:	460d      	mov	r5, r1
   d850c:	4616      	mov	r6, r2
   d850e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d8510:	f005 fc3c 	bl	ddd8c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d8514:	b1a7      	cbz	r7, d8540 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d8516:	68e1      	ldr	r1, [r4, #12]
   d8518:	6860      	ldr	r0, [r4, #4]
   d851a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d851e:	f005 fc16 	bl	ddd4e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d8522:	0a29      	lsrs	r1, r5, #8
   d8524:	6860      	ldr	r0, [r4, #4]
   d8526:	f7ff ff9b 	bl	d8460 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d852a:	4629      	mov	r1, r5
   d852c:	6860      	ldr	r0, [r4, #4]
   d852e:	f7ff ff97 	bl	d8460 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d8532:	6860      	ldr	r0, [r4, #4]
   d8534:	2100      	movs	r1, #0
   d8536:	f005 fc25 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d853a:	b148      	cbz	r0, d8550 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d853c:	2400      	movs	r4, #0
   d853e:	e000      	b.n	d8542 <_ZN6MB85RC8readDataEjPhj+0x42>
   d8540:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d8542:	a801      	add	r0, sp, #4
   d8544:	f7ff ff9d 	bl	d8482 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d8548:	4620      	mov	r0, r4
   d854a:	b003      	add	sp, #12
   d854c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d8550:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d8552:	7b21      	ldrb	r1, [r4, #12]
   d8554:	6860      	ldr	r0, [r4, #4]
   d8556:	46b8      	mov	r8, r7
   d8558:	bf28      	it	cs
   d855a:	f04f 0820 	movcs.w	r8, #32
   d855e:	2301      	movs	r3, #1
   d8560:	4642      	mov	r2, r8
   d8562:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d8566:	f005 fbdc 	bl	ddd22 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d856a:	f008 f8a1 	bl	e06b0 <_Z19__fetch_global_Wirev>
   d856e:	6803      	ldr	r3, [r0, #0]
   d8570:	691b      	ldr	r3, [r3, #16]
   d8572:	4798      	blx	r3
   d8574:	4540      	cmp	r0, r8
   d8576:	dbe1      	blt.n	d853c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d8578:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d857c:	f008 f898 	bl	e06b0 <_Z19__fetch_global_Wirev>
   d8580:	6803      	ldr	r3, [r0, #0]
   d8582:	695b      	ldr	r3, [r3, #20]
   d8584:	4798      	blx	r3
   d8586:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d858a:	454e      	cmp	r6, r9
   d858c:	d1f6      	bne.n	d857c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d858e:	4445      	add	r5, r8
   d8590:	eba7 0708 	sub.w	r7, r7, r8
   d8594:	e7be      	b.n	d8514 <_ZN6MB85RC8readDataEjPhj+0x14>

000d8596 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d8596:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d859a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d859c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d859e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d85a0:	460e      	mov	r6, r1
   d85a2:	4690      	mov	r8, r2
   d85a4:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d85a6:	f005 fbf1 	bl	ddd8c <_ZN7TwoWire4lockEv>
   d85aa:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d85ae:	f1b9 0f00 	cmp.w	r9, #0
   d85b2:	d02a      	beq.n	d860a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d85b4:	b34d      	cbz	r5, d860a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d85b6:	68e1      	ldr	r1, [r4, #12]
   d85b8:	6860      	ldr	r0, [r4, #4]
   d85ba:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d85be:	f005 fbc6 	bl	ddd4e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d85c2:	0a31      	lsrs	r1, r6, #8
   d85c4:	6860      	ldr	r0, [r4, #4]
   d85c6:	f7ff ff4b 	bl	d8460 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d85ca:	6860      	ldr	r0, [r4, #4]
   d85cc:	4631      	mov	r1, r6
   d85ce:	f7ff ff47 	bl	d8460 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d85d2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d85d6:	4647      	mov	r7, r8
   d85d8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d85dc:	6860      	ldr	r0, [r4, #4]
   d85de:	f817 1b01 	ldrb.w	r1, [r7], #1
   d85e2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d85e4:	3d01      	subs	r5, #1
				wire.write(*data);
   d85e6:	689b      	ldr	r3, [r3, #8]
   d85e8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d85ea:	4555      	cmp	r5, sl
   d85ec:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d85f0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d85f2:	d001      	beq.n	d85f8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d85f4:	2d00      	cmp	r5, #0
   d85f6:	d1f1      	bne.n	d85dc <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d85f8:	6860      	ldr	r0, [r4, #4]
   d85fa:	2101      	movs	r1, #1
   d85fc:	f005 fbc2 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d8600:	2800      	cmp	r0, #0
   d8602:	d0d7      	beq.n	d85b4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d8604:	f04f 0900 	mov.w	r9, #0
   d8608:	e7d1      	b.n	d85ae <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d860a:	a801      	add	r0, sp, #4
   d860c:	f7ff ff39 	bl	d8482 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d8610:	4648      	mov	r0, r9
   d8612:	b003      	add	sp, #12
   d8614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8618 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d8618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d861c:	b08b      	sub	sp, #44	; 0x2c
   d861e:	460e      	mov	r6, r1
   d8620:	4615      	mov	r5, r2
   d8622:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d8624:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8626:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d8628:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d862a:	f005 fbaf 	bl	ddd8c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d862e:	42ae      	cmp	r6, r5
   d8630:	d229      	bcs.n	d8686 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d8632:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d8634:	4425      	add	r5, r4
			while(numBytes > 0) {
   d8636:	b18c      	cbz	r4, d865c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d8638:	2c1e      	cmp	r4, #30
   d863a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d863c:	f8d8 3000 	ldr.w	r3, [r8]
   d8640:	bf28      	it	cs
   d8642:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d8644:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d8646:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d864a:	aa02      	add	r2, sp, #8
   d864c:	463b      	mov	r3, r7
   d864e:	4631      	mov	r1, r6
   d8650:	4640      	mov	r0, r8
				framAddrTo -= count;
   d8652:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d8654:	47c8      	blx	r9
				if (!result) {
   d8656:	b948      	cbnz	r0, d866c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d8658:	2400      	movs	r4, #0
   d865a:	e000      	b.n	d865e <_ZN6MB85RC8moveDataEjjj+0x46>
   d865c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d865e:	a801      	add	r0, sp, #4
   d8660:	f7ff ff0f 	bl	d8482 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d8664:	4620      	mov	r0, r4
   d8666:	b00b      	add	sp, #44	; 0x2c
   d8668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d866c:	f8d8 3000 	ldr.w	r3, [r8]
   d8670:	aa02      	add	r2, sp, #8
   d8672:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d8676:	4629      	mov	r1, r5
   d8678:	463b      	mov	r3, r7
   d867a:	4640      	mov	r0, r8
   d867c:	47c8      	blx	r9
				if (!result) {
   d867e:	2800      	cmp	r0, #0
   d8680:	d0ea      	beq.n	d8658 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d8682:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d8684:	e7d7      	b.n	d8636 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d8686:	d9e9      	bls.n	d865c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d8688:	2c00      	cmp	r4, #0
   d868a:	d0e7      	beq.n	d865c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d868c:	f8d8 3000 	ldr.w	r3, [r8]
   d8690:	2c1e      	cmp	r4, #30
   d8692:	4627      	mov	r7, r4
   d8694:	bf28      	it	cs
   d8696:	271e      	movcs	r7, #30
   d8698:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d869c:	aa02      	add	r2, sp, #8
   d869e:	463b      	mov	r3, r7
   d86a0:	4631      	mov	r1, r6
   d86a2:	4640      	mov	r0, r8
   d86a4:	47c8      	blx	r9
				if (!result) {
   d86a6:	2800      	cmp	r0, #0
   d86a8:	d0d6      	beq.n	d8658 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d86aa:	f8d8 3000 	ldr.w	r3, [r8]
   d86ae:	aa02      	add	r2, sp, #8
   d86b0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d86b4:	4629      	mov	r1, r5
   d86b6:	463b      	mov	r3, r7
   d86b8:	4640      	mov	r0, r8
   d86ba:	47c8      	blx	r9
				if (!result) {
   d86bc:	2800      	cmp	r0, #0
   d86be:	d0cb      	beq.n	d8658 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d86c0:	443e      	add	r6, r7
				framAddrTo += count;
   d86c2:	443d      	add	r5, r7
				numBytes -= count;
   d86c4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d86c6:	e7df      	b.n	d8688 <_ZN6MB85RC8moveDataEjjj+0x70>

000d86c8 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d86c8:	6803      	ldr	r3, [r0, #0]
   d86ca:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d86cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d86d0:	2101      	movs	r1, #1
   d86d2:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d86d6:	4770      	bx	lr

000d86d8 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d86d8:	2a02      	cmp	r2, #2
   d86da:	d006      	beq.n	d86ea <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d86dc:	2a03      	cmp	r2, #3
   d86de:	d002      	beq.n	d86e6 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d86e0:	2a01      	cmp	r2, #1
   d86e2:	d100      	bne.n	d86e6 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d86e4:	6001      	str	r1, [r0, #0]
	}
   d86e6:	2000      	movs	r0, #0
   d86e8:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d86ea:	680b      	ldr	r3, [r1, #0]
   d86ec:	6003      	str	r3, [r0, #0]
	}
   d86ee:	e7fa      	b.n	d86e6 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d86f0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d86f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d86f2:	4603      	mov	r3, r0
	switch (__op)
   d86f4:	d102      	bne.n	d86fc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d86f6:	6001      	str	r1, [r0, #0]
      }
   d86f8:	2000      	movs	r0, #0
   d86fa:	4770      	bx	lr
	  switch (__op)
   d86fc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d86fe:	bf04      	itt	eq
   d8700:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d8704:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d8708:	e7f6      	b.n	d86f8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d870a <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d870a:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d870c:	6842      	ldr	r2, [r0, #4]
   d870e:	4603      	mov	r3, r0
   d8710:	1054      	asrs	r4, r2, #1
   d8712:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d8716:	07d2      	lsls	r2, r2, #31
   d8718:	bf48      	it	mi
   d871a:	590a      	ldrmi	r2, [r1, r4]
   d871c:	681b      	ldr	r3, [r3, #0]
      }
   d871e:	f85d 4b04 	ldr.w	r4, [sp], #4
   d8722:	bf48      	it	mi
   d8724:	58d3      	ldrmi	r3, [r2, r3]
   d8726:	4718      	bx	r3

000d8728 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d8728:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d872c:	4601      	mov	r1, r0
    if (stateHandler) {
   d872e:	b11b      	cbz	r3, d8738 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8730:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d8734:	30c0      	adds	r0, #192	; 0xc0
   d8736:	4718      	bx	r3
}
   d8738:	4770      	bx	lr
	...

000d873c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d873e:	4d12      	ldr	r5, [pc, #72]	; (d8788 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d8740:	4608      	mov	r0, r1
        eventData = "";
   d8742:	2a00      	cmp	r2, #0
   d8744:	bf18      	it	ne
   d8746:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d8748:	460f      	mov	r7, r1
   d874a:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d874c:	f009 f85f 	bl	e180e <strlen>
   d8750:	2840      	cmp	r0, #64	; 0x40
   d8752:	d817      	bhi.n	d8784 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d8754:	4628      	mov	r0, r5
   d8756:	f009 f85a 	bl	e180e <strlen>
   d875a:	f240 236e 	movw	r3, #622	; 0x26e
   d875e:	4298      	cmp	r0, r3
   d8760:	d810      	bhi.n	d8784 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d8762:	3043      	adds	r0, #67	; 0x43
   d8764:	f7fb fc99 	bl	d409a <_Znaj>
    if (event) {
   d8768:	4604      	mov	r4, r0
   d876a:	b148      	cbz	r0, d8780 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d876c:	4639      	mov	r1, r7
        event->flags = flags;
   d876e:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d8772:	f009 f827 	bl	e17c4 <strcpy>
        strcpy(event->eventData, eventData);
   d8776:	4629      	mov	r1, r5
   d8778:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d877c:	f009 f822 	bl	e17c4 <strcpy>
}
   d8780:	4620      	mov	r0, r4
   d8782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d8784:	2400      	movs	r4, #0
   d8786:	e7fb      	b.n	d8780 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d8788:	000e4537 	.word	0x000e4537

000d878c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d878c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d878e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d8790:	460a      	mov	r2, r1
   d8792:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d8794:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d8796:	1d01      	adds	r1, r0, #4
   d8798:	a808      	add	r0, sp, #32
   d879a:	f000 fe05 	bl	d93a8 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d879e:	9808      	ldr	r0, [sp, #32]
   d87a0:	2100      	movs	r1, #0
   d87a2:	f009 ffcb 	bl	e273c <open>
   d87a6:	4605      	mov	r5, r0
   d87a8:	a808      	add	r0, sp, #32
   d87aa:	f007 f97d 	bl	dfaa8 <_ZN6StringD1Ev>
    if (fd) {
   d87ae:	2d00      	cmp	r5, #0
   d87b0:	d060      	beq.n	d8874 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d87b2:	a908      	add	r1, sp, #32
   d87b4:	4628      	mov	r0, r5
   d87b6:	f009 ffaf 	bl	e2718 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d87ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d87bc:	492e      	ldr	r1, [pc, #184]	; (d8878 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d87be:	482f      	ldr	r0, [pc, #188]	; (d887c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d87c0:	4632      	mov	r2, r6
   d87c2:	f7fd fbed 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d87c6:	2200      	movs	r2, #0
   d87c8:	4611      	mov	r1, r2
   d87ca:	4628      	mov	r0, r5
   d87cc:	f009 ffac 	bl	e2728 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d87d0:	2208      	movs	r2, #8
   d87d2:	a906      	add	r1, sp, #24
   d87d4:	4628      	mov	r0, r5
   d87d6:	f009 ffc5 	bl	e2764 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d87da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d87dc:	2f4a      	cmp	r7, #74	; 0x4a
   d87de:	dd39      	ble.n	d8854 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d87e0:	4b27      	ldr	r3, [pc, #156]	; (d8880 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d87e2:	9a06      	ldr	r2, [sp, #24]
   d87e4:	429a      	cmp	r2, r3
   d87e6:	d135      	bne.n	d8854 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d87e8:	4b26      	ldr	r3, [pc, #152]	; (d8884 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d87ea:	9a07      	ldr	r2, [sp, #28]
   d87ec:	429a      	cmp	r2, r3
   d87ee:	d131      	bne.n	d8854 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d87f0:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d87f4:	4610      	mov	r0, r2
   d87f6:	9205      	str	r2, [sp, #20]
   d87f8:	f7fb fc4f 	bl	d409a <_Znaj>
            if (result) {
   d87fc:	4604      	mov	r4, r0
   d87fe:	b1c0      	cbz	r0, d8832 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d8800:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d8802:	4601      	mov	r1, r0
   d8804:	9a05      	ldr	r2, [sp, #20]
   d8806:	4628      	mov	r0, r5
   d8808:	f009 ffac 	bl	e2764 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d880c:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d8810:	b9ab      	cbnz	r3, d883e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d8812:	1c63      	adds	r3, r4, #1
   d8814:	4618      	mov	r0, r3
   d8816:	9305      	str	r3, [sp, #20]
   d8818:	f008 fff9 	bl	e180e <strlen>
   d881c:	283f      	cmp	r0, #63	; 0x3f
   d881e:	9b05      	ldr	r3, [sp, #20]
   d8820:	d80d      	bhi.n	d883e <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d8822:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d8826:	9200      	str	r2, [sp, #0]
   d8828:	4917      	ldr	r1, [pc, #92]	; (d8888 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d882a:	4814      	ldr	r0, [pc, #80]	; (d887c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d882c:	4632      	mov	r2, r6
   d882e:	f7fd fbb7 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d8832:	4628      	mov	r0, r5
   d8834:	f009 ff68 	bl	e2708 <close>
}
   d8838:	4620      	mov	r0, r4
   d883a:	b01f      	add	sp, #124	; 0x7c
   d883c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d883e:	4913      	ldr	r1, [pc, #76]	; (d888c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d8840:	480e      	ldr	r0, [pc, #56]	; (d887c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8842:	4632      	mov	r2, r6
   d8844:	f7fd fbac 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d8848:	2143      	movs	r1, #67	; 0x43
   d884a:	4620      	mov	r0, r4
   d884c:	f007 ff78 	bl	e0740 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d8850:	2400      	movs	r4, #0
   d8852:	e7ee      	b.n	d8832 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d8854:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d8858:	9302      	str	r3, [sp, #8]
   d885a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d885e:	9301      	str	r3, [sp, #4]
   d8860:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d8864:	9300      	str	r3, [sp, #0]
   d8866:	490a      	ldr	r1, [pc, #40]	; (d8890 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d8868:	9b06      	ldr	r3, [sp, #24]
   d886a:	4804      	ldr	r0, [pc, #16]	; (d887c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d886c:	4632      	mov	r2, r6
   d886e:	f7fd fb97 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
   d8872:	e7ed      	b.n	d8850 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d8874:	462c      	mov	r4, r5
    return result;
   d8876:	e7df      	b.n	d8838 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d8878:	000e4140 	.word	0x000e4140
   d887c:	2003e480 	.word	0x2003e480
   d8880:	31b67663 	.word	0x31b67663
   d8884:	00410801 	.word	0x00410801
   d8888:	000e4154 	.word	0x000e4154
   d888c:	000e4176 	.word	0x000e4176
   d8890:	000e41a4 	.word	0x000e41a4

000d8894 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d8894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8898:	4680      	mov	r8, r0
   d889a:	4b28      	ldr	r3, [pc, #160]	; (d893c <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d889c:	f848 3b04 	str.w	r3, [r8], #4
   d88a0:	4604      	mov	r4, r0
   d88a2:	4640      	mov	r0, r8
   d88a4:	f000 fc98 	bl	d91d8 <_ZN14SequentialFileC1Ev>
   d88a8:	2202      	movs	r2, #2
   d88aa:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d88ac:	2500      	movs	r5, #0
   d88ae:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d88b2:	2308      	movs	r3, #8
   d88b4:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d88b6:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d88ba:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d88be:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d88c2:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d88c6:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d88c8:	2020      	movs	r0, #32
   d88ca:	f7fb fbe4 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d88ce:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d88d0:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d88d2:	3e01      	subs	r6, #1
   d88d4:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d88d6:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d88da:	4607      	mov	r7, r0
   d88dc:	f44f 7000 	mov.w	r0, #512	; 0x200
   d88e0:	f7fb fbd9 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d88e4:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d88e8:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d88ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d88f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d88f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d88f8:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d88fc:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d8900:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d8904:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d8908:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d890c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d8910:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d8914:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d8918:	4909      	ldr	r1, [pc, #36]	; (d8940 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d891a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d891e:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d8922:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d8926:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d892a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d892e:	4640      	mov	r0, r8
   d8930:	f000 fc98 	bl	d9264 <_ZN14SequentialFile11withDirPathEPKc>
}
   d8934:	4620      	mov	r0, r4
   d8936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d893a:	bf00      	nop
   d893c:	000e43c0 	.word	0x000e43c0
   d8940:	000e41e9 	.word	0x000e41e9

000d8944 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d8944:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d8946:	4c06      	ldr	r4, [pc, #24]	; (d8960 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d8948:	6823      	ldr	r3, [r4, #0]
   d894a:	b93b      	cbnz	r3, d895c <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d894c:	20d0      	movs	r0, #208	; 0xd0
   d894e:	f7fb fba2 	bl	d4096 <_Znwj>
   d8952:	4605      	mov	r5, r0
   d8954:	b108      	cbz	r0, d895a <_ZN17PublishQueuePosix8instanceEv+0x16>
   d8956:	f7ff ff9d 	bl	d8894 <_ZN17PublishQueuePosixC1Ev>
   d895a:	6025      	str	r5, [r4, #0]
}
   d895c:	6820      	ldr	r0, [r4, #0]
   d895e:	bd38      	pop	{r3, r4, r5, pc}
   d8960:	2003e484 	.word	0x2003e484

000d8964 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d8964:	b510      	push	{r4, lr}
   d8966:	e9d1 2300 	ldrd	r2, r3, [r1]
   d896a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d896c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d896e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d8970:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d8972:	b90a      	cbnz	r2, d8978 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d8974:	07d9      	lsls	r1, r3, #31
   d8976:	d505      	bpl.n	d8984 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8978:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d897c:	4b0f      	ldr	r3, [pc, #60]	; (d89bc <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d897e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d8980:	4b0f      	ldr	r3, [pc, #60]	; (d89c0 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d8982:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8984:	ab02      	add	r3, sp, #8
   d8986:	e893 0003 	ldmia.w	r3, {r0, r1}
   d898a:	466a      	mov	r2, sp
   d898c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8990:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8994:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8998:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d899c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d899e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d89a2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d89a4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d89a6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d89a8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d89aa:	4618      	mov	r0, r3
   d89ac:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d89ae:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d89b0:	9105      	str	r1, [sp, #20]
   d89b2:	f7fc f865 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	}
   d89b6:	4620      	mov	r0, r4
   d89b8:	b006      	add	sp, #24
   d89ba:	bd10      	pop	{r4, pc}
   d89bc:	000d870b 	.word	0x000d870b
   d89c0:	000d86f1 	.word	0x000d86f1

000d89c4 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      ~lock_guard()
   d89c4:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d89c6:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d89c8:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d89ca:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d89cc:	f004 f81c 	bl	dca08 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d89d0:	4620      	mov	r0, r4
   d89d2:	bd10      	pop	{r4, pc}

000d89d4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d89d4:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d89d6:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d89d8:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d89da:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d89dc:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d89de:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d89e0:	d002      	beq.n	d89e8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d89e2:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d89e4:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d89e6:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d89e8:	68c0      	ldr	r0, [r0, #12]
   d89ea:	f7fb fb58 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d89ee:	6963      	ldr	r3, [r4, #20]
   d89f0:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d89f2:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d89f4:	685b      	ldr	r3, [r3, #4]
   d89f6:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d89f8:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d89fc:	6122      	str	r2, [r4, #16]
   d89fe:	e7f1      	b.n	d89e4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d8a00 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d8a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a04:	b087      	sub	sp, #28
   d8a06:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8a08:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d8a0a:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d8a0c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d8ab8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d8a10:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d8abc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d8a14:	f003 fff0 	bl	dc9f8 <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8a18:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d8ac0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d8a1c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d8a20:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8a24:	4293      	cmp	r3, r2
   d8a26:	d105      	bne.n	d8a34 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d8a28:	a801      	add	r0, sp, #4
   d8a2a:	f7ff ffcb 	bl	d89c4 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8a2e:	b007      	add	sp, #28
   d8a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d8a34:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d8a38:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d8a3c:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d8a3e:	f7ff ffc9 	bl	d89d4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d8a42:	4640      	mov	r0, r8
   d8a44:	f000 fea4 	bl	d9790 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8a48:	2300      	movs	r3, #0
   d8a4a:	4602      	mov	r2, r0
   d8a4c:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d8a4e:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8a50:	a802      	add	r0, sp, #8
   d8a52:	f000 fca9 	bl	d93a8 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d8a56:	9802      	ldr	r0, [sp, #8]
   d8a58:	f240 2102 	movw	r1, #514	; 0x202
   d8a5c:	f009 fe6e 	bl	e273c <open>
   d8a60:	4605      	mov	r5, r0
   d8a62:	a802      	add	r0, sp, #8
   d8a64:	f007 f820 	bl	dfaa8 <_ZN6StringD1Ev>
            if (fd) {
   d8a68:	b1cd      	cbz	r5, d8a9e <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d8a6a:	2208      	movs	r2, #8
   d8a6c:	eb0d 0102 	add.w	r1, sp, r2
   d8a70:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d8a72:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d8a76:	f009 fe87 	bl	e2788 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d8a7a:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d8a7e:	f008 fec6 	bl	e180e <strlen>
   d8a82:	4639      	mov	r1, r7
   d8a84:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d8a88:	4628      	mov	r0, r5
   d8a8a:	f009 fe7d 	bl	e2788 <write>
                close(fd);
   d8a8e:	4628      	mov	r0, r5
   d8a90:	f009 fe3a 	bl	e2708 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8a94:	4807      	ldr	r0, [pc, #28]	; (d8ab4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d8a96:	4632      	mov	r2, r6
   d8a98:	4659      	mov	r1, fp
   d8a9a:	f7fd fa81 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d8a9e:	4631      	mov	r1, r6
   d8aa0:	4640      	mov	r0, r8
   d8aa2:	f000 feb5 	bl	d9810 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d8aa6:	2f00      	cmp	r7, #0
   d8aa8:	d0b8      	beq.n	d8a1c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d8aaa:	2143      	movs	r1, #67	; 0x43
   d8aac:	4638      	mov	r0, r7
   d8aae:	f007 fe47 	bl	e0740 <_ZdlPvj>
   d8ab2:	e7b1      	b.n	d8a18 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d8ab4:	2003e480 	.word	0x2003e480
   d8ab8:	31b67663 	.word	0x31b67663
   d8abc:	00410801 	.word	0x00410801
   d8ac0:	000e41f7 	.word	0x000e41f7

000d8ac4 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d8ac4:	2900      	cmp	r1, #0
   d8ac6:	bf08      	it	eq
   d8ac8:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d8acc:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d8ace:	d005      	beq.n	d8adc <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d8ad0:	2900      	cmp	r1, #0
   d8ad2:	bf08      	it	eq
   d8ad4:	2840      	cmpeq	r0, #64	; 0x40
   d8ad6:	d10b      	bne.n	d8af0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d8ad8:	2a09      	cmp	r2, #9
   d8ada:	d109      	bne.n	d8af0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d8adc:	4905      	ldr	r1, [pc, #20]	; (d8af4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d8ade:	4806      	ldr	r0, [pc, #24]	; (d8af8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d8ae0:	f7fd fa5e 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d8ae4:	f7ff ff2e 	bl	d8944 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d8ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d8aec:	f7ff bf88 	b.w	d8a00 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d8af0:	bd38      	pop	{r3, r4, r5, pc}
   d8af2:	bf00      	nop
   d8af4:	000e4214 	.word	0x000e4214
   d8af8:	2003e480 	.word	0x2003e480

000d8afc <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d8afc:	b570      	push	{r4, r5, r6, lr}
   d8afe:	b086      	sub	sp, #24
   d8b00:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8b02:	f004 fa69 	bl	dcfd8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d8b06:	b948      	cbnz	r0, d8b1c <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d8b08:	4b43      	ldr	r3, [pc, #268]	; (d8c18 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d8b0a:	a902      	add	r1, sp, #8
   d8b0c:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d8b10:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8b14:	f7ff ff26 	bl	d8964 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8b18:	b006      	add	sp, #24
   d8b1a:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d8b1c:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d8b20:	b11d      	cbz	r5, d8b2a <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d8b22:	2301      	movs	r3, #1
   d8b24:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d8b28:	e7f6      	b.n	d8b18 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d8b2a:	f003 ffa5 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d8b2e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d8b32:	1ac0      	subs	r0, r0, r3
   d8b34:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d8b38:	4298      	cmp	r0, r3
   d8b3a:	d3ed      	bcc.n	d8b18 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d8b3c:	1d26      	adds	r6, r4, #4
   d8b3e:	4629      	mov	r1, r5
   d8b40:	4630      	mov	r0, r6
   d8b42:	f000 fe31 	bl	d97a8 <_ZN14SequentialFile16getFileFromQueueEb>
   d8b46:	4601      	mov	r1, r0
   d8b48:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d8b4c:	2800      	cmp	r0, #0
   d8b4e:	d052      	beq.n	d8bf6 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d8b50:	4620      	mov	r0, r4
   d8b52:	f7ff fe1b 	bl	d878c <_ZN17PublishQueuePosix13readQueueFileEi>
   d8b56:	4605      	mov	r5, r0
   d8b58:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d8b5c:	2800      	cmp	r0, #0
   d8b5e:	d035      	beq.n	d8bcc <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d8b60:	f003 ff8a 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8b64:	ae02      	add	r6, sp, #8
   d8b66:	2500      	movs	r5, #0
   d8b68:	4b2c      	ldr	r3, [pc, #176]	; (d8c1c <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d8b6a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8b6e:	4631      	mov	r1, r6
   d8b70:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8b74:	9302      	str	r3, [sp, #8]
   d8b76:	9503      	str	r5, [sp, #12]
   d8b78:	f7ff fef4 	bl	d8964 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8b7c:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d8b80:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d8b84:	9200      	str	r2, [sp, #0]
   d8b86:	4926      	ldr	r1, [pc, #152]	; (d8c20 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d8b88:	4a26      	ldr	r2, [pc, #152]	; (d8c24 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d8b8a:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8b8e:	42a8      	cmp	r0, r5
   d8b90:	bf08      	it	eq
   d8b92:	460a      	moveq	r2, r1
   d8b94:	3301      	adds	r3, #1
   d8b96:	4924      	ldr	r1, [pc, #144]	; (d8c28 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d8b98:	4824      	ldr	r0, [pc, #144]	; (d8c2c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d8b9a:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8b9e:	f7fd f9ff 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d8ba2:	f7fd ff53 	bl	d6a4c <_ZN19BackgroundPublishRK8instanceEv>
   d8ba6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d8baa:	4b21      	ldr	r3, [pc, #132]	; (d8c30 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d8bac:	9305      	str	r3, [sp, #20]
   d8bae:	e9cd 6500 	strd	r6, r5, [sp]
   d8bb2:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d8bb4:	4b1f      	ldr	r3, [pc, #124]	; (d8c34 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8bb6:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d8bb8:	9304      	str	r3, [sp, #16]
   d8bba:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8bbe:	3242      	adds	r2, #66	; 0x42
   d8bc0:	f7fe f87c 	bl	d6cbc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d8bc4:	4630      	mov	r0, r6
   d8bc6:	f7fb ff5b 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d8bca:	e7a5      	b.n	d8b18 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d8bcc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d8bd0:	4919      	ldr	r1, [pc, #100]	; (d8c38 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d8bd2:	4816      	ldr	r0, [pc, #88]	; (d8c2c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d8bd4:	f7fb fbe2 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d8bd8:	2101      	movs	r1, #1
   d8bda:	4630      	mov	r0, r6
   d8bdc:	f000 fde4 	bl	d97a8 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d8be0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d8be4:	462a      	mov	r2, r5
   d8be6:	4630      	mov	r0, r6
   d8be8:	f000 fc1a 	bl	d9420 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d8bec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d8bf0:	2b00      	cmp	r3, #0
   d8bf2:	d1b5      	bne.n	d8b60 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d8bf4:	e795      	b.n	d8b22 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d8bf6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d8bfa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8bfe:	429a      	cmp	r2, r3
   d8c00:	d007      	beq.n	d8c12 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d8c02:	681b      	ldr	r3, [r3, #0]
   d8c04:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d8c08:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8c0c:	f7ff fee2 	bl	d89d4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d8c10:	e7ec      	b.n	d8bec <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d8c12:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d8c16:	e784      	b.n	d8b22 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d8c18:	000d8cb5 	.word	0x000d8cb5
   d8c1c:	000d900d 	.word	0x000d900d
   d8c20:	000e4243 	.word	0x000e4243
   d8c24:	000e44bc 	.word	0x000e44bc
   d8c28:	000e4264 	.word	0x000e4264
   d8c2c:	2003e480 	.word	0x2003e480
   d8c30:	000d86c9 	.word	0x000d86c9
   d8c34:	000d86d9 	.word	0x000d86d9
   d8c38:	000e4247 	.word	0x000e4247

000d8c3c <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8c3c:	68c3      	ldr	r3, [r0, #12]
   d8c3e:	68ca      	ldr	r2, [r1, #12]
   d8c40:	1a9b      	subs	r3, r3, r2
   d8c42:	109b      	asrs	r3, r3, #2
   d8c44:	1e5a      	subs	r2, r3, #1
   d8c46:	e9d0 3000 	ldrd	r3, r0, [r0]
   d8c4a:	1a1b      	subs	r3, r3, r0
   d8c4c:	109b      	asrs	r3, r3, #2
   d8c4e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d8c52:	6888      	ldr	r0, [r1, #8]
   d8c54:	680a      	ldr	r2, [r1, #0]
   d8c56:	1a80      	subs	r0, r0, r2
    }
   d8c58:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d8c5c:	4770      	bx	lr

000d8c5e <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d8c5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8c60:	4605      	mov	r5, r0
   d8c62:	9001      	str	r0, [sp, #4]
   d8c64:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d8c66:	f003 fec7 	bl	dc9f8 <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8c6a:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d8c6e:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d8c72:	f7ff ffe3 	bl	d8c3c <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d8c76:	4604      	mov	r4, r0
   d8c78:	b950      	cbnz	r0, d8c90 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d8c7a:	1d28      	adds	r0, r5, #4
   d8c7c:	f000 fde2 	bl	d9844 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d8c80:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d8c84:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d8c86:	b11b      	cbz	r3, d8c90 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d8c88:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d8c8c:	b903      	cbnz	r3, d8c90 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d8c8e:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d8c90:	a801      	add	r0, sp, #4
   d8c92:	f7ff fe97 	bl	d89c4 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8c96:	4620      	mov	r0, r4
   d8c98:	b003      	add	sp, #12
   d8c9a:	bd30      	pop	{r4, r5, pc}

000d8c9c <_ZN17PublishQueuePosix18setPausePublishingEb>:
void PublishQueuePosix::setPausePublishing(bool value) { 
   d8c9c:	b538      	push	{r3, r4, r5, lr}
   d8c9e:	4605      	mov	r5, r0
   d8ca0:	460c      	mov	r4, r1
    pausePublishing = value; 
   d8ca2:	f880 10b2 	strb.w	r1, [r0, #178]	; 0xb2
    if (!value) {
   d8ca6:	b921      	cbnz	r1, d8cb2 <_ZN17PublishQueuePosix18setPausePublishingEb+0x16>
        if (getNumEvents() != 0) {
   d8ca8:	f7ff ffd9 	bl	d8c5e <_ZN17PublishQueuePosix12getNumEventsEv>
   d8cac:	b108      	cbz	r0, d8cb2 <_ZN17PublishQueuePosix18setPausePublishingEb+0x16>
            canSleep = false;
   d8cae:	f885 40b3 	strb.w	r4, [r5, #179]	; 0xb3
}
   d8cb2:	bd38      	pop	{r3, r4, r5, pc}

000d8cb4 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d8cb4:	b513      	push	{r0, r1, r4, lr}
   d8cb6:	4604      	mov	r4, r0
   d8cb8:	f004 f98e 	bl	dcfd8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d8cbc:	b190      	cbz	r0, d8ce4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d8cbe:	f003 fedb 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d8cc2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d8cc6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d8cca:	4b0d      	ldr	r3, [pc, #52]	; (d8d00 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d8ccc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d8cd0:	9300      	str	r3, [sp, #0]
   d8cd2:	4669      	mov	r1, sp
   d8cd4:	2300      	movs	r3, #0
   d8cd6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8cda:	9301      	str	r3, [sp, #4]
   d8cdc:	f7ff fe42 	bl	d8964 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8ce0:	b002      	add	sp, #8
   d8ce2:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d8ce4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d8ce8:	b11b      	cbz	r3, d8cf2 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d8cea:	2301      	movs	r3, #1
   d8cec:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d8cf0:	e7f6      	b.n	d8ce0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d8cf2:	4620      	mov	r0, r4
   d8cf4:	f7ff ffb3 	bl	d8c5e <_ZN17PublishQueuePosix12getNumEventsEv>
   d8cf8:	2800      	cmp	r0, #0
   d8cfa:	d0f6      	beq.n	d8cea <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d8cfc:	e7f0      	b.n	d8ce0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d8cfe:	bf00      	nop
   d8d00:	000d8afd 	.word	0x000d8afd

000d8d04 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d8d04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8d08:	4604      	mov	r4, r0
   d8d0a:	9001      	str	r0, [sp, #4]
   d8d0c:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d8d0e:	f003 fe73 	bl	dc9f8 <os_mutex_recursive_lock>
   d8d12:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d8d16:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d8d1a:	f7ff ff8f 	bl	d8c3c <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d8d1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8d20:	4283      	cmp	r3, r0
   d8d22:	d202      	bcs.n	d8d2a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d8d24:	4620      	mov	r0, r4
   d8d26:	f7ff fe6b 	bl	d8a00 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d8d2a:	f8df 8048 	ldr.w	r8, [pc, #72]	; d8d74 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d8d2e:	4f10      	ldr	r7, [pc, #64]	; (d8d70 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d8d30:	1d26      	adds	r6, r4, #4
   d8d32:	4630      	mov	r0, r6
   d8d34:	f000 fd86 	bl	d9844 <_ZNK14SequentialFile11getQueueLenEv>
   d8d38:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d8d3a:	4298      	cmp	r0, r3
   d8d3c:	dc05      	bgt.n	d8d4a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d8d3e:	a801      	add	r0, sp, #4
   d8d40:	f7ff fe40 	bl	d89c4 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8d44:	b002      	add	sp, #8
   d8d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d8d4a:	2101      	movs	r1, #1
   d8d4c:	4630      	mov	r0, r6
   d8d4e:	f000 fd2b 	bl	d97a8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d8d52:	4605      	mov	r5, r0
   d8d54:	2800      	cmp	r0, #0
   d8d56:	d0ec      	beq.n	d8d32 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d8d58:	4601      	mov	r1, r0
   d8d5a:	2200      	movs	r2, #0
   d8d5c:	4630      	mov	r0, r6
   d8d5e:	f000 fb5f 	bl	d9420 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d8d62:	462a      	mov	r2, r5
   d8d64:	4641      	mov	r1, r8
   d8d66:	4638      	mov	r0, r7
   d8d68:	f7fb fb18 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d8d6c:	e7e1      	b.n	d8d32 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d8d6e:	bf00      	nop
   d8d70:	2003e480 	.word	0x2003e480
   d8d74:	000e4283 	.word	0x000e4283

000d8d78 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d8d78:	b513      	push	{r0, r1, r4, lr}
   d8d7a:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d8d7c:	2000      	movs	r0, #0
   d8d7e:	f004 f8dd 	bl	dcf3c <system_thread_get_state>
   d8d82:	2801      	cmp	r0, #1
   d8d84:	d005      	beq.n	d8d92 <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d8d86:	4912      	ldr	r1, [pc, #72]	; (d8dd0 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d8d88:	4812      	ldr	r0, [pc, #72]	; (d8dd4 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d8d8a:	f7fd f920 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
}
   d8d8e:	b002      	add	sp, #8
   d8d90:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d8d92:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d8d96:	f003 fe1f 	bl	dc9d8 <os_mutex_recursive_create>
   d8d9a:	4a0f      	ldr	r2, [pc, #60]	; (d8dd8 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d8d9c:	2300      	movs	r3, #0
   d8d9e:	2100      	movs	r1, #0
   d8da0:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d8da4:	f004 f8aa 	bl	dcefc <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d8da8:	f7fd fe50 	bl	d6a4c <_ZN19BackgroundPublishRK8instanceEv>
   d8dac:	f7fd ff60 	bl	d6c70 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d8db0:	1d20      	adds	r0, r4, #4
   d8db2:	f000 fc75 	bl	d96a0 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d8db6:	4620      	mov	r0, r4
   d8db8:	f7ff ffa4 	bl	d8d04 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d8dbc:	4b07      	ldr	r3, [pc, #28]	; (d8ddc <_ZN17PublishQueuePosix5setupEv+0x64>)
   d8dbe:	9300      	str	r3, [sp, #0]
   d8dc0:	4669      	mov	r1, sp
   d8dc2:	2300      	movs	r3, #0
   d8dc4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8dc8:	9301      	str	r3, [sp, #4]
   d8dca:	f7ff fdcb 	bl	d8964 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8dce:	e7de      	b.n	d8d8e <_ZN17PublishQueuePosix5setupEv+0x16>
   d8dd0:	000e4296 	.word	0x000e4296
   d8dd4:	2003e480 	.word	0x2003e480
   d8dd8:	000d8ac5 	.word	0x000d8ac5
   d8ddc:	000d8cb5 	.word	0x000d8cb5

000d8de0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d8de0:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d8de2:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d8de4:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d8de6:	b163      	cbz	r3, d8e02 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d8de8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8dea:	6945      	ldr	r5, [r0, #20]
   d8dec:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d8dee:	42ae      	cmp	r6, r5
   d8df0:	d904      	bls.n	d8dfc <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d8df2:	f855 0b04 	ldr.w	r0, [r5], #4
   d8df6:	f7fb f952 	bl	d409e <_ZdlPv>
   d8dfa:	e7f8      	b.n	d8dee <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d8dfc:	6820      	ldr	r0, [r4, #0]
   d8dfe:	f7fb f94e 	bl	d409e <_ZdlPv>
    }
   d8e02:	4620      	mov	r0, r4
   d8e04:	bd70      	pop	{r4, r5, r6, pc}

000d8e06 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d8e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e0a:	4606      	mov	r6, r0
   d8e0c:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8e0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8e10:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8e12:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8e14:	1a47      	subs	r7, r0, r1
   d8e16:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d8e1a:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8e1c:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d8e20:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8e22:	d927      	bls.n	d8e74 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d8e24:	1b5d      	subs	r5, r3, r5
   d8e26:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8e28:	6832      	ldr	r2, [r6, #0]
   d8e2a:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8e2c:	b10c      	cbz	r4, d8e32 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d8e2e:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d8e32:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8e34:	4414      	add	r4, r2
   d8e36:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d8e38:	42a1      	cmp	r1, r4
   d8e3a:	eba3 0201 	sub.w	r2, r3, r1
   d8e3e:	d913      	bls.n	d8e68 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d8e40:	4299      	cmp	r1, r3
   d8e42:	d002      	beq.n	d8e4a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8e44:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8e46:	f008 fc3d 	bl	e16c4 <memmove>
	_M_node = __new_node;
   d8e4a:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d8e4c:	6823      	ldr	r3, [r4, #0]
   d8e4e:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8e50:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8e54:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d8e56:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d8e58:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d8e5a:	59e3      	ldr	r3, [r4, r7]
   d8e5c:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8e5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8e62:	6233      	str	r3, [r6, #32]
    }
   d8e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d8e68:	4299      	cmp	r1, r3
   d8e6a:	d0ee      	beq.n	d8e4a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8e6c:	1d38      	adds	r0, r7, #4
   d8e6e:	1a80      	subs	r0, r0, r2
   d8e70:	4420      	add	r0, r4
   d8e72:	e7e8      	b.n	d8e46 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d8e74:	f103 0802 	add.w	r8, r3, #2
   d8e78:	454b      	cmp	r3, r9
   d8e7a:	bf2c      	ite	cs
   d8e7c:	4498      	addcs	r8, r3
   d8e7e:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d8e80:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d8e84:	d301      	bcc.n	d8e8a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d8e86:	f007 fc95 	bl	e07b4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e8a:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d8e8e:	f7fb f902 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8e92:	eba8 0505 	sub.w	r5, r8, r5
   d8e96:	086d      	lsrs	r5, r5, #1
   d8e98:	4682      	mov	sl, r0
   d8e9a:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8e9c:	b10c      	cbz	r4, d8ea2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d8e9e:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d8ea2:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d8ea4:	6971      	ldr	r1, [r6, #20]
   d8ea6:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8ea8:	442c      	add	r4, r5
	  if (_Num)
   d8eaa:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8eac:	4454      	add	r4, sl
   d8eae:	d003      	beq.n	d8eb8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8eb0:	1a52      	subs	r2, r2, r1
   d8eb2:	4620      	mov	r0, r4
   d8eb4:	f008 fc06 	bl	e16c4 <memmove>
	::operator delete(__p);
   d8eb8:	6830      	ldr	r0, [r6, #0]
   d8eba:	f7fb f8f0 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d8ebe:	e9c6 a800 	strd	sl, r8, [r6]
   d8ec2:	e7c2      	b.n	d8e4a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d8ec4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8ec8:	b086      	sub	sp, #24
   d8eca:	4604      	mov	r4, r0
   d8ecc:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d8ed0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d8ed4:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8ed6:	460f      	mov	r7, r1
   d8ed8:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d8eda:	f7ff fc2f 	bl	d873c <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d8ede:	4605      	mov	r5, r0
   d8ee0:	2800      	cmp	r0, #0
   d8ee2:	d042      	beq.n	d8f6a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d8ee4:	4b43      	ldr	r3, [pc, #268]	; (d8ff4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d8ee6:	4944      	ldr	r1, [pc, #272]	; (d8ff8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d8ee8:	4844      	ldr	r0, [pc, #272]	; (d8ffc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8eea:	2e00      	cmp	r6, #0
   d8eec:	bf18      	it	ne
   d8eee:	4633      	movne	r3, r6
   d8ef0:	463a      	mov	r2, r7
   d8ef2:	f7fd f855 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
   d8ef6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d8ef8:	9405      	str	r4, [sp, #20]
   d8efa:	f003 fd7d 	bl	dc9f8 <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d8efe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d8f02:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d8f06:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d8f08:	4293      	cmp	r3, r2
   d8f0a:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d8f0e:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d8f12:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d8f16:	d02b      	beq.n	d8f70 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8f18:	b103      	cbz	r3, d8f1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d8f1a:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8f1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d8f20:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d8f22:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8f24:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d8f28:	4628      	mov	r0, r5
   d8f2a:	f000 fc8b 	bl	d9844 <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8f2e:	4639      	mov	r1, r7
   d8f30:	9003      	str	r0, [sp, #12]
   d8f32:	4630      	mov	r0, r6
   d8f34:	f7ff fe82 	bl	d8c3c <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d8f38:	9002      	str	r0, [sp, #8]
   d8f3a:	f004 f84d 	bl	dcfd8 <spark_cloud_flag_connected>
   d8f3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d8f42:	9000      	str	r0, [sp, #0]
   d8f44:	492e      	ldr	r1, [pc, #184]	; (d9000 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d8f46:	482d      	ldr	r0, [pc, #180]	; (d8ffc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8f48:	f7fd f82a 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8f4c:	4628      	mov	r0, r5
   d8f4e:	f000 fc79 	bl	d9844 <_ZNK14SequentialFile11getQueueLenEv>
   d8f52:	2800      	cmp	r0, #0
   d8f54:	d03e      	beq.n	d8fd4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d8f56:	4620      	mov	r0, r4
   d8f58:	f7ff fd52 	bl	d8a00 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d8f5c:	4620      	mov	r0, r4
   d8f5e:	f7ff fed1 	bl	d8d04 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d8f62:	a805      	add	r0, sp, #20
   d8f64:	f7ff fd2e 	bl	d89c4 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d8f68:	2001      	movs	r0, #1
}
   d8f6a:	b006      	add	sp, #24
   d8f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f70:	4639      	mov	r1, r7
   d8f72:	4630      	mov	r0, r6
   d8f74:	f7ff fe62 	bl	d8c3c <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d8f78:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d8f7c:	4298      	cmp	r0, r3
   d8f7e:	d102      	bne.n	d8f86 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d8f80:	4820      	ldr	r0, [pc, #128]	; (d9004 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d8f82:	f007 fc1a 	bl	e07ba <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d8f86:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d8f8a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d8f8c:	1a9a      	subs	r2, r3, r2
   d8f8e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d8f90:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8f94:	2b01      	cmp	r3, #1
   d8f96:	d804      	bhi.n	d8fa2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d8f98:	2200      	movs	r2, #0
   d8f9a:	2101      	movs	r1, #1
   d8f9c:	4640      	mov	r0, r8
   d8f9e:	f7ff ff32 	bl	d8e06 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8fa2:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d8fa6:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d8faa:	f7fb f874 	bl	d4096 <_Znwj>
   d8fae:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d8fb2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8fb6:	b103      	cbz	r3, d8fba <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d8fb8:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d8fba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d8fbe:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8fc0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d8fc4:	685b      	ldr	r3, [r3, #4]
   d8fc6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8fca:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8fce:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d8fd2:	e7a6      	b.n	d8f22 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8fd4:	4639      	mov	r1, r7
   d8fd6:	4630      	mov	r0, r6
   d8fd8:	f7ff fe30 	bl	d8c3c <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8fdc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8fde:	4283      	cmp	r3, r0
   d8fe0:	d3b9      	bcc.n	d8f56 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d8fe2:	f003 fff9 	bl	dcfd8 <spark_cloud_flag_connected>
   d8fe6:	2800      	cmp	r0, #0
   d8fe8:	d0b5      	beq.n	d8f56 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d8fea:	4907      	ldr	r1, [pc, #28]	; (d9008 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d8fec:	4803      	ldr	r0, [pc, #12]	; (d8ffc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8fee:	f7fc ffd7 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
   d8ff2:	e7b3      	b.n	d8f5c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d8ff4:	000e4537 	.word	0x000e4537
   d8ff8:	000e42b9 	.word	0x000e42b9
   d8ffc:	2003e480 	.word	0x2003e480
   d9000:	000e4311 	.word	0x000e4311
   d9004:	000e42e1 	.word	0x000e42e1
   d9008:	000e433d 	.word	0x000e433d

000d900c <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d900c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d900e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d9012:	4604      	mov	r4, r0
    if (!publishComplete) {
   d9014:	2b00      	cmp	r3, #0
   d9016:	d041      	beq.n	d909c <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d9018:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d901c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d9020:	2b00      	cmp	r3, #0
   d9022:	d03d      	beq.n	d90a0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d9024:	4952      	ldr	r1, [pc, #328]	; (d9170 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d9026:	4853      	ldr	r0, [pc, #332]	; (d9174 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d9028:	f7fc ffba 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d902c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d9030:	b1d3      	cbz	r3, d9068 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d9032:	1d26      	adds	r6, r4, #4
   d9034:	2100      	movs	r1, #0
   d9036:	4630      	mov	r0, r6
   d9038:	f000 fbb6 	bl	d97a8 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d903c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d9040:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d9042:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d9044:	d10d      	bne.n	d9062 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d9046:	2101      	movs	r1, #1
   d9048:	4630      	mov	r0, r6
   d904a:	f000 fbad 	bl	d97a8 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d904e:	2200      	movs	r2, #0
   d9050:	4629      	mov	r1, r5
   d9052:	4630      	mov	r0, r6
   d9054:	f000 f9e4 	bl	d9420 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d9058:	4947      	ldr	r1, [pc, #284]	; (d9178 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d905a:	4846      	ldr	r0, [pc, #280]	; (d9174 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d905c:	462a      	mov	r2, r5
   d905e:	f7fc ff9f 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d9062:	2300      	movs	r3, #0
   d9064:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d9068:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d906c:	b110      	cbz	r0, d9074 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d906e:	2143      	movs	r1, #67	; 0x43
   d9070:	f007 fb66 	bl	e0740 <_ZdlPvj>
        curEvent = NULL;
   d9074:	2300      	movs	r3, #0
   d9076:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d907a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d907e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d9082:	4b3e      	ldr	r3, [pc, #248]	; (d917c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d9084:	9300      	str	r3, [sp, #0]
   d9086:	4669      	mov	r1, sp
   d9088:	2300      	movs	r3, #0
   d908a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d908e:	9301      	str	r3, [sp, #4]
   d9090:	f7ff fc68 	bl	d8964 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d9094:	f003 fcf0 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d9098:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d909c:	b002      	add	sp, #8
   d909e:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d90a0:	4937      	ldr	r1, [pc, #220]	; (d9180 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d90a2:	4834      	ldr	r0, [pc, #208]	; (d9174 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d90a4:	f7fc ff7c 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d90a8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d90ac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d90b0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d90b4:	b14b      	cbz	r3, d90ca <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d90b6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d90ba:	b110      	cbz	r0, d90c2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d90bc:	2143      	movs	r1, #67	; 0x43
   d90be:	f007 fb3f 	bl	e0740 <_ZdlPvj>
            curEvent = NULL;
   d90c2:	2300      	movs	r3, #0
   d90c4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d90c8:	e7db      	b.n	d9082 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d90ca:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d90cc:	9400      	str	r4, [sp, #0]
   d90ce:	f003 fc93 	bl	dc9f8 <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d90d2:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d90d6:	4293      	cmp	r3, r2
   d90d8:	d013      	beq.n	d9102 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d90da:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d90de:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d90e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d90e6:	3b04      	subs	r3, #4
   d90e8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d90ec:	4668      	mov	r0, sp
   d90ee:	f7ff fc69 	bl	d89c4 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d90f2:	4924      	ldr	r1, [pc, #144]	; (d9184 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d90f4:	481f      	ldr	r0, [pc, #124]	; (d9174 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d90f6:	f7fc ff53 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d90fa:	4620      	mov	r0, r4
   d90fc:	f7ff fc80 	bl	d8a00 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d9100:	e7bf      	b.n	d9082 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d9102:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d9106:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d910a:	f7ff fd97 	bl	d8c3c <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d910e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d9112:	4298      	cmp	r0, r3
   d9114:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d9118:	d102      	bne.n	d9120 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d911a:	481b      	ldr	r0, [pc, #108]	; (d9188 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d911c:	f007 fb4d 	bl	e07ba <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d9120:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d9124:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d9126:	429a      	cmp	r2, r3
   d9128:	d104      	bne.n	d9134 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d912a:	2201      	movs	r2, #1
   d912c:	4611      	mov	r1, r2
   d912e:	4628      	mov	r0, r5
   d9130:	f7ff fe69 	bl	d8e06 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9134:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d9138:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d913c:	f7fa ffab 	bl	d4096 <_Znwj>
   d9140:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d9144:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d9148:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d914a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d914e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d9152:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9156:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d915a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d915e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d9162:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d9166:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d916a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d916e:	e7bd      	b.n	d90ec <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d9170:	000e4350 	.word	0x000e4350
   d9174:	2003e480 	.word	0x2003e480
   d9178:	000e4363 	.word	0x000e4363
   d917c:	000d8afd 	.word	0x000d8afd
   d9180:	000e4373 	.word	0x000e4373
   d9184:	000e4385 	.word	0x000e4385
   d9188:	000e42e1 	.word	0x000e42e1

000d918c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d918c:	4b01      	ldr	r3, [pc, #4]	; (d9194 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d918e:	4a02      	ldr	r2, [pc, #8]	; (d9198 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d9190:	601a      	str	r2, [r3, #0]
}
   d9192:	4770      	bx	lr
   d9194:	2003e480 	.word	0x2003e480
   d9198:	000e43ac 	.word	0x000e43ac

000d919c <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d919c:	b510      	push	{r4, lr}
   d919e:	4b07      	ldr	r3, [pc, #28]	; (d91bc <_ZN17PublishQueuePosixD1Ev+0x20>)
   d91a0:	4604      	mov	r4, r0
   d91a2:	f840 3bc0 	str.w	r3, [r0], #192
   d91a6:	f7fb fc6b 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d91aa:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d91ae:	f7ff fe17 	bl	d8de0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d91b2:	1d20      	adds	r0, r4, #4
   d91b4:	f000 f9b2 	bl	d951c <_ZN14SequentialFileD1Ev>
}
   d91b8:	4620      	mov	r0, r4
   d91ba:	bd10      	pop	{r4, pc}
   d91bc:	000e43c0 	.word	0x000e43c0

000d91c0 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d91c0:	b510      	push	{r4, lr}
   d91c2:	4604      	mov	r4, r0
}
   d91c4:	f7ff ffea 	bl	d919c <_ZN17PublishQueuePosixD1Ev>
   d91c8:	4620      	mov	r0, r4
   d91ca:	21d0      	movs	r1, #208	; 0xd0
   d91cc:	f007 fab8 	bl	e0740 <_ZdlPvj>
   d91d0:	4620      	mov	r0, r4
   d91d2:	bd10      	pop	{r4, pc}

000d91d4 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d91d4:	2001      	movs	r0, #1
   d91d6:	4770      	bx	lr

000d91d8 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d91d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91da:	4d1f      	ldr	r5, [pc, #124]	; (d9258 <_ZN14SequentialFileC1Ev+0x80>)
   d91dc:	4b1f      	ldr	r3, [pc, #124]	; (d925c <_ZN14SequentialFileC1Ev+0x84>)
   d91de:	4604      	mov	r4, r0
   d91e0:	4629      	mov	r1, r5
   d91e2:	f840 3b04 	str.w	r3, [r0], #4
   d91e6:	f006 fcaa 	bl	dfb3e <_ZN6StringC1EPKc>
   d91ea:	491d      	ldr	r1, [pc, #116]	; (d9260 <_ZN14SequentialFileC1Ev+0x88>)
   d91ec:	f104 0014 	add.w	r0, r4, #20
   d91f0:	f006 fca5 	bl	dfb3e <_ZN6StringC1EPKc>
   d91f4:	4629      	mov	r1, r5
   d91f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d91fa:	f006 fca0 	bl	dfb3e <_ZN6StringC1EPKc>
   d91fe:	2300      	movs	r3, #0
   d9200:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d9204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d9208:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d920c:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d9210:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d9214:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d9218:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d921a:	2308      	movs	r3, #8
   d921c:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d921e:	2020      	movs	r0, #32
   d9220:	f7fa ff39 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d9224:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d9226:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d9228:	3d01      	subs	r5, #1
   d922a:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d922c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d9230:	4606      	mov	r6, r0
   d9232:	f44f 7000 	mov.w	r0, #512	; 0x200
   d9236:	f7fa ff2e 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d923a:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d923e:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d9242:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d9246:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d9248:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d924a:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d924c:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d924e:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d9250:	6667      	str	r7, [r4, #100]	; 0x64

}
   d9252:	4620      	mov	r0, r4
   d9254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9256:	bf00      	nop
   d9258:	000e4537 	.word	0x000e4537
   d925c:	000e44cc 	.word	0x000e44cc
   d9260:	000e43cc 	.word	0x000e43cc

000d9264 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9264:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d9266:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9268:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d926a:	4628      	mov	r0, r5
   d926c:	f006 fcc5 	bl	dfbfa <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d9270:	490e      	ldr	r1, [pc, #56]	; (d92ac <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d9272:	4668      	mov	r0, sp
   d9274:	f006 fc63 	bl	dfb3e <_ZN6StringC1EPKc>
   d9278:	4669      	mov	r1, sp
   d927a:	4628      	mov	r0, r5
   d927c:	f006 fd4c 	bl	dfd18 <_ZNK6String8endsWithERKS_>
   d9280:	4606      	mov	r6, r0
   d9282:	4668      	mov	r0, sp
   d9284:	f006 fc10 	bl	dfaa8 <_ZN6StringD1Ev>
   d9288:	b16e      	cbz	r6, d92a6 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d928a:	68e3      	ldr	r3, [r4, #12]
   d928c:	2200      	movs	r2, #0
   d928e:	3b01      	subs	r3, #1
   d9290:	4629      	mov	r1, r5
   d9292:	4668      	mov	r0, sp
   d9294:	f006 fd56 	bl	dfd44 <_ZNK6String9substringEjj>
   d9298:	4669      	mov	r1, sp
   d929a:	4628      	mov	r0, r5
   d929c:	f006 fca5 	bl	dfbea <_ZN6StringaSEOS_>
   d92a0:	4668      	mov	r0, sp
   d92a2:	f006 fc01 	bl	dfaa8 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d92a6:	4620      	mov	r0, r4
   d92a8:	b004      	add	sp, #16
   d92aa:	bd70      	pop	{r4, r5, r6, pc}
   d92ac:	000e43d1 	.word	0x000e43d1

000d92b0 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d92b0:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d92b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d92b4:	4604      	mov	r4, r0
    if (!queueMutex) {
   d92b6:	b913      	cbnz	r3, d92be <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d92b8:	303c      	adds	r0, #60	; 0x3c
   d92ba:	f003 fb75 	bl	dc9a8 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d92be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d92c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d92c4:	f003 bb78 	b.w	dc9b8 <os_mutex_lock>

000d92c8 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d92c8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d92ca:	f003 bb7d 	b.w	dc9c8 <os_mutex_unlock>
	...

000d92d0 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d92d0:	b510      	push	{r4, lr}
   d92d2:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d92d4:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d92d6:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d92d8:	f003 fce6 	bl	dcca8 <stat>
    if (result == 0) {
   d92dc:	b9d0      	cbnz	r0, d9314 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d92de:	9b01      	ldr	r3, [sp, #4]
   d92e0:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d92e2:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d92e4:	d506      	bpl.n	d92f4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d92e6:	4915      	ldr	r1, [pc, #84]	; (d933c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d92e8:	4815      	ldr	r0, [pc, #84]	; (d9340 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d92ea:	f7fb f857 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d92ee:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d92f0:	b016      	add	sp, #88	; 0x58
   d92f2:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d92f4:	4812      	ldr	r0, [pc, #72]	; (d9340 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d92f6:	4913      	ldr	r1, [pc, #76]	; (d9344 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d92f8:	f7fc fe69 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d92fc:	4620      	mov	r0, r4
   d92fe:	f009 fa3b 	bl	e2778 <unlink>
    result = mkdir(path, 0777);
   d9302:	f240 11ff 	movw	r1, #511	; 0x1ff
   d9306:	4620      	mov	r0, r4
   d9308:	f003 fcd6 	bl	dccb8 <mkdir>
    if (result == 0) {
   d930c:	b980      	cbnz	r0, d9330 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d930e:	490e      	ldr	r1, [pc, #56]	; (d9348 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d9310:	4622      	mov	r2, r4
   d9312:	e7e9      	b.n	d92e8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d9314:	f003 ff38 	bl	dd188 <__errno>
   d9318:	6803      	ldr	r3, [r0, #0]
   d931a:	2b02      	cmp	r3, #2
   d931c:	d0f1      	beq.n	d9302 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d931e:	f003 ff33 	bl	dd188 <__errno>
   d9322:	490a      	ldr	r1, [pc, #40]	; (d934c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d9324:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d9326:	4806      	ldr	r0, [pc, #24]	; (d9340 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d9328:	f7fc fe51 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d932c:	2000      	movs	r0, #0
   d932e:	e7df      	b.n	d92f0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d9330:	f003 ff2a 	bl	dd188 <__errno>
   d9334:	4906      	ldr	r1, [pc, #24]	; (d9350 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d9336:	6802      	ldr	r2, [r0, #0]
   d9338:	e7f5      	b.n	d9326 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d933a:	bf00      	nop
   d933c:	000e43de 	.word	0x000e43de
   d9340:	2003e488 	.word	0x2003e488
   d9344:	000e43fb 	.word	0x000e43fb
   d9348:	000e442c 	.word	0x000e442c
   d934c:	000e4418 	.word	0x000e4418
   d9350:	000e443b 	.word	0x000e443b

000d9354 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d9354:	b538      	push	{r3, r4, r5, lr}
   d9356:	4615      	mov	r5, r2
   d9358:	4604      	mov	r4, r0
    String result = name;
   d935a:	f006 fbf0 	bl	dfb3e <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d935e:	b14d      	cbz	r5, d9374 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d9360:	782b      	ldrb	r3, [r5, #0]
   d9362:	b13b      	cbz	r3, d9374 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d9364:	4904      	ldr	r1, [pc, #16]	; (d9378 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d9366:	4620      	mov	r0, r4
   d9368:	f006 fc70 	bl	dfc4c <_ZN6String6concatEPKc>
   d936c:	4629      	mov	r1, r5
   d936e:	4620      	mov	r0, r4
   d9370:	f006 fc6c 	bl	dfc4c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d9374:	4620      	mov	r0, r4
   d9376:	bd38      	pop	{r3, r4, r5, pc}
   d9378:	000e4a8c 	.word	0x000e4a8c

000d937c <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d937c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d937e:	4605      	mov	r5, r0
   d9380:	460e      	mov	r6, r1
   d9382:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d9384:	6949      	ldr	r1, [r1, #20]
   d9386:	4668      	mov	r0, sp
   d9388:	f006 fcfc 	bl	dfd84 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d938c:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d938e:	b904      	cbnz	r4, d9392 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d9390:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9392:	4622      	mov	r2, r4
   d9394:	4628      	mov	r0, r5
   d9396:	f7ff ffdd 	bl	d9354 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d939a:	4668      	mov	r0, sp
   d939c:	f006 fb84 	bl	dfaa8 <_ZN6StringD1Ev>
}
   d93a0:	4628      	mov	r0, r5
   d93a2:	b004      	add	sp, #16
   d93a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d93a8 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d93a8:	b570      	push	{r4, r5, r6, lr}
   d93aa:	460c      	mov	r4, r1
   d93ac:	b08e      	sub	sp, #56	; 0x38
    String result;
   d93ae:	491a      	ldr	r1, [pc, #104]	; (d9418 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d93b0:	e9cd 3200 	strd	r3, r2, [sp]
   d93b4:	4605      	mov	r5, r0
    String result;
   d93b6:	f006 fbc2 	bl	dfb3e <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d93ba:	69e0      	ldr	r0, [r4, #28]
   d93bc:	68e1      	ldr	r1, [r4, #12]
   d93be:	4401      	add	r1, r0
   d93c0:	3104      	adds	r1, #4
   d93c2:	4628      	mov	r0, r5
   d93c4:	f006 fb8e 	bl	dfae4 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d93c8:	1d21      	adds	r1, r4, #4
   d93ca:	a806      	add	r0, sp, #24
   d93cc:	f006 fc02 	bl	dfbd4 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d93d0:	4912      	ldr	r1, [pc, #72]	; (d941c <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d93d2:	a802      	add	r0, sp, #8
   d93d4:	f006 fbb3 	bl	dfb3e <_ZN6StringC1EPKc>
   d93d8:	a902      	add	r1, sp, #8
   d93da:	a806      	add	r0, sp, #24
   d93dc:	f006 fc47 	bl	dfc6e <_ZplRK15StringSumHelperRK6String>
   d93e0:	e9dd 3200 	ldrd	r3, r2, [sp]
   d93e4:	4606      	mov	r6, r0
   d93e6:	4621      	mov	r1, r4
   d93e8:	a80a      	add	r0, sp, #40	; 0x28
   d93ea:	f7ff ffc7 	bl	d937c <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d93ee:	a90a      	add	r1, sp, #40	; 0x28
   d93f0:	4630      	mov	r0, r6
   d93f2:	f006 fc3c 	bl	dfc6e <_ZplRK15StringSumHelperRK6String>
   d93f6:	4601      	mov	r1, r0
   d93f8:	4628      	mov	r0, r5
   d93fa:	f006 fbdc 	bl	dfbb6 <_ZN6StringaSERKS_>
   d93fe:	a80a      	add	r0, sp, #40	; 0x28
   d9400:	f006 fb52 	bl	dfaa8 <_ZN6StringD1Ev>
   d9404:	a802      	add	r0, sp, #8
   d9406:	f006 fb4f 	bl	dfaa8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d940a:	a806      	add	r0, sp, #24
   d940c:	f006 fb4c 	bl	dfaa8 <_ZN6StringD1Ev>
}
   d9410:	4628      	mov	r0, r5
   d9412:	b00e      	add	sp, #56	; 0x38
   d9414:	bd70      	pop	{r4, r5, r6, pc}
   d9416:	bf00      	nop
   d9418:	000e4537 	.word	0x000e4537
   d941c:	000e43d1 	.word	0x000e43d1

000d9420 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d9420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d9424:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d9426:	b08e      	sub	sp, #56	; 0x38
   d9428:	4605      	mov	r5, r0
   d942a:	460f      	mov	r7, r1
    if (allExtensions) {
   d942c:	2a00      	cmp	r2, #0
   d942e:	d04a      	beq.n	d94c6 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d9430:	6840      	ldr	r0, [r0, #4]
   d9432:	f003 fc59 	bl	dcce8 <opendir>
        if (dir) {
   d9436:	4606      	mov	r6, r0
   d9438:	2800      	cmp	r0, #0
   d943a:	d041      	beq.n	d94c0 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d943c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d94f0 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d9440:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d94e8 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d9444:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d94ec <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d9448:	4630      	mov	r0, r6
   d944a:	f003 fc55 	bl	dccf8 <readdir>
                if (!ent) {
   d944e:	2800      	cmp	r0, #0
   d9450:	d033      	beq.n	d94ba <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d9452:	7a82      	ldrb	r2, [r0, #10]
   d9454:	2a08      	cmp	r2, #8
   d9456:	d1f7      	bne.n	d9448 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d9458:	f100 040b 	add.w	r4, r0, #11
   d945c:	6969      	ldr	r1, [r5, #20]
   d945e:	aa01      	add	r2, sp, #4
   d9460:	4620      	mov	r0, r4
   d9462:	f003 fe69 	bl	dd138 <sscanf>
   d9466:	2801      	cmp	r0, #1
   d9468:	d1ee      	bne.n	d9448 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d946a:	9b01      	ldr	r3, [sp, #4]
   d946c:	429f      	cmp	r7, r3
   d946e:	d1eb      	bne.n	d9448 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d9470:	1d29      	adds	r1, r5, #4
   d9472:	a806      	add	r0, sp, #24
   d9474:	f006 fbae 	bl	dfbd4 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d9478:	4651      	mov	r1, sl
   d947a:	a80a      	add	r0, sp, #40	; 0x28
   d947c:	f006 fb5f 	bl	dfb3e <_ZN6StringC1EPKc>
   d9480:	a90a      	add	r1, sp, #40	; 0x28
   d9482:	a806      	add	r0, sp, #24
   d9484:	f006 fbf3 	bl	dfc6e <_ZplRK15StringSumHelperRK6String>
   d9488:	4621      	mov	r1, r4
   d948a:	f006 fbfc 	bl	dfc86 <_ZplRK15StringSumHelperPKc>
   d948e:	4601      	mov	r1, r0
   d9490:	a802      	add	r0, sp, #8
   d9492:	f006 fb9f 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d9496:	a80a      	add	r0, sp, #40	; 0x28
   d9498:	f006 fb06 	bl	dfaa8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d949c:	a806      	add	r0, sp, #24
   d949e:	f006 fb03 	bl	dfaa8 <_ZN6StringD1Ev>
                        unlink(path);
   d94a2:	9802      	ldr	r0, [sp, #8]
   d94a4:	f009 f968 	bl	e2778 <unlink>
                        _log.trace("removed %s", path.c_str());
   d94a8:	4640      	mov	r0, r8
   d94aa:	9a02      	ldr	r2, [sp, #8]
   d94ac:	4649      	mov	r1, r9
   d94ae:	f7fc fd77 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d94b2:	a802      	add	r0, sp, #8
   d94b4:	f006 faf8 	bl	dfaa8 <_ZN6StringD1Ev>
                    continue;
   d94b8:	e7c6      	b.n	d9448 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d94ba:	4630      	mov	r0, r6
   d94bc:	f003 fc24 	bl	dcd08 <closedir>
}
   d94c0:	b00e      	add	sp, #56	; 0x38
   d94c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d94c6:	460a      	mov	r2, r1
   d94c8:	4601      	mov	r1, r0
   d94ca:	a80a      	add	r0, sp, #40	; 0x28
   d94cc:	f7ff ff6c 	bl	d93a8 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d94d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d94d2:	f009 f951 	bl	e2778 <unlink>
        _log.trace("removed %s", path.c_str());
   d94d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d94d8:	4903      	ldr	r1, [pc, #12]	; (d94e8 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d94da:	4804      	ldr	r0, [pc, #16]	; (d94ec <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d94dc:	f7fc fd60 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d94e0:	a80a      	add	r0, sp, #40	; 0x28
   d94e2:	f006 fae1 	bl	dfaa8 <_ZN6StringD1Ev>
}
   d94e6:	e7eb      	b.n	d94c0 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d94e8:	000e43d3 	.word	0x000e43d3
   d94ec:	2003e488 	.word	0x2003e488
   d94f0:	000e43d1 	.word	0x000e43d1

000d94f4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d94f4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d94f6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d94f8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d94fa:	b163      	cbz	r3, d9516 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d94fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d94fe:	6945      	ldr	r5, [r0, #20]
   d9500:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d9502:	42ae      	cmp	r6, r5
   d9504:	d904      	bls.n	d9510 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d9506:	f855 0b04 	ldr.w	r0, [r5], #4
   d950a:	f7fa fdc8 	bl	d409e <_ZdlPv>
   d950e:	e7f8      	b.n	d9502 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d9510:	6820      	ldr	r0, [r4, #0]
   d9512:	f7fa fdc4 	bl	d409e <_ZdlPv>
    }
   d9516:	4620      	mov	r0, r4
   d9518:	bd70      	pop	{r4, r5, r6, pc}
	...

000d951c <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d951c:	b510      	push	{r4, lr}
   d951e:	4b09      	ldr	r3, [pc, #36]	; (d9544 <_ZN14SequentialFileD1Ev+0x28>)
   d9520:	4604      	mov	r4, r0
   d9522:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d9526:	f7ff ffe5 	bl	d94f4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d952a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d952e:	f006 fabb 	bl	dfaa8 <_ZN6StringD1Ev>
   d9532:	f104 0014 	add.w	r0, r4, #20
   d9536:	f006 fab7 	bl	dfaa8 <_ZN6StringD1Ev>
   d953a:	1d20      	adds	r0, r4, #4
   d953c:	f006 fab4 	bl	dfaa8 <_ZN6StringD1Ev>
}
   d9540:	4620      	mov	r0, r4
   d9542:	bd10      	pop	{r4, pc}
   d9544:	000e44cc 	.word	0x000e44cc

000d9548 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d9548:	b510      	push	{r4, lr}
   d954a:	4604      	mov	r4, r0
}
   d954c:	f7ff ffe6 	bl	d951c <_ZN14SequentialFileD1Ev>
   d9550:	4620      	mov	r0, r4
   d9552:	2168      	movs	r1, #104	; 0x68
   d9554:	f007 f8f4 	bl	e0740 <_ZdlPvj>
   d9558:	4620      	mov	r0, r4
   d955a:	bd10      	pop	{r4, pc}

000d955c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d955c:	68c3      	ldr	r3, [r0, #12]
   d955e:	68ca      	ldr	r2, [r1, #12]
   d9560:	1a9b      	subs	r3, r3, r2
   d9562:	109b      	asrs	r3, r3, #2
   d9564:	1e5a      	subs	r2, r3, #1
   d9566:	e9d0 3000 	ldrd	r3, r0, [r0]
   d956a:	1a1b      	subs	r3, r3, r0
   d956c:	109b      	asrs	r3, r3, #2
   d956e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d9572:	6888      	ldr	r0, [r1, #8]
   d9574:	680a      	ldr	r2, [r1, #0]
   d9576:	1a80      	subs	r0, r0, r2
    }
   d9578:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d957c:	4770      	bx	lr
	...

000d9580 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d9580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9584:	4604      	mov	r4, r0
   d9586:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d9588:	f100 0108 	add.w	r1, r0, #8
   d958c:	3018      	adds	r0, #24
   d958e:	f7ff ffe5 	bl	d955c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d9592:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d9596:	4298      	cmp	r0, r3
   d9598:	d102      	bne.n	d95a0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d959a:	4837      	ldr	r0, [pc, #220]	; (d9678 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d959c:	f007 f90d 	bl	e07ba <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d95a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d95a2:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d95a4:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d95a6:	1a11      	subs	r1, r2, r0
   d95a8:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d95ac:	2901      	cmp	r1, #1
   d95ae:	d821      	bhi.n	d95f4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d95b0:	6961      	ldr	r1, [r4, #20]
   d95b2:	1a57      	subs	r7, r2, r1
   d95b4:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d95b6:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d95b8:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d95bc:	d936      	bls.n	d962c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d95be:	1b5d      	subs	r5, r3, r5
   d95c0:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d95c2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d95c6:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d95c8:	42a9      	cmp	r1, r5
   d95ca:	eba3 0201 	sub.w	r2, r3, r1
   d95ce:	d927      	bls.n	d9620 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d95d0:	4299      	cmp	r1, r3
   d95d2:	d002      	beq.n	d95da <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d95d4:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d95d6:	f008 f875 	bl	e16c4 <memmove>
	_M_node = __new_node;
   d95da:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d95dc:	682b      	ldr	r3, [r5, #0]
   d95de:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d95e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d95e4:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d95e6:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d95e8:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d95ea:	59eb      	ldr	r3, [r5, r7]
   d95ec:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d95ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d95f2:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d95f4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d95f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d95fa:	f7fa fd4c 	bl	d4096 <_Znwj>
   d95fe:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d9600:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9602:	b113      	cbz	r3, d960a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d9604:	f8d8 2000 	ldr.w	r2, [r8]
   d9608:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d960a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d960c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d960e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d9610:	685b      	ldr	r3, [r3, #4]
   d9612:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9614:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d9618:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d961a:	61a3      	str	r3, [r4, #24]
      }
   d961c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d9620:	4299      	cmp	r1, r3
   d9622:	d0da      	beq.n	d95da <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d9624:	1d38      	adds	r0, r7, #4
   d9626:	1a80      	subs	r0, r0, r2
   d9628:	4428      	add	r0, r5
   d962a:	e7d4      	b.n	d95d6 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d962c:	f103 0902 	add.w	r9, r3, #2
   d9630:	2b01      	cmp	r3, #1
   d9632:	bf2c      	ite	cs
   d9634:	4499      	addcs	r9, r3
   d9636:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d963a:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d963e:	d301      	bcc.n	d9644 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d9640:	f007 f8b8 	bl	e07b4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9644:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d9648:	f7fa fd25 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d964c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d964e:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d9650:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d9654:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d9656:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d9658:	4291      	cmp	r1, r2
   d965a:	4682      	mov	sl, r0
   d965c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d9660:	d003      	beq.n	d966a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d9662:	1a52      	subs	r2, r2, r1
   d9664:	4628      	mov	r0, r5
   d9666:	f008 f82d 	bl	e16c4 <memmove>
	::operator delete(__p);
   d966a:	6820      	ldr	r0, [r4, #0]
   d966c:	f7fa fd17 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d9670:	e9c4 a900 	strd	sl, r9, [r4]
   d9674:	e7b1      	b.n	d95da <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d9676:	bf00      	nop
   d9678:	000e42e1 	.word	0x000e42e1

000d967c <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d967c:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d967e:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d9680:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d9682:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d9684:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d9686:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d9688:	d006      	beq.n	d9698 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d968a:	b10a      	cbz	r2, d9690 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d968c:	6809      	ldr	r1, [r1, #0]
   d968e:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d9690:	699a      	ldr	r2, [r3, #24]
   d9692:	3204      	adds	r2, #4
   d9694:	619a      	str	r2, [r3, #24]
      }
   d9696:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d9698:	f7ff ff72 	bl	d9580 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d969c:	e7fb      	b.n	d9696 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d96a0 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d96a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d96a4:	68c3      	ldr	r3, [r0, #12]
   d96a6:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d96a8:	b086      	sub	sp, #24
   d96aa:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d96ac:	d808      	bhi.n	d96c0 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d96ae:	4934      	ldr	r1, [pc, #208]	; (d9780 <_ZN14SequentialFile7scanDirEv+0xe0>)
   d96b0:	4834      	ldr	r0, [pc, #208]	; (d9784 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d96b2:	f7fc fc8c 	bl	d5fce <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d96b6:	2600      	movs	r6, #0
}
   d96b8:	4630      	mov	r0, r6
   d96ba:	b006      	add	sp, #24
   d96bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d96c0:	6840      	ldr	r0, [r0, #4]
   d96c2:	f7ff fe05 	bl	d92d0 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d96c6:	4606      	mov	r6, r0
   d96c8:	2800      	cmp	r0, #0
   d96ca:	d0f4      	beq.n	d96b6 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d96cc:	6963      	ldr	r3, [r4, #20]
   d96ce:	6862      	ldr	r2, [r4, #4]
   d96d0:	492d      	ldr	r1, [pc, #180]	; (d9788 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d96d2:	482c      	ldr	r0, [pc, #176]	; (d9784 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d96d4:	f7fc fc64 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d96d8:	6860      	ldr	r0, [r4, #4]
   d96da:	f003 fb05 	bl	dcce8 <opendir>
    if (!dir) {
   d96de:	4607      	mov	r7, r0
   d96e0:	2800      	cmp	r0, #0
   d96e2:	d0e8      	beq.n	d96b6 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d96e4:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d96e6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d978c <_ZN14SequentialFile7scanDirEv+0xec>
   d96ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; d9784 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d96ee:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d96f0:	4638      	mov	r0, r7
   d96f2:	f003 fb01 	bl	dccf8 <readdir>
        if (!ent) {
   d96f6:	4605      	mov	r5, r0
   d96f8:	2800      	cmp	r0, #0
   d96fa:	d039      	beq.n	d9770 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d96fc:	7a83      	ldrb	r3, [r0, #10]
   d96fe:	2b08      	cmp	r3, #8
   d9700:	d1f6      	bne.n	d96f0 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d9702:	350b      	adds	r5, #11
   d9704:	6961      	ldr	r1, [r4, #20]
   d9706:	aa01      	add	r2, sp, #4
   d9708:	4628      	mov	r0, r5
   d970a:	f003 fd15 	bl	dd138 <sscanf>
   d970e:	2801      	cmp	r0, #1
   d9710:	d1ee      	bne.n	d96f0 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d9712:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d9714:	b17b      	cbz	r3, d9736 <_ZN14SequentialFile7scanDirEv+0x96>
   d9716:	4629      	mov	r1, r5
   d9718:	a802      	add	r0, sp, #8
   d971a:	f006 fa10 	bl	dfb3e <_ZN6StringC1EPKc>
   d971e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d9722:	a802      	add	r0, sp, #8
   d9724:	f006 faf8 	bl	dfd18 <_ZNK6String8endsWithERKS_>
   d9728:	4682      	mov	sl, r0
   d972a:	a802      	add	r0, sp, #8
   d972c:	f006 f9bc 	bl	dfaa8 <_ZN6StringD1Ev>
   d9730:	f1ba 0f00 	cmp.w	sl, #0
   d9734:	d0dc      	beq.n	d96f0 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d9736:	6823      	ldr	r3, [r4, #0]
   d9738:	4629      	mov	r1, r5
   d973a:	689b      	ldr	r3, [r3, #8]
   d973c:	4620      	mov	r0, r4
   d973e:	4798      	blx	r3
   d9740:	2800      	cmp	r0, #0
   d9742:	d0d5      	beq.n	d96f0 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d9744:	9a01      	ldr	r2, [sp, #4]
   d9746:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9748:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d974a:	bfb8      	it	lt
   d974c:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d974e:	462b      	mov	r3, r5
   d9750:	4649      	mov	r1, r9
   d9752:	4640      	mov	r0, r8
   d9754:	f7fc fc24 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d9758:	4620      	mov	r0, r4
   d975a:	f7ff fda9 	bl	d92b0 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d975e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d9762:	a901      	add	r1, sp, #4
   d9764:	f7ff ff8a 	bl	d967c <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d9768:	4620      	mov	r0, r4
   d976a:	f7ff fdad 	bl	d92c8 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d976e:	e7bf      	b.n	d96f0 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d9770:	4638      	mov	r0, r7
   d9772:	f003 fac9 	bl	dcd08 <closedir>
    scanDirCompleted = true;
   d9776:	2301      	movs	r3, #1
   d9778:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d977c:	e79c      	b.n	d96b8 <_ZN14SequentialFile7scanDirEv+0x18>
   d977e:	bf00      	nop
   d9780:	000e4451 	.word	0x000e4451
   d9784:	2003e488 	.word	0x2003e488
   d9788:	000e4466 	.word	0x000e4466
   d978c:	000e4482 	.word	0x000e4482

000d9790 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d9790:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d9792:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d9796:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d9798:	b90b      	cbnz	r3, d979e <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d979a:	f7ff ff81 	bl	d96a0 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d979e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d97a0:	3001      	adds	r0, #1
   d97a2:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d97a4:	bd10      	pop	{r4, pc}
	...

000d97a8 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d97a8:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d97aa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d97ae:	4604      	mov	r4, r0
   d97b0:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d97b2:	b90b      	cbnz	r3, d97b8 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d97b4:	f7ff ff74 	bl	d96a0 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d97b8:	4620      	mov	r0, r4
   d97ba:	f7ff fd79 	bl	d92b0 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d97be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d97c0:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d97c2:	4293      	cmp	r3, r2
   d97c4:	d01e      	beq.n	d9804 <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d97c6:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d97c8:	b12e      	cbz	r6, d97d6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d97ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d97cc:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d97ce:	4293      	cmp	r3, r2
   d97d0:	d00c      	beq.n	d97ec <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d97d2:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d97d4:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d97d6:	4620      	mov	r0, r4
   d97d8:	f7ff fd76 	bl	d92c8 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d97dc:	b125      	cbz	r5, d97e8 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d97de:	490a      	ldr	r1, [pc, #40]	; (d9808 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d97e0:	480a      	ldr	r0, [pc, #40]	; (d980c <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d97e2:	462a      	mov	r2, r5
   d97e4:	f7fc fbdc 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
}
   d97e8:	4628      	mov	r0, r5
   d97ea:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d97ec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d97ee:	f7fa fc56 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d97f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d97f4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d97f6:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d97f8:	685b      	ldr	r3, [r3, #4]
   d97fa:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d97fc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d9800:	6522      	str	r2, [r4, #80]	; 0x50
   d9802:	e7e7      	b.n	d97d4 <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d9804:	2500      	movs	r5, #0
   d9806:	e7e6      	b.n	d97d6 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d9808:	000e4498 	.word	0x000e4498
   d980c:	2003e488 	.word	0x2003e488

000d9810 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d9810:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d9812:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d9816:	9101      	str	r1, [sp, #4]
   d9818:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d981a:	b90b      	cbnz	r3, d9820 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d981c:	f7ff ff40 	bl	d96a0 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d9820:	9b01      	ldr	r3, [sp, #4]
   d9822:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d9824:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d9826:	bfb8      	it	lt
   d9828:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d982a:	4620      	mov	r0, r4
   d982c:	f7ff fd40 	bl	d92b0 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d9830:	a901      	add	r1, sp, #4
   d9832:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d9836:	f7ff ff21 	bl	d967c <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d983a:	4620      	mov	r0, r4
   d983c:	f7ff fd44 	bl	d92c8 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9840:	b002      	add	sp, #8
   d9842:	bd10      	pop	{r4, pc}

000d9844 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d9844:	b538      	push	{r3, r4, r5, lr}
   d9846:	4604      	mov	r4, r0
    queueMutexLock();
   d9848:	f7ff fd32 	bl	d92b0 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d984c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d9850:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d9854:	f7ff fe82 	bl	d955c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d9858:	4605      	mov	r5, r0
    queueMutexUnlock();
   d985a:	4620      	mov	r0, r4
   d985c:	f7ff fd34 	bl	d92c8 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9860:	4628      	mov	r0, r5
   d9862:	bd38      	pop	{r3, r4, r5, pc}

000d9864 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d9864:	4b01      	ldr	r3, [pc, #4]	; (d986c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d9866:	4a02      	ldr	r2, [pc, #8]	; (d9870 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d9868:	601a      	str	r2, [r3, #0]
}
   d986a:	4770      	bx	lr
   d986c:	2003e488 	.word	0x2003e488
   d9870:	000e44b5 	.word	0x000e44b5

000d9874 <_ZN11SleepHelper18PersistentDataBase4saveEv>:
        virtual void save() {};
   d9874:	4770      	bx	lr

000d9876 <_ZN11SleepHelper18PersistentDataBase11saveOrDeferEv>:
        virtual void saveOrDefer() {}
   d9876:	4770      	bx	lr

000d9878 <_ZN11SleepHelper18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void SleepHelper::PersistentDataBase::setup() {
    // Load data at boot
    load();
   d9878:	6803      	ldr	r3, [r0, #0]
   d987a:	685b      	ldr	r3, [r3, #4]
   d987c:	4718      	bx	r3

000d987e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRNS1_16AppCallbackStateEmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d987e:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9880:	bf08      	it	eq
   d9882:	6001      	streq	r1, [r0, #0]
	}
   d9884:	2000      	movs	r0, #0
   d9886:	4770      	bx	lr

000d9888 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d9888:	2a02      	cmp	r2, #2
   d988a:	d006      	beq.n	d989a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d988c:	2a03      	cmp	r2, #3
   d988e:	d002      	beq.n	d9896 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d9890:	2a01      	cmp	r2, #1
   d9892:	d100      	bne.n	d9896 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9894:	6001      	str	r1, [r0, #0]
	}
   d9896:	2000      	movs	r0, #0
   d9898:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d989a:	680b      	ldr	r3, [r1, #0]
   d989c:	6003      	str	r3, [r0, #0]
	}
   d989e:	e7fa      	b.n	d9896 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d98a0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d98a0:	2a02      	cmp	r2, #2
   d98a2:	d006      	beq.n	d98b2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d98a4:	2a03      	cmp	r2, #3
   d98a6:	d002      	beq.n	d98ae <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d98a8:	2a01      	cmp	r2, #1
   d98aa:	d100      	bne.n	d98ae <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98ac:	6001      	str	r1, [r0, #0]
	}
   d98ae:	2000      	movs	r0, #0
   d98b0:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d98b2:	680b      	ldr	r3, [r1, #0]
   d98b4:	6003      	str	r3, [r0, #0]
	}
   d98b6:	e7fa      	b.n	d98ae <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d98b8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d98b8:	2a02      	cmp	r2, #2
   d98ba:	d006      	beq.n	d98ca <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d98bc:	2a03      	cmp	r2, #3
   d98be:	d002      	beq.n	d98c6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d98c0:	2a01      	cmp	r2, #1
   d98c2:	d100      	bne.n	d98c6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98c4:	6001      	str	r1, [r0, #0]
	}
   d98c6:	2000      	movs	r0, #0
   d98c8:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d98ca:	680b      	ldr	r3, [r1, #0]
   d98cc:	6003      	str	r3, [r0, #0]
	}
   d98ce:	e7fa      	b.n	d98c6 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d98d0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d98d0:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98d2:	bf08      	it	eq
   d98d4:	6001      	streq	r1, [r0, #0]
	}
   d98d6:	2000      	movs	r0, #0
   d98d8:	4770      	bx	lr

000d98da <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d98da:	2a02      	cmp	r2, #2
   d98dc:	d006      	beq.n	d98ec <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d98de:	2a03      	cmp	r2, #3
   d98e0:	d002      	beq.n	d98e8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d98e2:	2a01      	cmp	r2, #1
   d98e4:	d100      	bne.n	d98e8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98e6:	6001      	str	r1, [r0, #0]
	}
   d98e8:	2000      	movs	r0, #0
   d98ea:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d98ec:	680b      	ldr	r3, [r1, #0]
   d98ee:	6003      	str	r3, [r0, #0]
	}
   d98f0:	e7fa      	b.n	d98e8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d98f2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d98f2:	2a02      	cmp	r2, #2
   d98f4:	d006      	beq.n	d9904 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d98f6:	2a03      	cmp	r2, #3
   d98f8:	d002      	beq.n	d9900 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d98fa:	2a01      	cmp	r2, #1
   d98fc:	d100      	bne.n	d9900 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98fe:	6001      	str	r1, [r0, #0]
	}
   d9900:	2000      	movs	r0, #0
   d9902:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d9904:	680b      	ldr	r3, [r1, #0]
   d9906:	6003      	str	r3, [r0, #0]
	}
   d9908:	e7fa      	b.n	d9900 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d990a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d990a:	2a02      	cmp	r2, #2
   d990c:	d006      	beq.n	d991c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d990e:	2a03      	cmp	r2, #3
   d9910:	d002      	beq.n	d9918 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d9912:	2a01      	cmp	r2, #1
   d9914:	d100      	bne.n	d9918 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9916:	6001      	str	r1, [r0, #0]
	}
   d9918:	2000      	movs	r0, #0
   d991a:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d991c:	680b      	ldr	r3, [r1, #0]
   d991e:	6003      	str	r3, [r0, #0]
	}
   d9920:	e7fa      	b.n	d9918 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d9922 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d9922:	2a02      	cmp	r2, #2
   d9924:	d006      	beq.n	d9934 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d9926:	2a03      	cmp	r2, #3
   d9928:	d002      	beq.n	d9930 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d992a:	2a01      	cmp	r2, #1
   d992c:	d100      	bne.n	d9930 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d992e:	6001      	str	r1, [r0, #0]
	}
   d9930:	2000      	movs	r0, #0
   d9932:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d9934:	680b      	ldr	r3, [r1, #0]
   d9936:	6003      	str	r3, [r0, #0]
	}
   d9938:	e7fa      	b.n	d9930 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d993a <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d993a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d993c:	4603      	mov	r3, r0
	switch (__op)
   d993e:	d102      	bne.n	d9946 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d9940:	6001      	str	r1, [r0, #0]
      }
   d9942:	2000      	movs	r0, #0
   d9944:	4770      	bx	lr
	  switch (__op)
   d9946:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d9948:	bf04      	itt	eq
   d994a:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d994e:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d9952:	e7f6      	b.n	d9942 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d9954 <_ZN16JsonParserStaticILj622ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d9954:	b510      	push	{r4, lr}
   d9956:	4b03      	ldr	r3, [pc, #12]	; (d9964 <_ZN16JsonParserStaticILj622ELj50EED1Ev+0x10>)
   d9958:	6003      	str	r3, [r0, #0]
   d995a:	4604      	mov	r4, r0
   d995c:	f7fd fa24 	bl	d6da8 <_ZN10JsonParserD1Ev>
   d9960:	4620      	mov	r0, r4
   d9962:	bd10      	pop	{r4, pc}
   d9964:	000e4750 	.word	0x000e4750

000d9968 <_ZN16JsonParserStaticILj622ELj50EED0Ev>:
   d9968:	b510      	push	{r4, lr}
   d996a:	4604      	mov	r4, r0
   d996c:	f7ff fff2 	bl	d9954 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
   d9970:	4620      	mov	r0, r4
   d9972:	f240 51bc 	movw	r1, #1468	; 0x5bc
   d9976:	f006 fee3 	bl	e0740 <_ZdlPvj>
   d997a:	4620      	mov	r0, r4
   d997c:	bd10      	pop	{r4, pc}

000d997e <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv>:
        virtual void saveOrDefer() {
   d997e:	b510      	push	{r4, lr}
            if (saveDelayMs) {
   d9980:	69c3      	ldr	r3, [r0, #28]
        virtual void saveOrDefer() {
   d9982:	4604      	mov	r4, r0
            if (saveDelayMs) {
   d9984:	b11b      	cbz	r3, d998e <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv+0x10>
   d9986:	f003 f877 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
                lastUpdate = millis();
   d998a:	61a0      	str	r0, [r4, #24]
        }
   d998c:	bd10      	pop	{r4, pc}
                save();
   d998e:	6803      	ldr	r3, [r0, #0]
        }
   d9990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                save();
   d9994:	689b      	ldr	r3, [r3, #8]
   d9996:	4718      	bx	r3

000d9998 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9998:	b510      	push	{r4, lr}
	    return __source._M_access<_Functor*>();
   d999a:	6800      	ldr	r0, [r0, #0]
      if (_M_empty())
   d999c:	6883      	ldr	r3, [r0, #8]
   d999e:	b90b      	cbnz	r3, d99a4 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_+0xc>
	__throw_bad_function_call();
   d99a0:	f006 ff0e 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      }
   d99a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d99a8:	68c3      	ldr	r3, [r0, #12]
   d99aa:	4718      	bx	r3

000d99ac <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper5setupEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d99ac:	460b      	mov	r3, r1
        writer.value(resetReason);
   d99ae:	6801      	ldr	r1, [r0, #0]
   d99b0:	4618      	mov	r0, r3
   d99b2:	f004 bdc1 	b.w	de538 <_ZN5spark10JSONWriter5valueEi>

000d99b6 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d99b6:	460b      	mov	r3, r1
        writer.value((int)elapsedMs);
   d99b8:	6801      	ldr	r1, [r0, #0]
   d99ba:	4618      	mov	r0, r3
   d99bc:	f004 bdbc 	b.w	de538 <_ZN5spark10JSONWriter5valueEi>

000d99c0 <_ZN11SleepHelper18PersistentDataBase10initializeEv>:
        isValid = true;
    }   
    return isValid;
}

void SleepHelper::PersistentDataBase::initialize() {
   d99c0:	b510      	push	{r4, lr}
   d99c2:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   d99c4:	68c2      	ldr	r2, [r0, #12]
   d99c6:	6880      	ldr	r0, [r0, #8]
   d99c8:	2100      	movs	r1, #0
   d99ca:	f007 fe95 	bl	e16f8 <memset>
    savedDataHeader->magic = savedDataMagic;
   d99ce:	68a3      	ldr	r3, [r4, #8]
   d99d0:	6922      	ldr	r2, [r4, #16]
   d99d2:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   d99d4:	68a3      	ldr	r3, [r4, #8]
   d99d6:	8aa2      	ldrh	r2, [r4, #20]
   d99d8:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   d99da:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d99de:	80da      	strh	r2, [r3, #6]
}
   d99e0:	bd10      	pop	{r4, pc}

000d99e2 <_ZN11SleepHelper18PersistentDataBase8validateEj>:
    if (dataSize >= 12 && 
   d99e2:	290b      	cmp	r1, #11
bool SleepHelper::PersistentDataBase::validate(size_t dataSize) {
   d99e4:	b510      	push	{r4, lr}
    if (dataSize >= 12 && 
   d99e6:	d91a      	bls.n	d9a1e <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d99e8:	6883      	ldr	r3, [r0, #8]
    if (dataSize >= 12 && 
   d99ea:	6902      	ldr	r2, [r0, #16]
   d99ec:	681c      	ldr	r4, [r3, #0]
   d99ee:	4294      	cmp	r4, r2
   d99f0:	d115      	bne.n	d9a1e <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d99f2:	889c      	ldrh	r4, [r3, #4]
   d99f4:	8a82      	ldrh	r2, [r0, #20]
   d99f6:	4294      	cmp	r4, r2
   d99f8:	d111      	bne.n	d9a1e <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->version == savedDataVersion &&
   d99fa:	88dc      	ldrh	r4, [r3, #6]
   d99fc:	b28a      	uxth	r2, r1
   d99fe:	4294      	cmp	r4, r2
   d9a00:	d80d      	bhi.n	d9a1e <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        if ((size_t)dataSize < savedDataSize) {
   d9a02:	68c2      	ldr	r2, [r0, #12]
   d9a04:	4291      	cmp	r1, r2
   d9a06:	d205      	bcs.n	d9a14 <_ZN11SleepHelper18PersistentDataBase8validateEj+0x32>
                p[ii] = 0;
   d9a08:	2400      	movs	r4, #0
   d9a0a:	545c      	strb	r4, [r3, r1]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   d9a0c:	68c2      	ldr	r2, [r0, #12]
   d9a0e:	3101      	adds	r1, #1
   d9a10:	428a      	cmp	r2, r1
   d9a12:	d8fa      	bhi.n	d9a0a <_ZN11SleepHelper18PersistentDataBase8validateEj+0x28>
        savedDataHeader->size = (uint16_t) savedDataSize;
   d9a14:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
        isValid = true;
   d9a18:	2001      	movs	r0, #1
        savedDataHeader->size = (uint16_t) savedDataSize;
   d9a1a:	80da      	strh	r2, [r3, #6]
}
   d9a1c:	bd10      	pop	{r4, pc}
    bool isValid = false;
   d9a1e:	2000      	movs	r0, #0
   d9a20:	e7fc      	b.n	d9a1c <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3a>

000d9a22 <_ZNSt17_Function_handlerIFbvEZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9a22:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d9a24:	6800      	ldr	r0, [r0, #0]
    // Call parent class
    SleepHelper::PersistentDataBase::setup();

    SleepHelper::instance().withLoopFunction([this]() {
        // Handle deferred save
        flush(false);
   d9a26:	6803      	ldr	r3, [r0, #0]
   d9a28:	2100      	movs	r1, #0
   d9a2a:	699b      	ldr	r3, [r3, #24]
   d9a2c:	4798      	blx	r3
      }
   d9a2e:	2001      	movs	r0, #1
   d9a30:	bd08      	pop	{r3, pc}

000d9a32 <_ZNSt17_Function_handlerIFbbEZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9a32:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d9a34:	6800      	ldr	r0, [r0, #0]
        return true;
    });
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
        // Make sure data is saved before sleep or reset
        flush(true);
   d9a36:	6803      	ldr	r3, [r0, #0]
   d9a38:	2101      	movs	r1, #1
   d9a3a:	699b      	ldr	r3, [r3, #24]
   d9a3c:	4798      	blx	r3
      }
   d9a3e:	2001      	movs	r0, #1
   d9a40:	bd08      	pop	{r3, pc}

000d9a42 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_5setupEvEUlS2_mE_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9a42:	b508      	push	{r3, lr}
        return !Time.isValid();
   d9a44:	f006 fb78 	bl	e0138 <_ZN9TimeClass7isValidEv>
   d9a48:	f080 0001 	eor.w	r0, r0, #1
      }
   d9a4c:	b2c0      	uxtb	r0, r0
   d9a4e:	bd08      	pop	{r3, pc}

000d9a50 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper21stateHandlerSleepDoneEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
        writer.value(wakeReasonInt);
   d9a50:	6802      	ldr	r2, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9a52:	460b      	mov	r3, r1
   d9a54:	4618      	mov	r0, r3
   d9a56:	f8d2 177c 	ldr.w	r1, [r2, #1916]	; 0x77c
   d9a5a:	f004 bd6d 	b.w	de538 <_ZN5spark10JSONWriter5valueEi>

000d9a5e <_ZN11SleepHelper18PersistentDataFile5flushEb>:
            close(fd);
        }
    }
}

void SleepHelper::PersistentDataFile::flush(bool force) {
   d9a5e:	b510      	push	{r4, lr}
    if (lastUpdate) {
   d9a60:	6983      	ldr	r3, [r0, #24]
void SleepHelper::PersistentDataFile::flush(bool force) {
   d9a62:	4604      	mov	r4, r0
    if (lastUpdate) {
   d9a64:	b133      	cbz	r3, d9a74 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d9a66:	b131      	cbz	r1, d9a76 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x18>
            save();
   d9a68:	6823      	ldr	r3, [r4, #0]
   d9a6a:	4620      	mov	r0, r4
   d9a6c:	689b      	ldr	r3, [r3, #8]
   d9a6e:	4798      	blx	r3
            lastUpdate = 0;
   d9a70:	2300      	movs	r3, #0
   d9a72:	61a3      	str	r3, [r4, #24]
        }
    }
}
   d9a74:	bd10      	pop	{r4, pc}
   d9a76:	f002 ffff 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d9a7a:	69a3      	ldr	r3, [r4, #24]
   d9a7c:	1ac0      	subs	r0, r0, r3
   d9a7e:	69e3      	ldr	r3, [r4, #28]
   d9a80:	4298      	cmp	r0, r3
   d9a82:	d2f1      	bcs.n	d9a68 <_ZN11SleepHelper18PersistentDataFile5flushEb+0xa>
   d9a84:	e7f6      	b.n	d9a74 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
	...

000d9a88 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d9a88:	b530      	push	{r4, r5, lr}
   d9a8a:	b087      	sub	sp, #28
   d9a8c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d9a8e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d9a90:	a902      	add	r1, sp, #8
   d9a92:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d9a94:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d9a96:	f003 fa0f 	bl	dceb8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d9a9a:	bb68      	cbnz	r0, d9af8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
    return get(src, val);
   d9a9c:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d9a9e:	b10c      	cbz	r4, d9aa4 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x1c>
   d9aa0:	6923      	ldr	r3, [r4, #16]
   d9aa2:	b923      	cbnz	r3, d9aae <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x26>
   d9aa4:	4a15      	ldr	r2, [pc, #84]	; (d9afc <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x74>)
   d9aa6:	2100      	movs	r1, #0
   d9aa8:	200a      	movs	r0, #10
   d9aaa:	f003 f9c5 	bl	dce38 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d9aae:	2300      	movs	r3, #0
   d9ab0:	f8ad 300e 	strh.w	r3, [sp, #14]
   d9ab4:	230c      	movs	r3, #12
   d9ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d9aba:	ab01      	add	r3, sp, #4
   d9abc:	9304      	str	r3, [sp, #16]
   d9abe:	2304      	movs	r3, #4
   d9ac0:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d9ac2:	aa03      	add	r2, sp, #12
   d9ac4:	6923      	ldr	r3, [r4, #16]
   d9ac6:	2101      	movs	r1, #1
   d9ac8:	4620      	mov	r0, r4
   d9aca:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d9acc:	b9a0      	cbnz	r0, d9af8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d9ace:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d9ad2:	ee07 3a90 	vmov	s15, r3
   d9ad6:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        if (soc > 0) {
   d9ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d9ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9ae2:	dd09      	ble.n	d9af8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
            writer.value(soc, 1);
   d9ae4:	ee17 0a90 	vmov	r0, s15
   d9ae8:	f007 f9e2 	bl	e0eb0 <__aeabi_f2d>
   d9aec:	ec41 0b10 	vmov	d0, r0, r1
   d9af0:	2101      	movs	r1, #1
   d9af2:	4628      	mov	r0, r5
   d9af4:	f004 fd44 	bl	de580 <_ZN5spark10JSONWriter5valueEdi>
      }
   d9af8:	b007      	add	sp, #28
   d9afa:	bd30      	pop	{r4, r5, pc}
   d9afc:	000dca69 	.word	0x000dca69

000d9b00 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9b00:	b410      	push	{r4}
   d9b02:	6842      	ldr	r2, [r0, #4]
   d9b04:	4603      	mov	r3, r0
   d9b06:	1054      	asrs	r4, r2, #1
   d9b08:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d9b0c:	07d2      	lsls	r2, r2, #31
   d9b0e:	bf48      	it	mi
   d9b10:	590a      	ldrmi	r2, [r1, r4]
   d9b12:	681b      	ldr	r3, [r3, #0]
      }
   d9b14:	f85d 4b04 	ldr.w	r4, [sp], #4
   d9b18:	bf48      	it	mi
   d9b1a:	58d3      	ldrmi	r3, [r2, r3]
   d9b1c:	4718      	bx	r3

000d9b1e <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>:
	if (__n > this->max_size())
   d9b1e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   d9b22:	b508      	push	{r3, lr}
	if (__n > this->max_size())
   d9b24:	d301      	bcc.n	d9b2a <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0+0xc>
	  std::__throw_bad_alloc();
   d9b26:	f006 fe45 	bl	e07b4 <_ZSt17__throw_bad_allocv>
      }
   d9b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9b2e:	0100      	lsls	r0, r0, #4
   d9b30:	f7fa bab1 	b.w	d4096 <_Znwj>

000d9b34 <_ZN11SleepHelper23stateHandlerPublishWaitEv>:
   d9b34:	4770      	bx	lr
	...

000d9b38 <_ZN11SleepHelper14PersistentDataD1Ev>:
        virtual ~PersistentData() {};
   d9b38:	b510      	push	{r4, lr}
    class PersistentDataFile : public PersistentDataBase {
   d9b3a:	4b07      	ldr	r3, [pc, #28]	; (d9b58 <_ZN11SleepHelper14PersistentDataD1Ev+0x20>)
        virtual ~PersistentData() {};
   d9b3c:	4604      	mov	r4, r0
    class PersistentDataFile : public PersistentDataBase {
   d9b3e:	f840 3b20 	str.w	r3, [r0], #32
   d9b42:	f005 ffb1 	bl	dfaa8 <_ZN6StringD1Ev>
            if (handle_) {
   d9b46:	6860      	ldr	r0, [r4, #4]
    class PersistentDataBase : public SleepHelperRecursiveMutex {
   d9b48:	4b04      	ldr	r3, [pc, #16]	; (d9b5c <_ZN11SleepHelper14PersistentDataD1Ev+0x24>)
   d9b4a:	6023      	str	r3, [r4, #0]
            if (handle_) {
   d9b4c:	b108      	cbz	r0, d9b52 <_ZN11SleepHelper14PersistentDataD1Ev+0x1a>
                os_mutex_recursive_destroy(handle_);
   d9b4e:	f002 ff4b 	bl	dc9e8 <os_mutex_recursive_destroy>
        virtual ~PersistentData() {};
   d9b52:	4620      	mov	r0, r4
   d9b54:	bd10      	pop	{r4, pc}
   d9b56:	bf00      	nop
   d9b58:	000e47cc 	.word	0x000e47cc
   d9b5c:	000e47ac 	.word	0x000e47ac

000d9b60 <_ZN11SleepHelper14PersistentDataD0Ev>:
   d9b60:	b510      	push	{r4, lr}
   d9b62:	4604      	mov	r4, r0
   d9b64:	f7ff ffe8 	bl	d9b38 <_ZN11SleepHelper14PersistentDataD1Ev>
   d9b68:	4620      	mov	r0, r4
   d9b6a:	2150      	movs	r1, #80	; 0x50
   d9b6c:	f006 fde8 	bl	e0740 <_ZdlPvj>
   d9b70:	4620      	mov	r0, r4
   d9b72:	bd10      	pop	{r4, pc}

000d9b74 <_ZN11SleepHelper12SettingsFileD1Ev>:
        virtual ~SettingsFile() {};
   d9b74:	b570      	push	{r4, r5, r6, lr}
   d9b76:	4b10      	ldr	r3, [pc, #64]	; (d9bb8 <_ZN11SleepHelper12SettingsFileD1Ev+0x44>)
   d9b78:	6003      	str	r3, [r0, #0]
   d9b7a:	4604      	mov	r4, r0
   d9b7c:	f500 60ba 	add.w	r0, r0, #1488	; 0x5d0
   d9b80:	f005 ff92 	bl	dfaa8 <_ZN6StringD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d9b84:	f8d4 55c4 	ldr.w	r5, [r4, #1476]	; 0x5c4
   d9b88:	f8d4 65c8 	ldr.w	r6, [r4, #1480]	; 0x5c8
   d9b8c:	42ae      	cmp	r6, r5
   d9b8e:	d004      	beq.n	d9b9a <_ZN11SleepHelper12SettingsFileD1Ev+0x26>
    class function<_Res(_ArgTypes...)>
   d9b90:	4628      	mov	r0, r5
   d9b92:	f7fa ff75 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d9b96:	3510      	adds	r5, #16
   d9b98:	e7f8      	b.n	d9b8c <_ZN11SleepHelper12SettingsFileD1Ev+0x18>
	_M_deallocate(_M_impl._M_start,
   d9b9a:	f8d4 05c4 	ldr.w	r0, [r4, #1476]	; 0x5c4
	if (__p)
   d9b9e:	b108      	cbz	r0, d9ba4 <_ZN11SleepHelper12SettingsFileD1Ev+0x30>
	::operator delete(__p);
   d9ba0:	f7fa fa7d 	bl	d409e <_ZdlPv>
   d9ba4:	f104 0008 	add.w	r0, r4, #8
   d9ba8:	f7ff fed4 	bl	d9954 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
            if (handle_) {
   d9bac:	6860      	ldr	r0, [r4, #4]
   d9bae:	b108      	cbz	r0, d9bb4 <_ZN11SleepHelper12SettingsFileD1Ev+0x40>
                os_mutex_recursive_destroy(handle_);
   d9bb0:	f002 ff1a 	bl	dc9e8 <os_mutex_recursive_destroy>
        virtual ~SettingsFile() {};
   d9bb4:	4620      	mov	r0, r4
   d9bb6:	bd70      	pop	{r4, r5, r6, pc}
   d9bb8:	000e4760 	.word	0x000e4760

000d9bbc <_ZN11SleepHelper12SettingsFileD0Ev>:
   d9bbc:	b510      	push	{r4, lr}
   d9bbe:	4604      	mov	r4, r0
   d9bc0:	f7ff ffd8 	bl	d9b74 <_ZN11SleepHelper12SettingsFileD1Ev>
   d9bc4:	4620      	mov	r0, r4
   d9bc6:	f240 51e4 	movw	r1, #1508	; 0x5e4
   d9bca:	f006 fdb9 	bl	e0740 <_ZdlPvj>
   d9bce:	4620      	mov	r0, r4
   d9bd0:	bd10      	pop	{r4, pc}
	...

000d9bd4 <_ZN8particle24SystemSleepConfigurationC1Ev>:
    SystemSleepConfiguration()
   d9bd4:	b510      	push	{r4, lr}
   d9bd6:	4604      	mov	r4, r0
            : SystemSleepConfigurationHelper(&config_),
   d9bd8:	3004      	adds	r0, #4
        : config_(config) {
   d9bda:	6020      	str	r0, [r4, #0]
              valid_(true) {
   d9bdc:	2210      	movs	r2, #16
   d9bde:	2100      	movs	r1, #0
   d9be0:	f007 fd8a 	bl	e16f8 <memset>
   d9be4:	2301      	movs	r3, #1
   d9be6:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d9be8:	4b02      	ldr	r3, [pc, #8]	; (d9bf4 <_ZN8particle24SystemSleepConfigurationC1Ev+0x20>)
   d9bea:	6063      	str	r3, [r4, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d9bec:	2300      	movs	r3, #0
   d9bee:	7223      	strb	r3, [r4, #8]
    }
   d9bf0:	4620      	mov	r0, r4
   d9bf2:	bd10      	pop	{r4, pc}
   d9bf4:	00030010 	.word	0x00030010

000d9bf8 <_ZN8particle24SystemSleepConfigurationD1Ev>:
    ~SystemSleepConfiguration() {
   d9bf8:	b538      	push	{r3, r4, r5, lr}
   d9bfa:	4604      	mov	r4, r0
        auto wakeupSource = config_.wakeup_sources;
   d9bfc:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d9bfe:	b128      	cbz	r0, d9c0c <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d9c00:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d9c02:	210c      	movs	r1, #12
   d9c04:	f006 fd9c 	bl	e0740 <_ZdlPvj>
            wakeupSource = next;
   d9c08:	4628      	mov	r0, r5
        while (wakeupSource) {
   d9c0a:	e7f8      	b.n	d9bfe <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
    }
   d9c0c:	4620      	mov	r0, r4
   d9c0e:	bd38      	pop	{r3, r4, r5, pc}

000d9c10 <_ZN8particle24SystemSleepConfiguration8durationEm>:
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d9c10:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d9c12:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d9c14:	4605      	mov	r5, r0
   d9c16:	460e      	mov	r6, r1
        if (valid_) {
   d9c18:	b1cb      	cbz	r3, d9c4e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d9c1a:	6803      	ldr	r3, [r0, #0]
   d9c1c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d9c1e:	b123      	cbz	r3, d9c2a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d9c20:	889a      	ldrh	r2, [r3, #4]
   d9c22:	2a04      	cmp	r2, #4
   d9c24:	d017      	beq.n	d9c56 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d9c26:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d9c28:	e7f9      	b.n	d9c1e <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d9c2a:	490c      	ldr	r1, [pc, #48]	; (d9c5c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d9c2c:	2010      	movs	r0, #16
   d9c2e:	f006 fdbd 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   d9c32:	4604      	mov	r4, r0
   d9c34:	b168      	cbz	r0, d9c52 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d9c36:	2210      	movs	r2, #16
   d9c38:	2100      	movs	r1, #0
   d9c3a:	f007 fd5d 	bl	e16f8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d9c3e:	4b08      	ldr	r3, [pc, #32]	; (d9c60 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d9c40:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d9c42:	2304      	movs	r3, #4
   d9c44:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d9c46:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d9c48:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d9c4a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d9c4e:	4628      	mov	r0, r5
   d9c50:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d9c52:	7528      	strb	r0, [r5, #20]
                return *this;
   d9c54:	e7fb      	b.n	d9c4e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d9c56:	60de      	str	r6, [r3, #12]
                return *this;
   d9c58:	e7f9      	b.n	d9c4e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d9c5a:	bf00      	nop
   d9c5c:	000e4b18 	.word	0x000e4b18
   d9c60:	00030010 	.word	0x00030010

000d9c64 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d9c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d9c66:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d9c68:	4605      	mov	r5, r0
   d9c6a:	460f      	mov	r7, r1
   d9c6c:	4616      	mov	r6, r2
        if (valid_) {
   d9c6e:	b1b3      	cbz	r3, d9c9e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d9c70:	6803      	ldr	r3, [r0, #0]
   d9c72:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d9c74:	b1ab      	cbz	r3, d9ca2 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d9c76:	889a      	ldrh	r2, [r3, #4]
   d9c78:	2a0e      	cmp	r2, #14
   d9c7a:	d006      	beq.n	d9c8a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x26>
            start = start->next;
   d9c7c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d9c7e:	e7f9      	b.n	d9c74 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x10>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d9c80:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d9c82:	b173      	cbz	r3, d9ca2 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d9c84:	889a      	ldrh	r2, [r3, #4]
   d9c86:	2a0e      	cmp	r2, #14
   d9c88:	d1fa      	bne.n	d9c80 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
            while (wakeup) {
   d9c8a:	b153      	cbz	r3, d9ca2 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
                if (networkWakeup->index == netif) {
   d9c8c:	7b1a      	ldrb	r2, [r3, #12]
   d9c8e:	42ba      	cmp	r2, r7
   d9c90:	d1f6      	bne.n	d9c80 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
                    if (networkWakeup->flags != flags.value()) {
   d9c92:	89da      	ldrh	r2, [r3, #14]
   d9c94:	8831      	ldrh	r1, [r6, #0]
   d9c96:	428a      	cmp	r2, r1
   d9c98:	d001      	beq.n	d9c9e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                        networkWakeup->flags |= flags.value();
   d9c9a:	430a      	orrs	r2, r1
   d9c9c:	81da      	strh	r2, [r3, #14]
            wakeupSource->index = static_cast<network_interface_index>(netif);
            wakeupSource->flags = flags.value();
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d9c9e:	4628      	mov	r0, r5
   d9ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d9ca2:	490b      	ldr	r1, [pc, #44]	; (d9cd0 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x6c>)
   d9ca4:	2014      	movs	r0, #20
   d9ca6:	f006 fd81 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   d9caa:	4604      	mov	r4, r0
   d9cac:	b170      	cbz	r0, d9ccc <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x68>
   d9cae:	2214      	movs	r2, #20
   d9cb0:	2100      	movs	r1, #0
   d9cb2:	f007 fd21 	bl	e16f8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d9cb6:	4b07      	ldr	r3, [pc, #28]	; (d9cd4 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x70>)
   d9cb8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d9cba:	230e      	movs	r3, #14
   d9cbc:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d9cbe:	692b      	ldr	r3, [r5, #16]
   d9cc0:	60a3      	str	r3, [r4, #8]
            wakeupSource->flags = flags.value();
   d9cc2:	8833      	ldrh	r3, [r6, #0]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d9cc4:	7327      	strb	r7, [r4, #12]
            wakeupSource->flags = flags.value();
   d9cc6:	81e3      	strh	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d9cc8:	612c      	str	r4, [r5, #16]
   d9cca:	e7e8      	b.n	d9c9e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                valid_ = false;
   d9ccc:	7528      	strb	r0, [r5, #20]
                return *this;
   d9cce:	e7e6      	b.n	d9c9e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
   d9cd0:	000e4b18 	.word	0x000e4b18
   d9cd4:	00030010 	.word	0x00030010

000d9cd8 <_ZN5spark9JSONValue9parseCopyEPKc>:
inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
   d9cd8:	b513      	push	{r0, r1, r4, lr}
   d9cda:	4604      	mov	r4, r0
    return parseCopy(json, strlen(json));
   d9cdc:	4608      	mov	r0, r1
   d9cde:	9101      	str	r1, [sp, #4]
   d9ce0:	f007 fd95 	bl	e180e <strlen>
   d9ce4:	9901      	ldr	r1, [sp, #4]
   d9ce6:	4602      	mov	r2, r0
   d9ce8:	4620      	mov	r0, r4
   d9cea:	f004 fd17 	bl	de71c <_ZN5spark9JSONValue9parseCopyEPKcj>
}
   d9cee:	4620      	mov	r0, r4
   d9cf0:	b002      	add	sp, #8
   d9cf2:	bd10      	pop	{r4, pc}

000d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>:
        void lock() const { 
   d9cf4:	b510      	push	{r4, lr}
            if (!handle_) {
   d9cf6:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   d9cf8:	4604      	mov	r4, r0
            if (!handle_) {
   d9cfa:	b90b      	cbnz	r3, d9d00 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   d9cfc:	f002 fe6c 	bl	dc9d8 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   d9d00:	6820      	ldr	r0, [r4, #0]
        }
   d9d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   d9d06:	f002 be77 	b.w	dc9f8 <os_mutex_recursive_lock>

000d9d0a <_ZN11SleepHelper18PersistentDataBase4loadEv>:
bool SleepHelper::PersistentDataBase::load() {
   d9d0a:	b510      	push	{r4, lr}
   d9d0c:	4604      	mov	r4, r0
      { _M_device.lock(); }
   d9d0e:	3004      	adds	r0, #4
   d9d10:	f7ff fff0 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   d9d14:	6823      	ldr	r3, [r4, #0]
   d9d16:	68e1      	ldr	r1, [r4, #12]
   d9d18:	691b      	ldr	r3, [r3, #16]
   d9d1a:	4620      	mov	r0, r4
   d9d1c:	4798      	blx	r3
   d9d1e:	b918      	cbnz	r0, d9d28 <_ZN11SleepHelper18PersistentDataBase4loadEv+0x1e>
            initialize();
   d9d20:	6823      	ldr	r3, [r4, #0]
   d9d22:	4620      	mov	r0, r4
   d9d24:	695b      	ldr	r3, [r3, #20]
   d9d26:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   d9d28:	6860      	ldr	r0, [r4, #4]
   d9d2a:	f002 fe6d 	bl	dca08 <os_mutex_recursive_unlock>
}
   d9d2e:	2001      	movs	r0, #1
   d9d30:	bd10      	pop	{r4, pc}

000d9d32 <_ZN11SleepHelper18PersistentDataFile4loadEv>:
bool SleepHelper::PersistentDataFile::load() {
   d9d32:	b570      	push	{r4, r5, r6, lr}
   d9d34:	4604      	mov	r4, r0
   d9d36:	3004      	adds	r0, #4
   d9d38:	f7ff ffdc 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   d9d3c:	6a20      	ldr	r0, [r4, #32]
   d9d3e:	2100      	movs	r1, #0
   d9d40:	f008 fcfc 	bl	e273c <open>
        if (fd != -1) {
   d9d44:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDONLY);
   d9d46:	4605      	mov	r5, r0
        if (fd != -1) {
   d9d48:	d108      	bne.n	d9d5c <_ZN11SleepHelper18PersistentDataFile4loadEv+0x2a>
            initialize();
   d9d4a:	6823      	ldr	r3, [r4, #0]
   d9d4c:	4620      	mov	r0, r4
   d9d4e:	695b      	ldr	r3, [r3, #20]
   d9d50:	4798      	blx	r3
   d9d52:	6860      	ldr	r0, [r4, #4]
   d9d54:	f002 fe58 	bl	dca08 <os_mutex_recursive_unlock>
}
   d9d58:	2001      	movs	r0, #1
   d9d5a:	bd70      	pop	{r4, r5, r6, pc}
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d9d5c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d9d60:	f008 fd00 	bl	e2764 <read>
            if (validate(dataSize)) {
   d9d64:	6823      	ldr	r3, [r4, #0]
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d9d66:	4601      	mov	r1, r0
            if (validate(dataSize)) {
   d9d68:	691b      	ldr	r3, [r3, #16]
   d9d6a:	4620      	mov	r0, r4
   d9d6c:	4798      	blx	r3
   d9d6e:	4606      	mov	r6, r0
            close(fd);
   d9d70:	4628      	mov	r0, r5
   d9d72:	f008 fcc9 	bl	e2708 <close>
        if (!loaded) {
   d9d76:	2e00      	cmp	r6, #0
   d9d78:	d0e7      	beq.n	d9d4a <_ZN11SleepHelper18PersistentDataFile4loadEv+0x18>
   d9d7a:	e7ea      	b.n	d9d52 <_ZN11SleepHelper18PersistentDataFile4loadEv+0x20>

000d9d7c <_ZN11SleepHelper18PersistentDataFile4saveEv>:
void SleepHelper::PersistentDataFile::save() {
   d9d7c:	b538      	push	{r3, r4, r5, lr}
   d9d7e:	4604      	mov	r4, r0
   d9d80:	3004      	adds	r0, #4
   d9d82:	f7ff ffb7 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d9d86:	6a20      	ldr	r0, [r4, #32]
   d9d88:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d9d8c:	f240 6102 	movw	r1, #1538	; 0x602
   d9d90:	f008 fcd4 	bl	e273c <open>
        if (fd != -1) {            
   d9d94:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d9d96:	4605      	mov	r5, r0
        if (fd != -1) {            
   d9d98:	d006      	beq.n	d9da8 <_ZN11SleepHelper18PersistentDataFile4saveEv+0x2c>
            write(fd, savedDataHeader, savedDataSize);
   d9d9a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d9d9e:	f008 fcf3 	bl	e2788 <write>
            close(fd);
   d9da2:	4628      	mov	r0, r5
   d9da4:	f008 fcb0 	bl	e2708 <close>
   d9da8:	6860      	ldr	r0, [r4, #4]
}
   d9daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9dae:	f002 be2b 	b.w	dca08 <os_mutex_recursive_unlock>
	...

000d9db4 <_ZN11SleepHelper20eventsEnablePriorityEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d9db4:	4a0b      	ldr	r2, [pc, #44]	; (d9de4 <_ZN11SleepHelper20eventsEnablePriorityEy+0x30>)
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d9db6:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9db8:	2300      	movs	r3, #0
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d9dba:	4604      	mov	r4, r0
   d9dbc:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9dbe:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d9dc0:	e9d2 0100 	ldrd	r0, r1, [r2]
   d9dc4:	428d      	cmp	r5, r1
   d9dc6:	bf08      	it	eq
   d9dc8:	4284      	cmpeq	r4, r0
   d9dca:	d103      	bne.n	d9dd4 <_ZN11SleepHelper20eventsEnablePriorityEy+0x20>
        return ev->priority;
   d9dcc:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d9dd0:	6998      	ldr	r0, [r3, #24]
}
   d9dd2:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9dd4:	3301      	adds	r3, #1
   d9dd6:	2b04      	cmp	r3, #4
   d9dd8:	f102 0220 	add.w	r2, r2, #32
   d9ddc:	d1f0      	bne.n	d9dc0 <_ZN11SleepHelper20eventsEnablePriorityEy+0xc>
        return 0;
   d9dde:	2000      	movs	r0, #0
   d9de0:	e7f7      	b.n	d9dd2 <_ZN11SleepHelper20eventsEnablePriorityEy+0x1e>
   d9de2:	bf00      	nop
   d9de4:	2003e490 	.word	0x2003e490

000d9de8 <_ZN11SleepHelper16eventsEnableNameEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d9de8:	4a0b      	ldr	r2, [pc, #44]	; (d9e18 <_ZN11SleepHelper16eventsEnableNameEy+0x30>)
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d9dea:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9dec:	2300      	movs	r3, #0
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d9dee:	4604      	mov	r4, r0
   d9df0:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9df2:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d9df4:	e9d2 0100 	ldrd	r0, r1, [r2]
   d9df8:	428d      	cmp	r5, r1
   d9dfa:	bf08      	it	eq
   d9dfc:	4284      	cmpeq	r4, r0
   d9dfe:	d103      	bne.n	d9e08 <_ZN11SleepHelper16eventsEnableNameEy+0x20>
        operator const char*() const { return c_str(); }
   d9e00:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d9e04:	6898      	ldr	r0, [r3, #8]
}
   d9e06:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9e08:	3301      	adds	r3, #1
   d9e0a:	2b04      	cmp	r3, #4
   d9e0c:	f102 0220 	add.w	r2, r2, #32
   d9e10:	d1f0      	bne.n	d9df4 <_ZN11SleepHelper16eventsEnableNameEy+0xc>
        return "";
   d9e12:	4802      	ldr	r0, [pc, #8]	; (d9e1c <_ZN11SleepHelper16eventsEnableNameEy+0x34>)
   d9e14:	e7f7      	b.n	d9e06 <_ZN11SleepHelper16eventsEnableNameEy+0x1e>
   d9e16:	bf00      	nop
   d9e18:	2003e490 	.word	0x2003e490
   d9e1c:	000e4537 	.word	0x000e4537

000d9e20 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>:
    class AppCallbackWithState {
   d9e20:	b570      	push	{r4, r5, r6, lr}
   d9e22:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   d9e24:	68c0      	ldr	r0, [r0, #12]
	if (__p)
   d9e26:	b108      	cbz	r0, d9e2c <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0xc>
   d9e28:	f7fa f939 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d9e2c:	e9d4 5600 	ldrd	r5, r6, [r4]
   d9e30:	42ae      	cmp	r6, r5
   d9e32:	d004      	beq.n	d9e3e <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x1e>
   d9e34:	4628      	mov	r0, r5
   d9e36:	f7fa fe23 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   d9e3a:	3510      	adds	r5, #16
   d9e3c:	e7f8      	b.n	d9e30 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x10>
	_M_deallocate(_M_impl._M_start,
   d9e3e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d9e40:	b108      	cbz	r0, d9e46 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x26>
   d9e42:	f7fa f92c 	bl	d409e <_ZdlPv>
   d9e46:	4620      	mov	r0, r4
   d9e48:	bd70      	pop	{r4, r5, r6, pc}

000d9e4a <_ZN11SleepHelper11PublishDataD1Ev>:
    class PublishData {
   d9e4a:	b510      	push	{r4, lr}
   d9e4c:	4604      	mov	r4, r0
   d9e4e:	3010      	adds	r0, #16
   d9e50:	f005 fe2a 	bl	dfaa8 <_ZN6StringD1Ev>
   d9e54:	4620      	mov	r0, r4
   d9e56:	f005 fe27 	bl	dfaa8 <_ZN6StringD1Ev>
   d9e5a:	4620      	mov	r0, r4
   d9e5c:	bd10      	pop	{r4, pc}
	...

000d9e60 <_ZN11SleepHelper12EventHistory12removeEventsEv>:
    }

    return bResult;
}

void SleepHelper::EventHistory::removeEvents() {
   d9e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9e64:	b0a3      	sub	sp, #140	; 0x8c
   d9e66:	4604      	mov	r4, r0
   d9e68:	f7ff ff44 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
    WITH_LOCK(*this) {
        const size_t bufSize = 512;
        char *buf = (char *)malloc(bufSize);
   d9e6c:	f44f 7000 	mov.w	r0, #512	; 0x200
   d9e70:	f003 f942 	bl	dd0f8 <malloc>
        if (buf) {
   d9e74:	4605      	mov	r5, r0
   d9e76:	2800      	cmp	r0, #0
   d9e78:	d05b      	beq.n	d9f32 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xd2>
            int fdsrc = open(path, O_RDONLY);
   d9e7a:	6860      	ldr	r0, [r4, #4]
   d9e7c:	2100      	movs	r1, #0
   d9e7e:	f008 fc5d 	bl	e273c <open>
            if (fdsrc != -1) {
   d9e82:	1c43      	adds	r3, r0, #1
            int fdsrc = open(path, O_RDONLY);
   d9e84:	4606      	mov	r6, r0
            if (fdsrc != -1) {
   d9e86:	d051      	beq.n	d9f2c <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
                struct stat sb;
                fstat(fdsrc, &sb);
   d9e88:	a90c      	add	r1, sp, #48	; 0x30
   d9e8a:	f008 fc45 	bl	e2718 <fstat>
                size_t fileSize = sb.st_size;  
   d9e8e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
                if (removeOffset < fileSize) {
   d9e92:	69a1      	ldr	r1, [r4, #24]
   d9e94:	4549      	cmp	r1, r9
   d9e96:	d252      	bcs.n	d9f3e <_ZN11SleepHelper12EventHistory12removeEventsEv+0xde>
                    lseek(fdsrc, removeOffset, SEEK_SET);
   d9e98:	2200      	movs	r2, #0
   d9e9a:	4630      	mov	r0, r6
   d9e9c:	f008 fc44 	bl	e2728 <lseek>

                    String tempPath = String(path) + ".tmp";
   d9ea0:	1d21      	adds	r1, r4, #4
   d9ea2:	a804      	add	r0, sp, #16
   d9ea4:	f005 fe96 	bl	dfbd4 <_ZN6StringC1ERKS_>
	StringSumHelper(const String &s) : String(s) {}
   d9ea8:	a904      	add	r1, sp, #16
   d9eaa:	a808      	add	r0, sp, #32
   d9eac:	f005 fe92 	bl	dfbd4 <_ZN6StringC1ERKS_>
   d9eb0:	4926      	ldr	r1, [pc, #152]	; (d9f4c <_ZN11SleepHelper12EventHistory12removeEventsEv+0xec>)
   d9eb2:	a808      	add	r0, sp, #32
   d9eb4:	f005 fee7 	bl	dfc86 <_ZplRK15StringSumHelperPKc>
   d9eb8:	4601      	mov	r1, r0
   d9eba:	4668      	mov	r0, sp
   d9ebc:	f005 fe8a 	bl	dfbd4 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d9ec0:	a808      	add	r0, sp, #32
   d9ec2:	f005 fdf1 	bl	dfaa8 <_ZN6StringD1Ev>
   d9ec6:	a804      	add	r0, sp, #16
   d9ec8:	f005 fdee 	bl	dfaa8 <_ZN6StringD1Ev>
                    int fddst = open(tempPath, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d9ecc:	9800      	ldr	r0, [sp, #0]
   d9ece:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d9ed2:	f240 6102 	movw	r1, #1538	; 0x602
   d9ed6:	f008 fc31 	bl	e273c <open>
                    if (fddst) {
   d9eda:	4607      	mov	r7, r0
   d9edc:	b1b8      	cbz	r0, d9f0e <_ZN11SleepHelper12EventHistory12removeEventsEv+0xae>
                        while(removeOffset < fileSize) {
   d9ede:	69a3      	ldr	r3, [r4, #24]
   d9ee0:	454b      	cmp	r3, r9
   d9ee2:	d211      	bcs.n	d9f08 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                            int count = read(fdsrc, buf, bufSize);
   d9ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d9ee8:	4629      	mov	r1, r5
   d9eea:	4630      	mov	r0, r6
   d9eec:	f008 fc3a 	bl	e2764 <read>
                            if (count > 0) {
   d9ef0:	f1b0 0800 	subs.w	r8, r0, #0
   d9ef4:	dd08      	ble.n	d9f08 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                                write(fddst, buf, count);
   d9ef6:	4642      	mov	r2, r8
   d9ef8:	4629      	mov	r1, r5
   d9efa:	4638      	mov	r0, r7
   d9efc:	f008 fc44 	bl	e2788 <write>
                                removeOffset += count;
   d9f00:	69a0      	ldr	r0, [r4, #24]
   d9f02:	4440      	add	r0, r8
   d9f04:	61a0      	str	r0, [r4, #24]
                        while(removeOffset < fileSize) {
   d9f06:	e7ea      	b.n	d9ede <_ZN11SleepHelper12EventHistory12removeEventsEv+0x7e>
                            }
                            else {
                                break;
                            }
                        }
                        close(fddst);
   d9f08:	4638      	mov	r0, r7
   d9f0a:	f008 fbfd 	bl	e2708 <close>
                    }
                    close(fdsrc);
   d9f0e:	4630      	mov	r0, r6
   d9f10:	f008 fbfa 	bl	e2708 <close>

                    // Swap src and dst files
                    unlink(path);
   d9f14:	6860      	ldr	r0, [r4, #4]
   d9f16:	f008 fc2f 	bl	e2778 <unlink>
                    rename(tempPath, path);
   d9f1a:	6861      	ldr	r1, [r4, #4]
   d9f1c:	9800      	ldr	r0, [sp, #0]
   d9f1e:	f007 fc17 	bl	e1750 <rename>
                    removeOffset = 0;
   d9f22:	2300      	movs	r3, #0
   d9f24:	61a3      	str	r3, [r4, #24]
                    String tempPath = String(path) + ".tmp";
   d9f26:	4668      	mov	r0, sp
   d9f28:	f005 fdbe 	bl	dfaa8 <_ZN6StringD1Ev>
                else {
                    unlink(path);
                    hasEvents = false;
                }
            }
            free(buf);
   d9f2c:	4628      	mov	r0, r5
   d9f2e:	f003 f8eb 	bl	dd108 <free>
            os_mutex_recursive_unlock(handle_); 
   d9f32:	6820      	ldr	r0, [r4, #0]
   d9f34:	f002 fd68 	bl	dca08 <os_mutex_recursive_unlock>
        }

    }
}
   d9f38:	b023      	add	sp, #140	; 0x8c
   d9f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    unlink(path);
   d9f3e:	6860      	ldr	r0, [r4, #4]
   d9f40:	f008 fc1a 	bl	e2778 <unlink>
                    hasEvents = false;
   d9f44:	2300      	movs	r3, #0
   d9f46:	7563      	strb	r3, [r4, #21]
   d9f48:	e7f0      	b.n	d9f2c <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
   d9f4a:	bf00      	nop
   d9f4c:	000e44d8 	.word	0x000e44d8

000d9f50 <_ZN11SleepHelper12EventHistory12getHasEventsEv>:

bool SleepHelper::EventHistory::getHasEvents() { 
   d9f50:	b530      	push	{r4, r5, lr}
    if (firstRun) {
   d9f52:	7d03      	ldrb	r3, [r0, #20]
bool SleepHelper::EventHistory::getHasEvents() { 
   d9f54:	b097      	sub	sp, #92	; 0x5c
   d9f56:	4604      	mov	r4, r0
    if (firstRun) {
   d9f58:	b163      	cbz	r3, d9f74 <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x24>
        firstRun = false;
   d9f5a:	2500      	movs	r5, #0
   d9f5c:	7505      	strb	r5, [r0, #20]

        struct stat sb;
        int res = stat(path, &sb);
   d9f5e:	4669      	mov	r1, sp
   d9f60:	6840      	ldr	r0, [r0, #4]
   d9f62:	f002 fea1 	bl	dcca8 <stat>

        hasEvents = (res == 0 && sb.st_size > 0);
   d9f66:	b920      	cbnz	r0, d9f72 <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x22>
   d9f68:	9d04      	ldr	r5, [sp, #16]
   d9f6a:	2d00      	cmp	r5, #0
   d9f6c:	bfd4      	ite	le
   d9f6e:	2500      	movle	r5, #0
   d9f70:	2501      	movgt	r5, #1
   d9f72:	7565      	strb	r5, [r4, #21]
    }
    return hasEvents; 
};
   d9f74:	7d60      	ldrb	r0, [r4, #21]
   d9f76:	b017      	add	sp, #92	; 0x5c
   d9f78:	bd30      	pop	{r4, r5, pc}

000d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d9f7a:	680b      	ldr	r3, [r1, #0]
   d9f7c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d9f7e:	b113      	cbz	r3, d9f86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d9f80:	685a      	ldr	r2, [r3, #4]
   d9f82:	3201      	adds	r2, #1
   d9f84:	605a      	str	r2, [r3, #4]
      }
   d9f86:	4770      	bx	lr

000d9f88 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
    JSONCopy(JSONValue::parseCopy(src), writer);
}

// [static]
void SleepHelper::JSONCopy(const JSONValue &src, JSONWriter &writer) {
   d9f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9f8a:	b08f      	sub	sp, #60	; 0x3c
   d9f8c:	4604      	mov	r4, r0
   d9f8e:	460d      	mov	r5, r1
    return type() == JSON_TYPE_ARRAY;
   d9f90:	f004 f867 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
    // This is inefficient and annoying, but there's no way to insert pre-formatted JSON into a JSONWriter
    if (src.isArray()) {
   d9f94:	2805      	cmp	r0, #5
   d9f96:	d132      	bne.n	d9ffe <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x76>
        writer.beginArray();
   d9f98:	4628      	mov	r0, r5
   d9f9a:	f004 fa9c 	bl	de4d6 <_ZN5spark10JSONWriter10beginArrayEv>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9f9e:	4621      	mov	r1, r4
        JSONArrayIterator(value.t_, value.d_) {
   d9fa0:	68a6      	ldr	r6, [r4, #8]
   d9fa2:	f851 3b04 	ldr.w	r3, [r1], #4
   d9fa6:	9304      	str	r3, [sp, #16]
   d9fa8:	a805      	add	r0, sp, #20
   d9faa:	f7ff ffe6 	bl	d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d9fae:	aa04      	add	r2, sp, #16
   d9fb0:	4631      	mov	r1, r6
   d9fb2:	a808      	add	r0, sp, #32
   d9fb4:	f004 fa49 	bl	de44a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9fb8:	a805      	add	r0, sp, #20
   d9fba:	f7fa fb61 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

        JSONArrayIterator iter(src);
        while(iter.next()) {
   d9fbe:	a808      	add	r0, sp, #32
   d9fc0:	f004 fa5a 	bl	de478 <_ZN5spark17JSONArrayIterator4nextEv>
   d9fc4:	b198      	cbz	r0, d9fee <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x66>
    return JSONValue(v_, d_);
   d9fc6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9fc8:	9b08      	ldr	r3, [sp, #32]
   d9fca:	9302      	str	r3, [sp, #8]
   d9fcc:	a909      	add	r1, sp, #36	; 0x24
   d9fce:	a803      	add	r0, sp, #12
   d9fd0:	f7ff ffd3 	bl	d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d9fd4:	4621      	mov	r1, r4
   d9fd6:	aa02      	add	r2, sp, #8
   d9fd8:	a804      	add	r0, sp, #16
   d9fda:	f004 f834 	bl	de046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9fde:	a803      	add	r0, sp, #12
   d9fe0:	f7fa fb4e 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   d9fe4:	4629      	mov	r1, r5
   d9fe6:	a804      	add	r0, sp, #16
   d9fe8:	f7ff ffce 	bl	d9f88 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d9fec:	e7e4      	b.n	d9fb8 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x30>
        }

        writer.endArray();
   d9fee:	4628      	mov	r0, r5
   d9ff0:	f004 fa52 	bl	de498 <_ZN5spark10JSONWriter8endArrayEv>
   d9ff4:	a809      	add	r0, sp, #36	; 0x24
   d9ff6:	f7fa fb43 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        else {
            writer.value(d);
        }
    }
}
   d9ffa:	b00f      	add	sp, #60	; 0x3c
   d9ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return type() == JSON_TYPE_OBJECT;
   d9ffe:	4620      	mov	r0, r4
   da000:	f004 f82f 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
    if (src.isObject()) {
   da004:	2806      	cmp	r0, #6
   da006:	d130      	bne.n	da06a <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xe2>
        writer.beginObject();
   da008:	4628      	mov	r0, r5
   da00a:	f004 fa70 	bl	de4ee <_ZN5spark10JSONWriter11beginObjectEv>
        JSONObjectIterator iter(src);
   da00e:	4621      	mov	r1, r4
   da010:	a808      	add	r0, sp, #32
   da012:	f7fd fe59 	bl	d7cc8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        while(iter.next()) {
   da016:	a808      	add	r0, sp, #32
   da018:	f004 fa04 	bl	de424 <_ZN5spark18JSONObjectIterator4nextEv>
   da01c:	b308      	cbz	r0, da062 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xda>
            writer.name((const char *) iter.name());
   da01e:	a908      	add	r1, sp, #32
   da020:	a804      	add	r0, sp, #16
   da022:	f7fd fe62 	bl	d7cea <_ZNK5spark18JSONObjectIterator4nameEv>
   da026:	9906      	ldr	r1, [sp, #24]
   da028:	4628      	mov	r0, r5
   da02a:	f7fa fd32 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
   da02e:	a805      	add	r0, sp, #20
   da030:	f7fa fb26 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONValue(v_, d_);
   da034:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da036:	9b08      	ldr	r3, [sp, #32]
   da038:	9302      	str	r3, [sp, #8]
   da03a:	a909      	add	r1, sp, #36	; 0x24
   da03c:	a803      	add	r0, sp, #12
   da03e:	f7ff ff9c 	bl	d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   da042:	aa02      	add	r2, sp, #8
   da044:	4621      	mov	r1, r4
   da046:	a804      	add	r0, sp, #16
   da048:	f003 fffd 	bl	de046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   da04c:	a803      	add	r0, sp, #12
   da04e:	f7fa fb17 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   da052:	a804      	add	r0, sp, #16
   da054:	4629      	mov	r1, r5
   da056:	f7ff ff97 	bl	d9f88 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   da05a:	a805      	add	r0, sp, #20
   da05c:	f7fa fb10 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        while(iter.next()) {
   da060:	e7d9      	b.n	da016 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x8e>
        writer.endObject();
   da062:	4628      	mov	r0, r5
   da064:	f004 fa21 	bl	de4aa <_ZN5spark10JSONWriter9endObjectEv>
   da068:	e7c4      	b.n	d9ff4 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_STRING;
   da06a:	4620      	mov	r0, r4
   da06c:	f003 fff9 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
    if (src.isString()) {
   da070:	2804      	cmp	r0, #4
   da072:	d11a      	bne.n	da0aa <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x122>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da074:	4621      	mov	r1, r4
    return JSONString(t_, d_);
   da076:	68a6      	ldr	r6, [r4, #8]
   da078:	f851 3b04 	ldr.w	r3, [r1], #4
   da07c:	9304      	str	r3, [sp, #16]
   da07e:	a805      	add	r0, sp, #20
   da080:	f7ff ff7b 	bl	d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   da084:	aa04      	add	r2, sp, #16
   da086:	4631      	mov	r1, r6
   da088:	a808      	add	r0, sp, #32
   da08a:	f004 f98f 	bl	de3ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   da08e:	a805      	add	r0, sp, #20
   da090:	f7fa faf6 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        writer.value(src.toString().data());
   da094:	990a      	ldr	r1, [sp, #40]	; 0x28
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   da096:	9101      	str	r1, [sp, #4]
   da098:	4608      	mov	r0, r1
   da09a:	f007 fbb8 	bl	e180e <strlen>
   da09e:	9901      	ldr	r1, [sp, #4]
   da0a0:	4602      	mov	r2, r0
   da0a2:	4628      	mov	r0, r5
   da0a4:	f004 fb16 	bl	de6d4 <_ZN5spark10JSONWriter5valueEPKcj>
   da0a8:	e7a4      	b.n	d9ff4 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_BOOL;
   da0aa:	4620      	mov	r0, r4
   da0ac:	f003 ffd9 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
    if (src.isBool()) {
   da0b0:	2802      	cmp	r0, #2
        writer.value(src.toBool());
   da0b2:	4620      	mov	r0, r4
    if (src.isBool()) {
   da0b4:	d106      	bne.n	da0c4 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x13c>
        writer.value(src.toBool());
   da0b6:	f003 fffd 	bl	de0b4 <_ZNK5spark9JSONValue6toBoolEv>
   da0ba:	4601      	mov	r1, r0
   da0bc:	4628      	mov	r0, r5
   da0be:	f004 fa23 	bl	de508 <_ZN5spark10JSONWriter5valueEb>
   da0c2:	e79a      	b.n	d9ffa <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
    return type() == JSON_TYPE_NULL;
   da0c4:	f003 ffcd 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
    if (src.isNull()) {
   da0c8:	2801      	cmp	r0, #1
   da0ca:	d103      	bne.n	da0d4 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x14c>
        writer.nullValue();
   da0cc:	4628      	mov	r0, r5
   da0ce:	f004 fa89 	bl	de5e4 <_ZN5spark10JSONWriter9nullValueEv>
   da0d2:	e792      	b.n	d9ffa <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
        double d = src.toDouble();
   da0d4:	4620      	mov	r0, r4
   da0d6:	f004 f84f 	bl	de178 <_ZNK5spark9JSONValue8toDoubleEv>
   da0da:	ec57 6b10 	vmov	r6, r7, d0
        if (d == std::floor(d)) {
   da0de:	f006 fb73 	bl	e07c8 <floor>
   da0e2:	4630      	mov	r0, r6
   da0e4:	ec53 2b10 	vmov	r2, r3, d0
   da0e8:	4639      	mov	r1, r7
   da0ea:	f007 f9a1 	bl	e1430 <__aeabi_dcmpeq>
   da0ee:	b140      	cbz	r0, da102 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x17a>
            writer.value((int)d);
   da0f0:	4639      	mov	r1, r7
   da0f2:	4630      	mov	r0, r6
   da0f4:	f007 f9e4 	bl	e14c0 <__aeabi_d2iz>
   da0f8:	4601      	mov	r1, r0
   da0fa:	4628      	mov	r0, r5
   da0fc:	f004 fa1c 	bl	de538 <_ZN5spark10JSONWriter5valueEi>
   da100:	e77b      	b.n	d9ffa <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
            writer.value(d);
   da102:	ec47 6b10 	vmov	d0, r6, r7
   da106:	4628      	mov	r0, r5
   da108:	f004 fa58 	bl	de5bc <_ZN5spark10JSONWriter5valueEd>
}
   da10c:	e775      	b.n	d9ffa <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>

000da10e <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
   da10e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da110:	460c      	mov	r4, r1
    JSONCopy(JSONValue::parseCopy(src), writer);
   da112:	4601      	mov	r1, r0
   da114:	a801      	add	r0, sp, #4
   da116:	f7ff fddf 	bl	d9cd8 <_ZN5spark9JSONValue9parseCopyEPKc>
   da11a:	4621      	mov	r1, r4
   da11c:	a801      	add	r0, sp, #4
   da11e:	f7ff ff33 	bl	d9f88 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   da122:	a802      	add	r0, sp, #8
   da124:	f7fa faac 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da128:	b004      	add	sp, #16
   da12a:	bd10      	pop	{r4, pc}

000da12c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>:
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   da12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da130:	b085      	sub	sp, #20
    if (maxSize < 2 || !hasEvents) {
   da132:	2a01      	cmp	r2, #1
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   da134:	4605      	mov	r5, r0
   da136:	4688      	mov	r8, r1
   da138:	4617      	mov	r7, r2
   da13a:	9303      	str	r3, [sp, #12]
    if (maxSize < 2 || !hasEvents) {
   da13c:	d804      	bhi.n	da148 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x1c>
        return false;
   da13e:	2600      	movs	r6, #0
}
   da140:	4630      	mov	r0, r6
   da142:	b005      	add	sp, #20
   da144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (maxSize < 2 || !hasEvents) {
   da148:	7d46      	ldrb	r6, [r0, #21]
   da14a:	2e00      	cmp	r6, #0
   da14c:	d0f7      	beq.n	da13e <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
    char *buf = (char *)malloc(maxSize);
   da14e:	4610      	mov	r0, r2
   da150:	f002 ffd2 	bl	dd0f8 <malloc>
    if (!buf) {
   da154:	4604      	mov	r4, r0
   da156:	2800      	cmp	r0, #0
   da158:	d0f1      	beq.n	da13e <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
   da15a:	4628      	mov	r0, r5
   da15c:	f7ff fdca 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   da160:	6868      	ldr	r0, [r5, #4]
   da162:	2100      	movs	r1, #0
   da164:	f008 faea 	bl	e273c <open>
        if (fd != -1) {
   da168:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
        int fd = open(path, O_RDONLY);
   da16c:	4681      	mov	r9, r0
        if (fd != -1) {
   da16e:	d026      	beq.n	da1be <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x92>
            int dataSize = read(fd, buf, maxSize);
   da170:	463a      	mov	r2, r7
   da172:	4621      	mov	r1, r4
   da174:	f008 faf6 	bl	e2764 <read>
            if (dataSize > 0) {
   da178:	f1b0 0a00 	subs.w	sl, r0, #0
   da17c:	dd1d      	ble.n	da1ba <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x8e>
   da17e:	eb04 030a 	add.w	r3, r4, sl
                while(dataSize > 0 && buf[dataSize - 1] != '\n') {
   da182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   da186:	2a0a      	cmp	r2, #10
   da188:	d01b      	beq.n	da1c2 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x96>
   da18a:	f1ba 0a01 	subs.w	sl, sl, #1
   da18e:	d1f8      	bne.n	da182 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x56>
    bool bResult = false;
   da190:	4656      	mov	r6, sl
   da192:	e002      	b.n	da19a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
                    writer.endArray();
   da194:	4640      	mov	r0, r8
   da196:	f004 f97f 	bl	de498 <_ZN5spark10JSONWriter8endArrayEv>
            close(fd);
   da19a:	4648      	mov	r0, r9
   da19c:	f008 fab4 	bl	e2708 <close>
   da1a0:	6828      	ldr	r0, [r5, #0]
   da1a2:	f002 fc31 	bl	dca08 <os_mutex_recursive_unlock>
    free(buf);
   da1a6:	4620      	mov	r0, r4
   da1a8:	f002 ffae 	bl	dd108 <free>
    if (bRemoveEvents) {
   da1ac:	9b03      	ldr	r3, [sp, #12]
   da1ae:	2b00      	cmp	r3, #0
   da1b0:	d0c6      	beq.n	da140 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
        removeEvents();
   da1b2:	4628      	mov	r0, r5
   da1b4:	f7ff fe54 	bl	d9e60 <_ZN11SleepHelper12EventHistory12removeEventsEv>
   da1b8:	e7c2      	b.n	da140 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
    bool bResult = false;
   da1ba:	2600      	movs	r6, #0
   da1bc:	e7ed      	b.n	da19a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
   da1be:	2600      	movs	r6, #0
   da1c0:	e7ee      	b.n	da1a0 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x74>
                    writer.beginArray();
   da1c2:	4640      	mov	r0, r8
   da1c4:	f004 f987 	bl	de4d6 <_ZN5spark10JSONWriter10beginArrayEv>
                    char *end = &buf[dataSize];
   da1c8:	eb04 030a 	add.w	r3, r4, sl
   da1cc:	9302      	str	r3, [sp, #8]
   da1ce:	46a2      	mov	sl, r4
                    size_t bytesUsed = 2;
   da1d0:	f04f 0b02 	mov.w	fp, #2
                    while(cur < end) {
   da1d4:	9b02      	ldr	r3, [sp, #8]
   da1d6:	4553      	cmp	r3, sl
   da1d8:	d9dc      	bls.n	da194 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        char *lf = strchr(cur, '\n');
   da1da:	210a      	movs	r1, #10
   da1dc:	4650      	mov	r0, sl
   da1de:	f007 fad0 	bl	e1782 <strchr>
                        *lf = 0;
   da1e2:	f04f 0200 	mov.w	r2, #0
                        char *lf = strchr(cur, '\n');
   da1e6:	9001      	str	r0, [sp, #4]
                        *lf = 0;
   da1e8:	7002      	strb	r2, [r0, #0]
                        bytesUsed += strlen(cur) + 1;
   da1ea:	4650      	mov	r0, sl
   da1ec:	f007 fb0f 	bl	e180e <strlen>
   da1f0:	3001      	adds	r0, #1
   da1f2:	4483      	add	fp, r0
                        if (bytesUsed > maxSize) {
   da1f4:	455f      	cmp	r7, fp
   da1f6:	d3cd      	bcc.n	da194 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        SleepHelper::JSONCopy(cur, writer);                        
   da1f8:	4641      	mov	r1, r8
   da1fa:	4650      	mov	r0, sl
   da1fc:	f7ff ff87 	bl	da10e <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>
                        cur = lf + 1;
   da200:	9b01      	ldr	r3, [sp, #4]
   da202:	f103 0a01 	add.w	sl, r3, #1
                        removeOffset = (cur - buf);                        
   da206:	ebaa 0104 	sub.w	r1, sl, r4
   da20a:	61a9      	str	r1, [r5, #24]
                    while(cur < end) {
   da20c:	e7e2      	b.n	da1d4 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0xa8>
	...

000da210 <_ZN16JsonParserStaticILj622ELj50EEC1Ev>:
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   da210:	b513      	push	{r0, r1, r4, lr}
   da212:	2332      	movs	r3, #50	; 0x32
   da214:	9300      	str	r3, [sp, #0]
   da216:	f240 226e 	movw	r2, #622	; 0x26e
   da21a:	f500 7327 	add.w	r3, r0, #668	; 0x29c
   da21e:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   da222:	4604      	mov	r4, r0
   da224:	f7fc fddc 	bl	d6de0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   da228:	4b02      	ldr	r3, [pc, #8]	; (da234 <_ZN16JsonParserStaticILj622ELj50EEC1Ev+0x24>)
   da22a:	6023      	str	r3, [r4, #0]
   da22c:	4620      	mov	r0, r4
   da22e:	b002      	add	sp, #8
   da230:	bd10      	pop	{r4, pc}
   da232:	bf00      	nop
   da234:	000e4750 	.word	0x000e4750

000da238 <_ZN11SleepHelperC1Ev>:
SleepHelper::SleepHelper() : appLog("app.sleep") {
   da238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da23c:	4b83      	ldr	r3, [pc, #524]	; (da44c <_ZN11SleepHelperC1Ev+0x214>)
        SettingsFile() {};
   da23e:	4e84      	ldr	r6, [pc, #528]	; (da450 <_ZN11SleepHelperC1Ev+0x218>)
   da240:	6003      	str	r3, [r0, #0]
   da242:	4604      	mov	r4, r0
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da244:	2500      	movs	r5, #0
        SettingsFile() {};
   da246:	4b83      	ldr	r3, [pc, #524]	; (da454 <_ZN11SleepHelperC1Ev+0x21c>)
   da248:	6043      	str	r3, [r0, #4]
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da24a:	6085      	str	r5, [r0, #8]
        SettingsFile() {};
   da24c:	f204 58d4 	addw	r8, r4, #1492	; 0x5d4
   da250:	300c      	adds	r0, #12
   da252:	f7ff ffdd 	bl	da210 <_ZN16JsonParserStaticILj622ELj50EEC1Ev>
   da256:	4631      	mov	r1, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
   da258:	f8c4 55c8 	str.w	r5, [r4, #1480]	; 0x5c8
   da25c:	f8c4 55cc 	str.w	r5, [r4, #1484]	; 0x5cc
   da260:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
   da264:	4640      	mov	r0, r8
   da266:	f005 fc6a 	bl	dfb3e <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   da26a:	f504 63c3 	add.w	r3, r4, #1560	; 0x618
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   da26e:	f8c4 35f0 	str.w	r3, [r4, #1520]	; 0x5f0
   da272:	2320      	movs	r3, #32
   da274:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
   da278:	4b77      	ldr	r3, [pc, #476]	; (da458 <_ZN11SleepHelperC1Ev+0x220>)
   da27a:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   da27e:	4b77      	ldr	r3, [pc, #476]	; (da45c <_ZN11SleepHelperC1Ev+0x224>)
   da280:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   da284:	f04f 0901 	mov.w	r9, #1
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   da288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da28c:	f504 67c1 	add.w	r7, r4, #1544	; 0x608
   da290:	4631      	mov	r1, r6
   da292:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
        SettingsFile() {};
   da296:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da29a:	f8c4 55ec 	str.w	r5, [r4, #1516]	; 0x5ec
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   da29e:	f8a4 95fc 	strh.w	r9, [r4, #1532]	; 0x5fc
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   da2a2:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
   da2a6:	4638      	mov	r0, r7
   da2a8:	f005 fc49 	bl	dfb3e <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   da2ac:	4b6c      	ldr	r3, [pc, #432]	; (da460 <_ZN11SleepHelperC1Ev+0x228>)
   da2ae:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
   da2b2:	f8c4 5638 	str.w	r5, [r4, #1592]	; 0x638
   da2b6:	f8c4 563c 	str.w	r5, [r4, #1596]	; 0x63c
   da2ba:	f8c4 5640 	str.w	r5, [r4, #1600]	; 0x640
   da2be:	f8c4 5644 	str.w	r5, [r4, #1604]	; 0x644
   da2c2:	f8c4 5648 	str.w	r5, [r4, #1608]	; 0x648
   da2c6:	f8c4 564c 	str.w	r5, [r4, #1612]	; 0x64c
   da2ca:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
   da2ce:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
   da2d2:	f8c4 5658 	str.w	r5, [r4, #1624]	; 0x658
   da2d6:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   da2da:	f7ff fc7b 	bl	d9bd4 <_ZN8particle24SystemSleepConfigurationC1Ev>
   da2de:	4961      	ldr	r1, [pc, #388]	; (da464 <_ZN11SleepHelperC1Ev+0x22c>)
   da2e0:	f8c4 5698 	str.w	r5, [r4, #1688]	; 0x698
   da2e4:	f8c4 569c 	str.w	r5, [r4, #1692]	; 0x69c
   da2e8:	f8c4 56a0 	str.w	r5, [r4, #1696]	; 0x6a0
   da2ec:	f8c4 56a4 	str.w	r5, [r4, #1700]	; 0x6a4
   da2f0:	f8c4 56a8 	str.w	r5, [r4, #1704]	; 0x6a8
   da2f4:	f8c4 56ac 	str.w	r5, [r4, #1708]	; 0x6ac
   da2f8:	f8c4 56b0 	str.w	r5, [r4, #1712]	; 0x6b0
   da2fc:	f8c4 56b4 	str.w	r5, [r4, #1716]	; 0x6b4
   da300:	f8c4 56b8 	str.w	r5, [r4, #1720]	; 0x6b8
   da304:	f8c4 56bc 	str.w	r5, [r4, #1724]	; 0x6bc
   da308:	f8c4 56c0 	str.w	r5, [r4, #1728]	; 0x6c0
   da30c:	f8c4 56c4 	str.w	r5, [r4, #1732]	; 0x6c4
   da310:	f8c4 56c8 	str.w	r5, [r4, #1736]	; 0x6c8
   da314:	f8c4 56cc 	str.w	r5, [r4, #1740]	; 0x6cc
   da318:	f8c4 56d0 	str.w	r5, [r4, #1744]	; 0x6d0
   da31c:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
   da320:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
   da324:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
   da328:	f8c4 56e0 	str.w	r5, [r4, #1760]	; 0x6e0
   da32c:	f8c4 56e4 	str.w	r5, [r4, #1764]	; 0x6e4
   da330:	f8c4 56e8 	str.w	r5, [r4, #1768]	; 0x6e8
   da334:	f8c4 56ec 	str.w	r5, [r4, #1772]	; 0x6ec
   da338:	f8c4 56f0 	str.w	r5, [r4, #1776]	; 0x6f0
   da33c:	f8c4 56f4 	str.w	r5, [r4, #1780]	; 0x6f4
   da340:	f8c4 56f8 	str.w	r5, [r4, #1784]	; 0x6f8
   da344:	f8c4 56fc 	str.w	r5, [r4, #1788]	; 0x6fc
   da348:	f8c4 5700 	str.w	r5, [r4, #1792]	; 0x700
   da34c:	f8c4 5704 	str.w	r5, [r4, #1796]	; 0x704
   da350:	f8c4 5708 	str.w	r5, [r4, #1800]	; 0x708
   da354:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
   da358:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
   da35c:	f8c4 5714 	str.w	r5, [r4, #1812]	; 0x714
   da360:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   da364:	f8c4 5718 	str.w	r5, [r4, #1816]	; 0x718
   da368:	f8c4 571c 	str.w	r5, [r4, #1820]	; 0x71c
   da36c:	f8c4 5720 	str.w	r5, [r4, #1824]	; 0x720
   da370:	f8c4 5724 	str.w	r5, [r4, #1828]	; 0x724
   da374:	f005 fbe3 	bl	dfb3e <_ZN6StringC1EPKc>
        EventHistory() {};
   da378:	4631      	mov	r1, r6
   da37a:	f8c4 5738 	str.w	r5, [r4, #1848]	; 0x738
   da37e:	f8c4 573c 	str.w	r5, [r4, #1852]	; 0x73c
   da382:	f8c4 5740 	str.w	r5, [r4, #1856]	; 0x740
   da386:	f8c4 5744 	str.w	r5, [r4, #1860]	; 0x744
   da38a:	f8c4 5748 	str.w	r5, [r4, #1864]	; 0x748
   da38e:	f8c4 574c 	str.w	r5, [r4, #1868]	; 0x74c
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da392:	f8c4 5750 	str.w	r5, [r4, #1872]	; 0x750
        EventHistory() {};
   da396:	f204 7054 	addw	r0, r4, #1876	; 0x754
   da39a:	f005 fbd0 	bl	dfb3e <_ZN6StringC1EPKc>
        EventCombiner() {};
   da39e:	4631      	mov	r1, r6
        EventHistory() {};
   da3a0:	f8a4 9764 	strh.w	r9, [r4, #1892]	; 0x764
   da3a4:	f8c4 5768 	str.w	r5, [r4, #1896]	; 0x768
        EventCombiner() {};
   da3a8:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   da3ac:	f005 fbc7 	bl	dfb3e <_ZN6StringC1EPKc>
   da3b0:	f504 63f2 	add.w	r3, r4, #1936	; 0x790
   da3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da3b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   da3bc:	f8c4 577c 	str.w	r5, [r4, #1916]	; 0x77c
   da3c0:	f8c4 5780 	str.w	r5, [r4, #1920]	; 0x780
   da3c4:	f8c4 5784 	str.w	r5, [r4, #1924]	; 0x784
   da3c8:	f8c4 5788 	str.w	r5, [r4, #1928]	; 0x788
   da3cc:	e9c3 0100 	strd	r0, r1, [r3]
   da3d0:	f504 63f3 	add.w	r3, r4, #1944	; 0x798
   da3d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   da3d8:	2100      	movs	r1, #0
   da3da:	e9c3 0100 	strd	r0, r1, [r3]
   da3de:	4b22      	ldr	r3, [pc, #136]	; (da468 <_ZN11SleepHelperC1Ev+0x230>)
   da3e0:	f8c4 37a0 	str.w	r3, [r4, #1952]	; 0x7a0
   da3e4:	f242 7310 	movw	r3, #10000	; 0x2710
   da3e8:	f8c4 37a4 	str.w	r3, [r4, #1956]	; 0x7a4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da3ec:	4b1f      	ldr	r3, [pc, #124]	; (da46c <_ZN11SleepHelperC1Ev+0x234>)
   da3ee:	f8c4 37a8 	str.w	r3, [r4, #1960]	; 0x7a8
	    _M_invoker = &_My_handler::_M_invoke;
   da3f2:	4b1f      	ldr	r3, [pc, #124]	; (da470 <_ZN11SleepHelperC1Ev+0x238>)
   da3f4:	f8c4 37b4 	str.w	r3, [r4, #1972]	; 0x7b4
	    _M_manager = &_My_handler::_M_manager;
   da3f8:	4b1e      	ldr	r3, [pc, #120]	; (da474 <_ZN11SleepHelperC1Ev+0x23c>)
   da3fa:	f8c4 37b0 	str.w	r3, [r4, #1968]	; 0x7b0
   da3fe:	4b1e      	ldr	r3, [pc, #120]	; (da478 <_ZN11SleepHelperC1Ev+0x240>)
   da400:	f8c4 37e0 	str.w	r3, [r4, #2016]	; 0x7e0
   da404:	4b1d      	ldr	r3, [pc, #116]	; (da47c <_ZN11SleepHelperC1Ev+0x244>)
   da406:	f8c4 37e4 	str.w	r3, [r4, #2020]	; 0x7e4
            this->path = path; 
   da40a:	491d      	ldr	r1, [pc, #116]	; (da480 <_ZN11SleepHelperC1Ev+0x248>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da40c:	f8c4 57ac 	str.w	r5, [r4, #1964]	; 0x7ac
   da410:	f8c4 57b8 	str.w	r5, [r4, #1976]	; 0x7b8
   da414:	f8c4 57bc 	str.w	r5, [r4, #1980]	; 0x7bc
   da418:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
   da41c:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
   da420:	f8c4 57c8 	str.w	r5, [r4, #1992]	; 0x7c8
   da424:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
   da428:	f8a4 57d0 	strh.w	r5, [r4, #2000]	; 0x7d0
   da42c:	f8c4 57d4 	str.w	r5, [r4, #2004]	; 0x7d4
   da430:	f8c4 57d8 	str.w	r5, [r4, #2008]	; 0x7d8
   da434:	f8c4 57dc 	str.w	r5, [r4, #2012]	; 0x7dc
   da438:	4640      	mov	r0, r8
   da43a:	f005 fbde 	bl	dfbfa <_ZN6StringaSEPKc>
            this->path = path; 
   da43e:	4911      	ldr	r1, [pc, #68]	; (da484 <_ZN11SleepHelperC1Ev+0x24c>)
   da440:	4638      	mov	r0, r7
   da442:	f005 fbda 	bl	dfbfa <_ZN6StringaSEPKc>
}
   da446:	4620      	mov	r0, r4
   da448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da44c:	000e479c 	.word	0x000e479c
   da450:	000e4537 	.word	0x000e4537
   da454:	000e4760 	.word	0x000e4760
   da458:	d87cb6ce 	.word	0xd87cb6ce
   da45c:	000e47cc 	.word	0x000e47cc
   da460:	000e4770 	.word	0x000e4770
   da464:	000e44dd 	.word	0x000e44dd
   da468:	000be6e0 	.word	0x000be6e0
   da46c:	000daa21 	.word	0x000daa21
   da470:	000d9b01 	.word	0x000d9b01
   da474:	000d993b 	.word	0x000d993b
   da478:	2003e51c 	.word	0x2003e51c
   da47c:	000e44e9 	.word	0x000e44e9
   da480:	000e44f3 	.word	0x000e44f3
   da484:	000e450b 	.word	0x000e450b

000da488 <_ZN11SleepHelper8instanceEv>:
SleepHelper &SleepHelper::instance() {
   da488:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   da48a:	4c07      	ldr	r4, [pc, #28]	; (da4a8 <_ZN11SleepHelper8instanceEv+0x20>)
   da48c:	6823      	ldr	r3, [r4, #0]
   da48e:	b943      	cbnz	r3, da4a2 <_ZN11SleepHelper8instanceEv+0x1a>
        _instance = new SleepHelper();
   da490:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
   da494:	f7f9 fdff 	bl	d4096 <_Znwj>
   da498:	4605      	mov	r5, r0
   da49a:	b108      	cbz	r0, da4a0 <_ZN11SleepHelper8instanceEv+0x18>
   da49c:	f7ff fecc 	bl	da238 <_ZN11SleepHelperC1Ev>
   da4a0:	6025      	str	r5, [r4, #0]
}
   da4a2:	6820      	ldr	r0, [r4, #0]
   da4a4:	bd38      	pop	{r3, r4, r5, pc}
   da4a6:	bf00      	nop
   da4a8:	2003e514 	.word	0x2003e514

000da4ac <_ZN11SleepHelper12EventHistory8addEventEPKc>:
void SleepHelper::EventHistory::addEvent(const char *jsonObj) {
   da4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da4ae:	460e      	mov	r6, r1
   da4b0:	4605      	mov	r5, r0
    if (SleepHelper::instance().logEnableEnabled(SleepHelper::logEnabledHistoryData)) {
   da4b2:	f7ff ffe9 	bl	da488 <_ZN11SleepHelper8instanceEv>
        return (logEnabled & flag) != 0;
   da4b6:	f8d0 179c 	ldr.w	r1, [r0, #1948]	; 0x79c
   da4ba:	2400      	movs	r4, #0
   da4bc:	4622      	mov	r2, r4
   da4be:	f401 7300 	and.w	r3, r1, #512	; 0x200
   da4c2:	4313      	orrs	r3, r2
   da4c4:	d01e      	beq.n	da504 <_ZN11SleepHelper12EventHistory8addEventEPKc+0x58>
        SleepHelper::instance().appLog.trace("EventHistory::addEvent");
   da4c6:	f7ff ffdf 	bl	da488 <_ZN11SleepHelper8instanceEv>
   da4ca:	4921      	ldr	r1, [pc, #132]	; (da550 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa4>)
   da4cc:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   da4d0:	f7fb fd66 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, jsonObj, strlen(jsonObj));
   da4d4:	f7ff ffd8 	bl	da488 <_ZN11SleepHelper8instanceEv>
   da4d8:	4607      	mov	r7, r0
   da4da:	4630      	mov	r0, r6
   da4dc:	f007 f997 	bl	e180e <strlen>
        log_write(level, name_, data, size, nullptr);
   da4e0:	9400      	str	r4, [sp, #0]
   da4e2:	4603      	mov	r3, r0
   da4e4:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
   da4e8:	4632      	mov	r2, r6
   da4ea:	2001      	movs	r0, #1
   da4ec:	f002 fccc 	bl	dce88 <log_write>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, "\r\n", 2);
   da4f0:	f7ff ffca 	bl	da488 <_ZN11SleepHelper8instanceEv>
   da4f4:	9400      	str	r4, [sp, #0]
   da4f6:	f8d0 17e4 	ldr.w	r1, [r0, #2020]	; 0x7e4
   da4fa:	4a16      	ldr	r2, [pc, #88]	; (da554 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa8>)
   da4fc:	2302      	movs	r3, #2
   da4fe:	2001      	movs	r0, #1
   da500:	f002 fcc2 	bl	dce88 <log_write>
   da504:	4628      	mov	r0, r5
   da506:	f7ff fbf5 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   da50a:	6868      	ldr	r0, [r5, #4]
   da50c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   da510:	f240 210a 	movw	r1, #522	; 0x20a
   da514:	f008 f912 	bl	e273c <open>
        if (fd != -1) {
   da518:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   da51a:	4604      	mov	r4, r0
        if (fd != -1) {
   da51c:	d011      	beq.n	da542 <_ZN11SleepHelper12EventHistory8addEventEPKc+0x96>
            write(fd, jsonObj, strlen(jsonObj));
   da51e:	4630      	mov	r0, r6
   da520:	f007 f975 	bl	e180e <strlen>
   da524:	4631      	mov	r1, r6
   da526:	4602      	mov	r2, r0
   da528:	4620      	mov	r0, r4
   da52a:	f008 f92d 	bl	e2788 <write>
            write(fd, "\n", 1);
   da52e:	490a      	ldr	r1, [pc, #40]	; (da558 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xac>)
   da530:	2201      	movs	r2, #1
   da532:	4620      	mov	r0, r4
   da534:	f008 f928 	bl	e2788 <write>
            close(fd);
   da538:	4620      	mov	r0, r4
   da53a:	f008 f8e5 	bl	e2708 <close>
            hasEvents = true;
   da53e:	2301      	movs	r3, #1
   da540:	756b      	strb	r3, [r5, #21]
            os_mutex_recursive_unlock(handle_); 
   da542:	6828      	ldr	r0, [r5, #0]
}
   da544:	b003      	add	sp, #12
   da546:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   da54a:	f002 ba5d 	b.w	dca08 <os_mutex_recursive_unlock>
   da54e:	bf00      	nop
   da550:	000e451e 	.word	0x000e451e
   da554:	000e4535 	.word	0x000e4535
   da558:	000e4536 	.word	0x000e4536

000da55c <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>:
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   da55c:	b570      	push	{r4, r5, r6, lr}
   da55e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
    memset(buf, 0, sizeof(buf));
   da562:	ae06      	add	r6, sp, #24
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   da564:	460c      	mov	r4, r1
    memset(buf, 0, sizeof(buf));
   da566:	f240 226e 	movw	r2, #622	; 0x26e
   da56a:	2100      	movs	r1, #0
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   da56c:	4605      	mov	r5, r0
    memset(buf, 0, sizeof(buf));
   da56e:	4630      	mov	r0, r6
   da570:	f007 f8c2 	bl	e16f8 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   da574:	4a0f      	ldr	r2, [pc, #60]	; (da5b4 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x58>)
   da576:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da578:	2300      	movs	r3, #0
        n_(0) {
   da57a:	f240 226d 	movw	r2, #621	; 0x26d
    writer.beginObject();
   da57e:	a801      	add	r0, sp, #4
   da580:	e9cd 2304 	strd	r2, r3, [sp, #16]
        state_(BEGIN) {
   da584:	f88d 3008 	strb.w	r3, [sp, #8]
        n_(0) {
   da588:	9603      	str	r6, [sp, #12]
   da58a:	f003 ffb0 	bl	de4ee <_ZN5spark10JSONWriter11beginObjectEv>
      if (_M_empty())
   da58e:	68a3      	ldr	r3, [r4, #8]
   da590:	b90b      	cbnz	r3, da596 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x3a>
	__throw_bad_function_call();
   da592:	f006 f915 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da596:	68e3      	ldr	r3, [r4, #12]
   da598:	a901      	add	r1, sp, #4
   da59a:	4620      	mov	r0, r4
   da59c:	4798      	blx	r3
    writer.endObject();
   da59e:	a801      	add	r0, sp, #4
   da5a0:	f003 ff83 	bl	de4aa <_ZN5spark10JSONWriter9endObjectEv>
    addEvent(buf);
   da5a4:	4631      	mov	r1, r6
   da5a6:	4628      	mov	r0, r5
   da5a8:	f7ff ff80 	bl	da4ac <_ZN11SleepHelper12EventHistory8addEventEPKc>
}
   da5ac:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   da5b0:	bd70      	pop	{r4, r5, r6, pc}
   da5b2:	bf00      	nop
   da5b4:	000e4930 	.word	0x000e4930

000da5b8 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>:
        T getValue(size_t offset) const {
   da5b8:	b538      	push	{r3, r4, r5, lr}
   da5ba:	4604      	mov	r4, r0
   da5bc:	3004      	adds	r0, #4
   da5be:	460d      	mov	r5, r1
   da5c0:	f7ff fb98 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   da5c4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   da5c6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   da5c8:	3b04      	subs	r3, #4
   da5ca:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   da5cc:	bf26      	itte	cs
   da5ce:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   da5d0:	595d      	ldrcs	r5, [r3, r5]
            T result = 0;
   da5d2:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   da5d4:	f002 fa18 	bl	dca08 <os_mutex_recursive_unlock>
        }
   da5d8:	4628      	mov	r0, r5
   da5da:	bd38      	pop	{r3, r4, r5, pc}

000da5dc <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>:
        void setValue(size_t offset, T value)  {
   da5dc:	b570      	push	{r4, r5, r6, lr}
   da5de:	4604      	mov	r4, r0
   da5e0:	3004      	adds	r0, #4
   da5e2:	460d      	mov	r5, r1
   da5e4:	4616      	mov	r6, r2
   da5e6:	f7ff fb85 	bl	d9cf4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   da5ea:	68e3      	ldr	r3, [r4, #12]
   da5ec:	3b04      	subs	r3, #4
   da5ee:	42ab      	cmp	r3, r5
   da5f0:	d308      	bcc.n	da604 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   da5f2:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   da5f4:	595a      	ldr	r2, [r3, r5]
   da5f6:	42b2      	cmp	r2, r6
   da5f8:	d004      	beq.n	da604 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                        *(T *)p = value;
   da5fa:	515e      	str	r6, [r3, r5]
                        saveOrDefer();
   da5fc:	6823      	ldr	r3, [r4, #0]
   da5fe:	4620      	mov	r0, r4
   da600:	68db      	ldr	r3, [r3, #12]
   da602:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   da604:	6860      	ldr	r0, [r4, #4]
        }
   da606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   da60a:	f002 b9fd 	b.w	dca08 <os_mutex_recursive_unlock>

000da60e <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   da60e:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   da610:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   da614:	4604      	mov	r4, r0
   da616:	42ae      	cmp	r6, r5
   da618:	d004      	beq.n	da624 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   da61a:	4628      	mov	r0, r5
   da61c:	f7fa fa30 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   da620:	3510      	adds	r5, #16
   da622:	e7f8      	b.n	da616 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   da624:	6820      	ldr	r0, [r4, #0]
	if (__p)
   da626:	b108      	cbz	r0, da62c <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x1e>
   da628:	f7f9 fd39 	bl	d409e <_ZdlPv>
      }
   da62c:	4620      	mov	r0, r4
   da62e:	bd70      	pop	{r4, r5, r6, pc}

000da630 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   da630:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da632:	2300      	movs	r3, #0
   da634:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da636:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da638:	4604      	mov	r4, r0
   da63a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da63c:	b12b      	cbz	r3, da64a <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da63e:	2202      	movs	r2, #2
   da640:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da642:	68eb      	ldr	r3, [r5, #12]
   da644:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da646:	68ab      	ldr	r3, [r5, #8]
   da648:	60a3      	str	r3, [r4, #8]
    }
   da64a:	4620      	mov	r0, r4
   da64c:	bd38      	pop	{r3, r4, r5, pc}

000da64e <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   da64e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   da650:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da652:	4604      	mov	r4, r0
	  switch (__op)
   da654:	d008      	beq.n	da668 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   da656:	2a03      	cmp	r2, #3
   da658:	d012      	beq.n	da680 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
   da65a:	2a01      	cmp	r2, #1
   da65c:	d101      	bne.n	da662 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   da65e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   da660:	6003      	str	r3, [r0, #0]
	}
   da662:	2000      	movs	r0, #0
   da664:	b003      	add	sp, #12
   da666:	bd30      	pop	{r4, r5, pc}
	  __dest._M_access<_Functor*>() =
   da668:	6809      	ldr	r1, [r1, #0]
   da66a:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   da66c:	2010      	movs	r0, #16
   da66e:	f7f9 fd12 	bl	d4096 <_Znwj>
   da672:	4605      	mov	r5, r0
   da674:	b110      	cbz	r0, da67c <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   da676:	9901      	ldr	r1, [sp, #4]
   da678:	f7ff ffda 	bl	da630 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   da67c:	6025      	str	r5, [r4, #0]
	}
   da67e:	e7f0      	b.n	da662 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   da680:	6804      	ldr	r4, [r0, #0]
   da682:	2c00      	cmp	r4, #0
   da684:	d0ed      	beq.n	da662 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   da686:	4620      	mov	r0, r4
   da688:	f7fa f9fa 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   da68c:	2110      	movs	r1, #16
   da68e:	4620      	mov	r0, r4
   da690:	f006 f856 	bl	e0740 <_ZdlPvj>
   da694:	e7e5      	b.n	da662 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000da696 <_ZNSt8functionIFbvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   da696:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da698:	2300      	movs	r3, #0
   da69a:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da69c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da69e:	4604      	mov	r4, r0
   da6a0:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da6a2:	b12b      	cbz	r3, da6b0 <_ZNSt8functionIFbvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da6a4:	2202      	movs	r2, #2
   da6a6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da6a8:	68eb      	ldr	r3, [r5, #12]
   da6aa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da6ac:	68ab      	ldr	r3, [r5, #8]
   da6ae:	60a3      	str	r3, [r4, #8]
    }
   da6b0:	4620      	mov	r0, r4
   da6b2:	bd38      	pop	{r3, r4, r5, pc}

000da6b4 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
   da6b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da6b6:	2300      	movs	r3, #0
   da6b8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da6ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da6bc:	4604      	mov	r4, r0
   da6be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da6c0:	b12b      	cbz	r3, da6ce <_ZNSt8functionIFbRiS0_EEC1ERKS2_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da6c2:	2202      	movs	r2, #2
   da6c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da6c6:	68eb      	ldr	r3, [r5, #12]
   da6c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da6ca:	68ab      	ldr	r3, [r5, #8]
   da6cc:	60a3      	str	r3, [r4, #8]
    }
   da6ce:	4620      	mov	r0, r4
   da6d0:	bd38      	pop	{r3, r4, r5, pc}

000da6d2 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>:
    function<_Res(_ArgTypes...)>::
   da6d2:	b510      	push	{r4, lr}
      if (_M_empty())
   da6d4:	6884      	ldr	r4, [r0, #8]
   da6d6:	b90c      	cbnz	r4, da6dc <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_+0xa>
	__throw_bad_function_call();
   da6d8:	f006 f872 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
    }
   da6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da6e0:	68c3      	ldr	r3, [r0, #12]
   da6e2:	4718      	bx	r3

000da6e4 <_ZNSt17_Function_handlerIFbRN5spark10JSONWriterERiEZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvS2_S3_EEEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da6e4:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   da6e6:	6804      	ldr	r4, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da6e8:	460d      	mov	r5, r1
                const char *name = eventsEnableName(flag);
   da6ea:	e9d4 0100 	ldrd	r0, r1, [r4]
   da6ee:	4616      	mov	r6, r2
   da6f0:	f7ff fb7a 	bl	d9de8 <_ZN11SleepHelper16eventsEnableNameEy>
   da6f4:	4601      	mov	r1, r0
                writer.name(name);
   da6f6:	4628      	mov	r0, r5
   da6f8:	f7fa f9cb 	bl	d4a92 <_ZN5spark10JSONWriter4nameEPKc>
                priority = eventsEnablePriority(flag);
   da6fc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   da700:	f7ff fb58 	bl	d9db4 <_ZN11SleepHelper20eventsEnablePriorityEy>
                fn(writer, priority);
   da704:	4632      	mov	r2, r6
                priority = eventsEnablePriority(flag);
   da706:	6030      	str	r0, [r6, #0]
                fn(writer, priority);
   da708:	4629      	mov	r1, r5
   da70a:	4620      	mov	r0, r4
   da70c:	f7ff ffe1 	bl	da6d2 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
      }
   da710:	2001      	movs	r0, #1
   da712:	bd70      	pop	{r4, r5, r6, pc}

000da714 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   da714:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da716:	2300      	movs	r3, #0
   da718:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da71a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da71c:	4604      	mov	r4, r0
   da71e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da720:	b12b      	cbz	r3, da72e <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da722:	2202      	movs	r2, #2
   da724:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da726:	68eb      	ldr	r3, [r5, #12]
   da728:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da72a:	68ab      	ldr	r3, [r5, #8]
   da72c:	60a3      	str	r3, [r4, #8]
    }
   da72e:	4620      	mov	r0, r4
   da730:	bd38      	pop	{r3, r4, r5, pc}

000da732 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   da732:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   da734:	b570      	push	{r4, r5, r6, lr}
   da736:	4604      	mov	r4, r0
	  switch (__op)
   da738:	d007      	beq.n	da74a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   da73a:	2a03      	cmp	r2, #3
   da73c:	d014      	beq.n	da768 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x36>
   da73e:	2a01      	cmp	r2, #1
   da740:	d101      	bne.n	da746 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   da742:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   da744:	6003      	str	r3, [r0, #0]
	}
   da746:	2000      	movs	r0, #0
   da748:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   da74a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   da74c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   da74e:	f7f9 fca2 	bl	d4096 <_Znwj>
   da752:	4605      	mov	r5, r0
   da754:	b130      	cbz	r0, da764 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   da756:	4631      	mov	r1, r6
   da758:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   da75c:	e8e0 2302 	strd	r2, r3, [r0], #8
   da760:	f7ff ffd8 	bl	da714 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   da764:	6025      	str	r5, [r4, #0]
	}
   da766:	e7ee      	b.n	da746 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   da768:	6804      	ldr	r4, [r0, #0]
   da76a:	2c00      	cmp	r4, #0
   da76c:	d0eb      	beq.n	da746 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   da76e:	f104 0008 	add.w	r0, r4, #8
   da772:	f7fa f985 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   da776:	2118      	movs	r1, #24
   da778:	4620      	mov	r0, r4
   da77a:	f005 ffe1 	bl	e0740 <_ZdlPvj>
   da77e:	e7e2      	b.n	da746 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>

000da780 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   da780:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   da782:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   da786:	4604      	mov	r4, r0
   da788:	42ae      	cmp	r6, r5
   da78a:	d004      	beq.n	da796 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   da78c:	4628      	mov	r0, r5
   da78e:	f7fa f977 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   da792:	3510      	adds	r5, #16
   da794:	e7f8      	b.n	da788 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   da796:	6820      	ldr	r0, [r4, #0]
	if (__p)
   da798:	b108      	cbz	r0, da79e <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x1e>
   da79a:	f7f9 fc80 	bl	d409e <_ZdlPv>
      }
   da79e:	4620      	mov	r0, r4
   da7a0:	bd70      	pop	{r4, r5, r6, pc}

000da7a2 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>:
        void forEach(Types... args) {
   da7a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
      : _M_current(__i) { }
   da7a4:	6804      	ldr	r4, [r0, #0]
   da7a6:	4605      	mov	r5, r0
   da7a8:	460e      	mov	r6, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   da7aa:	686b      	ldr	r3, [r5, #4]
   da7ac:	429c      	cmp	r4, r3
   da7ae:	d00c      	beq.n	da7ca <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x28>
   da7b0:	f88d 6007 	strb.w	r6, [sp, #7]
      if (_M_empty())
   da7b4:	68a3      	ldr	r3, [r4, #8]
   da7b6:	b90b      	cbnz	r3, da7bc <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x1a>
	__throw_bad_function_call();
   da7b8:	f006 f802 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da7bc:	68e3      	ldr	r3, [r4, #12]
   da7be:	4620      	mov	r0, r4
   da7c0:	f10d 0107 	add.w	r1, sp, #7
   da7c4:	4798      	blx	r3
	++_M_current;
   da7c6:	3410      	adds	r4, #16
	return *this;
   da7c8:	e7ef      	b.n	da7aa <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x8>
        }
   da7ca:	b002      	add	sp, #8
   da7cc:	bd70      	pop	{r4, r5, r6, pc}

000da7ce <_ZN11SleepHelper18systemEventHandlerEyi>:
    switch(event) {
   da7ce:	2b00      	cmp	r3, #0
   da7d0:	bf08      	it	eq
   da7d2:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
void SleepHelper::systemEventHandler(system_event_t event, int param) {
   da7d6:	b538      	push	{r3, r4, r5, lr}
    switch(event) {
   da7d8:	d005      	beq.n	da7e6 <_ZN11SleepHelper18systemEventHandlerEyi+0x18>
   da7da:	2b00      	cmp	r3, #0
   da7dc:	bf08      	it	eq
   da7de:	f5b2 2f80 	cmpeq.w	r2, #262144	; 0x40000
   da7e2:	d006      	beq.n	da7f2 <_ZN11SleepHelper18systemEventHandlerEyi+0x24>
}
   da7e4:	bd38      	pop	{r3, r4, r5, pc}
            sleepOrResetFunctions.forEach(true);
   da7e6:	2101      	movs	r1, #1
   da7e8:	f500 60df 	add.w	r0, r0, #1784	; 0x6f8
   da7ec:	f7ff ffd9 	bl	da7a2 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
            break;
   da7f0:	e7f8      	b.n	da7e4 <_ZN11SleepHelper18systemEventHandlerEyi+0x16>
            outOfMemory = true;
   da7f2:	2301      	movs	r3, #1
   da7f4:	f880 37d0 	strb.w	r3, [r0, #2000]	; 0x7d0
}
   da7f8:	e7f4      	b.n	da7e4 <_ZN11SleepHelper18systemEventHandlerEyi+0x16>

000da7fa <_ZN11SleepHelper24systemEventHandlerStaticEyi>:
void SleepHelper::systemEventHandlerStatic(system_event_t event, int param) {
   da7fa:	b530      	push	{r4, r5, lr}
   da7fc:	b085      	sub	sp, #20
   da7fe:	4615      	mov	r5, r2
   da800:	4604      	mov	r4, r0
   da802:	9103      	str	r1, [sp, #12]
    SleepHelper::instance().systemEventHandler(event, param);
   da804:	f7ff fe40 	bl	da488 <_ZN11SleepHelper8instanceEv>
   da808:	9b03      	ldr	r3, [sp, #12]
   da80a:	9500      	str	r5, [sp, #0]
   da80c:	4622      	mov	r2, r4
   da80e:	f7ff ffde 	bl	da7ce <_ZN11SleepHelper18systemEventHandlerEyi>
}
   da812:	b005      	add	sp, #20
   da814:	bd30      	pop	{r4, r5, pc}

000da816 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>:
        bool whileAnyTrue(Types... args) {
   da816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da81a:	6805      	ldr	r5, [r0, #0]
   da81c:	68c4      	ldr	r4, [r0, #12]
   da81e:	4606      	mov	r6, r0
            bool finalRes = false;
   da820:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   da822:	f06f 0801 	mvn.w	r8, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   da826:	6933      	ldr	r3, [r6, #16]
   da828:	429c      	cmp	r4, r3
   da82a:	d012      	beq.n	da852 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x3c>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   da82c:	6823      	ldr	r3, [r4, #0]
   da82e:	3302      	adds	r3, #2
   da830:	d00a      	beq.n	da848 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
      if (_M_empty())
   da832:	68ab      	ldr	r3, [r5, #8]
   da834:	b90b      	cbnz	r3, da83a <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x24>
	__throw_bad_function_call();
   da836:	f005 ffc3 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da83a:	68eb      	ldr	r3, [r5, #12]
   da83c:	4621      	mov	r1, r4
   da83e:	4628      	mov	r0, r5
   da840:	4798      	blx	r3
                    if (res) {
   da842:	b920      	cbnz	r0, da84e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x38>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   da844:	f8c4 8000 	str.w	r8, [r4]
      operator++() _GLIBCXX_NOEXCEPT
   da848:	3510      	adds	r5, #16
   da84a:	3408      	adds	r4, #8
	return *this;
   da84c:	e7eb      	b.n	da826 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x10>
                        finalRes = true;
   da84e:	4607      	mov	r7, r0
   da850:	e7fa      	b.n	da848 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
        }
   da852:	4638      	mov	r0, r7
   da854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da858 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>:
        bool whileAnyFalse(bool defaultResult, Types... args) {
   da858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da85a:	6804      	ldr	r4, [r0, #0]
   da85c:	4606      	mov	r6, r0
   da85e:	4617      	mov	r7, r2
            bool finalRes = defaultResult;
   da860:	460d      	mov	r5, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   da862:	6873      	ldr	r3, [r6, #4]
   da864:	42a3      	cmp	r3, r4
   da866:	d00d      	beq.n	da884 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x2c>
   da868:	9701      	str	r7, [sp, #4]
      if (_M_empty())
   da86a:	68a3      	ldr	r3, [r4, #8]
   da86c:	b90b      	cbnz	r3, da872 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x1a>
	__throw_bad_function_call();
   da86e:	f005 ffa7 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da872:	68e3      	ldr	r3, [r4, #12]
   da874:	4620      	mov	r0, r4
   da876:	a901      	add	r1, sp, #4
   da878:	4798      	blx	r3
                    finalRes = res;
   da87a:	2800      	cmp	r0, #0
   da87c:	bf08      	it	eq
   da87e:	2500      	moveq	r5, #0
      operator++() _GLIBCXX_NOEXCEPT
   da880:	3410      	adds	r4, #16
	return *this;
   da882:	e7ee      	b.n	da862 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0xa>
        }
   da884:	4628      	mov	r0, r5
   da886:	b003      	add	sp, #12
   da888:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da88a <_ZNKSt8functionIFbvEEclEv>:
    function<_Res(_ArgTypes...)>::
   da88a:	b510      	push	{r4, lr}
      if (_M_empty())
   da88c:	6882      	ldr	r2, [r0, #8]
   da88e:	b90a      	cbnz	r2, da894 <_ZNKSt8functionIFbvEEclEv+0xa>
	__throw_bad_function_call();
   da890:	f005 ff96 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
    }
   da894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da898:	68c3      	ldr	r3, [r0, #12]
   da89a:	4718      	bx	r3

000da89c <_ZNKSt8functionIFbiEEclEi>:
    function<_Res(_ArgTypes...)>::
   da89c:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   da89e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da8a0:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   da8a2:	b90a      	cbnz	r2, da8a8 <_ZNKSt8functionIFbiEEclEi+0xc>
	__throw_bad_function_call();
   da8a4:	f005 ff8c 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da8a8:	68c3      	ldr	r3, [r0, #12]
   da8aa:	a901      	add	r1, sp, #4
   da8ac:	4798      	blx	r3
    }
   da8ae:	b003      	add	sp, #12
   da8b0:	f85d fb04 	ldr.w	pc, [sp], #4

000da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   da8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da8b6:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   da8ba:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   da8bc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   da8be:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   da8c0:	b90a      	cbnz	r2, da8c6 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   da8c2:	07d9      	lsls	r1, r3, #31
   da8c4:	d505      	bpl.n	da8d2 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da8c6:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   da8ca:	4b0b      	ldr	r3, [pc, #44]	; (da8f8 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   da8cc:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   da8ce:	4b0b      	ldr	r3, [pc, #44]	; (da8fc <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   da8d0:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   da8d2:	4621      	mov	r1, r4
   da8d4:	4668      	mov	r0, sp
   da8d6:	f7fa fa8c 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da8da:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   da8dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da8de:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da8e0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   da8e2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   da8e4:	4668      	mov	r0, sp
   da8e6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da8e8:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da8ea:	9203      	str	r2, [sp, #12]
   da8ec:	f7fa f8c8 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	}
   da8f0:	4620      	mov	r0, r4
   da8f2:	b004      	add	sp, #16
   da8f4:	bd10      	pop	{r4, pc}
   da8f6:	bf00      	nop
   da8f8:	000d9b01 	.word	0x000d9b01
   da8fc:	000d993b 	.word	0x000d993b

000da900 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv>:
void SleepHelper::stateHandlerTimeValidWait() {
   da900:	b513      	push	{r0, r1, r4, lr}
   da902:	4604      	mov	r4, r0
    if (Time.isValid()) {
   da904:	f005 fc18 	bl	e0138 <_ZN9TimeClass7isValidEv>
   da908:	b140      	cbz	r0, da91c <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x1c>
        stateHandler = &SleepHelper::stateHandlerConnectedStart;
   da90a:	4b05      	ldr	r3, [pc, #20]	; (da920 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x20>)
   da90c:	9300      	str	r3, [sp, #0]
   da90e:	4669      	mov	r1, sp
   da910:	2300      	movs	r3, #0
   da912:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da916:	9301      	str	r3, [sp, #4]
   da918:	f7ff ffcc 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da91c:	b002      	add	sp, #8
   da91e:	bd10      	pop	{r4, pc}
   da920:	000daff9 	.word	0x000daff9

000da924 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv>:
void SleepHelper::stateHandlerPublishRateLimit() {
   da924:	b513      	push	{r0, r1, r4, lr}
   da926:	4604      	mov	r4, r0
   da928:	f002 f8a6 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime > 1000) {
   da92c:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   da930:	1ac0      	subs	r0, r0, r3
   da932:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   da936:	d908      	bls.n	da94a <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x26>
        stateHandler = &SleepHelper::stateHandlerConnected;
   da938:	4b05      	ldr	r3, [pc, #20]	; (da950 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x2c>)
   da93a:	9300      	str	r3, [sp, #0]
   da93c:	4669      	mov	r1, sp
   da93e:	2300      	movs	r3, #0
   da940:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da944:	9301      	str	r3, [sp, #4]
   da946:	f7ff ffb5 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da94a:	b002      	add	sp, #8
   da94c:	bd10      	pop	{r4, pc}
   da94e:	bf00      	nop
   da950:	000dbbcd 	.word	0x000dbbcd

000da954 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv>:
void SleepHelper::stateHandlerDisconnectWait() {
   da954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da956:	4604      	mov	r4, r0
   da958:	f002 fb3e 	bl	dcfd8 <spark_cloud_flag_connected>
    if (Particle.disconnected()) {
   da95c:	4605      	mov	r5, r0
   da95e:	b988      	cbnz	r0, da984 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x30>
        appLog.info("Disconnecting cellular");
   da960:	4909      	ldr	r1, [pc, #36]	; (da988 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x34>)
   da962:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   da966:	f7f9 fd19 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        network.disconnect();
   da96a:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   da96e:	6803      	ldr	r3, [r0, #0]
   da970:	685b      	ldr	r3, [r3, #4]
   da972:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularDisconnected;
   da974:	4b05      	ldr	r3, [pc, #20]	; (da98c <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x38>)
   da976:	4669      	mov	r1, sp
   da978:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da97c:	e9cd 3500 	strd	r3, r5, [sp]
   da980:	f7ff ff98 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da984:	b003      	add	sp, #12
   da986:	bd30      	pop	{r4, r5, pc}
   da988:	000e4538 	.word	0x000e4538
   da98c:	000da991 	.word	0x000da991

000da990 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv>:
void SleepHelper::stateHandlerWaitCellularDisconnected() {
   da990:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da992:	4604      	mov	r4, r0
    if (!network.ready()) {
   da994:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   da998:	6803      	ldr	r3, [r0, #0]
   da99a:	68db      	ldr	r3, [r3, #12]
   da99c:	4798      	blx	r3
   da99e:	4605      	mov	r5, r0
   da9a0:	b960      	cbnz	r0, da9bc <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x2c>
        network.off();
   da9a2:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   da9a6:	6803      	ldr	r3, [r0, #0]
   da9a8:	695b      	ldr	r3, [r3, #20]
   da9aa:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularOff;
   da9ac:	4b04      	ldr	r3, [pc, #16]	; (da9c0 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x30>)
   da9ae:	4669      	mov	r1, sp
   da9b0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da9b4:	e9cd 3500 	strd	r3, r5, [sp]
   da9b8:	f7ff ff7c 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da9bc:	b003      	add	sp, #12
   da9be:	bd30      	pop	{r4, r5, pc}
   da9c0:	000da9c5 	.word	0x000da9c5

000da9c4 <_ZN11SleepHelper27stateHandlerWaitCellularOffEv>:
void SleepHelper::stateHandlerWaitCellularOff() {
   da9c4:	b513      	push	{r0, r1, r4, lr}
   da9c6:	4604      	mov	r4, r0
    if (network.isOff()) {
   da9c8:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   da9cc:	6803      	ldr	r3, [r0, #0]
   da9ce:	69db      	ldr	r3, [r3, #28]
   da9d0:	4798      	blx	r3
   da9d2:	b140      	cbz	r0, da9e6 <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x22>
        stateHandler = &SleepHelper::stateHandlerSleep;
   da9d4:	4b05      	ldr	r3, [pc, #20]	; (da9ec <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x28>)
   da9d6:	9300      	str	r3, [sp, #0]
   da9d8:	4669      	mov	r1, sp
   da9da:	2300      	movs	r3, #0
   da9dc:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da9e0:	9301      	str	r3, [sp, #4]
   da9e2:	f7ff ff67 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da9e6:	b002      	add	sp, #8
   da9e8:	bd10      	pop	{r4, pc}
   da9ea:	bf00      	nop
   da9ec:	000dac01 	.word	0x000dac01

000da9f0 <_ZN11SleepHelper22stateHandlerSleepShortEv>:
void SleepHelper::stateHandlerSleepShort() {
   da9f0:	b513      	push	{r0, r1, r4, lr}
   da9f2:	4604      	mov	r4, r0
   da9f4:	f002 f840 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= sleepParams.sleepTimeMs) {
   da9f8:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   da9fc:	1ac0      	subs	r0, r0, r3
   da9fe:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   daa02:	4298      	cmp	r0, r3
   daa04:	d308      	bcc.n	daa18 <_ZN11SleepHelper22stateHandlerSleepShortEv+0x28>
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   daa06:	4b05      	ldr	r3, [pc, #20]	; (daa1c <_ZN11SleepHelper22stateHandlerSleepShortEv+0x2c>)
   daa08:	9300      	str	r3, [sp, #0]
   daa0a:	4669      	mov	r1, sp
   daa0c:	2300      	movs	r3, #0
   daa0e:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   daa12:	9301      	str	r3, [sp, #4]
   daa14:	f7ff ff4e 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   daa18:	b002      	add	sp, #8
   daa1a:	bd10      	pop	{r4, pc}
   daa1c:	000db09d 	.word	0x000db09d

000daa20 <_ZN11SleepHelper17stateHandlerStartEv>:
void SleepHelper::stateHandlerStart() {
   daa20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    appLog.info("stateHandlerStart");
   daa24:	f200 77e4 	addw	r7, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerStart() {
   daa28:	b085      	sub	sp, #20
    appLog.info("stateHandlerStart");
   daa2a:	493a      	ldr	r1, [pc, #232]	; (dab14 <_ZN11SleepHelper17stateHandlerStartEv+0xf4>)
void SleepHelper::stateHandlerStart() {
   daa2c:	4604      	mov	r4, r0
    appLog.info("stateHandlerStart");
   daa2e:	4638      	mov	r0, r7
   daa30:	f7f9 fcb4 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    if (Time.isValid() && sleepParams.nextFullWakeTime) {        
   daa34:	f005 fb80 	bl	e0138 <_ZN9TimeClass7isValidEv>
   daa38:	b970      	cbnz	r0, daa58 <_ZN11SleepHelper17stateHandlerStartEv+0x38>
            int maxNoConnectConviction = 0;
   daa3a:	2600      	movs	r6, #0
      : _M_current(__i) { }
   daa3c:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
            int maxConnectConviction = 0;
   daa40:	46b0      	mov	r8, r6
                int connectConviction = 0;
   daa42:	46b1      	mov	r9, r6
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   daa44:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   daa48:	42ab      	cmp	r3, r5
   daa4a:	d03d      	beq.n	daac8 <_ZN11SleepHelper17stateHandlerStartEv+0xa8>
                int noConnectConviction = 0;
   daa4c:	e9cd 9901 	strd	r9, r9, [sp, #4]
      if (_M_empty())
   daa50:	68ab      	ldr	r3, [r5, #8]
   daa52:	bb53      	cbnz	r3, daaaa <_ZN11SleepHelper17stateHandlerStartEv+0x8a>
	__throw_bad_function_call();
   daa54:	f005 feb4 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
   daa58:	f504 65d0 	add.w	r5, r4, #1664	; 0x680
   daa5c:	e9d5 2300 	ldrd	r2, r3, [r5]
   daa60:	4313      	orrs	r3, r2
   daa62:	d0ea      	beq.n	daa3a <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   daa64:	f005 fb85 	bl	e0172 <_ZN9TimeClass3nowEv>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   daa68:	e9d5 2300 	ldrd	r2, r3, [r5]
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   daa6c:	17c1      	asrs	r1, r0, #31
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   daa6e:	4290      	cmp	r0, r2
   daa70:	eb71 0303 	sbcs.w	r3, r1, r3
   daa74:	dae1      	bge.n	daa3a <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        appLog.info("running in no connection mode");
   daa76:	4928      	ldr	r1, [pc, #160]	; (dab18 <_ZN11SleepHelper17stateHandlerStartEv+0xf8>)
   daa78:	4638      	mov	r0, r7
   daa7a:	f7f9 fc8f 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        SleepHelper::instance().persistentData.setValue_lastQuickWake(Time.now());
   daa7e:	f7ff fd03 	bl	da488 <_ZN11SleepHelper8instanceEv>
   daa82:	4605      	mov	r5, r0
   daa84:	f005 fb75 	bl	e0172 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastQuickWake), (uint32_t)value);
   daa88:	2118      	movs	r1, #24
   daa8a:	4602      	mov	r2, r0
   daa8c:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   daa90:	f7ff fda4 	bl	da5dc <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   daa94:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
                it->callbackState = newState;
   daa98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   daa9c:	f8d4 1720 	ldr.w	r1, [r4, #1824]	; 0x720
   daaa0:	4299      	cmp	r1, r3
   daaa2:	d02d      	beq.n	dab00 <_ZN11SleepHelper17stateHandlerStartEv+0xe0>
                it->callbackState = newState;
   daaa4:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   daaa8:	e7f8      	b.n	daa9c <_ZN11SleepHelper17stateHandlerStartEv+0x7c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daaaa:	68eb      	ldr	r3, [r5, #12]
   daaac:	4628      	mov	r0, r5
   daaae:	aa02      	add	r2, sp, #8
   daab0:	a901      	add	r1, sp, #4
   daab2:	4798      	blx	r3
                if (connectConviction > maxConnectConviction) {
   daab4:	9b01      	ldr	r3, [sp, #4]
   daab6:	4598      	cmp	r8, r3
   daab8:	bfb8      	it	lt
   daaba:	4698      	movlt	r8, r3
                if (noConnectConviction > maxNoConnectConviction) {
   daabc:	9b02      	ldr	r3, [sp, #8]
   daabe:	429e      	cmp	r6, r3
   daac0:	bfb8      	it	lt
   daac2:	461e      	movlt	r6, r3
	++_M_current;
   daac4:	3510      	adds	r5, #16
	return *this;
   daac6:	e7bd      	b.n	daa44 <_ZN11SleepHelper17stateHandlerStartEv+0x24>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   daac8:	45b0      	cmp	r8, r6
   daaca:	dbd4      	blt.n	daa76 <_ZN11SleepHelper17stateHandlerStartEv+0x56>
    appLog.info("connecting to cloud");
   daacc:	4913      	ldr	r1, [pc, #76]	; (dab1c <_ZN11SleepHelper17stateHandlerStartEv+0xfc>)
   daace:	4638      	mov	r0, r7
   daad0:	f7f9 fc64 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &SleepHelper::stateHandlerConnectWait;
   daad4:	2500      	movs	r5, #0
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   daad6:	f002 fa77 	bl	dcfc8 <spark_cloud_flag_connect>
   daada:	4b11      	ldr	r3, [pc, #68]	; (dab20 <_ZN11SleepHelper17stateHandlerStartEv+0x100>)
   daadc:	9302      	str	r3, [sp, #8]
   daade:	a902      	add	r1, sp, #8
   daae0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   daae4:	9503      	str	r5, [sp, #12]
   daae6:	f7ff fee5 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   daaea:	f001 ffc5 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    networkConnectedMillis = 0;
   daaee:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
    connectAttemptStartMillis = millis();
   daaf2:	f8c4 07bc 	str.w	r0, [r4, #1980]	; 0x7bc
    reconnectAttemptStartMillis = 0;
   daaf6:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
}
   daafa:	b005      	add	sp, #20
   daafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        stateHandler = &SleepHelper::stateHandlerNoConnection;
   dab00:	4b08      	ldr	r3, [pc, #32]	; (dab24 <_ZN11SleepHelper17stateHandlerStartEv+0x104>)
   dab02:	9302      	str	r3, [sp, #8]
   dab04:	a902      	add	r1, sp, #8
   dab06:	2300      	movs	r3, #0
   dab08:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dab0c:	9303      	str	r3, [sp, #12]
   dab0e:	f7ff fed1 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   dab12:	e7f2      	b.n	daafa <_ZN11SleepHelper17stateHandlerStartEv+0xda>
   dab14:	000e454f 	.word	0x000e454f
   dab18:	000e4561 	.word	0x000e4561
   dab1c:	000e45a8 	.word	0x000e45a8
   dab20:	000dab29 	.word	0x000dab29
   dab24:	000dc7a9 	.word	0x000dc7a9

000dab28 <_ZN11SleepHelper23stateHandlerConnectWaitEv>:
void SleepHelper::stateHandlerConnectWait() {
   dab28:	b513      	push	{r0, r1, r4, lr}
   dab2a:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dab2c:	f002 fa54 	bl	dcfd8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   dab30:	b150      	cbz	r0, dab48 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x20>
        stateHandler = &SleepHelper::stateHandlerTimeValidWait;
   dab32:	4b19      	ldr	r3, [pc, #100]	; (dab98 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x70>)
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dab34:	9300      	str	r3, [sp, #0]
   dab36:	4669      	mov	r1, sp
   dab38:	2300      	movs	r3, #0
   dab3a:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dab3e:	9301      	str	r3, [sp, #4]
   dab40:	f7ff feb8 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dab44:	b002      	add	sp, #8
   dab46:	bd10      	pop	{r4, pc}
    if (!networkConnectedMillis && network.ready()) {
   dab48:	f8d4 37c4 	ldr.w	r3, [r4, #1988]	; 0x7c4
   dab4c:	b98b      	cbnz	r3, dab72 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   dab4e:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   dab52:	6803      	ldr	r3, [r0, #0]
   dab54:	68db      	ldr	r3, [r3, #12]
   dab56:	4798      	blx	r3
   dab58:	b158      	cbz	r0, dab72 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   dab5a:	f001 ff8d 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        system_tick_t elapsedMs = networkConnectedMillis - connectAttemptStartMillis;
   dab5e:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
        networkConnectedMillis = millis();
   dab62:	f8c4 07c4 	str.w	r0, [r4, #1988]	; 0x7c4
        appLog.info("connected to network in %lu ms", elapsedMs);
   dab66:	1a82      	subs	r2, r0, r2
   dab68:	490c      	ldr	r1, [pc, #48]	; (dab9c <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x74>)
   dab6a:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dab6e:	f7f9 fc15 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   dab72:	f001 ff81 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectAttemptStartMillis;
   dab76:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   dab7a:	2100      	movs	r1, #0
   dab7c:	1a82      	subs	r2, r0, r2
   dab7e:	f204 7004 	addw	r0, r4, #1796	; 0x704
   dab82:	f7ff fe69 	bl	da858 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   dab86:	2800      	cmp	r0, #0
   dab88:	d0dc      	beq.n	dab44 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x1c>
        appLog.info("timed out connecting to cloud");
   dab8a:	4905      	ldr	r1, [pc, #20]	; (daba0 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x78>)
   dab8c:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dab90:	f7f9 fc04 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dab94:	4b03      	ldr	r3, [pc, #12]	; (daba4 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x7c>)
   dab96:	e7cd      	b.n	dab34 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0xc>
   dab98:	000da901 	.word	0x000da901
   dab9c:	000e457f 	.word	0x000e457f
   daba0:	000e459e 	.word	0x000e459e
   daba4:	000dc7ed 	.word	0x000dc7ed

000daba8 <_ZN11SleepHelper25stateHandlerReconnectWaitEv>:
void SleepHelper::stateHandlerReconnectWait() {
   daba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dabaa:	4604      	mov	r4, r0
   dabac:	f002 fa14 	bl	dcfd8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   dabb0:	4605      	mov	r5, r0
   dabb2:	b150      	cbz	r0, dabca <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x22>
        stateHandler = &SleepHelper::stateHandlerConnected;
   dabb4:	4b0f      	ldr	r3, [pc, #60]	; (dabf4 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x4c>)
   dabb6:	9300      	str	r3, [sp, #0]
   dabb8:	2300      	movs	r3, #0
   dabba:	9301      	str	r3, [sp, #4]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dabbc:	4669      	mov	r1, sp
   dabbe:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dabc2:	f7ff fe77 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dabc6:	b003      	add	sp, #12
   dabc8:	bd30      	pop	{r4, r5, pc}
   dabca:	f001 ff55 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - reconnectAttemptStartMillis;
   dabce:	f8d4 27c0 	ldr.w	r2, [r4, #1984]	; 0x7c0
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   dabd2:	4629      	mov	r1, r5
   dabd4:	1a82      	subs	r2, r0, r2
   dabd6:	f204 7004 	addw	r0, r4, #1796	; 0x704
   dabda:	f7ff fe3d 	bl	da858 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   dabde:	2800      	cmp	r0, #0
   dabe0:	d0f1      	beq.n	dabc6 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x1e>
        appLog.info("timed out reconnecting to cloud");
   dabe2:	4905      	ldr	r1, [pc, #20]	; (dabf8 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x50>)
   dabe4:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dabe8:	f7f9 fbd8 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dabec:	4b03      	ldr	r3, [pc, #12]	; (dabfc <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x54>)
   dabee:	e9cd 3500 	strd	r3, r5, [sp]
   dabf2:	e7e3      	b.n	dabbc <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x14>
   dabf4:	000dbbcd 	.word	0x000dbbcd
   dabf8:	000e45bc 	.word	0x000e45bc
   dabfc:	000dc7ed 	.word	0x000dc7ed

000dac00 <_ZN11SleepHelper17stateHandlerSleepEv>:
void SleepHelper::stateHandlerSleep() {
   dac00:	b5f0      	push	{r4, r5, r6, r7, lr}
    appLog.info("stateHandlerSleep");
   dac02:	f200 75e4 	addw	r5, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerSleep() {
   dac06:	4604      	mov	r4, r0
   dac08:	b087      	sub	sp, #28
    appLog.info("stateHandlerSleep");
   dac0a:	4937      	ldr	r1, [pc, #220]	; (dace8 <_ZN11SleepHelper17stateHandlerSleepEv+0xe8>)
   dac0c:	4628      	mov	r0, r5
   dac0e:	f7f9 fbc5 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    sleepOrResetFunctions.forEach(false);
   dac12:	2100      	movs	r1, #0
   dac14:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   dac18:	f7ff fdc3 	bl	da7a2 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
        return hal_timer_millis(nullptr);
   dac1c:	2000      	movs	r0, #0
   dac1e:	f001 ff3b 	bl	dca98 <hal_timer_millis>
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   dac22:	f8d4 2688 	ldr.w	r2, [r4, #1672]	; 0x688
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   dac26:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   dac2a:	1a87      	subs	r7, r0, r2
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   dac2c:	42b9      	cmp	r1, r7
   dac2e:	dd28      	ble.n	dac82 <_ZN11SleepHelper17stateHandlerSleepEv+0x82>
        sleepParams.sleepTimeMs -= adjustmentMs;
   dac30:	440a      	add	r2, r1
   dac32:	1a11      	subs	r1, r2, r0
   dac34:	f8c4 1690 	str.w	r1, [r4, #1680]	; 0x690
        sleepConfig.duration(sleepParams.sleepTimeMs);
   dac38:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   dac3c:	f7fe ffe8 	bl	d9c10 <_ZN8particle24SystemSleepConfiguration8durationEm>
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   dac40:	f8d4 2690 	ldr.w	r2, [r4, #1680]	; 0x690
   dac44:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   dac48:	2600      	movs	r6, #0
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   dac4a:	429a      	cmp	r2, r3
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   dac4c:	f8c4 677c 	str.w	r6, [r4, #1916]	; 0x77c
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   dac50:	d335      	bcc.n	dacbe <_ZN11SleepHelper17stateHandlerSleepEv+0xbe>
        appLog.info("sleeping for %d sec adjustmentMs=%d", (int)(sleepParams.sleepTimeMs / 1000), adjustmentMs);
   dac52:	4628      	mov	r0, r5
   dac54:	463b      	mov	r3, r7
   dac56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   dac5a:	fbb2 f2f1 	udiv	r2, r2, r1
   dac5e:	4923      	ldr	r1, [pc, #140]	; (dacec <_ZN11SleepHelper17stateHandlerSleepEv+0xec>)
   dac60:	f7f9 fb9c 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        SystemSleepResult sleepResult = System.sleep(sleepConfig);
   dac64:	f204 615c 	addw	r1, r4, #1628	; 0x65c
   dac68:	a803      	add	r0, sp, #12
   dac6a:	f005 f8e9 	bl	dfe40 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
      : _M_current(__i) { }
   dac6e:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dac72:	f8d4 3654 	ldr.w	r3, [r4, #1620]	; 0x654
   dac76:	42ab      	cmp	r3, r5
   dac78:	d00d      	beq.n	dac96 <_ZN11SleepHelper17stateHandlerSleepEv+0x96>
      if (_M_empty())
   dac7a:	68ab      	ldr	r3, [r5, #8]
   dac7c:	b92b      	cbnz	r3, dac8a <_ZN11SleepHelper17stateHandlerSleepEv+0x8a>
	__throw_bad_function_call();
   dac7e:	f005 fd9f 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
        sleepParams.sleepTimeMs = 0;
   dac82:	2300      	movs	r3, #0
   dac84:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   dac88:	e7da      	b.n	dac40 <_ZN11SleepHelper17stateHandlerSleepEv+0x40>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dac8a:	68eb      	ldr	r3, [r5, #12]
   dac8c:	4628      	mov	r0, r5
   dac8e:	a903      	add	r1, sp, #12
   dac90:	4798      	blx	r3
	++_M_current;
   dac92:	3510      	adds	r5, #16
	return *this;
   dac94:	e7ed      	b.n	dac72 <_ZN11SleepHelper17stateHandlerSleepEv+0x72>
        wakeReasonInt = (int) sleepResult.wakeupReason();
   dac96:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   dac98:	b103      	cbz	r3, dac9c <_ZN11SleepHelper17stateHandlerSleepEv+0x9c>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   dac9a:	889b      	ldrh	r3, [r3, #4]
   dac9c:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   daca0:	4b13      	ldr	r3, [pc, #76]	; (dacf0 <_ZN11SleepHelper17stateHandlerSleepEv+0xf0>)
   daca2:	9301      	str	r3, [sp, #4]
   daca4:	a901      	add	r1, sp, #4
   daca6:	2300      	movs	r3, #0
   daca8:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dacac:	9302      	str	r3, [sp, #8]
   dacae:	f7ff fe01 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        if (wakeupSource_) {
   dacb2:	9803      	ldr	r0, [sp, #12]
   dacb4:	b108      	cbz	r0, dacba <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
            free(wakeupSource_);
   dacb6:	f002 fa27 	bl	dd108 <free>
}
   dacba:	b007      	add	sp, #28
   dacbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        appLog.info("period too short to sleep %d", (int)sleepParams.sleepTimeMs);
   dacbe:	490d      	ldr	r1, [pc, #52]	; (dacf4 <_ZN11SleepHelper17stateHandlerSleepEv+0xf4>)
   dacc0:	4628      	mov	r0, r5
   dacc2:	f7f9 fb6b 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        wakeReasonInt = WAKEUP_REASON_NO_SLEEP;
   dacc6:	4b0c      	ldr	r3, [pc, #48]	; (dacf8 <_ZN11SleepHelper17stateHandlerSleepEv+0xf8>)
   dacc8:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepShort;
   daccc:	4b0b      	ldr	r3, [pc, #44]	; (dacfc <_ZN11SleepHelper17stateHandlerSleepEv+0xfc>)
   dacce:	a903      	add	r1, sp, #12
   dacd0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dacd4:	e9cd 3603 	strd	r3, r6, [sp, #12]
   dacd8:	f7ff fdec 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   dacdc:	f001 fecc 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   dace0:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
}
   dace4:	e7e9      	b.n	dacba <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
   dace6:	bf00      	nop
   dace8:	000e45dc 	.word	0x000e45dc
   dacec:	000e45ee 	.word	0x000e45ee
   dacf0:	000db09d 	.word	0x000db09d
   dacf4:	000e4612 	.word	0x000e4612
   dacf8:	00010002 	.word	0x00010002
   dacfc:	000da9f1 	.word	0x000da9f1

000dad00 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dad00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
            if (succeeded) {
   dad04:	780b      	ldrb	r3, [r1, #0]
   dad06:	4605      	mov	r5, r0
   dad08:	b373      	cbz	r3, dad68 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x68>
                appLog.info("removing item from publishData");
   dad0a:	6800      	ldr	r0, [r0, #0]
   dad0c:	491d      	ldr	r1, [pc, #116]	; (dad84 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x84>)
   dad0e:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dad12:	f7f9 fb43 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            [this](bool succeeded, const char *event_name, const char *event_data, const void *event_context) {
   dad16:	682f      	ldr	r7, [r5, #0]
      : _M_current(__i) { }
   dad18:	f8d7 4780 	ldr.w	r4, [r7, #1920]	; 0x780
   dad1c:	f8d7 3784 	ldr.w	r3, [r7, #1924]	; 0x784
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
   dad20:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (__position + 1 != end())
   dad24:	429a      	cmp	r2, r3
   dad26:	d018      	beq.n	dad5a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dad28:	4e17      	ldr	r6, [pc, #92]	; (dad88 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x88>)
   dad2a:	1a9b      	subs	r3, r3, r2
   dad2c:	109b      	asrs	r3, r3, #2
   dad2e:	435e      	muls	r6, r3
   dad30:	2e00      	cmp	r6, #0
   dad32:	dd12      	ble.n	dad5a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
    class PublishData {
   dad34:	f104 0824 	add.w	r8, r4, #36	; 0x24
   dad38:	4641      	mov	r1, r8
   dad3a:	4620      	mov	r0, r4
   dad3c:	f004 ff55 	bl	dfbea <_ZN6StringaSEOS_>
   dad40:	f104 0134 	add.w	r1, r4, #52	; 0x34
   dad44:	f104 0010 	add.w	r0, r4, #16
   dad48:	f004 ff4f 	bl	dfbea <_ZN6StringaSEOS_>
   dad4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   dad50:	f884 3020 	strb.w	r3, [r4, #32]
   dad54:	3e01      	subs	r6, #1
	      ++__result;
   dad56:	4644      	mov	r4, r8
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dad58:	e7ea      	b.n	dad30 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x30>
      --this->_M_impl._M_finish;
   dad5a:	f8d7 0784 	ldr.w	r0, [r7, #1924]	; 0x784
   dad5e:	3824      	subs	r0, #36	; 0x24
   dad60:	f8c7 0784 	str.w	r0, [r7, #1924]	; 0x784

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   dad64:	f7ff f871 	bl	d9e4a <_ZN11SleepHelper11PublishDataD1Ev>
            stateHandler = &SleepHelper::stateHandlerPublishRateLimit;
   dad68:	6828      	ldr	r0, [r5, #0]
   dad6a:	4b08      	ldr	r3, [pc, #32]	; (dad8c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x8c>)
   dad6c:	9300      	str	r3, [sp, #0]
   dad6e:	4669      	mov	r1, sp
   dad70:	2300      	movs	r3, #0
   dad72:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   dad76:	9301      	str	r3, [sp, #4]
   dad78:	f7ff fd9c 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
      }
   dad7c:	b002      	add	sp, #8
   dad7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dad82:	bf00      	nop
   dad84:	000e462f 	.word	0x000e462f
   dad88:	38e38e39 	.word	0x38e38e39
   dad8c:	000da925 	.word	0x000da925

000dad90 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   dad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_My_handler::_M_not_empty_function(__f))
   dad92:	688b      	ldr	r3, [r1, #8]
    _Function_base() : _M_manager(nullptr) { }
   dad94:	2700      	movs	r7, #0
      function<_Res(_ArgTypes...)>::
   dad96:	4606      	mov	r6, r0
   dad98:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
   dad9a:	6087      	str	r7, [r0, #8]
	if (_My_handler::_M_not_empty_function(__f))
   dad9c:	b1b3      	cbz	r3, dadcc <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x3c>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad9e:	2010      	movs	r0, #16
   dada0:	f7f9 f979 	bl	d4096 <_Znwj>
   dada4:	4604      	mov	r4, r0
   dada6:	b160      	cbz	r0, dadc2 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x32>
    _Function_base() : _M_manager(nullptr) { }
   dada8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dadaa:	4601      	mov	r1, r0
   dadac:	4628      	mov	r0, r5
   dadae:	f7fa f820 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadb2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   dadb4:	68a2      	ldr	r2, [r4, #8]
   dadb6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dadb8:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dadba:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadbc:	68eb      	ldr	r3, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dadbe:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dadc0:	60ea      	str	r2, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   dadc2:	4b03      	ldr	r3, [pc, #12]	; (dadd0 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x40>)
   dadc4:	60f3      	str	r3, [r6, #12]
	    _M_manager = &_My_handler::_M_manager;
   dadc6:	4b03      	ldr	r3, [pc, #12]	; (dadd4 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x44>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dadc8:	6034      	str	r4, [r6, #0]
	    _M_manager = &_My_handler::_M_manager;
   dadca:	60b3      	str	r3, [r6, #8]
      }
   dadcc:	4630      	mov	r0, r6
   dadce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dadd0:	000d9999 	.word	0x000d9999
   dadd4:	000da64f 	.word	0x000da64f

000dadd8 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   dadd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daddc:	4607      	mov	r7, r0
   dadde:	4688      	mov	r8, r1
   dade0:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   dade2:	4615      	mov	r5, r2
   dade4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   dade6:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   dadea:	4544      	cmp	r4, r8
   dadec:	d014      	beq.n	dae18 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dadee:	b16d      	cbz	r5, dae0c <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x34>
   dadf0:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   dadf4:	4629      	mov	r1, r5
   dadf6:	4620      	mov	r0, r4
   dadf8:	f7f9 fffb 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadfc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dadfe:	68aa      	ldr	r2, [r5, #8]
   dae00:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dae02:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae04:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dae06:	68ea      	ldr	r2, [r5, #12]
   dae08:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dae0a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   dae0c:	4620      	mov	r0, r4
   dae0e:	f7f9 fe37 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dae12:	3410      	adds	r4, #16
   dae14:	3510      	adds	r5, #16
   dae16:	e7e8      	b.n	dadea <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x12>
      return __cur;
   dae18:	1be0      	subs	r0, r4, r7
    }
   dae1a:	4430      	add	r0, r6
   dae1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dae20 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   dae20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dae24:	4607      	mov	r7, r0
   dae26:	4688      	mov	r8, r1
   dae28:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   dae2a:	4615      	mov	r5, r2
   dae2c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   dae2e:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   dae32:	4544      	cmp	r4, r8
   dae34:	d014      	beq.n	dae60 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   dae36:	b16d      	cbz	r5, dae54 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   dae38:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   dae3c:	4629      	mov	r1, r5
   dae3e:	4620      	mov	r0, r4
   dae40:	f7f9 ffd7 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae44:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dae46:	68aa      	ldr	r2, [r5, #8]
   dae48:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dae4a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae4c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dae4e:	68ea      	ldr	r2, [r5, #12]
   dae50:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dae52:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   dae54:	4620      	mov	r0, r4
   dae56:	f7f9 fe13 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dae5a:	3410      	adds	r4, #16
   dae5c:	3510      	adds	r5, #16
   dae5e:	e7e8      	b.n	dae32 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   dae60:	1be0      	subs	r0, r4, r7
    }
   dae62:	4430      	add	r0, r6
   dae64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dae68 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   dae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dae6c:	4607      	mov	r7, r0
   dae6e:	4688      	mov	r8, r1
   dae70:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   dae72:	4615      	mov	r5, r2
   dae74:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   dae76:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   dae7a:	4544      	cmp	r4, r8
   dae7c:	d014      	beq.n	daea8 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x40>
   dae7e:	b16d      	cbz	r5, dae9c <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x34>
   dae80:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   dae84:	4629      	mov	r1, r5
   dae86:	4620      	mov	r0, r4
   dae88:	f7f9 ffb3 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae8c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dae8e:	68aa      	ldr	r2, [r5, #8]
   dae90:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dae92:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae94:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dae96:	68ea      	ldr	r2, [r5, #12]
   dae98:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dae9a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   dae9c:	4620      	mov	r0, r4
   dae9e:	f7f9 fdef 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   daea2:	3410      	adds	r4, #16
   daea4:	3510      	adds	r5, #16
   daea6:	e7e8      	b.n	dae7a <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x12>
      return __cur;
   daea8:	1be0      	subs	r0, r4, r7
    }
   daeaa:	4430      	add	r0, r6
   daeac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000daeb0 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>:
      vector<_Tp, _Alloc>::
   daeb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   daeb4:	e9d0 7900 	ldrd	r7, r9, [r0]
   daeb8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   daeba:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   daebe:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   daec0:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   daec4:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   daec8:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   daeca:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   daece:	d102      	bne.n	daed6 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   daed0:	481a      	ldr	r0, [pc, #104]	; (daf3c <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x8c>)
   daed2:	f005 fc72 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   daed6:	2c01      	cmp	r4, #1
   daed8:	4622      	mov	r2, r4
   daeda:	bf38      	it	cc
   daedc:	2201      	movcc	r2, #1
   daede:	18a4      	adds	r4, r4, r2
   daee0:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   daee4:	d228      	bcs.n	daf38 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   daee6:	b14c      	cbz	r4, daefc <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4c>
   daee8:	429c      	cmp	r4, r3
   daeea:	bf28      	it	cs
   daeec:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   daeee:	0120      	lsls	r0, r4, #4
   daef0:	9101      	str	r1, [sp, #4]
   daef2:	f7f9 f8d0 	bl	d4096 <_Znwj>
   daef6:	9901      	ldr	r1, [sp, #4]
   daef8:	4605      	mov	r5, r0
   daefa:	e000      	b.n	daefe <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4e>
   daefc:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   daefe:	eb15 000a 	adds.w	r0, r5, sl
   daf02:	d001      	beq.n	daf08 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x58>
   daf04:	f7ff fb94 	bl	da630 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
      return __relocate_a_1(std::__niter_base(__first),
   daf08:	4641      	mov	r1, r8
   daf0a:	462a      	mov	r2, r5
   daf0c:	4638      	mov	r0, r7
   daf0e:	f7ff ffab 	bl	dae68 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   daf12:	4649      	mov	r1, r9
   daf14:	f100 0210 	add.w	r2, r0, #16
   daf18:	4640      	mov	r0, r8
   daf1a:	f7ff ffa5 	bl	dae68 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   daf1e:	4680      	mov	r8, r0
	if (__p)
   daf20:	b117      	cbz	r7, daf28 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x78>
	::operator delete(__p);
   daf22:	4638      	mov	r0, r7
   daf24:	f7f9 f8bb 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   daf28:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   daf2c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   daf30:	60b4      	str	r4, [r6, #8]
    }
   daf32:	b002      	add	sp, #8
   daf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   daf38:	461c      	mov	r4, r3
   daf3a:	e7d8      	b.n	daeee <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x3e>
   daf3c:	000e3c27 	.word	0x000e3c27

000daf40 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>:
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   daf40:	b570      	push	{r4, r5, r6, lr}
        if ((eventsEnabled & flag) != 0) {
   daf42:	f8d0 4794 	ldr.w	r4, [r0, #1940]	; 0x794
   daf46:	f8d0 6790 	ldr.w	r6, [r0, #1936]	; 0x790
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   daf4a:	4605      	mov	r5, r0
        if ((eventsEnabled & flag) != 0) {
   daf4c:	ea03 0104 	and.w	r1, r3, r4
   daf50:	ea02 0006 	and.w	r0, r2, r6
   daf54:	4301      	orrs	r1, r0
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   daf56:	b08e      	sub	sp, #56	; 0x38
        if ((eventsEnabled & flag) != 0) {
   daf58:	d03f      	beq.n	dafda <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x9a>
            });
   daf5a:	9912      	ldr	r1, [sp, #72]	; 0x48
   daf5c:	a80a      	add	r0, sp, #40	; 0x28
   daf5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   daf62:	2600      	movs	r6, #0
   daf64:	f7ff fbd6 	bl	da714 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daf68:	2018      	movs	r0, #24
    _Function_base() : _M_manager(nullptr) { }
   daf6a:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daf6c:	f7f9 f893 	bl	d4096 <_Znwj>
   daf70:	4604      	mov	r4, r0
   daf72:	b188      	cbz	r0, daf98 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x58>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   daf74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   daf78:	6106      	str	r6, [r0, #16]
   daf7a:	e9c0 2300 	strd	r2, r3, [r0]
	std::swap(_M_functor, __x._M_functor);
   daf7e:	f100 0108 	add.w	r1, r0, #8
   daf82:	a80a      	add	r0, sp, #40	; 0x28
   daf84:	f7f9 ff35 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daf88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
   daf8a:	6922      	ldr	r2, [r4, #16]
   daf8c:	920c      	str	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   daf8e:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   daf90:	6962      	ldr	r2, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daf92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   daf94:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   daf96:	920d      	str	r2, [sp, #52]	; 0x34
	    _M_invoker = &_My_handler::_M_invoke;
   daf98:	4b15      	ldr	r3, [pc, #84]	; (daff0 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb0>)
   daf9a:	9303      	str	r3, [sp, #12]
            oneTimeCallbacks.add(fn); 
   daf9c:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   daf9e:	4b15      	ldr	r3, [pc, #84]	; (daff4 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb4>)
   dafa0:	9302      	str	r3, [sp, #8]
   dafa2:	a804      	add	r0, sp, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dafa4:	9400      	str	r4, [sp, #0]
   dafa6:	f7ff fb43 	bl	da630 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dafaa:	f8d5 0748 	ldr.w	r0, [r5, #1864]	; 0x748
   dafae:	f8d5 374c 	ldr.w	r3, [r5, #1868]	; 0x74c
   dafb2:	4298      	cmp	r0, r3
   dafb4:	d014      	beq.n	dafe0 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xa0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dafb6:	b110      	cbz	r0, dafbe <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x7e>
   dafb8:	a904      	add	r1, sp, #16
   dafba:	f7ff fb39 	bl	da630 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	    ++this->_M_impl._M_finish;
   dafbe:	f8d5 3748 	ldr.w	r3, [r5, #1864]	; 0x748
   dafc2:	3310      	adds	r3, #16
   dafc4:	f8c5 3748 	str.w	r3, [r5, #1864]	; 0x748
    class function<_Res(_ArgTypes...)>
   dafc8:	a804      	add	r0, sp, #16
   dafca:	f7f9 fd59 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dafce:	4668      	mov	r0, sp
   dafd0:	f7f9 fd56 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dafd4:	a80a      	add	r0, sp, #40	; 0x28
   dafd6:	f7f9 fd53 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    }
   dafda:	4628      	mov	r0, r5
   dafdc:	b00e      	add	sp, #56	; 0x38
   dafde:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   dafe0:	4601      	mov	r1, r0
   dafe2:	aa04      	add	r2, sp, #16
   dafe4:	f205 7044 	addw	r0, r5, #1860	; 0x744
   dafe8:	f7ff ff62 	bl	daeb0 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>
   dafec:	e7ec      	b.n	dafc8 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x88>
   dafee:	bf00      	nop
   daff0:	000da6e5 	.word	0x000da6e5
   daff4:	000da733 	.word	0x000da733

000daff8 <_ZN11SleepHelper26stateHandlerConnectedStartEv>:
void SleepHelper::stateHandlerConnectedStart() {
   daff8:	b530      	push	{r4, r5, lr}
   daffa:	b087      	sub	sp, #28
   daffc:	4604      	mov	r4, r0
   daffe:	f001 fd3b 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    connectedStartMillis = millis();
   db002:	f8c4 07c8 	str.w	r0, [r4, #1992]	; 0x7c8
    SleepHelper::instance().persistentData.setValue_lastFullWake(Time.now());
   db006:	f7ff fa3f 	bl	da488 <_ZN11SleepHelper8instanceEv>
   db00a:	4605      	mov	r5, r0
   db00c:	f005 f8b1 	bl	e0172 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastFullWake), (uint32_t)value);
   db010:	2114      	movs	r1, #20
   db012:	4602      	mov	r2, r0
   db014:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   db018:	f7ff fae0 	bl	da5dc <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   db01c:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
   db020:	f8d4 57c8 	ldr.w	r5, [r4, #1992]	; 0x7c8
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   db024:	4917      	ldr	r1, [pc, #92]	; (db084 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x8c>)
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   db026:	1aad      	subs	r5, r5, r2
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   db028:	462a      	mov	r2, r5
   db02a:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   db02e:	f7f9 f9b5 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
	    _M_invoker = &_My_handler::_M_invoke;
   db032:	4b15      	ldr	r3, [pc, #84]	; (db088 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x90>)
   db034:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   db036:	4b15      	ldr	r3, [pc, #84]	; (db08c <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x94>)
   db038:	9304      	str	r3, [sp, #16]
    });
   db03a:	ab02      	add	r3, sp, #8
   db03c:	9300      	str	r3, [sp, #0]
   db03e:	2202      	movs	r2, #2
   db040:	2300      	movs	r3, #0
   db042:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db044:	9502      	str	r5, [sp, #8]
   db046:	f7ff ff7b 	bl	daf40 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db04a:	a802      	add	r0, sp, #8
   db04c:	f7f9 fd18 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   db050:	4b0f      	ldr	r3, [pc, #60]	; (db090 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x98>)
   db052:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   db054:	4b0f      	ldr	r3, [pc, #60]	; (db094 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x9c>)
   db056:	9304      	str	r3, [sp, #16]
    });
   db058:	ab02      	add	r3, sp, #8
   db05a:	2208      	movs	r2, #8
   db05c:	9300      	str	r3, [sp, #0]
   db05e:	4620      	mov	r0, r4
   db060:	2300      	movs	r3, #0
   db062:	f7ff ff6d 	bl	daf40 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db066:	a802      	add	r0, sp, #8
   db068:	f7f9 fd0a 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    stateHandler = &SleepHelper::stateHandlerConnectedWakeEvents;
   db06c:	4b0a      	ldr	r3, [pc, #40]	; (db098 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0xa0>)
   db06e:	9302      	str	r3, [sp, #8]
   db070:	a902      	add	r1, sp, #8
   db072:	2300      	movs	r3, #0
   db074:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   db078:	9303      	str	r3, [sp, #12]
   db07a:	f7ff fc1b 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   db07e:	b007      	add	sp, #28
   db080:	bd30      	pop	{r4, r5, pc}
   db082:	bf00      	nop
   db084:	000e464e 	.word	0x000e464e
   db088:	000d99b7 	.word	0x000d99b7
   db08c:	000d98b9 	.word	0x000d98b9
   db090:	000d9a89 	.word	0x000d9a89
   db094:	000d98d1 	.word	0x000d98d1
   db098:	000dc2f9 	.word	0x000dc2f9

000db09c <_ZN11SleepHelper21stateHandlerSleepDoneEv>:
void SleepHelper::stateHandlerSleepDone() {
   db09c:	b5f0      	push	{r4, r5, r6, r7, lr}
   db09e:	b087      	sub	sp, #28
   db0a0:	4604      	mov	r4, r0
    stateHandler = &SleepHelper::stateHandlerStart;
   db0a2:	4b14      	ldr	r3, [pc, #80]	; (db0f4 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x58>)
   db0a4:	9302      	str	r3, [sp, #8]
   db0a6:	ae02      	add	r6, sp, #8
   db0a8:	2300      	movs	r3, #0
   db0aa:	4631      	mov	r1, r6
   db0ac:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   db0b0:	9303      	str	r3, [sp, #12]
   db0b2:	f7ff fbff 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    wakeOrBootFunctions.forEach(wakeReasonInt);
   db0b6:	f8d4 777c 	ldr.w	r7, [r4, #1916]	; 0x77c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db0ba:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   db0be:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   db0c2:	42ab      	cmp	r3, r5
   db0c4:	d005      	beq.n	db0d2 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x36>
                (*it)(args...);
   db0c6:	4628      	mov	r0, r5
   db0c8:	4639      	mov	r1, r7
   db0ca:	f7ff fbe7 	bl	da89c <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   db0ce:	3510      	adds	r5, #16
	return *this;
   db0d0:	e7f5      	b.n	db0be <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x22>
	    _M_invoker = &_My_handler::_M_invoke;
   db0d2:	4b09      	ldr	r3, [pc, #36]	; (db0f8 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x5c>)
   db0d4:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   db0d6:	4b09      	ldr	r3, [pc, #36]	; (db0fc <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x60>)
   db0d8:	9304      	str	r3, [sp, #16]
    });     
   db0da:	2201      	movs	r2, #1
   db0dc:	2300      	movs	r3, #0
   db0de:	9600      	str	r6, [sp, #0]
   db0e0:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db0e2:	9402      	str	r4, [sp, #8]
   db0e4:	f7ff ff2c 	bl	daf40 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db0e8:	4630      	mov	r0, r6
   db0ea:	f7f9 fcc9 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
}
   db0ee:	b007      	add	sp, #28
   db0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db0f2:	bf00      	nop
   db0f4:	000daa21 	.word	0x000daa21
   db0f8:	000d9a51 	.word	0x000d9a51
   db0fc:	000d98f3 	.word	0x000d98f3

000db100 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db100:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db104:	e9d0 7900 	ldrd	r7, r9, [r0]
   db108:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db10a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db10e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db110:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db114:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db118:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db11a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db11e:	d102      	bne.n	db126 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db120:	481a      	ldr	r0, [pc, #104]	; (db18c <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   db122:	f005 fb4a 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   db126:	2c01      	cmp	r4, #1
   db128:	4622      	mov	r2, r4
   db12a:	bf38      	it	cc
   db12c:	2201      	movcc	r2, #1
   db12e:	18a4      	adds	r4, r4, r2
   db130:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db134:	d228      	bcs.n	db188 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db136:	b14c      	cbz	r4, db14c <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   db138:	429c      	cmp	r4, r3
   db13a:	bf28      	it	cs
   db13c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db13e:	0120      	lsls	r0, r4, #4
   db140:	9101      	str	r1, [sp, #4]
   db142:	f7f8 ffa8 	bl	d4096 <_Znwj>
   db146:	9901      	ldr	r1, [sp, #4]
   db148:	4605      	mov	r5, r0
   db14a:	e000      	b.n	db14e <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   db14c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db14e:	eb15 000a 	adds.w	r0, r5, sl
   db152:	d001      	beq.n	db158 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   db154:	f7ff fa9f 	bl	da696 <_ZNSt8functionIFbvEEC1ERKS1_>
   db158:	4641      	mov	r1, r8
   db15a:	462a      	mov	r2, r5
   db15c:	4638      	mov	r0, r7
   db15e:	f7ff fe5f 	bl	dae20 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db162:	4649      	mov	r1, r9
   db164:	f100 0210 	add.w	r2, r0, #16
   db168:	4640      	mov	r0, r8
   db16a:	f7ff fe59 	bl	dae20 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db16e:	4680      	mov	r8, r0
	if (__p)
   db170:	b117      	cbz	r7, db178 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   db172:	4638      	mov	r0, r7
   db174:	f7f8 ff93 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db178:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db17c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db180:	60b4      	str	r4, [r6, #8]
    }
   db182:	b002      	add	sp, #8
   db184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db188:	461c      	mov	r4, r3
   db18a:	e7d8      	b.n	db13e <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   db18c:	000e3c27 	.word	0x000e3c27

000db190 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db190:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db194:	e9d0 7900 	ldrd	r7, r9, [r0]
   db198:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db19a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db19e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db1a0:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db1a4:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db1a8:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db1aa:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db1ae:	d102      	bne.n	db1b6 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db1b0:	481a      	ldr	r0, [pc, #104]	; (db21c <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x8c>)
   db1b2:	f005 fb02 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   db1b6:	2c01      	cmp	r4, #1
   db1b8:	4622      	mov	r2, r4
   db1ba:	bf38      	it	cc
   db1bc:	2201      	movcc	r2, #1
   db1be:	18a4      	adds	r4, r4, r2
   db1c0:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db1c4:	d228      	bcs.n	db218 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db1c6:	b14c      	cbz	r4, db1dc <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4c>
   db1c8:	429c      	cmp	r4, r3
   db1ca:	bf28      	it	cs
   db1cc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db1ce:	0120      	lsls	r0, r4, #4
   db1d0:	9101      	str	r1, [sp, #4]
   db1d2:	f7f8 ff60 	bl	d4096 <_Znwj>
   db1d6:	9901      	ldr	r1, [sp, #4]
   db1d8:	4605      	mov	r5, r0
   db1da:	e000      	b.n	db1de <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4e>
   db1dc:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db1de:	eb15 000a 	adds.w	r0, r5, sl
   db1e2:	d001      	beq.n	db1e8 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x58>
   db1e4:	f7ff fa66 	bl	da6b4 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
   db1e8:	4641      	mov	r1, r8
   db1ea:	462a      	mov	r2, r5
   db1ec:	4638      	mov	r0, r7
   db1ee:	f7ff fdf3 	bl	dadd8 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   db1f2:	4649      	mov	r1, r9
   db1f4:	f100 0210 	add.w	r2, r0, #16
   db1f8:	4640      	mov	r0, r8
   db1fa:	f7ff fded 	bl	dadd8 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   db1fe:	4680      	mov	r8, r0
	if (__p)
   db200:	b117      	cbz	r7, db208 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x78>
	::operator delete(__p);
   db202:	4638      	mov	r0, r7
   db204:	f7f8 ff4b 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db208:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db20c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db210:	60b4      	str	r4, [r6, #8]
    }
   db212:	b002      	add	sp, #8
   db214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db218:	461c      	mov	r4, r3
   db21a:	e7d8      	b.n	db1ce <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x3e>
   db21c:	000e3c27 	.word	0x000e3c27

000db220 <_ZN11SleepHelper18PersistentDataFile5setupEv>:
void SleepHelper::PersistentDataFile::setup() {
   db220:	b530      	push	{r4, r5, lr}
   db222:	b089      	sub	sp, #36	; 0x24
   db224:	4605      	mov	r5, r0
    SleepHelper::PersistentDataBase::setup();
   db226:	f7fe fb27 	bl	d9878 <_ZN11SleepHelper18PersistentDataBase5setupEv>
    SleepHelper::instance().withLoopFunction([this]() {
   db22a:	f7ff f92d 	bl	da488 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   db22e:	4b28      	ldr	r3, [pc, #160]	; (db2d0 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb0>)
   db230:	9303      	str	r3, [sp, #12]
   db232:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   db234:	4b27      	ldr	r3, [pc, #156]	; (db2d4 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb4>)
   db236:	9302      	str	r3, [sp, #8]
        loopFunctions.add(fn); 
   db238:	4669      	mov	r1, sp
   db23a:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db23c:	9500      	str	r5, [sp, #0]
   db23e:	f7ff fa2a 	bl	da696 <_ZNSt8functionIFbvEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db242:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
   db246:	f8d4 36ac 	ldr.w	r3, [r4, #1708]	; 0x6ac
   db24a:	4298      	cmp	r0, r3
   db24c:	d031      	beq.n	db2b2 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db24e:	b110      	cbz	r0, db256 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x36>
   db250:	a904      	add	r1, sp, #16
   db252:	f7ff fa20 	bl	da696 <_ZNSt8functionIFbvEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db256:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   db25a:	3310      	adds	r3, #16
   db25c:	f8c4 36a8 	str.w	r3, [r4, #1704]	; 0x6a8
    class function<_Res(_ArgTypes...)>
   db260:	a804      	add	r0, sp, #16
   db262:	f7f9 fc0d 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   db266:	4668      	mov	r0, sp
   db268:	f7f9 fc0a 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
   db26c:	f7ff f90c 	bl	da488 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   db270:	4b19      	ldr	r3, [pc, #100]	; (db2d8 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb8>)
   db272:	9303      	str	r3, [sp, #12]
   db274:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   db276:	4b19      	ldr	r3, [pc, #100]	; (db2dc <_ZN11SleepHelper18PersistentDataFile5setupEv+0xbc>)
   db278:	9302      	str	r3, [sp, #8]
        sleepOrResetFunctions.add(fn); 
   db27a:	4669      	mov	r1, sp
   db27c:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db27e:	9500      	str	r5, [sp, #0]
   db280:	f7f9 fd99 	bl	d4db6 <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db284:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   db288:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   db28c:	4298      	cmp	r0, r3
   db28e:	d017      	beq.n	db2c0 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xa0>
   db290:	b110      	cbz	r0, db298 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x78>
   db292:	a904      	add	r1, sp, #16
   db294:	f7f9 fd8f 	bl	d4db6 <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db298:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   db29c:	3310      	adds	r3, #16
   db29e:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   db2a2:	a804      	add	r0, sp, #16
   db2a4:	f7f9 fbec 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   db2a8:	4668      	mov	r0, sp
   db2aa:	f7f9 fbe9 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
}
   db2ae:	b009      	add	sp, #36	; 0x24
   db2b0:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   db2b2:	4601      	mov	r1, r0
   db2b4:	aa04      	add	r2, sp, #16
   db2b6:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   db2ba:	f7ff ff21 	bl	db100 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   db2be:	e7cf      	b.n	db260 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x40>
   db2c0:	4601      	mov	r1, r0
   db2c2:	aa04      	add	r2, sp, #16
   db2c4:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   db2c8:	f7fa f80a 	bl	d52e0 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   db2cc:	e7e9      	b.n	db2a2 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x82>
   db2ce:	bf00      	nop
   db2d0:	000d9a23 	.word	0x000d9a23
   db2d4:	000d990b 	.word	0x000d990b
   db2d8:	000d9a33 	.word	0x000d9a33
   db2dc:	000d9923 	.word	0x000d9923

000db2e0 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
   db2e0:	b538      	push	{r3, r4, r5, lr}
   db2e2:	4603      	mov	r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db2e4:	e9d3 3500 	ldrd	r3, r5, [r3]
   db2e8:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
   db2ea:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db2ee:	112c      	asrs	r4, r5, #4
	if (max_size() - size() < __n)
   db2f0:	eba3 1525 	sub.w	r5, r3, r5, asr #4
   db2f4:	428d      	cmp	r5, r1
      _M_check_len(size_type __n, const char* __s) const
   db2f6:	4610      	mov	r0, r2
	if (max_size() - size() < __n)
   db2f8:	d201      	bcs.n	db2fe <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
   db2fa:	f005 fa5e 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   db2fe:	42a1      	cmp	r1, r4
   db300:	bf38      	it	cc
   db302:	4621      	movcc	r1, r4
   db304:	1860      	adds	r0, r4, r1
   db306:	d203      	bcs.n	db310 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x30>
   db308:	4298      	cmp	r0, r3
   db30a:	bf28      	it	cs
   db30c:	4618      	movcs	r0, r3
      }
   db30e:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db310:	4618      	mov	r0, r3
   db312:	e7fc      	b.n	db30e <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x2e>

000db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>:
        class EventInfo {
   db314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db318:	460e      	mov	r6, r1
   db31a:	4605      	mov	r5, r0
   db31c:	f004 fc5a 	bl	dfbd4 <_ZN6StringC1ERKS_>
   db320:	6933      	ldr	r3, [r6, #16]
   db322:	612b      	str	r3, [r5, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db324:	e9d6 3705 	ldrd	r3, r7, [r6, #20]
   db328:	1aff      	subs	r7, r7, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db32a:	1138      	asrs	r0, r7, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
   db32c:	f04f 0300 	mov.w	r3, #0
   db330:	e9c5 3305 	strd	r3, r3, [r5, #20]
   db334:	61eb      	str	r3, [r5, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db336:	d001      	beq.n	db33c <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x28>
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
   db338:	f7fe fbf1 	bl	d9b1e <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   db33c:	e9c5 0005 	strd	r0, r0, [r5, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   db340:	4407      	add	r7, r0
   db342:	61ef      	str	r7, [r5, #28]
   db344:	e9d6 9705 	ldrd	r9, r7, [r6, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db348:	4604      	mov	r4, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   db34a:	464e      	mov	r6, r9
	  _ForwardIterator __cur = __result;
   db34c:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   db34e:	42b7      	cmp	r7, r6
   db350:	d00a      	beq.n	db368 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x54>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db352:	f1b8 0f00 	cmp.w	r8, #0
   db356:	d003      	beq.n	db360 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x4c>
   db358:	4631      	mov	r1, r6
   db35a:	4640      	mov	r0, r8
   db35c:	f004 fc3a 	bl	dfbd4 <_ZN6StringC1ERKS_>
   db360:	f108 0810 	add.w	r8, r8, #16
   db364:	3610      	adds	r6, #16
   db366:	e7f2      	b.n	db34e <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x3a>
	this->_M_impl._M_finish =
   db368:	eba7 0709 	sub.w	r7, r7, r9
   db36c:	443c      	add	r4, r7
   db36e:	61ac      	str	r4, [r5, #24]
   db370:	4628      	mov	r0, r5
   db372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000db378 <_ZN11SleepHelper5setupEv>:
void SleepHelper::setup() {
   db378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db37c:	b08a      	sub	sp, #40	; 0x28
        int reason = RESET_REASON_NONE;
   db37e:	2300      	movs	r3, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   db380:	ad06      	add	r5, sp, #24
   db382:	4604      	mov	r4, r0
   db384:	461a      	mov	r2, r3
   db386:	4619      	mov	r1, r3
   db388:	4628      	mov	r0, r5
        int reason = RESET_REASON_NONE;
   db38a:	9306      	str	r3, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   db38c:	f001 fb54 	bl	dca38 <HAL_Core_Get_Last_Reset_Info>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   db390:	4a3e      	ldr	r2, [pc, #248]	; (db48c <_ZN11SleepHelper5setupEv+0x114>)
   db392:	483f      	ldr	r0, [pc, #252]	; (db490 <_ZN11SleepHelper5setupEv+0x118>)
        return reason;
   db394:	f8dd 8018 	ldr.w	r8, [sp, #24]
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   db398:	2300      	movs	r3, #0
   db39a:	2100      	movs	r1, #0
   db39c:	f001 fdae 	bl	dcefc <system_subscribe_event>
        return scheduleManager.getScheduleByName("quick");
   db3a0:	f504 66c7 	add.w	r6, r4, #1592	; 0x638
    persistentData.setup();
   db3a4:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   db3a8:	f7ff ff3a 	bl	db220 <_ZN11SleepHelper18PersistentDataFile5setupEv>
   db3ac:	4939      	ldr	r1, [pc, #228]	; (db494 <_ZN11SleepHelper5setupEv+0x11c>)
   db3ae:	4630      	mov	r0, r6
   db3b0:	f7fc fff4 	bl	d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        this->flags = flags;
   db3b4:	2701      	movs	r7, #1
        return scheduleManager.getScheduleByName("data");
   db3b6:	4938      	ldr	r1, [pc, #224]	; (db498 <_ZN11SleepHelper5setupEv+0x120>)
   db3b8:	6107      	str	r7, [r0, #16]
   db3ba:	4630      	mov	r0, r6
   db3bc:	f7fc ffee 	bl	d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        return scheduleManager.getScheduleByName("full");
   db3c0:	4936      	ldr	r1, [pc, #216]	; (db49c <_ZN11SleepHelper5setupEv+0x124>)
   db3c2:	6107      	str	r7, [r0, #16]
   db3c4:	4630      	mov	r0, r6
   db3c6:	f7fc ffe9 	bl	d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   db3ca:	2302      	movs	r3, #2
   db3cc:	6103      	str	r3, [r0, #16]
	BackgroundPublishRK::instance().start();
   db3ce:	f7fb fb3d 	bl	d6a4c <_ZN19BackgroundPublishRK8instanceEv>
   db3d2:	f7fb fc4d 	bl	d6c70 <_ZN19BackgroundPublishRK5startEv>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db3d6:	f8d4 6698 	ldr.w	r6, [r4, #1688]	; 0x698
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   db3da:	f8d4 369c 	ldr.w	r3, [r4, #1692]	; 0x69c
   db3de:	42b3      	cmp	r3, r6
   db3e0:	d004      	beq.n	db3ec <_ZN11SleepHelper5setupEv+0x74>
                (*it)(args...);
   db3e2:	4630      	mov	r0, r6
   db3e4:	f7ff fa51 	bl	da88a <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   db3e8:	3610      	adds	r6, #16
	return *this;
   db3ea:	e7f6      	b.n	db3da <_ZN11SleepHelper5setupEv+0x62>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db3ec:	f8d4 66ec 	ldr.w	r6, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   db3f0:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   db3f4:	42b3      	cmp	r3, r6
   db3f6:	d006      	beq.n	db406 <_ZN11SleepHelper5setupEv+0x8e>
                (*it)(args...);
   db3f8:	4630      	mov	r0, r6
   db3fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   db3fe:	f7ff fa4d 	bl	da89c <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   db402:	3610      	adds	r6, #16
	return *this;
   db404:	e7f4      	b.n	db3f0 <_ZN11SleepHelper5setupEv+0x78>
	    _M_invoker = &_My_handler::_M_invoke;
   db406:	4b26      	ldr	r3, [pc, #152]	; (db4a0 <_ZN11SleepHelper5setupEv+0x128>)
   db408:	9309      	str	r3, [sp, #36]	; 0x24
    });
   db40a:	4629      	mov	r1, r5
	    _M_manager = &_My_handler::_M_manager;
   db40c:	4b25      	ldr	r3, [pc, #148]	; (db4a4 <_ZN11SleepHelper5setupEv+0x12c>)
   db40e:	9308      	str	r3, [sp, #32]
   db410:	4620      	mov	r0, r4
   db412:	f7fa f8c1 	bl	d5598 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
    class function<_Res(_ArgTypes...)>
   db416:	4628      	mov	r0, r5
   db418:	f7f9 fb32 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   db41c:	4b22      	ldr	r3, [pc, #136]	; (db4a8 <_ZN11SleepHelper5setupEv+0x130>)
   db41e:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   db420:	4b22      	ldr	r3, [pc, #136]	; (db4ac <_ZN11SleepHelper5setupEv+0x134>)
   db422:	9308      	str	r3, [sp, #32]
    });
   db424:	2204      	movs	r2, #4
   db426:	2300      	movs	r3, #0
   db428:	9500      	str	r5, [sp, #0]
   db42a:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db42c:	f8cd 8018 	str.w	r8, [sp, #24]
   db430:	f7ff fd86 	bl	daf40 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db434:	4628      	mov	r0, r5
   db436:	f7f9 fb23 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   db43a:	4b1d      	ldr	r3, [pc, #116]	; (db4b0 <_ZN11SleepHelper5setupEv+0x138>)
   db43c:	9305      	str	r3, [sp, #20]
        shouldConnectFunctions.add(fn); 
   db43e:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   db440:	4b1c      	ldr	r3, [pc, #112]	; (db4b4 <_ZN11SleepHelper5setupEv+0x13c>)
   db442:	9304      	str	r3, [sp, #16]
   db444:	4628      	mov	r0, r5
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db446:	9402      	str	r4, [sp, #8]
   db448:	f7ff f934 	bl	da6b4 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db44c:	f8d4 06e4 	ldr.w	r0, [r4, #1764]	; 0x6e4
   db450:	f8d4 36e8 	ldr.w	r3, [r4, #1768]	; 0x6e8
   db454:	4298      	cmp	r0, r3
   db456:	d011      	beq.n	db47c <_ZN11SleepHelper5setupEv+0x104>
   db458:	b110      	cbz	r0, db460 <_ZN11SleepHelper5setupEv+0xe8>
   db45a:	4629      	mov	r1, r5
   db45c:	f7ff f92a 	bl	da6b4 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   db460:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   db464:	3310      	adds	r3, #16
   db466:	f8c4 36e4 	str.w	r3, [r4, #1764]	; 0x6e4
    class function<_Res(_ArgTypes...)>
   db46a:	4628      	mov	r0, r5
   db46c:	f7f9 fb08 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   db470:	a802      	add	r0, sp, #8
   db472:	f7f9 fb05 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
}
   db476:	b00a      	add	sp, #40	; 0x28
   db478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), __x);
   db47c:	4601      	mov	r1, r0
   db47e:	462a      	mov	r2, r5
   db480:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
   db484:	f7ff fe84 	bl	db190 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
   db488:	e7ef      	b.n	db46a <_ZN11SleepHelper5setupEv+0xf2>
   db48a:	bf00      	nop
   db48c:	000da7fb 	.word	0x000da7fb
   db490:	00040b00 	.word	0x00040b00
   db494:	000e466b 	.word	0x000e466b
   db498:	000e419f 	.word	0x000e419f
   db49c:	000e3c7d 	.word	0x000e3c7d
   db4a0:	000d9a43 	.word	0x000d9a43
   db4a4:	000d987f 	.word	0x000d987f
   db4a8:	000d99ad 	.word	0x000d99ad
   db4ac:	000d9889 	.word	0x000d9889
   db4b0:	000dc5c5 	.word	0x000dc5c5
   db4b4:	000d98a1 	.word	0x000d98a1

000db4b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   db4b8:	b538      	push	{r3, r4, r5, lr}
   db4ba:	4604      	mov	r4, r0
   db4bc:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   db4be:	42ac      	cmp	r4, r5
   db4c0:	d004      	beq.n	db4cc <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x14>
    { __pointer->~_Tp(); }
   db4c2:	4620      	mov	r0, r4
   db4c4:	f004 faf0 	bl	dfaa8 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   db4c8:	3410      	adds	r4, #16
   db4ca:	e7f8      	b.n	db4be <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   db4cc:	bd38      	pop	{r3, r4, r5, pc}

000db4ce <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   db4ce:	b510      	push	{r4, lr}
   db4d0:	4604      	mov	r4, r0
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   db4d2:	e9d0 0100 	ldrd	r0, r1, [r0]
   db4d6:	f7ff ffef 	bl	db4b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   db4da:	6820      	ldr	r0, [r4, #0]
	if (__p)
   db4dc:	b108      	cbz	r0, db4e2 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x14>
	::operator delete(__p);
   db4de:	f7f8 fdde 	bl	d409e <_ZdlPv>
      }
   db4e2:	4620      	mov	r0, r4
   db4e4:	bd10      	pop	{r4, pc}

000db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>:
        class EventInfo {
   db4e6:	b510      	push	{r4, lr}
   db4e8:	4604      	mov	r4, r0
   db4ea:	3014      	adds	r0, #20
   db4ec:	f7ff ffef 	bl	db4ce <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   db4f0:	4620      	mov	r0, r4
   db4f2:	f004 fad9 	bl	dfaa8 <_ZN6StringD1Ev>
   db4f6:	4620      	mov	r0, r4
   db4f8:	bd10      	pop	{r4, pc}
	...

000db4fc <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db500:	e9d0 8a00 	ldrd	r8, sl, [r0]
   db504:	460f      	mov	r7, r1
	if (max_size() - size() < __n)
   db506:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
   db50a:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db50c:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   db510:	ebb3 1f62 	cmp.w	r3, r2, asr #5
   db514:	4681      	mov	r9, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db516:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
   db51a:	d102      	bne.n	db522 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db51c:	482b      	ldr	r0, [pc, #172]	; (db5cc <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xd0>)
   db51e:	f005 f94c 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   db522:	2c01      	cmp	r4, #1
   db524:	4622      	mov	r2, r4
   db526:	bf38      	it	cc
   db528:	2201      	movcc	r2, #1
   db52a:	18a4      	adds	r4, r4, r2
   db52c:	eba7 0608 	sub.w	r6, r7, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db530:	d24a      	bcs.n	db5c8 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xcc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db532:	b14c      	cbz	r4, db548 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   db534:	429c      	cmp	r4, r3
   db536:	bf28      	it	cs
   db538:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db53a:	0160      	lsls	r0, r4, #5
   db53c:	9101      	str	r1, [sp, #4]
   db53e:	f7f8 fdaa 	bl	d4096 <_Znwj>
   db542:	9901      	ldr	r1, [sp, #4]
   db544:	4605      	mov	r5, r0
   db546:	e000      	b.n	db54a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   db548:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db54a:	19a8      	adds	r0, r5, r6
   db54c:	d001      	beq.n	db552 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x56>
   db54e:	f7ff fee1 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db552:	46ab      	mov	fp, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db554:	4646      	mov	r6, r8
   db556:	42b7      	cmp	r7, r6
   db558:	d00a      	beq.n	db570 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db55a:	f1bb 0f00 	cmp.w	fp, #0
   db55e:	d003      	beq.n	db568 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6c>
   db560:	4631      	mov	r1, r6
   db562:	4658      	mov	r0, fp
   db564:	f7ff fed6 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db568:	3620      	adds	r6, #32
   db56a:	f10b 0b20 	add.w	fp, fp, #32
   db56e:	e7f2      	b.n	db556 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	      ++__new_finish;
   db570:	eba6 0708 	sub.w	r7, r6, r8
   db574:	3720      	adds	r7, #32
   db576:	442f      	add	r7, r5
	  _ForwardIterator __cur = __result;
   db578:	463b      	mov	r3, r7
   db57a:	46b3      	mov	fp, r6
	      for (; __first != __last; ++__first, (void)++__cur)
   db57c:	45d3      	cmp	fp, sl
   db57e:	d10a      	bne.n	db596 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9a>
   db580:	ebaa 0606 	sub.w	r6, sl, r6
   db584:	4437      	add	r7, r6
   db586:	4646      	mov	r6, r8
	  for (; __first != __last; ++__first)
   db588:	4556      	cmp	r6, sl
   db58a:	d00e      	beq.n	db5aa <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xae>
    { __pointer->~_Tp(); }
   db58c:	4630      	mov	r0, r6
   db58e:	f7ff ffaa 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   db592:	3620      	adds	r6, #32
   db594:	e7f8      	b.n	db588 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db596:	4659      	mov	r1, fp
   db598:	4618      	mov	r0, r3
   db59a:	9301      	str	r3, [sp, #4]
   db59c:	f7ff feba 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db5a0:	9b01      	ldr	r3, [sp, #4]
   db5a2:	f10b 0b20 	add.w	fp, fp, #32
   db5a6:	3320      	adds	r3, #32
   db5a8:	e7e8      	b.n	db57c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x80>
	if (__p)
   db5aa:	f1b8 0f00 	cmp.w	r8, #0
   db5ae:	d002      	beq.n	db5b6 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xba>
	::operator delete(__p);
   db5b0:	4640      	mov	r0, r8
   db5b2:	f7f8 fd74 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db5b6:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
   db5ba:	e9c9 5700 	strd	r5, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db5be:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   db5c2:	b003      	add	sp, #12
   db5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db5c8:	461c      	mov	r4, r3
   db5ca:	e7b6      	b.n	db53a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   db5cc:	000e3c27 	.word	0x000e3c27

000db5d0 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
   db5d0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db5d2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   db5d6:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   db5d8:	4604      	mov	r4, r0
   db5da:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db5dc:	d007      	beq.n	db5ee <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db5de:	b113      	cbz	r3, db5e6 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x16>
   db5e0:	4618      	mov	r0, r3
   db5e2:	f7ff fe97 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db5e6:	6863      	ldr	r3, [r4, #4]
   db5e8:	3320      	adds	r3, #32
   db5ea:	6063      	str	r3, [r4, #4]
      }
   db5ec:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   db5ee:	4619      	mov	r1, r3
   db5f0:	f7ff ff84 	bl	db4fc <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
   db5f4:	e7fa      	b.n	db5ec <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1c>

000db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>:
      { }

      template<typename _Iterator1, typename _Iterator2>
        _GLIBCXX14_CONSTEXPR
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
   db5f6:	b510      	push	{r4, lr}
   db5f8:	b090      	sub	sp, #64	; 0x40
   db5fa:	460c      	mov	r4, r1
        { return bool(_M_comp(*__it1, *__it2)); }
   db5fc:	4601      	mov	r1, r0
   db5fe:	a808      	add	r0, sp, #32
   db600:	f7ff fe88 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db604:	4621      	mov	r1, r4
   db606:	4668      	mov	r0, sp
   db608:	f7ff fe84 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
            return a.priority > b.priority;
   db60c:	9c04      	ldr	r4, [sp, #16]
   db60e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db610:	4668      	mov	r0, sp
   db612:	42a3      	cmp	r3, r4
   db614:	bfd4      	ite	le
   db616:	2400      	movle	r4, #0
   db618:	2401      	movgt	r4, #1
   db61a:	f7ff ff64 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db61e:	a808      	add	r0, sp, #32
   db620:	f7ff ff61 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db624:	4620      	mov	r0, r4
   db626:	b010      	add	sp, #64	; 0x40
   db628:	bd10      	pop	{r4, pc}

000db62a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   db62a:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db62c:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   db630:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   db632:	42ae      	cmp	r6, r5
   db634:	d004      	beq.n	db640 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x16>
    { __pointer->~_Tp(); }
   db636:	4628      	mov	r0, r5
   db638:	f7ff ff55 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   db63c:	3520      	adds	r5, #32
   db63e:	e7f8      	b.n	db632 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   db640:	6820      	ldr	r0, [r4, #0]
	if (__p)
   db642:	b108      	cbz	r0, db648 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x1e>
	::operator delete(__p);
   db644:	f7f8 fd2b 	bl	d409e <_ZdlPv>
      }
   db648:	4620      	mov	r0, r4
   db64a:	bd70      	pop	{r4, r5, r6, pc}

000db64c <_ZNSt6vectorI6StringSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
   db64c:	b538      	push	{r3, r4, r5, lr}
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   db64e:	e9d0 5100 	ldrd	r5, r1, [r0]
   db652:	428d      	cmp	r5, r1
      clear() _GLIBCXX_NOEXCEPT
   db654:	4604      	mov	r4, r0
	if (size_type __n = this->_M_impl._M_finish - __pos)
   db656:	d003      	beq.n	db660 <_ZNSt6vectorI6StringSaIS0_EE5clearEv+0x14>
	__destroy(__first, __last);
   db658:	4628      	mov	r0, r5
   db65a:	f7ff ff2d 	bl	db4b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   db65e:	6065      	str	r5, [r4, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
   db660:	bd38      	pop	{r3, r4, r5, pc}

000db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>:
   db662:	b538      	push	{r3, r4, r5, lr}
   db664:	460c      	mov	r4, r1
   db666:	4605      	mov	r5, r0
   db668:	f004 fa9a 	bl	dfba0 <_ZN6StringC1EOS_>
   db66c:	6923      	ldr	r3, [r4, #16]
   db66e:	612b      	str	r3, [r5, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
   db670:	6963      	ldr	r3, [r4, #20]
   db672:	616b      	str	r3, [r5, #20]
   db674:	69a3      	ldr	r3, [r4, #24]
   db676:	61ab      	str	r3, [r5, #24]
   db678:	69e3      	ldr	r3, [r4, #28]
   db67a:	61eb      	str	r3, [r5, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   db67c:	2300      	movs	r3, #0
   db67e:	e9c4 3306 	strd	r3, r3, [r4, #24]
   db682:	6163      	str	r3, [r4, #20]
   db684:	4628      	mov	r0, r5
   db686:	bd38      	pop	{r3, r4, r5, pc}

000db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>:
   db688:	b530      	push	{r4, r5, lr}
   db68a:	460d      	mov	r5, r1
   db68c:	4604      	mov	r4, r0
   db68e:	b085      	sub	sp, #20
   db690:	f004 faab 	bl	dfbea <_ZN6StringaSEOS_>
   db694:	692b      	ldr	r3, [r5, #16]
   db696:	6123      	str	r3, [r4, #16]
	  _M_start = __x._M_start;
   db698:	6968      	ldr	r0, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   db69a:	69e3      	ldr	r3, [r4, #28]
   db69c:	9303      	str	r3, [sp, #12]
	  _M_finish = __x._M_finish;
   db69e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
	  _M_start = __x._M_start;
   db6a2:	6160      	str	r0, [r4, #20]
	  _M_finish = __x._M_finish;
   db6a4:	69a8      	ldr	r0, [r5, #24]
   db6a6:	61a0      	str	r0, [r4, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
   db6a8:	69e8      	ldr	r0, [r5, #28]
   db6aa:	61e0      	str	r0, [r4, #28]
	  _M_start = __x._M_start;
   db6ac:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   db6ae:	e9c5 3305 	strd	r3, r3, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   db6b2:	61eb      	str	r3, [r5, #28]
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
      {
	vector __tmp(get_allocator());
   db6b4:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   db6b6:	e9cd 1201 	strd	r1, r2, [sp, #4]
	vector __tmp(get_allocator());
   db6ba:	f7ff ff08 	bl	db4ce <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   db6be:	4620      	mov	r0, r4
   db6c0:	b005      	add	sp, #20
   db6c2:	bd30      	pop	{r4, r5, pc}

000db6c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>:
    }

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   db6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db6c8:	4698      	mov	r8, r3
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   db6ca:	1e53      	subs	r3, r2, #1
   db6cc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   db6d0:	b099      	sub	sp, #100	; 0x64
   db6d2:	4605      	mov	r5, r0
   db6d4:	460f      	mov	r7, r1
   db6d6:	4616      	mov	r6, r2
      while (__secondChild < (__len - 1) / 2)
   db6d8:	ea4f 0a63 	mov.w	sl, r3, asr #1
   db6dc:	460c      	mov	r4, r1
   db6de:	45a2      	cmp	sl, r4
   db6e0:	ea4f 1944 	mov.w	r9, r4, lsl #5
   db6e4:	dd13      	ble.n	db70e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x4a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   db6e6:	1c60      	adds	r0, r4, #1
   db6e8:	0044      	lsls	r4, r0, #1
	  if (__comp(__first + __secondChild,
   db6ea:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   db6ee:	eb05 114b 	add.w	r1, r5, fp, lsl #5
   db6f2:	eb05 1080 	add.w	r0, r5, r0, lsl #6
   db6f6:	f7ff ff7e 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
		     __first + (__secondChild - 1)))
	    __secondChild--;
   db6fa:	2800      	cmp	r0, #0
   db6fc:	bf18      	it	ne
   db6fe:	465c      	movne	r4, fp
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   db700:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   db704:	eb05 0009 	add.w	r0, r5, r9
   db708:	f7ff ffbe 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      while (__secondChild < (__len - 1) / 2)
   db70c:	e7e7      	b.n	db6de <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x1a>
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   db70e:	07f3      	lsls	r3, r6, #31
   db710:	d40d      	bmi.n	db72e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
   db712:	3e02      	subs	r6, #2
   db714:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   db718:	ebb4 0f66 	cmp.w	r4, r6, asr #1
   db71c:	d107      	bne.n	db72e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   db71e:	0064      	lsls	r4, r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   db720:	3401      	adds	r4, #1
   db722:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   db726:	eb05 0009 	add.w	r0, r5, r9
   db72a:	f7ff ffad 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
   db72e:	4641      	mov	r1, r8
   db730:	4668      	mov	r0, sp
      _Distance __parent = (__holeIndex - 1) / 2;
   db732:	1e66      	subs	r6, r4, #1
      std::__push_heap(__first, __holeIndex, __topIndex,
   db734:	f7ff ff95 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      _Distance __parent = (__holeIndex - 1) / 2;
   db738:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   db73c:	1076      	asrs	r6, r6, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   db73e:	42a7      	cmp	r7, r4
   db740:	eb05 1844 	add.w	r8, r5, r4, lsl #5
   db744:	da1f      	bge.n	db786 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
      { return __normal_iterator(_M_current + __n); }
   db746:	eb05 1446 	add.w	r4, r5, r6, lsl #5
#endif

      template<typename _Iterator, typename _Value>
	bool
	operator()(_Iterator __it, _Value& __val)
	{ return bool(_M_comp(*__it, __val)); }
   db74a:	4621      	mov	r1, r4
   db74c:	a808      	add	r0, sp, #32
   db74e:	f7ff fde1 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db752:	4669      	mov	r1, sp
   db754:	a810      	add	r0, sp, #64	; 0x40
   db756:	f7ff fddd 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db75a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   db75e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   db762:	a810      	add	r0, sp, #64	; 0x40
   db764:	f7ff febf 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db768:	a808      	add	r0, sp, #32
   db76a:	f7ff febc 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db76e:	45ca      	cmp	sl, r9
   db770:	dd09      	ble.n	db786 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   db772:	4621      	mov	r1, r4
   db774:	4640      	mov	r0, r8
   db776:	f7ff ff87 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  __parent = (__holeIndex - 1) / 2;
   db77a:	1e73      	subs	r3, r6, #1
   db77c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
	  __holeIndex = __parent;
   db780:	4634      	mov	r4, r6
	  __parent = (__holeIndex - 1) / 2;
   db782:	105e      	asrs	r6, r3, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   db784:	e7db      	b.n	db73e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x7a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   db786:	4669      	mov	r1, sp
   db788:	4640      	mov	r0, r8
   db78a:	f7ff ff7d 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      std::__push_heap(__first, __holeIndex, __topIndex,
   db78e:	4668      	mov	r0, sp
   db790:	f7ff fea9 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
		       _GLIBCXX_MOVE(__value), __cmp);
    }
   db794:	b019      	add	sp, #100	; 0x64
   db796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db79a <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>:

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
   db79a:	b570      	push	{r4, r5, r6, lr}
   db79c:	b092      	sub	sp, #72	; 0x48
   db79e:	4605      	mov	r5, r0
   db7a0:	4616      	mov	r6, r2
   db7a2:	460c      	mov	r4, r1
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   db7a4:	a802      	add	r0, sp, #8
   db7a6:	4611      	mov	r1, r2
   db7a8:	f7ff ff5b 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      *__result = _GLIBCXX_MOVE(*__first);
   db7ac:	4629      	mov	r1, r5
   db7ae:	4630      	mov	r0, r6
   db7b0:	f7ff ff6a 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   db7b4:	1b62      	subs	r2, r4, r5
   db7b6:	1152      	asrs	r2, r2, #5
      std::__adjust_heap(__first, _DistanceType(0),
   db7b8:	a902      	add	r1, sp, #8
   db7ba:	a80a      	add	r0, sp, #40	; 0x28
   db7bc:	9201      	str	r2, [sp, #4]
   db7be:	f7ff ff50 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   db7c2:	9a01      	ldr	r2, [sp, #4]
   db7c4:	ab0a      	add	r3, sp, #40	; 0x28
   db7c6:	2100      	movs	r1, #0
   db7c8:	4628      	mov	r0, r5
   db7ca:	f7ff ff7b 	bl	db6c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   db7ce:	a80a      	add	r0, sp, #40	; 0x28
   db7d0:	f7ff fe89 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   db7d4:	a802      	add	r0, sp, #8
   db7d6:	f7ff fe86 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			 _DistanceType(__last - __first),
			 _GLIBCXX_MOVE(__value), __comp);
    }
   db7da:	b012      	add	sp, #72	; 0x48
   db7dc:	bd70      	pop	{r4, r5, r6, pc}

000db7de <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
   db7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db7e2:	b098      	sub	sp, #96	; 0x60
   db7e4:	4604      	mov	r4, r0
			      _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
   db7e6:	4601      	mov	r1, r0
   db7e8:	4668      	mov	r0, sp
   db7ea:	f7ff ff3a 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	--_M_current;
   db7ee:	3c20      	subs	r4, #32
#endif

      template<typename _Value, typename _Iterator>
	bool
	operator()(_Value& __val, _Iterator __it)
	{ return bool(_M_comp(__val, *__it)); }
   db7f0:	4669      	mov	r1, sp
   db7f2:	a808      	add	r0, sp, #32
   db7f4:	f7ff fd8e 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db7f8:	4621      	mov	r1, r4
   db7fa:	a810      	add	r0, sp, #64	; 0x40
   db7fc:	f7ff fd8a 	bl	db314 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db800:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   db804:	9f14      	ldr	r7, [sp, #80]	; 0x50
   db806:	a810      	add	r0, sp, #64	; 0x40
   db808:	f7ff fe6d 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db80c:	a808      	add	r0, sp, #32
   db80e:	f7ff fe6a 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
   db812:	45b8      	cmp	r8, r7
   db814:	4626      	mov	r6, r4
   db816:	f104 0520 	add.w	r5, r4, #32
   db81a:	f1a4 0420 	sub.w	r4, r4, #32
   db81e:	dd04      	ble.n	db82a <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x4c>
	{
	  *__last = _GLIBCXX_MOVE(*__next);
   db820:	4631      	mov	r1, r6
   db822:	4628      	mov	r0, r5
   db824:	f7ff ff30 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	return *this;
   db828:	e7e2      	b.n	db7f0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x12>
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
   db82a:	4669      	mov	r1, sp
   db82c:	4628      	mov	r0, r5
   db82e:	f7ff ff2b 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	__val = _GLIBCXX_MOVE(*__last);
   db832:	4668      	mov	r0, sp
   db834:	f7ff fe57 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   db838:	b018      	add	sp, #96	; 0x60
   db83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db83e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
   db83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
   db842:	4281      	cmp	r1, r0
    __insertion_sort(_RandomAccessIterator __first,
   db844:	b088      	sub	sp, #32
   db846:	4605      	mov	r5, r0
   db848:	460f      	mov	r7, r1
      if (__first == __last) return;
   db84a:	d026      	beq.n	db89a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
      { return __normal_iterator(_M_current + __n); }
   db84c:	f100 0420 	add.w	r4, r0, #32

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   db850:	42a7      	cmp	r7, r4
   db852:	d022      	beq.n	db89a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
	{
	  if (__comp(__i, __first))
   db854:	4629      	mov	r1, r5
   db856:	4620      	mov	r0, r4
   db858:	f7ff fecd 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db85c:	f104 0820 	add.w	r8, r4, #32
   db860:	b1b8      	cbz	r0, db892 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x54>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
   db862:	4621      	mov	r1, r4
   db864:	4668      	mov	r0, sp
   db866:	f7ff fefc 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   db86a:	1b66      	subs	r6, r4, r5
   db86c:	1176      	asrs	r6, r6, #5
   db86e:	2e00      	cmp	r6, #0
   db870:	dd06      	ble.n	db880 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x42>
	    *--__result = std::move(*--__last);
   db872:	4620      	mov	r0, r4
   db874:	3c20      	subs	r4, #32
   db876:	4621      	mov	r1, r4
   db878:	f7ff ff06 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   db87c:	3e01      	subs	r6, #1
   db87e:	e7f6      	b.n	db86e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x30>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   db880:	4669      	mov	r1, sp
   db882:	4628      	mov	r0, r5
   db884:	f7ff ff00 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
		__val = _GLIBCXX_MOVE(*__i);
   db888:	4668      	mov	r0, sp
   db88a:	f7ff fe2c 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	++_M_current;
   db88e:	4644      	mov	r4, r8
	return *this;
   db890:	e7de      	b.n	db850 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x12>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
   db892:	4620      	mov	r0, r4
   db894:	f7ff ffa3 	bl	db7de <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
   db898:	e7f9      	b.n	db88e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x50>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
   db89a:	b008      	add	sp, #32
   db89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db8a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   db8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db8a4:	4606      	mov	r6, r0
   db8a6:	4688      	mov	r8, r1
   db8a8:	4615      	mov	r5, r2
	  _ForwardIterator __cur = __result;
   db8aa:	4617      	mov	r7, r2
   db8ac:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   db8ae:	4544      	cmp	r4, r8
   db8b0:	d007      	beq.n	db8c2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x22>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db8b2:	b11f      	cbz	r7, db8bc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x1c>
   db8b4:	4621      	mov	r1, r4
   db8b6:	4638      	mov	r0, r7
   db8b8:	f004 f98c 	bl	dfbd4 <_ZN6StringC1ERKS_>
   db8bc:	3410      	adds	r4, #16
   db8be:	3710      	adds	r7, #16
   db8c0:	e7f5      	b.n	db8ae <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0xe>
	      return __cur;
   db8c2:	1ba0      	subs	r0, r4, r6
	}
   db8c4:	4428      	add	r0, r5
   db8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000db8cc <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   db8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db8d0:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   db8d4:	429e      	cmp	r6, r3
      push_back(const value_type& __x)
   db8d6:	4604      	mov	r4, r0
   db8d8:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db8da:	d008      	beq.n	db8ee <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db8dc:	b116      	cbz	r6, db8e4 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x18>
   db8de:	4630      	mov	r0, r6
   db8e0:	f004 f978 	bl	dfbd4 <_ZN6StringC1ERKS_>
	    ++this->_M_impl._M_finish;
   db8e4:	6863      	ldr	r3, [r4, #4]
   db8e6:	3310      	adds	r3, #16
   db8e8:	6063      	str	r3, [r4, #4]
      }
   db8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   db8ee:	4a18      	ldr	r2, [pc, #96]	; (db950 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x84>)
   db8f0:	2101      	movs	r1, #1
   db8f2:	f7ff fcf5 	bl	db2e0 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   db8f6:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db8fa:	4607      	mov	r7, r0
    { return __lhs.base() - __rhs.base(); }
   db8fc:	eba6 0908 	sub.w	r9, r6, r8
   db900:	b320      	cbz	r0, db94c <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x80>
   db902:	f7fe f90c 	bl	d9b1e <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   db906:	4605      	mov	r5, r0
   db908:	eb15 0009 	adds.w	r0, r5, r9
   db90c:	d002      	beq.n	db914 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x48>
   db90e:	4651      	mov	r1, sl
   db910:	f004 f960 	bl	dfbd4 <_ZN6StringC1ERKS_>
	__uninit_copy(__first, __last, __result);
   db914:	462a      	mov	r2, r5
   db916:	4631      	mov	r1, r6
   db918:	4640      	mov	r0, r8
   db91a:	f7ff ffc1 	bl	db8a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   db91e:	4631      	mov	r1, r6
   db920:	f100 0210 	add.w	r2, r0, #16
   db924:	4630      	mov	r0, r6
   db926:	f7ff ffbb 	bl	db8a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   db92a:	4631      	mov	r1, r6
   db92c:	4681      	mov	r9, r0
   db92e:	4640      	mov	r0, r8
   db930:	f7ff fdc2 	bl	db4b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   db934:	f1b8 0f00 	cmp.w	r8, #0
   db938:	d002      	beq.n	db940 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x74>
	::operator delete(__p);
   db93a:	4640      	mov	r0, r8
   db93c:	f7f8 fbaf 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   db940:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db944:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   db948:	60a5      	str	r5, [r4, #8]
      }
   db94a:	e7ce      	b.n	db8ea <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db94c:	4605      	mov	r5, r0
   db94e:	e7db      	b.n	db908 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x3c>
   db950:	000e3c27 	.word	0x000e3c27

000db954 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   db954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db958:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   db95c:	429e      	cmp	r6, r3
      vector<_Tp, _Alloc>::
   db95e:	4604      	mov	r4, r0
   db960:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db962:	d008      	beq.n	db976 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db964:	b116      	cbz	r6, db96c <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x18>
   db966:	4630      	mov	r0, r6
   db968:	f004 f91a 	bl	dfba0 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   db96c:	6863      	ldr	r3, [r4, #4]
   db96e:	3310      	adds	r3, #16
   db970:	6063      	str	r3, [r4, #4]
      }
   db972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   db976:	4a18      	ldr	r2, [pc, #96]	; (db9d8 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x84>)
   db978:	2101      	movs	r1, #1
   db97a:	f7ff fcb1 	bl	db2e0 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   db97e:	f8d4 8000 	ldr.w	r8, [r4]
   db982:	4607      	mov	r7, r0
   db984:	eba6 0908 	sub.w	r9, r6, r8
   db988:	b320      	cbz	r0, db9d4 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x80>
   db98a:	f7fe f8c8 	bl	d9b1e <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   db98e:	4605      	mov	r5, r0
   db990:	eb15 0009 	adds.w	r0, r5, r9
   db994:	d002      	beq.n	db99c <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x48>
   db996:	4651      	mov	r1, sl
   db998:	f004 f902 	bl	dfba0 <_ZN6StringC1EOS_>
   db99c:	462a      	mov	r2, r5
   db99e:	4631      	mov	r1, r6
   db9a0:	4640      	mov	r0, r8
   db9a2:	f7ff ff7d 	bl	db8a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   db9a6:	4631      	mov	r1, r6
   db9a8:	f100 0210 	add.w	r2, r0, #16
   db9ac:	4630      	mov	r0, r6
   db9ae:	f7ff ff77 	bl	db8a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   db9b2:	4631      	mov	r1, r6
   db9b4:	4681      	mov	r9, r0
   db9b6:	4640      	mov	r0, r8
   db9b8:	f7ff fd7e 	bl	db4b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   db9bc:	f1b8 0f00 	cmp.w	r8, #0
   db9c0:	d002      	beq.n	db9c8 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x74>
	::operator delete(__p);
   db9c2:	4640      	mov	r0, r8
   db9c4:	f7f8 fb6b 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   db9c8:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db9cc:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   db9d0:	60a5      	str	r5, [r4, #8]
      }
   db9d2:	e7ce      	b.n	db972 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db9d4:	4605      	mov	r5, r0
   db9d6:	e7db      	b.n	db990 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
   db9d8:	000e3c27 	.word	0x000e3c27

000db9dc <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>:
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   db9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   db9de:	4614      	mov	r4, r2
   db9e0:	b0a1      	sub	sp, #132	; 0x84
    memset(buf, 0, maxSize);
   db9e2:	461a      	mov	r2, r3
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   db9e4:	460f      	mov	r7, r1
    memset(buf, 0, maxSize);
   db9e6:	4620      	mov	r0, r4
   db9e8:	2100      	movs	r1, #0
        state_(BEGIN) {
   db9ea:	2500      	movs	r5, #0
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   db9ec:	461e      	mov	r6, r3
    memset(buf, 0, maxSize);
   db9ee:	f005 fe83 	bl	e16f8 <memset>
        n_(0) {
   db9f2:	4b30      	ldr	r3, [pc, #192]	; (dbab4 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd8>)
   db9f4:	930d      	str	r3, [sp, #52]	; 0x34
    writer.beginObject();
   db9f6:	a80d      	add	r0, sp, #52	; 0x34
   db9f8:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
        state_(BEGIN) {
   db9fc:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
        n_(0) {
   dba00:	9511      	str	r5, [sp, #68]	; 0x44
    int priority = 0;
   dba02:	9501      	str	r5, [sp, #4]
    writer.beginObject();
   dba04:	f002 fd73 	bl	de4ee <_ZN5spark10JSONWriter11beginObjectEv>
    callback(writer, priority);
   dba08:	aa01      	add	r2, sp, #4
   dba0a:	a90d      	add	r1, sp, #52	; 0x34
   dba0c:	4638      	mov	r0, r7
   dba0e:	f7fe fe60 	bl	da6d2 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
    writer.endObject();
   dba12:	a80d      	add	r0, sp, #52	; 0x34
   dba14:	f002 fd49 	bl	de4aa <_ZN5spark10JSONWriter9endObjectEv>
    if (priority > 0 && strlen(buf) > 2) {
   dba18:	9b01      	ldr	r3, [sp, #4]
   dba1a:	42ab      	cmp	r3, r5
   dba1c:	dd48      	ble.n	dbab0 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   dba1e:	4620      	mov	r0, r4
   dba20:	f005 fef5 	bl	e180e <strlen>
   dba24:	2802      	cmp	r0, #2
   dba26:	d943      	bls.n	dbab0 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
        if (writer.dataSize() <= writer.bufferSize()) {
   dba28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   dba2c:	429a      	cmp	r2, r3
   dba2e:	d33f      	bcc.n	dbab0 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   dba30:	4921      	ldr	r1, [pc, #132]	; (dbab8 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xdc>)
   dba32:	a818      	add	r0, sp, #96	; 0x60
   dba34:	f004 f883 	bl	dfb3e <_ZN6StringC1EPKc>
            eventInfo.priority = priority;
   dba38:	9b01      	ldr	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   dba3a:	951f      	str	r5, [sp, #124]	; 0x7c
            JSONValue outerObj = JSONValue::parseCopy(buf);
   dba3c:	4621      	mov	r1, r4
   dba3e:	a802      	add	r0, sp, #8
   dba40:	e9cd 551d 	strd	r5, r5, [sp, #116]	; 0x74
            eventInfo.priority = priority;
   dba44:	931c      	str	r3, [sp, #112]	; 0x70
            JSONValue outerObj = JSONValue::parseCopy(buf);
   dba46:	f7fe f947 	bl	d9cd8 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(outerObj);
   dba4a:	a902      	add	r1, sp, #8
   dba4c:	a812      	add	r0, sp, #72	; 0x48
   dba4e:	f7fc f93b 	bl	d7cc8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   dba52:	a812      	add	r0, sp, #72	; 0x48
   dba54:	f002 fce6 	bl	de424 <_ZN5spark18JSONObjectIterator4nextEv>
   dba58:	4605      	mov	r5, r0
   dba5a:	b190      	cbz	r0, dba82 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xa6>
                eventInfo.keys.push_back((const char *)iter.name());
   dba5c:	a912      	add	r1, sp, #72	; 0x48
   dba5e:	a805      	add	r0, sp, #20
   dba60:	f7fc f943 	bl	d7cea <_ZNK5spark18JSONObjectIterator4nameEv>
   dba64:	9907      	ldr	r1, [sp, #28]
   dba66:	a809      	add	r0, sp, #36	; 0x24
   dba68:	f004 f869 	bl	dfb3e <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   dba6c:	a909      	add	r1, sp, #36	; 0x24
   dba6e:	a81d      	add	r0, sp, #116	; 0x74
   dba70:	f7ff ff70 	bl	db954 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dba74:	a809      	add	r0, sp, #36	; 0x24
   dba76:	f004 f817 	bl	dfaa8 <_ZN6StringD1Ev>
   dba7a:	a806      	add	r0, sp, #24
   dba7c:	f7f8 fe00 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            while(iter.next()) {
   dba80:	e7e7      	b.n	dba52 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0x76>
            buf[strlen(buf) - 1] = 0;
   dba82:	4620      	mov	r0, r4
   dba84:	f005 fec3 	bl	e180e <strlen>
   dba88:	4420      	add	r0, r4
            eventInfo.json = &buf[1];
   dba8a:	1c61      	adds	r1, r4, #1
            buf[strlen(buf) - 1] = 0;
   dba8c:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   dba90:	a818      	add	r0, sp, #96	; 0x60
   dba92:	f004 f8b2 	bl	dfbfa <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   dba96:	a918      	add	r1, sp, #96	; 0x60
   dba98:	9826      	ldr	r0, [sp, #152]	; 0x98
   dba9a:	f7ff fd99 	bl	db5d0 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
   dba9e:	a813      	add	r0, sp, #76	; 0x4c
   dbaa0:	f7f8 fdee 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dbaa4:	a803      	add	r0, sp, #12
   dbaa6:	f7f8 fdeb 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            EventInfo eventInfo;
   dbaaa:	a818      	add	r0, sp, #96	; 0x60
   dbaac:	f7ff fd1b 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
}
   dbab0:	b021      	add	sp, #132	; 0x84
   dbab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dbab4:	000e4930 	.word	0x000e4930
   dbab8:	000e4537 	.word	0x000e4537

000dbabc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   dbabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbac0:	4607      	mov	r7, r0
   dbac2:	4688      	mov	r8, r1
   dbac4:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   dbac6:	4615      	mov	r5, r2
   dbac8:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   dbaca:	4544      	cmp	r4, r8
   dbacc:	d011      	beq.n	dbaf2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x36>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   dbace:	b16d      	cbz	r5, dbaec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x30>
    class PublishData {
   dbad0:	4621      	mov	r1, r4
   dbad2:	4628      	mov	r0, r5
   dbad4:	f004 f87e 	bl	dfbd4 <_ZN6StringC1ERKS_>
   dbad8:	f104 0110 	add.w	r1, r4, #16
   dbadc:	f105 0010 	add.w	r0, r5, #16
   dbae0:	f004 f878 	bl	dfbd4 <_ZN6StringC1ERKS_>
   dbae4:	f894 3020 	ldrb.w	r3, [r4, #32]
   dbae8:	f885 3020 	strb.w	r3, [r5, #32]
   dbaec:	3424      	adds	r4, #36	; 0x24
   dbaee:	3524      	adds	r5, #36	; 0x24
   dbaf0:	e7eb      	b.n	dbaca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0xe>
	      return __cur;
   dbaf2:	1be0      	subs	r0, r4, r7
   dbaf4:	0884      	lsrs	r4, r0, #2
   dbaf6:	4804      	ldr	r0, [pc, #16]	; (dbb08 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x4c>)
   dbaf8:	4344      	muls	r4, r0
   dbafa:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
	}
   dbafe:	2024      	movs	r0, #36	; 0x24
   dbb00:	fb00 6004 	mla	r0, r0, r4, r6
   dbb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbb08:	38e38e39 	.word	0x38e38e39

000dbb0c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   dbb0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dbb10:	e9d0 9800 	ldrd	r9, r8, [r0]
   dbb14:	eba8 0409 	sub.w	r4, r8, r9
   dbb18:	10a3      	asrs	r3, r4, #2
   dbb1a:	4c29      	ldr	r4, [pc, #164]	; (dbbc0 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>)
   dbb1c:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   dbb1e:	4b29      	ldr	r3, [pc, #164]	; (dbbc4 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   dbb20:	429c      	cmp	r4, r3
   dbb22:	4605      	mov	r5, r0
   dbb24:	460e      	mov	r6, r1
   dbb26:	4617      	mov	r7, r2
   dbb28:	d102      	bne.n	dbb30 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   dbb2a:	4827      	ldr	r0, [pc, #156]	; (dbbc8 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
   dbb2c:	f004 fe45 	bl	e07ba <_ZSt20__throw_length_errorPKc>
   dbb30:	2c01      	cmp	r4, #1
   dbb32:	4622      	mov	r2, r4
   dbb34:	bf38      	it	cc
   dbb36:	2201      	movcc	r2, #1
   dbb38:	18a4      	adds	r4, r4, r2
   dbb3a:	eba1 0b09 	sub.w	fp, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   dbb3e:	d23d      	bcs.n	dbbbc <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   dbb40:	b144      	cbz	r4, dbb54 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   dbb42:	429c      	cmp	r4, r3
   dbb44:	bf28      	it	cs
   dbb46:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dbb48:	2024      	movs	r0, #36	; 0x24
   dbb4a:	4360      	muls	r0, r4
   dbb4c:	f7f8 faa3 	bl	d4096 <_Znwj>
   dbb50:	4682      	mov	sl, r0
   dbb52:	e000      	b.n	dbb56 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   dbb54:	46a2      	mov	sl, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dbb56:	eb1a 0b0b 	adds.w	fp, sl, fp
   dbb5a:	d00d      	beq.n	dbb78 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
   dbb5c:	4639      	mov	r1, r7
   dbb5e:	4658      	mov	r0, fp
   dbb60:	f004 f81e 	bl	dfba0 <_ZN6StringC1EOS_>
   dbb64:	f107 0110 	add.w	r1, r7, #16
   dbb68:	f10b 0010 	add.w	r0, fp, #16
   dbb6c:	f004 f818 	bl	dfba0 <_ZN6StringC1EOS_>
   dbb70:	f897 3020 	ldrb.w	r3, [r7, #32]
   dbb74:	f88b 3020 	strb.w	r3, [fp, #32]
	__uninit_copy(__first, __last, __result);
   dbb78:	4631      	mov	r1, r6
   dbb7a:	4652      	mov	r2, sl
   dbb7c:	4648      	mov	r0, r9
   dbb7e:	f7ff ff9d 	bl	dbabc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
   dbb82:	4641      	mov	r1, r8
   dbb84:	f100 0224 	add.w	r2, r0, #36	; 0x24
   dbb88:	4630      	mov	r0, r6
   dbb8a:	f7ff ff97 	bl	dbabc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dbb8e:	464e      	mov	r6, r9
   dbb90:	4607      	mov	r7, r0
	  for (; __first != __last; ++__first)
   dbb92:	4546      	cmp	r6, r8
   dbb94:	d004      	beq.n	dbba0 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
    { __pointer->~_Tp(); }
   dbb96:	4630      	mov	r0, r6
   dbb98:	f7fe f957 	bl	d9e4a <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   dbb9c:	3624      	adds	r6, #36	; 0x24
   dbb9e:	e7f8      	b.n	dbb92 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
	if (__p)
   dbba0:	f1b9 0f00 	cmp.w	r9, #0
   dbba4:	d002      	beq.n	dbbac <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
	::operator delete(__p);
   dbba6:	4648      	mov	r0, r9
   dbba8:	f7f8 fa79 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   dbbac:	2024      	movs	r0, #36	; 0x24
   dbbae:	fb00 a404 	mla	r4, r0, r4, sl
      this->_M_impl._M_finish = __new_finish;
   dbbb2:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   dbbb6:	60ac      	str	r4, [r5, #8]
    }
   dbbb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   dbbbc:	461c      	mov	r4, r3
   dbbbe:	e7c3      	b.n	dbb48 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
   dbbc0:	38e38e39 	.word	0x38e38e39
   dbbc4:	038e38e3 	.word	0x038e38e3
   dbbc8:	000e3c27 	.word	0x000e3c27

000dbbcc <_ZN11SleepHelper21stateHandlerConnectedEv>:
void SleepHelper::stateHandlerConnected() {
   dbbcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbbd0:	b091      	sub	sp, #68	; 0x44
   dbbd2:	4604      	mov	r4, r0
   dbbd4:	f001 fa00 	bl	dcfd8 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   dbbd8:	4605      	mov	r5, r0
   dbbda:	b960      	cbnz	r0, dbbf6 <_ZN11SleepHelper21stateHandlerConnectedEv+0x2a>
   dbbdc:	f000 ff4c 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   dbbe0:	4b77      	ldr	r3, [pc, #476]	; (dbdc0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f4>)
        reconnectAttemptStartMillis = millis();
   dbbe2:	f8c4 07c0 	str.w	r0, [r4, #1984]	; 0x7c0
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   dbbe6:	e9cd 3507 	strd	r3, r5, [sp, #28]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dbbea:	a907      	add	r1, sp, #28
   dbbec:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dbbf0:	f7fe fe60 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   dbbf4:	e0a8      	b.n	dbd48 <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
    if (wakeEventName.length() > 0) {
   dbbf6:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
   dbbfa:	2b00      	cmp	r3, #0
   dbbfc:	d042      	beq.n	dbc84 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   dbbfe:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   dbc02:	bbbb      	cbnz	r3, dbc74 <_ZN11SleepHelper21stateHandlerConnectedEv+0xa8>
   dbc04:	f000 ff38 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
   dbc08:	4f6e      	ldr	r7, [pc, #440]	; (dbdc4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f8>)
   dbc0a:	f8d4 67d4 	ldr.w	r6, [r4, #2004]	; 0x7d4
            lastEventHistoryCheckMillis = millis();
   dbc0e:	f8c4 07cc 	str.w	r0, [r4, #1996]	; 0x7cc
            for(auto it = wakeEventPayload.begin(); it != wakeEventPayload.end(); ++it) {
   dbc12:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	; 0x7d8
   dbc16:	42b3      	cmp	r3, r6
   dbc18:	f000 80a0 	beq.w	dbd5c <_ZN11SleepHelper21stateHandlerConnectedEv+0x190>
        operator const char*() const { return c_str(); }
   dbc1c:	6835      	ldr	r5, [r6, #0]
        PublishData(const char *eventName, const char *eventData) : eventName(eventName), eventData(eventData) {}
   dbc1e:	f8d4 1728 	ldr.w	r1, [r4, #1832]	; 0x728
   dbc22:	a807      	add	r0, sp, #28
   dbc24:	f003 ff8b 	bl	dfb3e <_ZN6StringC1EPKc>
   dbc28:	4629      	mov	r1, r5
   dbc2a:	a80b      	add	r0, sp, #44	; 0x2c
   dbc2c:	f003 ff87 	bl	dfb3e <_ZN6StringC1EPKc>
   dbc30:	783b      	ldrb	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dbc32:	f8d4 5784 	ldr.w	r5, [r4, #1924]	; 0x784
        val_(flag.value()) {
   dbc36:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   dbc3a:	f8d4 3788 	ldr.w	r3, [r4, #1928]	; 0x788
   dbc3e:	429d      	cmp	r5, r3
   dbc40:	f000 8085 	beq.w	dbd4e <_ZN11SleepHelper21stateHandlerConnectedEv+0x182>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dbc44:	b165      	cbz	r5, dbc60 <_ZN11SleepHelper21stateHandlerConnectedEv+0x94>
    class PublishData {
   dbc46:	a907      	add	r1, sp, #28
   dbc48:	4628      	mov	r0, r5
   dbc4a:	f003 ffa9 	bl	dfba0 <_ZN6StringC1EOS_>
   dbc4e:	a90b      	add	r1, sp, #44	; 0x2c
   dbc50:	f105 0010 	add.w	r0, r5, #16
   dbc54:	f003 ffa4 	bl	dfba0 <_ZN6StringC1EOS_>
   dbc58:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   dbc5c:	f885 3020 	strb.w	r3, [r5, #32]
	    ++this->_M_impl._M_finish;
   dbc60:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   dbc64:	3324      	adds	r3, #36	; 0x24
   dbc66:	f8c4 3784 	str.w	r3, [r4, #1924]	; 0x784
                publishData.push_back(PublishData(wakeEventName, *it));            
   dbc6a:	a807      	add	r0, sp, #28
   dbc6c:	f7fe f8ed 	bl	d9e4a <_ZN11SleepHelper11PublishDataD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   dbc70:	3610      	adds	r6, #16
	return *this;
   dbc72:	e7ce      	b.n	dbc12 <_ZN11SleepHelper21stateHandlerConnectedEv+0x46>
   dbc74:	f000 ff00 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   dbc78:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   dbc7c:	1ac0      	subs	r0, r0, r3
   dbc7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   dbc82:	d2bf      	bcs.n	dbc04 <_ZN11SleepHelper21stateHandlerConnectedEv+0x38>
      { return begin() == end(); }
   dbc84:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
    if (!publishData.empty()) {
   dbc88:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   dbc8c:	429d      	cmp	r5, r3
   dbc8e:	d06a      	beq.n	dbd66 <_ZN11SleepHelper21stateHandlerConnectedEv+0x19a>
   dbc90:	4629      	mov	r1, r5
   dbc92:	a807      	add	r0, sp, #28
   dbc94:	f003 ff9e 	bl	dfbd4 <_ZN6StringC1ERKS_>
   dbc98:	f105 0110 	add.w	r1, r5, #16
   dbc9c:	a80b      	add	r0, sp, #44	; 0x2c
   dbc9e:	f003 ff99 	bl	dfbd4 <_ZN6StringC1ERKS_>
   dbca2:	f895 3020 	ldrb.w	r3, [r5, #32]
   dbca6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   dbcaa:	f000 fee5 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   dbcae:	f504 67f5 	add.w	r7, r4, #1960	; 0x7a8
   dbcb2:	ad03      	add	r5, sp, #12
   dbcb4:	4b44      	ldr	r3, [pc, #272]	; (dbdc8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1fc>)
        stateTime = millis();
   dbcb6:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   dbcba:	2600      	movs	r6, #0
   dbcbc:	4629      	mov	r1, r5
   dbcbe:	4638      	mov	r0, r7
   dbcc0:	9303      	str	r3, [sp, #12]
   dbcc2:	9604      	str	r6, [sp, #16]
   dbcc4:	f7fe fdf6 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return (logEnabled & flag) != 0;
   dbcc8:	f8d4 179c 	ldr.w	r1, [r4, #1948]	; 0x79c
   dbccc:	4632      	mov	r2, r6
   dbcce:	f401 7380 	and.w	r3, r1, #256	; 0x100
        if (logEnableEnabled(logEnabledPublishData)) {
   dbcd2:	4313      	orrs	r3, r2
   dbcd4:	d019      	beq.n	dbd0a <_ZN11SleepHelper21stateHandlerConnectedEv+0x13e>
            appLog.trace("publishing name=%s flags=0x%x", event.eventName.c_str(), (int)event.flags.value());
   dbcd6:	9a07      	ldr	r2, [sp, #28]
   dbcd8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   dbcdc:	493b      	ldr	r1, [pc, #236]	; (dbdcc <_ZN11SleepHelper21stateHandlerConnectedEv+0x200>)
   dbcde:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dbce2:	f7fa f95d 	bl	d5fa0 <_ZNK5spark6Logger5traceEPKcz>
            appLog.write(LOG_LEVEL_TRACE, event.eventData.c_str(), event.eventData.length());
   dbce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    if (data) {
   dbce8:	b132      	cbz	r2, dbcf8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x12c>
        log_write(level, name_, data, size, nullptr);
   dbcea:	9600      	str	r6, [sp, #0]
   dbcec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dbcee:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   dbcf2:	2001      	movs	r0, #1
   dbcf4:	f001 f8c8 	bl	dce88 <log_write>
   dbcf8:	2300      	movs	r3, #0
   dbcfa:	9300      	str	r3, [sp, #0]
   dbcfc:	4a34      	ldr	r2, [pc, #208]	; (dbdd0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x204>)
   dbcfe:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   dbd02:	2302      	movs	r3, #2
   dbd04:	2001      	movs	r0, #1
   dbd06:	f001 f8bf 	bl	dce88 <log_write>
        bool bResult = BackgroundPublishRK::instance().publish(event.eventName, event.eventData, event.flags, 
   dbd0a:	f7fa fe9f 	bl	d6a4c <_ZN19BackgroundPublishRK8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   dbd0e:	4b31      	ldr	r3, [pc, #196]	; (dbdd4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x208>)
   dbd10:	9306      	str	r3, [sp, #24]
	    _M_manager = &_My_handler::_M_manager;
   dbd12:	4b31      	ldr	r3, [pc, #196]	; (dbdd8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x20c>)
   dbd14:	9305      	str	r3, [sp, #20]
   dbd16:	2300      	movs	r3, #0
   dbd18:	e9cd 5300 	strd	r5, r3, [sp]
   dbd1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dbd1e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   dbd22:	9907      	ldr	r1, [sp, #28]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   dbd24:	9403      	str	r4, [sp, #12]
   dbd26:	f7fa ffc9 	bl	d6cbc <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
   dbd2a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   dbd2c:	4628      	mov	r0, r5
   dbd2e:	f7f8 fea7 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
        if (!bResult) {
   dbd32:	b934      	cbnz	r4, dbd42 <_ZN11SleepHelper21stateHandlerConnectedEv+0x176>
            stateHandler = &SleepHelper::stateHandlerConnected;
   dbd34:	4b29      	ldr	r3, [pc, #164]	; (dbddc <_ZN11SleepHelper21stateHandlerConnectedEv+0x210>)
   dbd36:	4629      	mov	r1, r5
   dbd38:	4638      	mov	r0, r7
   dbd3a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   dbd3e:	f7fe fdb9 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        PublishData event = publishData.front();
   dbd42:	a807      	add	r0, sp, #28
   dbd44:	f7fe f881 	bl	d9e4a <_ZN11SleepHelper11PublishDataD1Ev>
}
   dbd48:	b011      	add	sp, #68	; 0x44
   dbd4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   dbd4e:	aa07      	add	r2, sp, #28
   dbd50:	4629      	mov	r1, r5
   dbd52:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
   dbd56:	f7ff fed9 	bl	dbb0c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   dbd5a:	e786      	b.n	dbc6a <_ZN11SleepHelper21stateHandlerConnectedEv+0x9e>
            wakeEventPayload.clear();
   dbd5c:	f204 70d4 	addw	r0, r4, #2004	; 0x7d4
   dbd60:	f7ff fc74 	bl	db64c <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
   dbd64:	e78e      	b.n	dbc84 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
   dbd66:	f000 fe87 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectedStartMillis;
   dbd6a:	f8d4 37c8 	ldr.w	r3, [r4, #1992]	; 0x7c8
   dbd6e:	f8d4 56d4 	ldr.w	r5, [r4, #1748]	; 0x6d4
   dbd72:	f8d4 66c8 	ldr.w	r6, [r4, #1736]	; 0x6c8
   dbd76:	eba0 0803 	sub.w	r8, r0, r3
            bool finalRes = false;
   dbd7a:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   dbd7c:	f06f 0901 	mvn.w	r9, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   dbd80:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   dbd84:	42ab      	cmp	r3, r5
   dbd86:	d015      	beq.n	dbdb4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e8>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   dbd88:	682b      	ldr	r3, [r5, #0]
   dbd8a:	3302      	adds	r3, #2
   dbd8c:	d00d      	beq.n	dbdaa <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
   dbd8e:	f8cd 801c 	str.w	r8, [sp, #28]
      if (_M_empty())
   dbd92:	68b3      	ldr	r3, [r6, #8]
   dbd94:	b90b      	cbnz	r3, dbd9a <_ZN11SleepHelper21stateHandlerConnectedEv+0x1ce>
	__throw_bad_function_call();
   dbd96:	f004 fd13 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbd9a:	68f3      	ldr	r3, [r6, #12]
   dbd9c:	aa07      	add	r2, sp, #28
   dbd9e:	4629      	mov	r1, r5
   dbda0:	4630      	mov	r0, r6
   dbda2:	4798      	blx	r3
                    if (res) {
   dbda4:	b920      	cbnz	r0, dbdb0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e4>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   dbda6:	f8c5 9000 	str.w	r9, [r5]
      operator++() _GLIBCXX_NOEXCEPT
   dbdaa:	3508      	adds	r5, #8
   dbdac:	3610      	adds	r6, #16
	return *this;
   dbdae:	e7e7      	b.n	dbd80 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1b4>
                        finalRes = true;
   dbdb0:	4607      	mov	r7, r0
   dbdb2:	e7fa      	b.n	dbdaa <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
    if (!sleepReadyFunctions.whileAnyTrue(elapsedMs)) {
   dbdb4:	2f00      	cmp	r7, #0
   dbdb6:	d1c7      	bne.n	dbd48 <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dbdb8:	4b09      	ldr	r3, [pc, #36]	; (dbde0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x214>)
   dbdba:	e9cd 3707 	strd	r3, r7, [sp, #28]
   dbdbe:	e714      	b.n	dbbea <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e>
   dbdc0:	000daba9 	.word	0x000daba9
   dbdc4:	2003e510 	.word	0x2003e510
   dbdc8:	000d9b35 	.word	0x000d9b35
   dbdcc:	000e4671 	.word	0x000e4671
   dbdd0:	000e4535 	.word	0x000e4535
   dbdd4:	000dad01 	.word	0x000dad01
   dbdd8:	000d98db 	.word	0x000d98db
   dbddc:	000dbbcd 	.word	0x000dbbcd
   dbde0:	000dc7ed 	.word	0x000dc7ed

000dbde4 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
   dbde4:	b530      	push	{r4, r5, lr}
   dbde6:	b089      	sub	sp, #36	; 0x24
   dbde8:	460c      	mov	r4, r1
   dbdea:	4605      	mov	r5, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbdec:	4601      	mov	r1, r0
   dbdee:	4668      	mov	r0, sp
   dbdf0:	f7ff fc37 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      __a = _GLIBCXX_MOVE(__b);
   dbdf4:	4621      	mov	r1, r4
   dbdf6:	4628      	mov	r0, r5
   dbdf8:	f7ff fc46 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      __b = _GLIBCXX_MOVE(__tmp);
   dbdfc:	4669      	mov	r1, sp
   dbdfe:	4620      	mov	r0, r4
   dbe00:	f7ff fc42 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbe04:	4668      	mov	r0, sp
   dbe06:	f7ff fb6e 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   dbe0a:	b009      	add	sp, #36	; 0x24
   dbe0c:	bd30      	pop	{r4, r5, pc}

000dbe0e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
   dbe0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbe12:	4604      	mov	r4, r0
   dbe14:	b091      	sub	sp, #68	; 0x44
   dbe16:	4617      	mov	r7, r2
   dbe18:	469a      	mov	sl, r3
   dbe1a:	460d      	mov	r5, r1
      { return __normal_iterator(_M_current + __n); }
   dbe1c:	f100 0820 	add.w	r8, r0, #32
    { return __lhs.base() - __rhs.base(); }
   dbe20:	1b2e      	subs	r6, r5, r4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
   dbe22:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbe26:	dd75      	ble.n	dbf14 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
   dbe28:	ea4f 1966 	mov.w	r9, r6, asr #5
	{
	  if (__depth_limit == 0)
   dbe2c:	bb47      	cbnz	r7, dbe80 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x72>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
   dbe2e:	f1a9 0602 	sub.w	r6, r9, #2
   dbe32:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbe34:	eb04 1146 	add.w	r1, r4, r6, lsl #5
   dbe38:	4668      	mov	r0, sp
   dbe3a:	f7ff fc12 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   dbe3e:	4669      	mov	r1, sp
   dbe40:	a808      	add	r0, sp, #32
   dbe42:	f7ff fc0e 	bl	db662 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   dbe46:	4620      	mov	r0, r4
   dbe48:	ab08      	add	r3, sp, #32
   dbe4a:	464a      	mov	r2, r9
   dbe4c:	4631      	mov	r1, r6
   dbe4e:	f7ff fc39 	bl	db6c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   dbe52:	a808      	add	r0, sp, #32
   dbe54:	f7ff fb47 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			     __comp);
	  if (__parent == 0)
   dbe58:	b96e      	cbnz	r6, dbe76 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x68>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbe5a:	4668      	mov	r0, sp
   dbe5c:	f7ff fb43 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   dbe60:	1b2b      	subs	r3, r5, r4
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   dbe62:	2b20      	cmp	r3, #32
   dbe64:	f1a5 0520 	sub.w	r5, r5, #32
   dbe68:	dd54      	ble.n	dbf14 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
   dbe6a:	462a      	mov	r2, r5
   dbe6c:	4629      	mov	r1, r5
   dbe6e:	4620      	mov	r0, r4
   dbe70:	f7ff fc93 	bl	db79a <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>
      while (__last - __first > 1)
   dbe74:	e7f4      	b.n	dbe60 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x52>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbe76:	4668      	mov	r0, sp
	  __parent--;
   dbe78:	3e01      	subs	r6, #1
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbe7a:	f7ff fb34 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   dbe7e:	e7d9      	b.n	dbe34 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x26>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   dbe80:	11b6      	asrs	r6, r6, #6
      { return __normal_iterator(_M_current + __n); }
   dbe82:	eb04 1646 	add.w	r6, r4, r6, lsl #5
      if (__comp(__a, __b))
   dbe86:	4631      	mov	r1, r6
   dbe88:	4640      	mov	r0, r8
   dbe8a:	f7ff fbb4 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
      { return __normal_iterator(_M_current - __n); }
   dbe8e:	f1a5 0920 	sub.w	r9, r5, #32
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
   dbe92:	3f01      	subs	r7, #1
	  if (__comp(__b, __c))
   dbe94:	4649      	mov	r1, r9
      if (__comp(__a, __b))
   dbe96:	b160      	cbz	r0, dbeb2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa4>
	  if (__comp(__b, __c))
   dbe98:	4630      	mov	r0, r6
   dbe9a:	f7ff fbac 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbe9e:	b108      	cbz	r0, dbea4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x96>
      swap(*__a, *__b);
   dbea0:	4631      	mov	r1, r6
   dbea2:	e00b      	b.n	dbebc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
	  else if (__comp(__a, __c))
   dbea4:	4649      	mov	r1, r9
   dbea6:	4640      	mov	r0, r8
   dbea8:	f7ff fba5 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbeac:	b128      	cbz	r0, dbeba <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xac>
   dbeae:	4649      	mov	r1, r9
   dbeb0:	e004      	b.n	dbebc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
      else if (__comp(__a, __c))
   dbeb2:	4640      	mov	r0, r8
   dbeb4:	f7ff fb9f 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbeb8:	b1f8      	cbz	r0, dbefa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xec>
   dbeba:	4641      	mov	r1, r8
   dbebc:	4620      	mov	r0, r4
   dbebe:	f7ff ff91 	bl	dbde4 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
    __unguarded_partition(_RandomAccessIterator __first,
   dbec2:	4646      	mov	r6, r8
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
   dbec4:	46a9      	mov	r9, r5
	  while (__comp(__first, __pivot))
   dbec6:	4621      	mov	r1, r4
   dbec8:	4630      	mov	r0, r6
   dbeca:	f7ff fb94 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbece:	b9f8      	cbnz	r0, dbf10 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x102>
   dbed0:	f1a9 0b20 	sub.w	fp, r9, #32
	  while (__comp(__pivot, __last))
   dbed4:	4659      	mov	r1, fp
   dbed6:	4620      	mov	r0, r4
   dbed8:	f7ff fb8d 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbedc:	46d9      	mov	r9, fp
   dbede:	f1ab 0b20 	sub.w	fp, fp, #32
   dbee2:	2800      	cmp	r0, #0
   dbee4:	d1f6      	bne.n	dbed4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xc6>
	  if (!(__first < __last))
   dbee6:	454e      	cmp	r6, r9
   dbee8:	d30e      	bcc.n	dbf08 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xfa>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   dbeea:	4629      	mov	r1, r5
   dbeec:	4653      	mov	r3, sl
   dbeee:	463a      	mov	r2, r7
   dbef0:	4630      	mov	r0, r6
   dbef2:	f7ff ff8c 	bl	dbe0e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      while (__last - __first > int(_S_threshold))
   dbef6:	4635      	mov	r5, r6
   dbef8:	e792      	b.n	dbe20 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x12>
      else if (__comp(__b, __c))
   dbefa:	4649      	mov	r1, r9
   dbefc:	4630      	mov	r0, r6
   dbefe:	f7ff fb7a 	bl	db5f6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbf02:	2800      	cmp	r0, #0
   dbf04:	d0cc      	beq.n	dbea0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x92>
   dbf06:	e7d2      	b.n	dbeae <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa0>
   dbf08:	4649      	mov	r1, r9
   dbf0a:	4630      	mov	r0, r6
   dbf0c:	f7ff ff6a 	bl	dbde4 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
      operator++() _GLIBCXX_NOEXCEPT
   dbf10:	3620      	adds	r6, #32
   dbf12:	e7d8      	b.n	dbec6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xb8>
	  __last = __cut;
	}
    }
   dbf14:	b011      	add	sp, #68	; 0x44
   dbf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dbf1c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>:
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   dbf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf20:	4617      	mov	r7, r2
   dbf22:	b09f      	sub	sp, #124	; 0x7c
   dbf24:	4604      	mov	r4, r0
    events.clear();
   dbf26:	4608      	mov	r0, r1
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   dbf28:	4688      	mov	r8, r1
    events.clear();
   dbf2a:	f7ff fb8f 	bl	db64c <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
	: _M_start(), _M_finish(), _M_end_of_storage()
   dbf2e:	2300      	movs	r3, #0
    char *buf = (char *)malloc(maxSize + 1);
   dbf30:	1c78      	adds	r0, r7, #1
   dbf32:	e9cd 3307 	strd	r3, r3, [sp, #28]
   dbf36:	9309      	str	r3, [sp, #36]	; 0x24
   dbf38:	f001 f8de 	bl	dd0f8 <malloc>
    if (!buf) {
   dbf3c:	4606      	mov	r6, r0
   dbf3e:	b928      	cbnz	r0, dbf4c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x30>
    std::vector<EventInfo> infoArray;
   dbf40:	a807      	add	r0, sp, #28
   dbf42:	f7ff fb72 	bl	db62a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>
}
   dbf46:	b01f      	add	sp, #124	; 0x7c
   dbf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      : _M_current(__i) { }
   dbf4c:	6925      	ldr	r5, [r4, #16]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf4e:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = oneTimeCallbacks.callbackFunctions.rbegin(); it != oneTimeCallbacks.callbackFunctions.rend(); ++it) {
   dbf52:	68e3      	ldr	r3, [r4, #12]
   dbf54:	429d      	cmp	r5, r3
   dbf56:	d017      	beq.n	dbf88 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x6c>
	--_M_current;
   dbf58:	3d10      	subs	r5, #16
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf5a:	4629      	mov	r1, r5
   dbf5c:	a811      	add	r0, sp, #68	; 0x44
   dbf5e:	f7fe fb67 	bl	da630 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   dbf62:	a911      	add	r1, sp, #68	; 0x44
   dbf64:	a816      	add	r0, sp, #88	; 0x58
   dbf66:	f7fe ff13 	bl	dad90 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   dbf6a:	463b      	mov	r3, r7
   dbf6c:	4632      	mov	r2, r6
   dbf6e:	a916      	add	r1, sp, #88	; 0x58
   dbf70:	4620      	mov	r0, r4
   dbf72:	f8cd 9000 	str.w	r9, [sp]
   dbf76:	f7ff fd31 	bl	db9dc <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
    class function<_Res(_ArgTypes...)>
   dbf7a:	a816      	add	r0, sp, #88	; 0x58
   dbf7c:	f7f8 fd80 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dbf80:	a811      	add	r0, sp, #68	; 0x44
   dbf82:	f7f8 fd7d 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	return *this;
   dbf86:	e7e4      	b.n	dbf52 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x36>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dbf88:	6825      	ldr	r5, [r4, #0]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf8a:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = callbacks.callbackFunctions.begin(); it != callbacks.callbackFunctions.end(); ++it) {
   dbf8e:	6863      	ldr	r3, [r4, #4]
   dbf90:	42ab      	cmp	r3, r5
   dbf92:	d017      	beq.n	dbfc4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0xa8>
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf94:	4629      	mov	r1, r5
   dbf96:	a811      	add	r0, sp, #68	; 0x44
   dbf98:	f7fe fb4a 	bl	da630 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   dbf9c:	a911      	add	r1, sp, #68	; 0x44
   dbf9e:	a816      	add	r0, sp, #88	; 0x58
   dbfa0:	f7fe fef6 	bl	dad90 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   dbfa4:	463b      	mov	r3, r7
   dbfa6:	4632      	mov	r2, r6
   dbfa8:	a916      	add	r1, sp, #88	; 0x58
   dbfaa:	4620      	mov	r0, r4
   dbfac:	f8cd 9000 	str.w	r9, [sp]
   dbfb0:	f7ff fd14 	bl	db9dc <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
   dbfb4:	a816      	add	r0, sp, #88	; 0x58
   dbfb6:	f7f8 fd63 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dbfba:	a811      	add	r0, sp, #68	; 0x44
   dbfbc:	f7f8 fd60 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   dbfc0:	3510      	adds	r5, #16
	return *this;
   dbfc2:	e7e4      	b.n	dbf8e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x72>
    if (eventHistory.getHasEvents()) {
   dbfc4:	f104 0a18 	add.w	sl, r4, #24
   dbfc8:	4650      	mov	r0, sl
   dbfca:	f7fd ffc1 	bl	d9f50 <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   dbfce:	9003      	str	r0, [sp, #12]
   dbfd0:	2800      	cmp	r0, #0
   dbfd2:	d040      	beq.n	dc056 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        memset(buf, 0, maxSize);
   dbfd4:	463a      	mov	r2, r7
   dbfd6:	2100      	movs	r1, #0
   dbfd8:	4630      	mov	r0, r6
   dbfda:	f005 fb8d 	bl	e16f8 <memset>
        state_(BEGIN) {
   dbfde:	2500      	movs	r5, #0
        n_(0) {
   dbfe0:	4bc1      	ldr	r3, [pc, #772]	; (dc2e8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>)
   dbfe2:	9311      	str	r3, [sp, #68]	; 0x44
        writer.beginObject();
   dbfe4:	a811      	add	r0, sp, #68	; 0x44
   dbfe6:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
        state_(BEGIN) {
   dbfea:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
        n_(0) {
   dbfee:	9515      	str	r5, [sp, #84]	; 0x54
   dbff0:	f002 fa7d 	bl	de4ee <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   dbff4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dbff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   dbff8:	a811      	add	r0, sp, #68	; 0x44
   dbffa:	f002 fb5b 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - overhead, false)) {
   dbffe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dc000:	1ffa      	subs	r2, r7, #7
   dc002:	1a52      	subs	r2, r2, r1
   dc004:	462b      	mov	r3, r5
   dc006:	a911      	add	r1, sp, #68	; 0x44
   dc008:	4650      	mov	r0, sl
   dc00a:	f7fe f88f 	bl	da12c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   dc00e:	9003      	str	r0, [sp, #12]
   dc010:	b308      	cbz	r0, dc056 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        class EventInfo {
   dc012:	49b6      	ldr	r1, [pc, #728]	; (dc2ec <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3d0>)
   dc014:	a816      	add	r0, sp, #88	; 0x58
   dc016:	f003 fd92 	bl	dfb3e <_ZN6StringC1EPKc>
            eventInfo.priority = 1;
   dc01a:	2301      	movs	r3, #1
            eventInfo.keys.push_back(eventHistoryKey);
   dc01c:	f104 0134 	add.w	r1, r4, #52	; 0x34
   dc020:	a81b      	add	r0, sp, #108	; 0x6c
            eventInfo.priority = 1;
   dc022:	931a      	str	r3, [sp, #104]	; 0x68
   dc024:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
   dc028:	951d      	str	r5, [sp, #116]	; 0x74
            eventInfo.keys.push_back(eventHistoryKey);
   dc02a:	f7ff fc4f 	bl	db8cc <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
            writer.endObject();
   dc02e:	a811      	add	r0, sp, #68	; 0x44
   dc030:	f002 fa3b 	bl	de4aa <_ZN5spark10JSONWriter9endObjectEv>
            buf[strlen(buf) - 1] = 0;
   dc034:	4630      	mov	r0, r6
   dc036:	f005 fbea 	bl	e180e <strlen>
   dc03a:	4430      	add	r0, r6
            eventInfo.json = &buf[1];
   dc03c:	1c71      	adds	r1, r6, #1
            buf[strlen(buf) - 1] = 0;
   dc03e:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   dc042:	a816      	add	r0, sp, #88	; 0x58
   dc044:	f003 fdd9 	bl	dfbfa <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   dc048:	a807      	add	r0, sp, #28
   dc04a:	a916      	add	r1, sp, #88	; 0x58
   dc04c:	f7ff fac0 	bl	db5d0 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
            EventInfo eventInfo;
   dc050:	a816      	add	r0, sp, #88	; 0x58
   dc052:	f7ff fa48 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      { return begin() == end(); }
   dc056:	e9dd 9b07 	ldrd	r9, fp, [sp, #28]
    if (!infoArray.empty()) {
   dc05a:	45d9      	cmp	r9, fp
   dc05c:	f000 80bf 	beq.w	dc1de <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2c2>
    { return __lhs.base() - __rhs.base(); }
   dc060:	ebab 0509 	sub.w	r5, fp, r9
   dc064:	116a      	asrs	r2, r5, #5

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
   dc066:	fab2 f282 	clz	r2, r2
   dc06a:	f1c2 021f 	rsb	r2, r2, #31
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
   dc06e:	f04f 0300 	mov.w	r3, #0
   dc072:	0052      	lsls	r2, r2, #1
   dc074:	4659      	mov	r1, fp
   dc076:	4648      	mov	r0, r9
   dc078:	f7ff fec9 	bl	dbe0e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      if (__last - __first > int(_S_threshold))
   dc07c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   dc080:	dd0c      	ble.n	dc09c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x180>
      { return __normal_iterator(_M_current + __n); }
   dc082:	f509 7500 	add.w	r5, r9, #512	; 0x200
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   dc086:	4629      	mov	r1, r5
   dc088:	4648      	mov	r0, r9
   dc08a:	f7ff fbd8 	bl	db83e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   dc08e:	45ab      	cmp	fp, r5
   dc090:	d008      	beq.n	dc0a4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x188>
	std::__unguarded_linear_insert(__i,
   dc092:	4628      	mov	r0, r5
   dc094:	f7ff fba3 	bl	db7de <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
      operator++() _GLIBCXX_NOEXCEPT
   dc098:	3520      	adds	r5, #32
	return *this;
   dc09a:	e7f8      	b.n	dc08e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x172>
	std::__insertion_sort(__first, __last, __comp);
   dc09c:	4659      	mov	r1, fp
   dc09e:	4648      	mov	r0, r9
   dc0a0:	f7ff fbcd 	bl	db83e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   dc0a4:	2300      	movs	r3, #0
   dc0a6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
      : _M_current(__i) { }
   dc0aa:	f8dd b01c 	ldr.w	fp, [sp, #28]
   dc0ae:	9313      	str	r3, [sp, #76]	; 0x4c
        for(auto it = infoArray.begin(); it != infoArray.end(); ) {
   dc0b0:	9b08      	ldr	r3, [sp, #32]
   dc0b2:	459b      	cmp	fp, r3
   dc0b4:	d036      	beq.n	dc124 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x208>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc0b6:	f8db 9014 	ldr.w	r9, [fp, #20]
            bool keyExists = false;
   dc0ba:	2500      	movs	r5, #0
            for(auto it2 = it->keys.begin(); it2 != it->keys.end(); ++it2) {
   dc0bc:	f8db 3018 	ldr.w	r3, [fp, #24]
   dc0c0:	4599      	cmp	r9, r3
   dc0c2:	d014      	beq.n	dc0ee <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1d2>
   dc0c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
                for(auto it3 = keysAdded.begin(); it3 != keysAdded.end(); ++it3) {
   dc0c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   dc0c8:	4293      	cmp	r3, r2
   dc0ca:	d009      	beq.n	dc0e0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1c4>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   dc0cc:	4618      	mov	r0, r3
   dc0ce:	4649      	mov	r1, r9
   dc0d0:	9304      	str	r3, [sp, #16]
   dc0d2:	f003 fe02 	bl	dfcda <_ZNK6String6equalsERKS_>
   dc0d6:	9b04      	ldr	r3, [sp, #16]
   dc0d8:	3310      	adds	r3, #16
                    if (*it3 == *it2) {
   dc0da:	2800      	cmp	r0, #0
   dc0dc:	d0f3      	beq.n	dc0c6 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1aa>
                        keyExists = true;
   dc0de:	2501      	movs	r5, #1
                keysAdded.push_back(*it2);
   dc0e0:	4649      	mov	r1, r9
   dc0e2:	a811      	add	r0, sp, #68	; 0x44
   dc0e4:	f7ff fbf2 	bl	db8cc <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
      operator++() _GLIBCXX_NOEXCEPT
   dc0e8:	f109 0910 	add.w	r9, r9, #16
	return *this;
   dc0ec:	e7e6      	b.n	dc0bc <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1a0>
            if (keyExists) {
   dc0ee:	f10b 0320 	add.w	r3, fp, #32
   dc0f2:	b1ad      	cbz	r5, dc120 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x204>
   dc0f4:	9d08      	ldr	r5, [sp, #32]
      if (__position + 1 != end())
   dc0f6:	429d      	cmp	r5, r3
   dc0f8:	d00c      	beq.n	dc114 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dc0fa:	1aed      	subs	r5, r5, r3
   dc0fc:	116d      	asrs	r5, r5, #5
   dc0fe:	4658      	mov	r0, fp
   dc100:	2d00      	cmp	r5, #0
   dc102:	f100 0920 	add.w	r9, r0, #32
   dc106:	dd05      	ble.n	dc114 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	      *__result = std::move(*__first);
   dc108:	4649      	mov	r1, r9
   dc10a:	f7ff fabd 	bl	db688 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dc10e:	3d01      	subs	r5, #1
	      ++__result;
   dc110:	4648      	mov	r0, r9
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dc112:	e7f5      	b.n	dc100 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1e4>
      --this->_M_impl._M_finish;
   dc114:	9808      	ldr	r0, [sp, #32]
   dc116:	3820      	subs	r0, #32
   dc118:	9008      	str	r0, [sp, #32]
	{ __p->~_Up(); }
   dc11a:	f7ff f9e4 	bl	db4e6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   dc11e:	465b      	mov	r3, fp
   dc120:	469b      	mov	fp, r3
   dc122:	e7c5      	b.n	dc0b0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x194>
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   dc124:	1ebb      	subs	r3, r7, #2
   dc126:	18f3      	adds	r3, r6, r3
        *cur++ = '{';
   dc128:	46b3      	mov	fp, r6
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   dc12a:	9305      	str	r3, [sp, #20]
        *cur++ = '{';
   dc12c:	237b      	movs	r3, #123	; 0x7b
   dc12e:	f80b 3b01 	strb.w	r3, [fp], #1
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc132:	9b07      	ldr	r3, [sp, #28]
   dc134:	f103 0920 	add.w	r9, r3, #32
        bool firstEventBuffer = true;
   dc138:	2301      	movs	r3, #1
        *cur++ = '{';
   dc13a:	465d      	mov	r5, fp
        bool firstEventBuffer = true;
   dc13c:	9304      	str	r3, [sp, #16]
        for(auto it = infoArray.begin(); it != infoArray.end(); ++it) {
   dc13e:	9808      	ldr	r0, [sp, #32]
   dc140:	f1a9 0120 	sub.w	r1, r9, #32
   dc144:	4288      	cmp	r0, r1
   dc146:	d036      	beq.n	dc1b6 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
            if (&cur[strlen(it->json)] >= end) {
   dc148:	f859 0c20 	ldr.w	r0, [r9, #-32]
   dc14c:	f005 fb5f 	bl	e180e <strlen>
   dc150:	9b05      	ldr	r3, [sp, #20]
   dc152:	4428      	add	r0, r5
   dc154:	4283      	cmp	r3, r0
   dc156:	d81a      	bhi.n	dc18e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x272>
                if (cur > &buf[1]) {
   dc158:	455d      	cmp	r5, fp
   dc15a:	d911      	bls.n	dc180 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
                    *cur++ = '}';
   dc15c:	f04f 037d 	mov.w	r3, #125	; 0x7d
   dc160:	702b      	strb	r3, [r5, #0]
                    *cur = 0;
   dc162:	f04f 0300 	mov.w	r3, #0
   dc166:	706b      	strb	r3, [r5, #1]
                    events.push_back(buf);
   dc168:	4631      	mov	r1, r6
   dc16a:	a816      	add	r0, sp, #88	; 0x58
   dc16c:	f003 fce7 	bl	dfb3e <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   dc170:	a916      	add	r1, sp, #88	; 0x58
   dc172:	4640      	mov	r0, r8
   dc174:	f7ff fbee 	bl	db954 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dc178:	a816      	add	r0, sp, #88	; 0x58
   dc17a:	f003 fc95 	bl	dfaa8 <_ZN6StringD1Ev>
   dc17e:	465d      	mov	r5, fp
            if (!firstEventBuffer && it->priority < 50) {
   dc180:	f859 1c10 	ldr.w	r1, [r9, #-16]
   dc184:	2931      	cmp	r1, #49	; 0x31
   dc186:	dd16      	ble.n	dc1b6 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
   dc188:	2300      	movs	r3, #0
   dc18a:	9304      	str	r3, [sp, #16]
   dc18c:	e002      	b.n	dc194 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x278>
   dc18e:	9b04      	ldr	r3, [sp, #16]
   dc190:	2b00      	cmp	r3, #0
   dc192:	d0f5      	beq.n	dc180 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
            if (cur != &buf[1]) {
   dc194:	45ab      	cmp	fp, r5
                *cur++ = ',';
   dc196:	bf1c      	itt	ne
   dc198:	212c      	movne	r1, #44	; 0x2c
   dc19a:	f805 1b01 	strbne.w	r1, [r5], #1
            strcpy(cur, it->json);
   dc19e:	f859 1c20 	ldr.w	r1, [r9, #-32]
   dc1a2:	4628      	mov	r0, r5
   dc1a4:	f005 fb0e 	bl	e17c4 <strcpy>
            cur += strlen(cur);
   dc1a8:	4628      	mov	r0, r5
   dc1aa:	f005 fb30 	bl	e180e <strlen>
   dc1ae:	f109 0920 	add.w	r9, r9, #32
   dc1b2:	4405      	add	r5, r0
	return *this;
   dc1b4:	e7c3      	b.n	dc13e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x222>
        if (cur > &buf[1]) {
   dc1b6:	455d      	cmp	r5, fp
   dc1b8:	d90e      	bls.n	dc1d8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2bc>
            *cur++ = '}';
   dc1ba:	237d      	movs	r3, #125	; 0x7d
   dc1bc:	702b      	strb	r3, [r5, #0]
            *cur = 0;
   dc1be:	2300      	movs	r3, #0
   dc1c0:	706b      	strb	r3, [r5, #1]
            events.push_back(buf);
   dc1c2:	4631      	mov	r1, r6
   dc1c4:	a816      	add	r0, sp, #88	; 0x58
   dc1c6:	f003 fcba 	bl	dfb3e <_ZN6StringC1EPKc>
   dc1ca:	4640      	mov	r0, r8
   dc1cc:	a916      	add	r1, sp, #88	; 0x58
   dc1ce:	f7ff fbc1 	bl	db954 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dc1d2:	a816      	add	r0, sp, #88	; 0x58
   dc1d4:	f003 fc68 	bl	dfaa8 <_ZN6StringD1Ev>
        std::vector<String> keysAdded;
   dc1d8:	a811      	add	r0, sp, #68	; 0x44
   dc1da:	f7ff f978 	bl	db4ce <_ZNSt6vectorI6StringSaIS0_EED1Ev>
    if (doRemoveEvents) {
   dc1de:	9b03      	ldr	r3, [sp, #12]
   dc1e0:	2b00      	cmp	r3, #0
   dc1e2:	d039      	beq.n	dc258 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc1e4:	f8d8 5000 	ldr.w	r5, [r8]
        doRemoveEvents = false;
   dc1e8:	f04f 0b00 	mov.w	fp, #0
        for(auto it = events.begin(); it != events.end(); ++it) {
   dc1ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc1f0:	42ab      	cmp	r3, r5
   dc1f2:	d02b      	beq.n	dc24c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x330>
            JSONValue obj = JSONValue::parseCopy(*it);
   dc1f4:	6829      	ldr	r1, [r5, #0]
   dc1f6:	a80a      	add	r0, sp, #40	; 0x28
   dc1f8:	f7fd fd6e 	bl	d9cd8 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(obj);
   dc1fc:	a90a      	add	r1, sp, #40	; 0x28
   dc1fe:	a816      	add	r0, sp, #88	; 0x58
   dc200:	f7fb fd62 	bl	d7cc8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   dc204:	a816      	add	r0, sp, #88	; 0x58
   dc206:	f002 f90d 	bl	de424 <_ZN5spark18JSONObjectIterator4nextEv>
   dc20a:	4681      	mov	r9, r0
   dc20c:	b1b0      	cbz	r0, dc23c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x320>
                String key = (const char *)iter.name();
   dc20e:	a916      	add	r1, sp, #88	; 0x58
   dc210:	a811      	add	r0, sp, #68	; 0x44
   dc212:	f7fb fd6a 	bl	d7cea <_ZNK5spark18JSONObjectIterator4nameEv>
   dc216:	9913      	ldr	r1, [sp, #76]	; 0x4c
   dc218:	a80d      	add	r0, sp, #52	; 0x34
   dc21a:	f003 fc90 	bl	dfb3e <_ZN6StringC1EPKc>
   dc21e:	a812      	add	r0, sp, #72	; 0x48
   dc220:	f7f8 fa2e 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc224:	f104 0134 	add.w	r1, r4, #52	; 0x34
   dc228:	a80d      	add	r0, sp, #52	; 0x34
   dc22a:	f003 fd56 	bl	dfcda <_ZNK6String6equalsERKS_>
                    doRemoveEvents = true;
   dc22e:	2800      	cmp	r0, #0
   dc230:	bf18      	it	ne
   dc232:	46cb      	movne	fp, r9
                String key = (const char *)iter.name();
   dc234:	a80d      	add	r0, sp, #52	; 0x34
   dc236:	f003 fc37 	bl	dfaa8 <_ZN6StringD1Ev>
            while(iter.next()) {
   dc23a:	e7e3      	b.n	dc204 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2e8>
   dc23c:	a817      	add	r0, sp, #92	; 0x5c
   dc23e:	f7f8 fa1f 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc242:	a80b      	add	r0, sp, #44	; 0x2c
   dc244:	f7f8 fa1c 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   dc248:	3510      	adds	r5, #16
	return *this;
   dc24a:	e7cf      	b.n	dc1ec <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2d0>
        if (doRemoveEvents) {
   dc24c:	f1bb 0f00 	cmp.w	fp, #0
   dc250:	d002      	beq.n	dc258 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
            eventHistory.removeEvents();
   dc252:	4650      	mov	r0, sl
   dc254:	f7fd fe04 	bl	d9e60 <_ZN11SleepHelper12EventHistory12removeEventsEv>
        n_(0) {
   dc258:	f8df 908c 	ldr.w	r9, [pc, #140]	; dc2e8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>
        memset(buf, 0, maxSize);
   dc25c:	2500      	movs	r5, #0
    while(eventHistory.getHasEvents()) {
   dc25e:	4650      	mov	r0, sl
   dc260:	f7fd fe76 	bl	d9f50 <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   dc264:	b378      	cbz	r0, dc2c6 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3aa>
        memset(buf, 0, maxSize);
   dc266:	463a      	mov	r2, r7
   dc268:	2100      	movs	r1, #0
   dc26a:	4630      	mov	r0, r6
   dc26c:	f005 fa44 	bl	e16f8 <memset>
        writer.beginObject();
   dc270:	a816      	add	r0, sp, #88	; 0x58
   dc272:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
        state_(BEGIN) {
   dc276:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
        n_(0) {
   dc27a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
   dc27e:	951a      	str	r5, [sp, #104]	; 0x68
   dc280:	f002 f935 	bl	de4ee <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   dc284:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dc286:	6b61      	ldr	r1, [r4, #52]	; 0x34
   dc288:	a816      	add	r0, sp, #88	; 0x58
   dc28a:	f002 fa13 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - eventHistoryKey.length() - 6, false)) {        
   dc28e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dc290:	1fba      	subs	r2, r7, #6
   dc292:	1a52      	subs	r2, r2, r1
   dc294:	2300      	movs	r3, #0
   dc296:	a916      	add	r1, sp, #88	; 0x58
   dc298:	4650      	mov	r0, sl
   dc29a:	f7fd ff47 	bl	da12c <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   dc29e:	2800      	cmp	r0, #0
   dc2a0:	d0dd      	beq.n	dc25e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
            writer.endObject();
   dc2a2:	a816      	add	r0, sp, #88	; 0x58
   dc2a4:	f002 f901 	bl	de4aa <_ZN5spark10JSONWriter9endObjectEv>
            events.push_back(buf);
   dc2a8:	4631      	mov	r1, r6
   dc2aa:	a811      	add	r0, sp, #68	; 0x44
   dc2ac:	f003 fc47 	bl	dfb3e <_ZN6StringC1EPKc>
   dc2b0:	a911      	add	r1, sp, #68	; 0x44
   dc2b2:	4640      	mov	r0, r8
   dc2b4:	f7ff fb4e 	bl	db954 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dc2b8:	a811      	add	r0, sp, #68	; 0x44
   dc2ba:	f003 fbf5 	bl	dfaa8 <_ZN6StringD1Ev>
            eventHistory.removeEvents();
   dc2be:	4650      	mov	r0, sl
   dc2c0:	f7fd fdce 	bl	d9e60 <_ZN11SleepHelper12EventHistory12removeEventsEv>
    while(eventHistory.getHasEvents()) {
   dc2c4:	e7cb      	b.n	dc25e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   dc2c6:	e9d4 7803 	ldrd	r7, r8, [r4, #12]
   dc2ca:	4547      	cmp	r7, r8
   dc2cc:	d007      	beq.n	dc2de <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3c2>
   dc2ce:	463d      	mov	r5, r7
   dc2d0:	4628      	mov	r0, r5
   dc2d2:	3510      	adds	r5, #16
   dc2d4:	f7f8 fbd4 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc2d8:	45a8      	cmp	r8, r5
   dc2da:	d1f9      	bne.n	dc2d0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3b4>
	    this->_M_impl._M_finish = __pos;
   dc2dc:	6127      	str	r7, [r4, #16]
    free(buf);
   dc2de:	4630      	mov	r0, r6
   dc2e0:	f000 ff12 	bl	dd108 <free>
   dc2e4:	e62c      	b.n	dbf40 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x24>
   dc2e6:	bf00      	nop
   dc2e8:	000e4930 	.word	0x000e4930
   dc2ec:	000e4537 	.word	0x000e4537

000dc2f0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>:
    generateEvents(events, maxSize);
   dc2f0:	f240 226e 	movw	r2, #622	; 0x26e
   dc2f4:	f7ff be12 	b.w	dbf1c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>

000dc2f8 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv>:
void SleepHelper::stateHandlerConnectedWakeEvents() {
   dc2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   dc2fa:	f890 57d1 	ldrb.w	r5, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerConnectedWakeEvents() {
   dc2fe:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   dc300:	b9dd      	cbnz	r5, dc33a <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x42>
    wakeEventFunctions.generateEvents(wakeEventPayload);
   dc302:	f200 71d4 	addw	r1, r0, #2004	; 0x7d4
   dc306:	f500 60e7 	add.w	r0, r0, #1848	; 0x738
   dc30a:	f7ff fff1 	bl	dc2f0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>
    lastEventHistoryCheckMillis = 0;
   dc30e:	f8d4 36d4 	ldr.w	r3, [r4, #1748]	; 0x6d4
   dc312:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
                it->callbackState = newState;
   dc316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   dc31a:	f8d4 16d8 	ldr.w	r1, [r4, #1752]	; 0x6d8
   dc31e:	4299      	cmp	r1, r3
   dc320:	d002      	beq.n	dc328 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x30>
                it->callbackState = newState;
   dc322:	f843 2b08 	str.w	r2, [r3], #8
   dc326:	e7f8      	b.n	dc31a <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x22>
    stateHandler = &SleepHelper::stateHandlerConnected;
   dc328:	4b05      	ldr	r3, [pc, #20]	; (dc340 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x48>)
   dc32a:	9300      	str	r3, [sp, #0]
   dc32c:	4669      	mov	r1, sp
   dc32e:	2300      	movs	r3, #0
   dc330:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dc334:	9301      	str	r3, [sp, #4]
   dc336:	f7fe fabd 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dc33a:	b003      	add	sp, #12
   dc33c:	bd30      	pop	{r4, r5, pc}
   dc33e:	bf00      	nop
   dc340:	000dbbcd 	.word	0x000dbbcd

000dc344 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE>:
}
   dc344:	b538      	push	{r3, r4, r5, lr}
};
   dc346:	4c16      	ldr	r4, [pc, #88]	; (dc3a0 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x5c>)
        val_(val) {
   dc348:	4b16      	ldr	r3, [pc, #88]	; (dc3a4 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x60>)
   dc34a:	4917      	ldr	r1, [pc, #92]	; (dc3a8 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x64>)
   dc34c:	2201      	movs	r2, #1
   dc34e:	701a      	strb	r2, [r3, #0]
   dc350:	4620      	mov	r0, r4
   dc352:	2201      	movs	r2, #1
   dc354:	2300      	movs	r3, #0
   dc356:	e8e0 2302 	strd	r2, r3, [r0], #8
   dc35a:	f003 fbf0 	bl	dfb3e <_ZN6StringC1EPKc>
   dc35e:	2532      	movs	r5, #50	; 0x32
   dc360:	2202      	movs	r2, #2
   dc362:	2300      	movs	r3, #0
   dc364:	4911      	ldr	r1, [pc, #68]	; (dc3ac <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x68>)
   dc366:	61a5      	str	r5, [r4, #24]
   dc368:	f104 0028 	add.w	r0, r4, #40	; 0x28
   dc36c:	e9c4 2308 	strd	r2, r3, [r4, #32]
   dc370:	f003 fbe5 	bl	dfb3e <_ZN6StringC1EPKc>
   dc374:	2204      	movs	r2, #4
   dc376:	2300      	movs	r3, #0
   dc378:	490d      	ldr	r1, [pc, #52]	; (dc3b0 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x6c>)
   dc37a:	63a5      	str	r5, [r4, #56]	; 0x38
   dc37c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   dc380:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   dc384:	f003 fbdb 	bl	dfb3e <_ZN6StringC1EPKc>
   dc388:	2208      	movs	r2, #8
   dc38a:	2300      	movs	r3, #0
   dc38c:	4909      	ldr	r1, [pc, #36]	; (dc3b4 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x70>)
   dc38e:	65a5      	str	r5, [r4, #88]	; 0x58
   dc390:	f104 0068 	add.w	r0, r4, #104	; 0x68
   dc394:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
   dc398:	f003 fbd1 	bl	dfb3e <_ZN6StringC1EPKc>
   dc39c:	67a5      	str	r5, [r4, #120]	; 0x78
}
   dc39e:	bd38      	pop	{r3, r4, r5, pc}
   dc3a0:	2003e490 	.word	0x2003e490
   dc3a4:	2003e510 	.word	0x2003e510
   dc3a8:	000e468f 	.word	0x000e468f
   dc3ac:	000e4692 	.word	0x000e4692
   dc3b0:	000e4696 	.word	0x000e4696
   dc3b4:	000e4699 	.word	0x000e4699

000dc3b8 <_ZN11SleepHelperD1Ev>:
SleepHelper::~SleepHelper() {
   dc3b8:	4b7b      	ldr	r3, [pc, #492]	; (dc5a8 <_ZN11SleepHelperD1Ev+0x1f0>)
   dc3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc3be:	4604      	mov	r4, r0
   dc3c0:	6003      	str	r3, [r0, #0]
   dc3c2:	f200 70d4 	addw	r0, r0, #2004	; 0x7d4
   dc3c6:	f7ff f882 	bl	db4ce <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   dc3ca:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dc3ce:	f7f8 fb57 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc3d2:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
   dc3d6:	f8d4 6784 	ldr.w	r6, [r4, #1924]	; 0x784
   dc3da:	42ae      	cmp	r6, r5
   dc3dc:	d004      	beq.n	dc3e8 <_ZN11SleepHelperD1Ev+0x30>
    { __pointer->~_Tp(); }
   dc3de:	4628      	mov	r0, r5
   dc3e0:	f7fd fd33 	bl	d9e4a <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   dc3e4:	3524      	adds	r5, #36	; 0x24
   dc3e6:	e7f8      	b.n	dc3da <_ZN11SleepHelperD1Ev+0x22>
	_M_deallocate(_M_impl._M_start,
   dc3e8:	f8d4 0780 	ldr.w	r0, [r4, #1920]	; 0x780
	if (__p)
   dc3ec:	b108      	cbz	r0, dc3f2 <_ZN11SleepHelperD1Ev+0x3a>
	::operator delete(__p);
   dc3ee:	f7f7 fe56 	bl	d409e <_ZdlPv>
    class EventCombiner {
   dc3f2:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   dc3f6:	f003 fb57 	bl	dfaa8 <_ZN6StringD1Ev>
    class EventHistory : public SleepHelperRecursiveMutex {
   dc3fa:	f204 7054 	addw	r0, r4, #1876	; 0x754
   dc3fe:	f003 fb53 	bl	dfaa8 <_ZN6StringD1Ev>
            if (handle_) {
   dc402:	f8d4 0750 	ldr.w	r0, [r4, #1872]	; 0x750
   dc406:	f504 65e7 	add.w	r5, r4, #1848	; 0x738
   dc40a:	b108      	cbz	r0, dc410 <_ZN11SleepHelperD1Ev+0x58>
                os_mutex_recursive_destroy(handle_);
   dc40c:	f000 faec 	bl	dc9e8 <os_mutex_recursive_destroy>
    class AppCallback {
   dc410:	f204 7044 	addw	r0, r4, #1860	; 0x744
   dc414:	f7fe f8fb 	bl	da60e <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   dc418:	4628      	mov	r0, r5
   dc41a:	f7fe f8f8 	bl	da60e <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   dc41e:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   dc422:	f003 fb41 	bl	dfaa8 <_ZN6StringD1Ev>
   dc426:	f504 60e2 	add.w	r0, r4, #1808	; 0x710
   dc42a:	f7fd fcf9 	bl	d9e20 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc42e:	f8d4 5704 	ldr.w	r5, [r4, #1796]	; 0x704
   dc432:	f8d4 6708 	ldr.w	r6, [r4, #1800]	; 0x708
   dc436:	42ae      	cmp	r6, r5
   dc438:	d004      	beq.n	dc444 <_ZN11SleepHelperD1Ev+0x8c>
   dc43a:	4628      	mov	r0, r5
   dc43c:	f7f8 fb20 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc440:	3510      	adds	r5, #16
   dc442:	e7f8      	b.n	dc436 <_ZN11SleepHelperD1Ev+0x7e>
	_M_deallocate(_M_impl._M_start,
   dc444:	f8d4 0704 	ldr.w	r0, [r4, #1796]	; 0x704
	if (__p)
   dc448:	b108      	cbz	r0, dc44e <_ZN11SleepHelperD1Ev+0x96>
   dc44a:	f7f7 fe28 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc44e:	f8d4 56f8 	ldr.w	r5, [r4, #1784]	; 0x6f8
   dc452:	f8d4 66fc 	ldr.w	r6, [r4, #1788]	; 0x6fc
   dc456:	42ae      	cmp	r6, r5
   dc458:	d004      	beq.n	dc464 <_ZN11SleepHelperD1Ev+0xac>
   dc45a:	4628      	mov	r0, r5
   dc45c:	f7f8 fb10 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc460:	3510      	adds	r5, #16
   dc462:	e7f8      	b.n	dc456 <_ZN11SleepHelperD1Ev+0x9e>
	_M_deallocate(_M_impl._M_start,
   dc464:	f8d4 06f8 	ldr.w	r0, [r4, #1784]	; 0x6f8
	if (__p)
   dc468:	b108      	cbz	r0, dc46e <_ZN11SleepHelperD1Ev+0xb6>
   dc46a:	f7f7 fe18 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc46e:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
   dc472:	f8d4 66f0 	ldr.w	r6, [r4, #1776]	; 0x6f0
   dc476:	42ae      	cmp	r6, r5
   dc478:	d004      	beq.n	dc484 <_ZN11SleepHelperD1Ev+0xcc>
   dc47a:	4628      	mov	r0, r5
   dc47c:	f7f8 fb00 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc480:	3510      	adds	r5, #16
   dc482:	e7f8      	b.n	dc476 <_ZN11SleepHelperD1Ev+0xbe>
	_M_deallocate(_M_impl._M_start,
   dc484:	f8d4 06ec 	ldr.w	r0, [r4, #1772]	; 0x6ec
	if (__p)
   dc488:	b108      	cbz	r0, dc48e <_ZN11SleepHelperD1Ev+0xd6>
   dc48a:	f7f7 fe08 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc48e:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
   dc492:	f8d4 66e4 	ldr.w	r6, [r4, #1764]	; 0x6e4
   dc496:	42ae      	cmp	r6, r5
   dc498:	d004      	beq.n	dc4a4 <_ZN11SleepHelperD1Ev+0xec>
   dc49a:	4628      	mov	r0, r5
   dc49c:	f7f8 faf0 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc4a0:	3510      	adds	r5, #16
   dc4a2:	e7f8      	b.n	dc496 <_ZN11SleepHelperD1Ev+0xde>
	_M_deallocate(_M_impl._M_start,
   dc4a4:	f8d4 06e0 	ldr.w	r0, [r4, #1760]	; 0x6e0
	if (__p)
   dc4a8:	b108      	cbz	r0, dc4ae <_ZN11SleepHelperD1Ev+0xf6>
   dc4aa:	f7f7 fdf8 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   dc4ae:	f8d4 06d4 	ldr.w	r0, [r4, #1748]	; 0x6d4
	if (__p)
   dc4b2:	b108      	cbz	r0, dc4b8 <_ZN11SleepHelperD1Ev+0x100>
   dc4b4:	f7f7 fdf3 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc4b8:	f8d4 56c8 	ldr.w	r5, [r4, #1736]	; 0x6c8
   dc4bc:	f8d4 66cc 	ldr.w	r6, [r4, #1740]	; 0x6cc
   dc4c0:	42ae      	cmp	r6, r5
   dc4c2:	d004      	beq.n	dc4ce <_ZN11SleepHelperD1Ev+0x116>
   dc4c4:	4628      	mov	r0, r5
   dc4c6:	f7f8 fadb 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc4ca:	3510      	adds	r5, #16
   dc4cc:	e7f8      	b.n	dc4c0 <_ZN11SleepHelperD1Ev+0x108>
	_M_deallocate(_M_impl._M_start,
   dc4ce:	f8d4 06c8 	ldr.w	r0, [r4, #1736]	; 0x6c8
	if (__p)
   dc4d2:	b108      	cbz	r0, dc4d8 <_ZN11SleepHelperD1Ev+0x120>
   dc4d4:	f7f7 fde3 	bl	d409e <_ZdlPv>
   dc4d8:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   dc4dc:	f7fd fca0 	bl	d9e20 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
   dc4e0:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   dc4e4:	f7fe f94c 	bl	da780 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   dc4e8:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
   dc4ec:	f7fe f948 	bl	da780 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   dc4f0:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   dc4f4:	f7fd fb80 	bl	d9bf8 <_ZN8particle24SystemSleepConfigurationD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc4f8:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
   dc4fc:	f8d4 6654 	ldr.w	r6, [r4, #1620]	; 0x654
   dc500:	42ae      	cmp	r6, r5
   dc502:	d004      	beq.n	dc50e <_ZN11SleepHelperD1Ev+0x156>
   dc504:	4628      	mov	r0, r5
   dc506:	f7f8 fabb 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc50a:	3510      	adds	r5, #16
   dc50c:	e7f8      	b.n	dc500 <_ZN11SleepHelperD1Ev+0x148>
	_M_deallocate(_M_impl._M_start,
   dc50e:	f8d4 0650 	ldr.w	r0, [r4, #1616]	; 0x650
	if (__p)
   dc512:	b108      	cbz	r0, dc518 <_ZN11SleepHelperD1Ev+0x160>
   dc514:	f7f7 fdc3 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc518:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   dc51c:	f8d4 6648 	ldr.w	r6, [r4, #1608]	; 0x648
   dc520:	42ae      	cmp	r6, r5
   dc522:	d004      	beq.n	dc52e <_ZN11SleepHelperD1Ev+0x176>
   dc524:	4628      	mov	r0, r5
   dc526:	f7f8 faab 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dc52a:	3510      	adds	r5, #16
   dc52c:	e7f8      	b.n	dc520 <_ZN11SleepHelperD1Ev+0x168>
	_M_deallocate(_M_impl._M_start,
   dc52e:	f8d4 0644 	ldr.w	r0, [r4, #1604]	; 0x644
	if (__p)
   dc532:	b108      	cbz	r0, dc538 <_ZN11SleepHelperD1Ev+0x180>
   dc534:	f7f7 fdb3 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc538:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
   dc53c:	f8d4 763c 	ldr.w	r7, [r4, #1596]	; 0x63c
   dc540:	42b7      	cmp	r7, r6
   dc542:	d022      	beq.n	dc58a <_ZN11SleepHelperD1Ev+0x1d2>
   dc544:	e9d6 5808 	ldrd	r5, r8, [r6, #32]
   dc548:	45a8      	cmp	r8, r5
   dc54a:	d015      	beq.n	dc578 <_ZN11SleepHelperD1Ev+0x1c0>
class LocalTimeScheduleItem {
   dc54c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   dc550:	f003 faaa 	bl	dfaa8 <_ZN6StringD1Ev>
class LocalTimeRange : public LocalTimeRestrictedDate {
   dc554:	f105 0024 	add.w	r0, r5, #36	; 0x24
   dc558:	f7fa fc52 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
   dc55c:	f105 001c 	add.w	r0, r5, #28
   dc560:	f7fa fc4e 	bl	d6e00 <_ZN12LocalTimeHMSD1Ev>
	_M_deallocate(_M_impl._M_start,
   dc564:	6928      	ldr	r0, [r5, #16]
	if (__p)
   dc566:	b108      	cbz	r0, dc56c <_ZN11SleepHelperD1Ev+0x1b4>
   dc568:	f7f7 fd99 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   dc56c:	6868      	ldr	r0, [r5, #4]
	if (__p)
   dc56e:	b108      	cbz	r0, dc574 <_ZN11SleepHelperD1Ev+0x1bc>
   dc570:	f7f7 fd95 	bl	d409e <_ZdlPv>
   dc574:	354c      	adds	r5, #76	; 0x4c
   dc576:	e7e7      	b.n	dc548 <_ZN11SleepHelperD1Ev+0x190>
	_M_deallocate(_M_impl._M_start,
   dc578:	6a30      	ldr	r0, [r6, #32]
	if (__p)
   dc57a:	b108      	cbz	r0, dc580 <_ZN11SleepHelperD1Ev+0x1c8>
   dc57c:	f7f7 fd8f 	bl	d409e <_ZdlPv>
class LocalTimeSchedule {
   dc580:	4630      	mov	r0, r6
   dc582:	f003 fa91 	bl	dfaa8 <_ZN6StringD1Ev>
   dc586:	3630      	adds	r6, #48	; 0x30
   dc588:	e7da      	b.n	dc540 <_ZN11SleepHelperD1Ev+0x188>
	_M_deallocate(_M_impl._M_start,
   dc58a:	f8d4 0638 	ldr.w	r0, [r4, #1592]	; 0x638
	if (__p)
   dc58e:	b108      	cbz	r0, dc594 <_ZN11SleepHelperD1Ev+0x1dc>
   dc590:	f7f7 fd85 	bl	d409e <_ZdlPv>
   dc594:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   dc598:	f7fd face 	bl	d9b38 <_ZN11SleepHelper14PersistentDataD1Ev>
   dc59c:	1d20      	adds	r0, r4, #4
   dc59e:	f7fd fae9 	bl	d9b74 <_ZN11SleepHelper12SettingsFileD1Ev>
}
   dc5a2:	4620      	mov	r0, r4
   dc5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc5a8:	000e479c 	.word	0x000e479c

000dc5ac <_ZN11SleepHelperD0Ev>:
SleepHelper::~SleepHelper() {
   dc5ac:	b510      	push	{r4, lr}
   dc5ae:	4604      	mov	r4, r0
}
   dc5b0:	f7ff ff02 	bl	dc3b8 <_ZN11SleepHelperD1Ev>
   dc5b4:	4620      	mov	r0, r4
   dc5b6:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
   dc5ba:	f004 f8c1 	bl	e0740 <_ZdlPvj>
   dc5be:	4620      	mov	r0, r4
   dc5c0:	bd10      	pop	{r4, pc}
	...

000dc5c4 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc5c6:	b0bd      	sub	sp, #244	; 0xf4
   dc5c8:	4604      	mov	r4, r0
   dc5ca:	460d      	mov	r5, r1
        if (!Time.isValid()) {
   dc5cc:	f003 fdb4 	bl	e0138 <_ZN9TimeClass7isValidEv>
   dc5d0:	b950      	cbnz	r0, dc5e8 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x24>
            appLog.info("no RTC time, doing full wake");
   dc5d2:	6820      	ldr	r0, [r4, #0]
   dc5d4:	491e      	ldr	r1, [pc, #120]	; (dc650 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x8c>)
   dc5d6:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dc5da:	f7f7 fedf 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   dc5de:	2350      	movs	r3, #80	; 0x50
   dc5e0:	602b      	str	r3, [r5, #0]
      }
   dc5e2:	2001      	movs	r0, #1
   dc5e4:	b03d      	add	sp, #244	; 0xf4
   dc5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        time_t t = SleepHelper::instance().persistentData.getValue_lastFullWake();
   dc5e8:	f7fd ff4e 	bl	da488 <_ZN11SleepHelper8instanceEv>
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, lastFullWake));
   dc5ec:	2114      	movs	r1, #20
   dc5ee:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
   dc5f2:	f7fd ffe1 	bl	da5b8 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   dc5f6:	2700      	movs	r7, #0
   dc5f8:	4606      	mov	r6, r0
        if (t == 0) {
   dc5fa:	b918      	cbnz	r0, dc604 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x40>
            t = Time.now();
   dc5fc:	f003 fdb9 	bl	e0172 <_ZN9TimeClass3nowEv>
   dc600:	4606      	mov	r6, r0
   dc602:	17c7      	asrs	r7, r0, #31
class LocalTimeConvert {
   dc604:	2306      	movs	r3, #6
   dc606:	a801      	add	r0, sp, #4
   dc608:	9300      	str	r3, [sp, #0]
   dc60a:	f7fa fed5 	bl	d73b8 <_ZN22LocalTimePosixTimezoneC1Ev>
        conv.withTime(t).convert();
   dc60e:	4668      	mov	r0, sp
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   dc610:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
   dc614:	f7fb f8d6 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
        t = scheduleManager.getNextFullWake(conv);
   dc618:	6820      	ldr	r0, [r4, #0]
   dc61a:	4669      	mov	r1, sp
   dc61c:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   dc620:	f7fb fc63 	bl	d7eea <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   dc624:	460f      	mov	r7, r1
   dc626:	4606      	mov	r6, r0
        if (t <= Time.now()) {
   dc628:	f003 fda3 	bl	e0172 <_ZN9TimeClass3nowEv>
   dc62c:	17c1      	asrs	r1, r0, #31
   dc62e:	42b0      	cmp	r0, r6
   dc630:	eb71 0307 	sbcs.w	r3, r1, r7
   dc634:	db07      	blt.n	dc646 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x82>
            appLog.info("time to do full wake");
   dc636:	6820      	ldr	r0, [r4, #0]
   dc638:	4906      	ldr	r1, [pc, #24]	; (dc654 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x90>)
   dc63a:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dc63e:	f7f7 fead 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   dc642:	2350      	movs	r3, #80	; 0x50
   dc644:	602b      	str	r3, [r5, #0]
class LocalTimeConvert {
   dc646:	a801      	add	r0, sp, #4
   dc648:	f7fa fbf2 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
   dc64c:	e7c9      	b.n	dc5e2 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x1e>
   dc64e:	bf00      	nop
   dc650:	000e469d 	.word	0x000e469d
   dc654:	000e46ba 	.word	0x000e46ba

000dc658 <_ZN11SleepHelper22calculateSleepSettingsEb>:
void SleepHelper::calculateSleepSettings(bool isConnected) {
   dc658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc65c:	b0bf      	sub	sp, #252	; 0xfc
   dc65e:	4604      	mov	r4, r0
    sleepConfig = SystemSleepConfiguration();
   dc660:	f200 685c 	addw	r8, r0, #1628	; 0x65c
   dc664:	a802      	add	r0, sp, #8
void SleepHelper::calculateSleepSettings(bool isConnected) {
   dc666:	460e      	mov	r6, r1
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   dc668:	ad03      	add	r5, sp, #12
    sleepConfig = SystemSleepConfiguration();
   dc66a:	f7fd fab3 	bl	d9bd4 <_ZN8particle24SystemSleepConfigurationC1Ev>
        valid_ = config.valid_;
   dc66e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   dc672:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   dc676:	f504 62cc 	add.w	r2, r4, #1632	; 0x660
   dc67a:	af07      	add	r7, sp, #28
   dc67c:	46a9      	mov	r9, r5
   dc67e:	462b      	mov	r3, r5
   dc680:	cb03      	ldmia	r3!, {r0, r1}
   dc682:	42bb      	cmp	r3, r7
   dc684:	6010      	str	r0, [r2, #0]
   dc686:	6051      	str	r1, [r2, #4]
   dc688:	461d      	mov	r5, r3
   dc68a:	f102 0208 	add.w	r2, r2, #8
   dc68e:	d1f6      	bne.n	dc67e <_ZN11SleepHelper22calculateSleepSettingsEb+0x26>
        config.config_.wakeup_sources = nullptr;
   dc690:	2300      	movs	r3, #0
   dc692:	a802      	add	r0, sp, #8
   dc694:	9306      	str	r3, [sp, #24]
   dc696:	f7fd faaf 	bl	d9bf8 <_ZN8particle24SystemSleepConfigurationD1Ev>
        if (valid_) {
   dc69a:	f894 3670 	ldrb.w	r3, [r4, #1648]	; 0x670
   dc69e:	b113      	cbz	r3, dc6a6 <_ZN11SleepHelper22calculateSleepSettingsEb+0x4e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   dc6a0:	2302      	movs	r3, #2
   dc6a2:	f884 3664 	strb.w	r3, [r4, #1636]	; 0x664
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   dc6a6:	4b3f      	ldr	r3, [pc, #252]	; (dc7a4 <_ZN11SleepHelper22calculateSleepSettingsEb+0x14c>)
    sleepParams.isConnected = isConnected;
   dc6a8:	f884 6678 	strb.w	r6, [r4, #1656]	; 0x678
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   dc6ac:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   dc6b0:	4648      	mov	r0, r9
   dc6b2:	2306      	movs	r3, #6
   dc6b4:	9302      	str	r3, [sp, #8]
   dc6b6:	f7fa fe7f 	bl	d73b8 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   dc6ba:	f003 fd5a 	bl	e0172 <_ZN9TimeClass3nowEv>
   dc6be:	17c1      	asrs	r1, r0, #31
   dc6c0:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    time_t nextWake = scheduleManager.getNextWake(conv);
   dc6c4:	f504 65c7 	add.w	r5, r4, #1592	; 0x638
    conv.withCurrentTime().convert();
   dc6c8:	a802      	add	r0, sp, #8
   dc6ca:	f7fb f87b 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
    time_t nextWake = scheduleManager.getNextWake(conv);
   dc6ce:	a902      	add	r1, sp, #8
   dc6d0:	4628      	mov	r0, r5
   dc6d2:	f7fb fbdd 	bl	d7e90 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>
   dc6d6:	4606      	mov	r6, r0
   dc6d8:	460f      	mov	r7, r1
    if (nextWake != 0) {
   dc6da:	ea56 0307 	orrs.w	r3, r6, r7
   dc6de:	d007      	beq.n	dc6f0 <_ZN11SleepHelper22calculateSleepSettingsEb+0x98>
        sleepParams.sleepTimeMs = (nextWake - Time.now()) * 1000;
   dc6e0:	f003 fd47 	bl	e0172 <_ZN9TimeClass3nowEv>
   dc6e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc6e8:	1a36      	subs	r6, r6, r0
   dc6ea:	435e      	muls	r6, r3
   dc6ec:	f8c4 6690 	str.w	r6, [r4, #1680]	; 0x690
    sleepParams.nextFullWakeTime = scheduleManager.getNextFullWake(conv);
   dc6f0:	a902      	add	r1, sp, #8
   dc6f2:	4628      	mov	r0, r5
   dc6f4:	f7fb fbf9 	bl	d7eea <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   dc6f8:	f504 63d0 	add.w	r3, r4, #1664	; 0x680
   dc6fc:	4606      	mov	r6, r0
   dc6fe:	460f      	mov	r7, r1
   dc700:	e9c3 6700 	strd	r6, r7, [r3]
    if (sleepParams.nextFullWakeTime != 0) {
   dc704:	ea56 0307 	orrs.w	r3, r6, r7
   dc708:	d007      	beq.n	dc71a <_ZN11SleepHelper22calculateSleepSettingsEb+0xc2>
        sleepParams.timeUntilNextFullWakeMs = (sleepParams.nextFullWakeTime - Time.now()) * 1000;
   dc70a:	f003 fd32 	bl	e0172 <_ZN9TimeClass3nowEv>
   dc70e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc712:	1a36      	subs	r6, r6, r0
   dc714:	435e      	muls	r6, r3
   dc716:	f8c4 667c 	str.w	r6, [r4, #1660]	; 0x67c
    sleepParams.disconnectCellular = (sleepParams.timeUntilNextFullWakeMs >= minimumCellularOffTimeMs);
   dc71a:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
   dc71e:	f8d4 27a0 	ldr.w	r2, [r4, #1952]	; 0x7a0
      : _M_current(__i) { }
   dc722:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   dc726:	4293      	cmp	r3, r2
   dc728:	bf34      	ite	cc
   dc72a:	2300      	movcc	r3, #0
   dc72c:	2301      	movcs	r3, #1
   dc72e:	f884 3694 	strb.w	r3, [r4, #1684]	; 0x694
    sleepConfigurationFunctions.forEach(sleepConfig, sleepParams);
   dc732:	f504 66cf 	add.w	r6, r4, #1656	; 0x678
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dc736:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
   dc73a:	42ab      	cmp	r3, r5
   dc73c:	d00a      	beq.n	dc754 <_ZN11SleepHelper22calculateSleepSettingsEb+0xfc>
      if (_M_empty())
   dc73e:	68ab      	ldr	r3, [r5, #8]
   dc740:	b90b      	cbnz	r3, dc746 <_ZN11SleepHelper22calculateSleepSettingsEb+0xee>
	__throw_bad_function_call();
   dc742:	f004 f83d 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc746:	68eb      	ldr	r3, [r5, #12]
   dc748:	4628      	mov	r0, r5
   dc74a:	4632      	mov	r2, r6
   dc74c:	4641      	mov	r1, r8
   dc74e:	4798      	blx	r3
	++_M_current;
   dc750:	3510      	adds	r5, #16
	return *this;
   dc752:	e7f0      	b.n	dc736 <_ZN11SleepHelper22calculateSleepSettingsEb+0xde>
    if (sleepParams.sleepTimeMs < 1000) {
   dc754:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   dc758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        sleepParams.sleepTimeMs = 1000;
   dc75c:	bf3c      	itt	cc
   dc75e:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   dc762:	f8c4 3690 	strcc.w	r3, [r4, #1680]	; 0x690
        return hal_timer_millis(nullptr);
   dc766:	2000      	movs	r0, #0
   dc768:	f000 f996 	bl	dca98 <hal_timer_millis>
    sleepParams.calculatedMillis = System.millis();
   dc76c:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
   dc770:	e9c3 0100 	strd	r0, r1, [r3]
    if (sleepParams.isConnected && !sleepParams.disconnectCellular) {
   dc774:	f894 3678 	ldrb.w	r3, [r4, #1656]	; 0x678
   dc778:	b14b      	cbz	r3, dc78e <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
   dc77a:	f894 3694 	ldrb.w	r3, [r4, #1684]	; 0x694
   dc77e:	b933      	cbnz	r3, dc78e <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
        sleepConfig.network(NETWORK_INTERFACE_CELLULAR);
   dc780:	aa01      	add	r2, sp, #4
   dc782:	2104      	movs	r1, #4
   dc784:	4640      	mov	r0, r8
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   dc786:	f8ad 3004 	strh.w	r3, [sp, #4]
   dc78a:	f7fd fa6b 	bl	d9c64 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>
    sleepConfig.duration(sleepParams.sleepTimeMs);
   dc78e:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
   dc792:	4640      	mov	r0, r8
   dc794:	f7fd fa3c 	bl	d9c10 <_ZN8particle24SystemSleepConfiguration8durationEm>
class LocalTimeConvert {
   dc798:	4648      	mov	r0, r9
   dc79a:	f7fa fb49 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   dc79e:	b03f      	add	sp, #252	; 0xfc
   dc7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc7a4:	000dbba0 	.word	0x000dbba0

000dc7a8 <_ZN11SleepHelper24stateHandlerNoConnectionEv>:
void SleepHelper::stateHandlerNoConnection() {
   dc7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   dc7aa:	f890 37d1 	ldrb.w	r3, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerNoConnection() {
   dc7ae:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   dc7b0:	b9b3      	cbnz	r3, dc7e0 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
    if (!noConnectionFunctions.whileAnyTrue()) {
   dc7b2:	f500 60e2 	add.w	r0, r0, #1808	; 0x710
   dc7b6:	f7fe f82e 	bl	da816 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   dc7ba:	4605      	mov	r5, r0
   dc7bc:	b980      	cbnz	r0, dc7e0 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
        appLog.info("done with no connection mode, preparing to sleep");
   dc7be:	4909      	ldr	r1, [pc, #36]	; (dc7e4 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x3c>)
   dc7c0:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dc7c4:	f7f7 fdea 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        calculateSleepSettings(false);
   dc7c8:	4629      	mov	r1, r5
   dc7ca:	4620      	mov	r0, r4
   dc7cc:	f7ff ff44 	bl	dc658 <_ZN11SleepHelper22calculateSleepSettingsEb>
        stateHandler = &SleepHelper::stateHandlerSleep;
   dc7d0:	4b05      	ldr	r3, [pc, #20]	; (dc7e8 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x40>)
   dc7d2:	4669      	mov	r1, sp
   dc7d4:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dc7d8:	e9cd 3500 	strd	r3, r5, [sp]
   dc7dc:	f7fe f86a 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dc7e0:	b003      	add	sp, #12
   dc7e2:	bd30      	pop	{r4, r5, pc}
   dc7e4:	000e46cf 	.word	0x000e46cf
   dc7e8:	000dac01 	.word	0x000dac01

000dc7ec <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv>:
void SleepHelper::stateHandlerDisconnectBeforeSleep() {
   dc7ec:	b530      	push	{r4, r5, lr}
   dc7ee:	4604      	mov	r4, r0
   dc7f0:	b085      	sub	sp, #20
    calculateSleepSettings(true);
   dc7f2:	2101      	movs	r1, #1
   dc7f4:	f7ff ff30 	bl	dc658 <_ZN11SleepHelper22calculateSleepSettingsEb>
    if (!sleepParams.disconnectCellular) {
   dc7f8:	f504 65f5 	add.w	r5, r4, #1960	; 0x7a8
   dc7fc:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dc800:	f894 4694 	ldrb.w	r4, [r4, #1684]	; 0x694
   dc804:	b95c      	cbnz	r4, dc81e <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x32>
        appLog.info("sleep cycle is short, using cellular standby");
   dc806:	490f      	ldr	r1, [pc, #60]	; (dc844 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x58>)
   dc808:	f7f7 fdc8 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerSleep;
   dc80c:	4b0e      	ldr	r3, [pc, #56]	; (dc848 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x5c>)
   dc80e:	e9cd 3401 	strd	r3, r4, [sp, #4]
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   dc812:	a901      	add	r1, sp, #4
   dc814:	4628      	mov	r0, r5
   dc816:	f7fe f84d 	bl	da8b4 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dc81a:	b005      	add	sp, #20
   dc81c:	bd30      	pop	{r4, r5, pc}
    appLog.info("disconnecting from cloud");
   dc81e:	490b      	ldr	r1, [pc, #44]	; (dc84c <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x60>)
   dc820:	f7f7 fdbc 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   dc824:	2203      	movs	r2, #3
   dc826:	f241 3388 	movw	r3, #5000	; 0x1388
   dc82a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    Particle.disconnect(CloudDisconnectOptions().graceful(true).timeout(5000)); // 5 seconds
   dc82e:	a801      	add	r0, sp, #4
    graceful_ = enabled;
   dc830:	2301      	movs	r3, #1
   dc832:	f8ad 300c 	strh.w	r3, [sp, #12]
   dc836:	f000 fea6 	bl	dd586 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   dc83a:	4b05      	ldr	r3, [pc, #20]	; (dc850 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x64>)
   dc83c:	9301      	str	r3, [sp, #4]
   dc83e:	2300      	movs	r3, #0
   dc840:	9302      	str	r3, [sp, #8]
   dc842:	e7e6      	b.n	dc812 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x26>
   dc844:	000e4700 	.word	0x000e4700
   dc848:	000dac01 	.word	0x000dac01
   dc84c:	000e472d 	.word	0x000e472d
   dc850:	000da955 	.word	0x000da955

000dc854 <_ZN11SleepHelper18dataCaptureHandlerEv>:
void SleepHelper::dataCaptureHandler() {
   dc854:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (dataCaptureFunctions.isEmpty()) {
   dc856:	f8d0 26b4 	ldr.w	r2, [r0, #1716]	; 0x6b4
   dc85a:	f8d0 36b0 	ldr.w	r3, [r0, #1712]	; 0x6b0
   dc85e:	429a      	cmp	r2, r3
void SleepHelper::dataCaptureHandler() {
   dc860:	b0bd      	sub	sp, #244	; 0xf4
   dc862:	4604      	mov	r4, r0
    if (dataCaptureFunctions.isEmpty()) {
   dc864:	d016      	beq.n	dc894 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
    if (!Time.isValid()) {
   dc866:	f003 fc67 	bl	e0138 <_ZN9TimeClass7isValidEv>
   dc86a:	b198      	cbz	r0, dc894 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
    if (scheduleManager.getScheduleByName("data").isEmpty()) {
   dc86c:	f504 66c7 	add.w	r6, r4, #1592	; 0x638
   dc870:	4929      	ldr	r1, [pc, #164]	; (dc918 <_ZN11SleepHelper18dataCaptureHandlerEv+0xc4>)
   dc872:	4630      	mov	r0, r6
   dc874:	f7fb fd92 	bl	d839c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   dc878:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   dc87c:	429a      	cmp	r2, r3
   dc87e:	d009      	beq.n	dc894 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
    if (dataCaptureActive) {
   dc880:	f894 37d1 	ldrb.w	r3, [r4, #2001]	; 0x7d1
   dc884:	b143      	cbz	r3, dc898 <_ZN11SleepHelper18dataCaptureHandlerEv+0x44>
        if (!dataCaptureFunctions.whileAnyTrue()) {
   dc886:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   dc88a:	f7fd ffc4 	bl	da816 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   dc88e:	b908      	cbnz	r0, dc894 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
            dataCaptureActive = false;
   dc890:	f884 07d1 	strb.w	r0, [r4, #2001]	; 0x7d1
}
   dc894:	b03d      	add	sp, #244	; 0xf4
   dc896:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture));
   dc898:	f504 67bd 	add.w	r7, r4, #1512	; 0x5e8
   dc89c:	211c      	movs	r1, #28
   dc89e:	4638      	mov	r0, r7
   dc8a0:	f7fd fe8a 	bl	da5b8 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
        if (!persistentData.getValue_nextDataCapture()) {
   dc8a4:	b1d0      	cbz	r0, dc8dc <_ZN11SleepHelper18dataCaptureHandlerEv+0x88>
   dc8a6:	211c      	movs	r1, #28
   dc8a8:	4638      	mov	r0, r7
   dc8aa:	f7fd fe85 	bl	da5b8 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   dc8ae:	4605      	mov	r5, r0
            if (persistentData.getValue_nextDataCapture() <= Time.now()) {
   dc8b0:	f003 fc5f 	bl	e0172 <_ZN9TimeClass3nowEv>
   dc8b4:	2300      	movs	r3, #0
   dc8b6:	17c1      	asrs	r1, r0, #31
   dc8b8:	42a8      	cmp	r0, r5
   dc8ba:	eb71 0303 	sbcs.w	r3, r1, r3
   dc8be:	dbe9      	blt.n	dc894 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc8c0:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
                it->callbackState = newState;
   dc8c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   dc8c8:	f8d4 16c0 	ldr.w	r1, [r4, #1728]	; 0x6c0
   dc8cc:	4299      	cmp	r1, r3
   dc8ce:	d002      	beq.n	dc8d6 <_ZN11SleepHelper18dataCaptureHandlerEv+0x82>
                it->callbackState = newState;
   dc8d0:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   dc8d4:	e7f8      	b.n	dc8c8 <_ZN11SleepHelper18dataCaptureHandlerEv+0x74>
                dataCaptureActive = true;
   dc8d6:	2301      	movs	r3, #1
   dc8d8:	f884 37d1 	strb.w	r3, [r4, #2001]	; 0x7d1
   dc8dc:	2306      	movs	r3, #6
   dc8de:	a801      	add	r0, sp, #4
   dc8e0:	9300      	str	r3, [sp, #0]
   dc8e2:	f7fa fd69 	bl	d73b8 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   dc8e6:	f003 fc44 	bl	e0172 <_ZN9TimeClass3nowEv>
   dc8ea:	17c1      	asrs	r1, r0, #31
   dc8ec:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
            conv.withCurrentTime().convert();
   dc8f0:	4668      	mov	r0, sp
   dc8f2:	f7fa ff67 	bl	d77c4 <_ZN16LocalTimeConvert7convertEv>
            time_t t = scheduleManager.getNextDataCapture(conv);
   dc8f6:	4669      	mov	r1, sp
   dc8f8:	4630      	mov	r0, r6
   dc8fa:	f7fb fb25 	bl	d7f48 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>
   dc8fe:	4602      	mov	r2, r0
   dc900:	460b      	mov	r3, r1
            if (t != 0) {
   dc902:	ea52 0103 	orrs.w	r1, r2, r3
   dc906:	d003      	beq.n	dc910 <_ZN11SleepHelper18dataCaptureHandlerEv+0xbc>
            setValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture), (uint32_t)value);
   dc908:	211c      	movs	r1, #28
   dc90a:	4638      	mov	r0, r7
   dc90c:	f7fd fe66 	bl	da5dc <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
class LocalTimeConvert {
   dc910:	a801      	add	r0, sp, #4
   dc912:	f7fa fa8d 	bl	d6e30 <_ZN22LocalTimePosixTimezoneD1Ev>
   dc916:	e7bd      	b.n	dc894 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
   dc918:	000e419f 	.word	0x000e419f

000dc91c <_ZN11SleepHelper4loopEv>:
void SleepHelper::loop() {
   dc91c:	b570      	push	{r4, r5, r6, lr}
   dc91e:	f8d0 56a4 	ldr.w	r5, [r0, #1700]	; 0x6a4
   dc922:	4604      	mov	r4, r0
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dc924:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   dc928:	42ab      	cmp	r3, r5
   dc92a:	d004      	beq.n	dc936 <_ZN11SleepHelper4loopEv+0x1a>
                (*it)(args...);
   dc92c:	4628      	mov	r0, r5
   dc92e:	f7fd ffac 	bl	da88a <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   dc932:	3510      	adds	r5, #16
	return *this;
   dc934:	e7f6      	b.n	dc924 <_ZN11SleepHelper4loopEv+0x8>
    dataCaptureHandler();
   dc936:	4620      	mov	r0, r4
   dc938:	f7ff ff8c 	bl	dc854 <_ZN11SleepHelper18dataCaptureHandlerEv>
      if (_M_empty())
   dc93c:	f8d4 37b0 	ldr.w	r3, [r4, #1968]	; 0x7b0
   dc940:	b90b      	cbnz	r3, dc946 <_ZN11SleepHelper4loopEv+0x2a>
	__throw_bad_function_call();
   dc942:	f003 ff3d 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc946:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
   dc94a:	4621      	mov	r1, r4
   dc94c:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
}
   dc950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dc954:	4718      	bx	r3
	...

000dc958 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   dc958:	b508      	push	{r3, lr}
   dc95a:	4b02      	ldr	r3, [pc, #8]	; (dc964 <cellular_signal+0xc>)
   dc95c:	681b      	ldr	r3, [r3, #0]
   dc95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc960:	9301      	str	r3, [sp, #4]
   dc962:	bd08      	pop	{r3, pc}
   dc964:	00030274 	.word	0x00030274

000dc968 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   dc968:	b508      	push	{r3, lr}
   dc96a:	4b02      	ldr	r3, [pc, #8]	; (dc974 <os_thread_create+0xc>)
   dc96c:	681b      	ldr	r3, [r3, #0]
   dc96e:	685b      	ldr	r3, [r3, #4]
   dc970:	9301      	str	r3, [sp, #4]
   dc972:	bd08      	pop	{r3, pc}
   dc974:	00030248 	.word	0x00030248

000dc978 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   dc978:	b508      	push	{r3, lr}
   dc97a:	4b02      	ldr	r3, [pc, #8]	; (dc984 <os_thread_is_current+0xc>)
   dc97c:	681b      	ldr	r3, [r3, #0]
   dc97e:	689b      	ldr	r3, [r3, #8]
   dc980:	9301      	str	r3, [sp, #4]
   dc982:	bd08      	pop	{r3, pc}
   dc984:	00030248 	.word	0x00030248

000dc988 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   dc988:	b508      	push	{r3, lr}
   dc98a:	4b02      	ldr	r3, [pc, #8]	; (dc994 <os_thread_join+0xc>)
   dc98c:	681b      	ldr	r3, [r3, #0]
   dc98e:	691b      	ldr	r3, [r3, #16]
   dc990:	9301      	str	r3, [sp, #4]
   dc992:	bd08      	pop	{r3, pc}
   dc994:	00030248 	.word	0x00030248

000dc998 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   dc998:	b508      	push	{r3, lr}
   dc99a:	4b02      	ldr	r3, [pc, #8]	; (dc9a4 <os_thread_cleanup+0xc>)
   dc99c:	681b      	ldr	r3, [r3, #0]
   dc99e:	695b      	ldr	r3, [r3, #20]
   dc9a0:	9301      	str	r3, [sp, #4]
   dc9a2:	bd08      	pop	{r3, pc}
   dc9a4:	00030248 	.word	0x00030248

000dc9a8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   dc9a8:	b508      	push	{r3, lr}
   dc9aa:	4b02      	ldr	r3, [pc, #8]	; (dc9b4 <os_mutex_create+0xc>)
   dc9ac:	681b      	ldr	r3, [r3, #0]
   dc9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc9b0:	9301      	str	r3, [sp, #4]
   dc9b2:	bd08      	pop	{r3, pc}
   dc9b4:	00030248 	.word	0x00030248

000dc9b8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   dc9b8:	b508      	push	{r3, lr}
   dc9ba:	4b02      	ldr	r3, [pc, #8]	; (dc9c4 <os_mutex_lock+0xc>)
   dc9bc:	681b      	ldr	r3, [r3, #0]
   dc9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dc9c0:	9301      	str	r3, [sp, #4]
   dc9c2:	bd08      	pop	{r3, pc}
   dc9c4:	00030248 	.word	0x00030248

000dc9c8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   dc9c8:	b508      	push	{r3, lr}
   dc9ca:	4b02      	ldr	r3, [pc, #8]	; (dc9d4 <os_mutex_unlock+0xc>)
   dc9cc:	681b      	ldr	r3, [r3, #0]
   dc9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dc9d0:	9301      	str	r3, [sp, #4]
   dc9d2:	bd08      	pop	{r3, pc}
   dc9d4:	00030248 	.word	0x00030248

000dc9d8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   dc9d8:	b508      	push	{r3, lr}
   dc9da:	4b02      	ldr	r3, [pc, #8]	; (dc9e4 <os_mutex_recursive_create+0xc>)
   dc9dc:	681b      	ldr	r3, [r3, #0]
   dc9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc9e0:	9301      	str	r3, [sp, #4]
   dc9e2:	bd08      	pop	{r3, pc}
   dc9e4:	00030248 	.word	0x00030248

000dc9e8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   dc9e8:	b508      	push	{r3, lr}
   dc9ea:	4b02      	ldr	r3, [pc, #8]	; (dc9f4 <os_mutex_recursive_destroy+0xc>)
   dc9ec:	681b      	ldr	r3, [r3, #0]
   dc9ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dc9f0:	9301      	str	r3, [sp, #4]
   dc9f2:	bd08      	pop	{r3, pc}
   dc9f4:	00030248 	.word	0x00030248

000dc9f8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   dc9f8:	b508      	push	{r3, lr}
   dc9fa:	4b02      	ldr	r3, [pc, #8]	; (dca04 <os_mutex_recursive_lock+0xc>)
   dc9fc:	681b      	ldr	r3, [r3, #0]
   dc9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dca00:	9301      	str	r3, [sp, #4]
   dca02:	bd08      	pop	{r3, pc}
   dca04:	00030248 	.word	0x00030248

000dca08 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   dca08:	b508      	push	{r3, lr}
   dca0a:	4b02      	ldr	r3, [pc, #8]	; (dca14 <os_mutex_recursive_unlock+0xc>)
   dca0c:	681b      	ldr	r3, [r3, #0]
   dca0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dca10:	9301      	str	r3, [sp, #4]
   dca12:	bd08      	pop	{r3, pc}
   dca14:	00030248 	.word	0x00030248

000dca18 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   dca18:	b508      	push	{r3, lr}
   dca1a:	4b02      	ldr	r3, [pc, #8]	; (dca24 <os_thread_exit+0xc>)
   dca1c:	681b      	ldr	r3, [r3, #0]
   dca1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dca20:	9301      	str	r3, [sp, #4]
   dca22:	bd08      	pop	{r3, pc}
   dca24:	00030248 	.word	0x00030248

000dca28 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   dca28:	b508      	push	{r3, lr}
   dca2a:	4b02      	ldr	r3, [pc, #8]	; (dca34 <HAL_Feature_Set+0xc>)
   dca2c:	681b      	ldr	r3, [r3, #0]
   dca2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dca30:	9301      	str	r3, [sp, #4]
   dca32:	bd08      	pop	{r3, pc}
   dca34:	00030234 	.word	0x00030234

000dca38 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   dca38:	b508      	push	{r3, lr}
   dca3a:	4b02      	ldr	r3, [pc, #8]	; (dca44 <HAL_Core_Get_Last_Reset_Info+0xc>)
   dca3c:	681b      	ldr	r3, [r3, #0]
   dca3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dca40:	9301      	str	r3, [sp, #4]
   dca42:	bd08      	pop	{r3, pc}
   dca44:	00030234 	.word	0x00030234

000dca48 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   dca48:	b508      	push	{r3, lr}
   dca4a:	4b02      	ldr	r3, [pc, #8]	; (dca54 <HAL_RNG_GetRandomNumber+0xc>)
   dca4c:	681b      	ldr	r3, [r3, #0]
   dca4e:	685b      	ldr	r3, [r3, #4]
   dca50:	9301      	str	r3, [sp, #4]
   dca52:	bd08      	pop	{r3, pc}
   dca54:	00030218 	.word	0x00030218

000dca58 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   dca58:	b508      	push	{r3, lr}
   dca5a:	4b02      	ldr	r3, [pc, #8]	; (dca64 <HAL_Delay_Milliseconds+0xc>)
   dca5c:	681b      	ldr	r3, [r3, #0]
   dca5e:	689b      	ldr	r3, [r3, #8]
   dca60:	9301      	str	r3, [sp, #4]
   dca62:	bd08      	pop	{r3, pc}
   dca64:	00030218 	.word	0x00030218

000dca68 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   dca68:	b508      	push	{r3, lr}
   dca6a:	4b02      	ldr	r3, [pc, #8]	; (dca74 <HAL_Delay_Microseconds+0xc>)
   dca6c:	681b      	ldr	r3, [r3, #0]
   dca6e:	68db      	ldr	r3, [r3, #12]
   dca70:	9301      	str	r3, [sp, #4]
   dca72:	bd08      	pop	{r3, pc}
   dca74:	00030218 	.word	0x00030218

000dca78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   dca78:	b508      	push	{r3, lr}
   dca7a:	4b02      	ldr	r3, [pc, #8]	; (dca84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   dca7c:	681b      	ldr	r3, [r3, #0]
   dca7e:	695b      	ldr	r3, [r3, #20]
   dca80:	9301      	str	r3, [sp, #4]
   dca82:	bd08      	pop	{r3, pc}
   dca84:	00030218 	.word	0x00030218

000dca88 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   dca88:	b508      	push	{r3, lr}
   dca8a:	4b02      	ldr	r3, [pc, #8]	; (dca94 <hal_rtc_time_is_valid+0xc>)
   dca8c:	681b      	ldr	r3, [r3, #0]
   dca8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dca90:	9301      	str	r3, [sp, #4]
   dca92:	bd08      	pop	{r3, pc}
   dca94:	00030218 	.word	0x00030218

000dca98 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   dca98:	b508      	push	{r3, lr}
   dca9a:	4b02      	ldr	r3, [pc, #8]	; (dcaa4 <hal_timer_millis+0xc>)
   dca9c:	681b      	ldr	r3, [r3, #0]
   dca9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dcaa0:	9301      	str	r3, [sp, #4]
   dcaa2:	bd08      	pop	{r3, pc}
   dcaa4:	00030218 	.word	0x00030218

000dcaa8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   dcaa8:	b508      	push	{r3, lr}
   dcaaa:	4b02      	ldr	r3, [pc, #8]	; (dcab4 <hal_rtc_get_time+0xc>)
   dcaac:	681b      	ldr	r3, [r3, #0]
   dcaae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dcab0:	9301      	str	r3, [sp, #4]
   dcab2:	bd08      	pop	{r3, pc}
   dcab4:	00030218 	.word	0x00030218

000dcab8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   dcab8:	b508      	push	{r3, lr}
   dcaba:	4b02      	ldr	r3, [pc, #8]	; (dcac4 <hal_rtc_set_time+0xc>)
   dcabc:	681b      	ldr	r3, [r3, #0]
   dcabe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   dcac0:	9301      	str	r3, [sp, #4]
   dcac2:	bd08      	pop	{r3, pc}
   dcac4:	00030218 	.word	0x00030218

000dcac8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   dcac8:	b508      	push	{r3, lr}
   dcaca:	4b02      	ldr	r3, [pc, #8]	; (dcad4 <HAL_Validate_Pin_Function+0xc>)
   dcacc:	681b      	ldr	r3, [r3, #0]
   dcace:	685b      	ldr	r3, [r3, #4]
   dcad0:	9301      	str	r3, [sp, #4]
   dcad2:	bd08      	pop	{r3, pc}
   dcad4:	0003022c 	.word	0x0003022c

000dcad8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   dcad8:	b508      	push	{r3, lr}
   dcada:	4b02      	ldr	r3, [pc, #8]	; (dcae4 <HAL_Pin_Mode+0xc>)
   dcadc:	681b      	ldr	r3, [r3, #0]
   dcade:	689b      	ldr	r3, [r3, #8]
   dcae0:	9301      	str	r3, [sp, #4]
   dcae2:	bd08      	pop	{r3, pc}
   dcae4:	0003022c 	.word	0x0003022c

000dcae8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   dcae8:	b508      	push	{r3, lr}
   dcaea:	4b02      	ldr	r3, [pc, #8]	; (dcaf4 <HAL_Get_Pin_Mode+0xc>)
   dcaec:	681b      	ldr	r3, [r3, #0]
   dcaee:	68db      	ldr	r3, [r3, #12]
   dcaf0:	9301      	str	r3, [sp, #4]
   dcaf2:	bd08      	pop	{r3, pc}
   dcaf4:	0003022c 	.word	0x0003022c

000dcaf8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   dcaf8:	b508      	push	{r3, lr}
   dcafa:	4b02      	ldr	r3, [pc, #8]	; (dcb04 <HAL_GPIO_Write+0xc>)
   dcafc:	681b      	ldr	r3, [r3, #0]
   dcafe:	691b      	ldr	r3, [r3, #16]
   dcb00:	9301      	str	r3, [sp, #4]
   dcb02:	bd08      	pop	{r3, pc}
   dcb04:	0003022c 	.word	0x0003022c

000dcb08 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   dcb08:	b508      	push	{r3, lr}
   dcb0a:	4b02      	ldr	r3, [pc, #8]	; (dcb14 <HAL_GPIO_Read+0xc>)
   dcb0c:	681b      	ldr	r3, [r3, #0]
   dcb0e:	695b      	ldr	r3, [r3, #20]
   dcb10:	9301      	str	r3, [sp, #4]
   dcb12:	bd08      	pop	{r3, pc}
   dcb14:	0003022c 	.word	0x0003022c

000dcb18 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   dcb18:	b508      	push	{r3, lr}
   dcb1a:	4b02      	ldr	r3, [pc, #8]	; (dcb24 <hal_adc_read+0xc>)
   dcb1c:	681b      	ldr	r3, [r3, #0]
   dcb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dcb20:	9301      	str	r3, [sp, #4]
   dcb22:	bd08      	pop	{r3, pc}
   dcb24:	0003022c 	.word	0x0003022c

000dcb28 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   dcb28:	b508      	push	{r3, lr}
   dcb2a:	4b02      	ldr	r3, [pc, #8]	; (dcb34 <hal_i2c_begin+0xc>)
   dcb2c:	681b      	ldr	r3, [r3, #0]
   dcb2e:	68db      	ldr	r3, [r3, #12]
   dcb30:	9301      	str	r3, [sp, #4]
   dcb32:	bd08      	pop	{r3, pc}
   dcb34:	00030228 	.word	0x00030228

000dcb38 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   dcb38:	b508      	push	{r3, lr}
   dcb3a:	4b02      	ldr	r3, [pc, #8]	; (dcb44 <hal_i2c_begin_transmission+0xc>)
   dcb3c:	681b      	ldr	r3, [r3, #0]
   dcb3e:	699b      	ldr	r3, [r3, #24]
   dcb40:	9301      	str	r3, [sp, #4]
   dcb42:	bd08      	pop	{r3, pc}
   dcb44:	00030228 	.word	0x00030228

000dcb48 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   dcb48:	b508      	push	{r3, lr}
   dcb4a:	4b02      	ldr	r3, [pc, #8]	; (dcb54 <hal_i2c_end_transmission+0xc>)
   dcb4c:	681b      	ldr	r3, [r3, #0]
   dcb4e:	69db      	ldr	r3, [r3, #28]
   dcb50:	9301      	str	r3, [sp, #4]
   dcb52:	bd08      	pop	{r3, pc}
   dcb54:	00030228 	.word	0x00030228

000dcb58 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   dcb58:	b508      	push	{r3, lr}
   dcb5a:	4b02      	ldr	r3, [pc, #8]	; (dcb64 <hal_i2c_write+0xc>)
   dcb5c:	681b      	ldr	r3, [r3, #0]
   dcb5e:	6a1b      	ldr	r3, [r3, #32]
   dcb60:	9301      	str	r3, [sp, #4]
   dcb62:	bd08      	pop	{r3, pc}
   dcb64:	00030228 	.word	0x00030228

000dcb68 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   dcb68:	b508      	push	{r3, lr}
   dcb6a:	4b02      	ldr	r3, [pc, #8]	; (dcb74 <hal_i2c_available+0xc>)
   dcb6c:	681b      	ldr	r3, [r3, #0]
   dcb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dcb70:	9301      	str	r3, [sp, #4]
   dcb72:	bd08      	pop	{r3, pc}
   dcb74:	00030228 	.word	0x00030228

000dcb78 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   dcb78:	b508      	push	{r3, lr}
   dcb7a:	4b02      	ldr	r3, [pc, #8]	; (dcb84 <hal_i2c_read+0xc>)
   dcb7c:	681b      	ldr	r3, [r3, #0]
   dcb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dcb80:	9301      	str	r3, [sp, #4]
   dcb82:	bd08      	pop	{r3, pc}
   dcb84:	00030228 	.word	0x00030228

000dcb88 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   dcb88:	b508      	push	{r3, lr}
   dcb8a:	4b02      	ldr	r3, [pc, #8]	; (dcb94 <hal_i2c_peek+0xc>)
   dcb8c:	681b      	ldr	r3, [r3, #0]
   dcb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dcb90:	9301      	str	r3, [sp, #4]
   dcb92:	bd08      	pop	{r3, pc}
   dcb94:	00030228 	.word	0x00030228

000dcb98 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   dcb98:	b508      	push	{r3, lr}
   dcb9a:	4b02      	ldr	r3, [pc, #8]	; (dcba4 <hal_i2c_flush+0xc>)
   dcb9c:	681b      	ldr	r3, [r3, #0]
   dcb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dcba0:	9301      	str	r3, [sp, #4]
   dcba2:	bd08      	pop	{r3, pc}
   dcba4:	00030228 	.word	0x00030228

000dcba8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   dcba8:	b508      	push	{r3, lr}
   dcbaa:	4b02      	ldr	r3, [pc, #8]	; (dcbb4 <hal_i2c_is_enabled+0xc>)
   dcbac:	681b      	ldr	r3, [r3, #0]
   dcbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dcbb0:	9301      	str	r3, [sp, #4]
   dcbb2:	bd08      	pop	{r3, pc}
   dcbb4:	00030228 	.word	0x00030228

000dcbb8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   dcbb8:	b508      	push	{r3, lr}
   dcbba:	4b02      	ldr	r3, [pc, #8]	; (dcbc4 <hal_i2c_init+0xc>)
   dcbbc:	681b      	ldr	r3, [r3, #0]
   dcbbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dcbc0:	9301      	str	r3, [sp, #4]
   dcbc2:	bd08      	pop	{r3, pc}
   dcbc4:	00030228 	.word	0x00030228

000dcbc8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   dcbc8:	b508      	push	{r3, lr}
   dcbca:	4b02      	ldr	r3, [pc, #8]	; (dcbd4 <hal_i2c_lock+0xc>)
   dcbcc:	681b      	ldr	r3, [r3, #0]
   dcbce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dcbd0:	9301      	str	r3, [sp, #4]
   dcbd2:	bd08      	pop	{r3, pc}
   dcbd4:	00030228 	.word	0x00030228

000dcbd8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   dcbd8:	b508      	push	{r3, lr}
   dcbda:	4b02      	ldr	r3, [pc, #8]	; (dcbe4 <hal_i2c_unlock+0xc>)
   dcbdc:	681b      	ldr	r3, [r3, #0]
   dcbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dcbe0:	9301      	str	r3, [sp, #4]
   dcbe2:	bd08      	pop	{r3, pc}
   dcbe4:	00030228 	.word	0x00030228

000dcbe8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   dcbe8:	b508      	push	{r3, lr}
   dcbea:	4b02      	ldr	r3, [pc, #8]	; (dcbf4 <hal_i2c_request_ex+0xc>)
   dcbec:	681b      	ldr	r3, [r3, #0]
   dcbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dcbf0:	9301      	str	r3, [sp, #4]
   dcbf2:	bd08      	pop	{r3, pc}
   dcbf4:	00030228 	.word	0x00030228

000dcbf8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   dcbf8:	b508      	push	{r3, lr}
   dcbfa:	4b02      	ldr	r3, [pc, #8]	; (dcc04 <inet_inet_ntop+0xc>)
   dcbfc:	681b      	ldr	r3, [r3, #0]
   dcbfe:	695b      	ldr	r3, [r3, #20]
   dcc00:	9301      	str	r3, [sp, #4]
   dcc02:	bd08      	pop	{r3, pc}
   dcc04:	00030264 	.word	0x00030264

000dcc08 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   dcc08:	b508      	push	{r3, lr}
   dcc0a:	4b02      	ldr	r3, [pc, #8]	; (dcc14 <netdb_freeaddrinfo+0xc>)
   dcc0c:	681b      	ldr	r3, [r3, #0]
   dcc0e:	689b      	ldr	r3, [r3, #8]
   dcc10:	9301      	str	r3, [sp, #4]
   dcc12:	bd08      	pop	{r3, pc}
   dcc14:	00030268 	.word	0x00030268

000dcc18 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   dcc18:	b508      	push	{r3, lr}
   dcc1a:	4b02      	ldr	r3, [pc, #8]	; (dcc24 <netdb_getaddrinfo+0xc>)
   dcc1c:	681b      	ldr	r3, [r3, #0]
   dcc1e:	68db      	ldr	r3, [r3, #12]
   dcc20:	9301      	str	r3, [sp, #4]
   dcc22:	bd08      	pop	{r3, pc}
   dcc24:	00030268 	.word	0x00030268

000dcc28 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   dcc28:	b508      	push	{r3, lr}
   dcc2a:	4b02      	ldr	r3, [pc, #8]	; (dcc34 <hal_spi_init+0xc>)
   dcc2c:	681b      	ldr	r3, [r3, #0]
   dcc2e:	69db      	ldr	r3, [r3, #28]
   dcc30:	9301      	str	r3, [sp, #4]
   dcc32:	bd08      	pop	{r3, pc}
   dcc34:	00030230 	.word	0x00030230

000dcc38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   dcc38:	b508      	push	{r3, lr}
   dcc3a:	4b02      	ldr	r3, [pc, #8]	; (dcc44 <hal_spi_is_enabled+0xc>)
   dcc3c:	681b      	ldr	r3, [r3, #0]
   dcc3e:	6a1b      	ldr	r3, [r3, #32]
   dcc40:	9301      	str	r3, [sp, #4]
   dcc42:	bd08      	pop	{r3, pc}
   dcc44:	00030230 	.word	0x00030230

000dcc48 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   dcc48:	b508      	push	{r3, lr}
   dcc4a:	4b02      	ldr	r3, [pc, #8]	; (dcc54 <_open+0xc>)
   dcc4c:	681b      	ldr	r3, [r3, #0]
   dcc4e:	681b      	ldr	r3, [r3, #0]
   dcc50:	9301      	str	r3, [sp, #4]
   dcc52:	bd08      	pop	{r3, pc}
   dcc54:	00030284 	.word	0x00030284

000dcc58 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   dcc58:	b508      	push	{r3, lr}
   dcc5a:	4b02      	ldr	r3, [pc, #8]	; (dcc64 <_write+0xc>)
   dcc5c:	681b      	ldr	r3, [r3, #0]
   dcc5e:	685b      	ldr	r3, [r3, #4]
   dcc60:	9301      	str	r3, [sp, #4]
   dcc62:	bd08      	pop	{r3, pc}
   dcc64:	00030284 	.word	0x00030284

000dcc68 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   dcc68:	b508      	push	{r3, lr}
   dcc6a:	4b02      	ldr	r3, [pc, #8]	; (dcc74 <_read+0xc>)
   dcc6c:	681b      	ldr	r3, [r3, #0]
   dcc6e:	689b      	ldr	r3, [r3, #8]
   dcc70:	9301      	str	r3, [sp, #4]
   dcc72:	bd08      	pop	{r3, pc}
   dcc74:	00030284 	.word	0x00030284

000dcc78 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   dcc78:	b508      	push	{r3, lr}
   dcc7a:	4b02      	ldr	r3, [pc, #8]	; (dcc84 <_close+0xc>)
   dcc7c:	681b      	ldr	r3, [r3, #0]
   dcc7e:	68db      	ldr	r3, [r3, #12]
   dcc80:	9301      	str	r3, [sp, #4]
   dcc82:	bd08      	pop	{r3, pc}
   dcc84:	00030284 	.word	0x00030284

000dcc88 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   dcc88:	b508      	push	{r3, lr}
   dcc8a:	4b02      	ldr	r3, [pc, #8]	; (dcc94 <_fstat+0xc>)
   dcc8c:	681b      	ldr	r3, [r3, #0]
   dcc8e:	695b      	ldr	r3, [r3, #20]
   dcc90:	9301      	str	r3, [sp, #4]
   dcc92:	bd08      	pop	{r3, pc}
   dcc94:	00030284 	.word	0x00030284

000dcc98 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   dcc98:	b508      	push	{r3, lr}
   dcc9a:	4b02      	ldr	r3, [pc, #8]	; (dcca4 <_lseek+0xc>)
   dcc9c:	681b      	ldr	r3, [r3, #0]
   dcc9e:	6a1b      	ldr	r3, [r3, #32]
   dcca0:	9301      	str	r3, [sp, #4]
   dcca2:	bd08      	pop	{r3, pc}
   dcca4:	00030284 	.word	0x00030284

000dcca8 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   dcca8:	b508      	push	{r3, lr}
   dccaa:	4b02      	ldr	r3, [pc, #8]	; (dccb4 <stat+0xc>)
   dccac:	681b      	ldr	r3, [r3, #0]
   dccae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dccb0:	9301      	str	r3, [sp, #4]
   dccb2:	bd08      	pop	{r3, pc}
   dccb4:	00030284 	.word	0x00030284

000dccb8 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   dccb8:	b508      	push	{r3, lr}
   dccba:	4b02      	ldr	r3, [pc, #8]	; (dccc4 <mkdir+0xc>)
   dccbc:	681b      	ldr	r3, [r3, #0]
   dccbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dccc0:	9301      	str	r3, [sp, #4]
   dccc2:	bd08      	pop	{r3, pc}
   dccc4:	00030284 	.word	0x00030284

000dccc8 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   dccc8:	b508      	push	{r3, lr}
   dccca:	4b02      	ldr	r3, [pc, #8]	; (dccd4 <_unlink+0xc>)
   dcccc:	681b      	ldr	r3, [r3, #0]
   dccce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dccd0:	9301      	str	r3, [sp, #4]
   dccd2:	bd08      	pop	{r3, pc}
   dccd4:	00030284 	.word	0x00030284

000dccd8 <_link>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
   dccd8:	b508      	push	{r3, lr}
   dccda:	4b02      	ldr	r3, [pc, #8]	; (dcce4 <_link+0xc>)
   dccdc:	681b      	ldr	r3, [r3, #0]
   dccde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dcce0:	9301      	str	r3, [sp, #4]
   dcce2:	bd08      	pop	{r3, pc}
   dcce4:	00030284 	.word	0x00030284

000dcce8 <opendir>:
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   dcce8:	b508      	push	{r3, lr}
   dccea:	4b02      	ldr	r3, [pc, #8]	; (dccf4 <opendir+0xc>)
   dccec:	681b      	ldr	r3, [r3, #0]
   dccee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dccf0:	9301      	str	r3, [sp, #4]
   dccf2:	bd08      	pop	{r3, pc}
   dccf4:	00030284 	.word	0x00030284

000dccf8 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   dccf8:	b508      	push	{r3, lr}
   dccfa:	4b02      	ldr	r3, [pc, #8]	; (dcd04 <readdir+0xc>)
   dccfc:	681b      	ldr	r3, [r3, #0]
   dccfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dcd00:	9301      	str	r3, [sp, #4]
   dcd02:	bd08      	pop	{r3, pc}
   dcd04:	00030284 	.word	0x00030284

000dcd08 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   dcd08:	b508      	push	{r3, lr}
   dcd0a:	4b02      	ldr	r3, [pc, #8]	; (dcd14 <closedir+0xc>)
   dcd0c:	681b      	ldr	r3, [r3, #0]
   dcd0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dcd10:	9301      	str	r3, [sp, #4]
   dcd12:	bd08      	pop	{r3, pc}
   dcd14:	00030284 	.word	0x00030284

000dcd18 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   dcd18:	b508      	push	{r3, lr}
   dcd1a:	4b02      	ldr	r3, [pc, #8]	; (dcd24 <hal_usart_init+0xc>)
   dcd1c:	681b      	ldr	r3, [r3, #0]
   dcd1e:	681b      	ldr	r3, [r3, #0]
   dcd20:	9301      	str	r3, [sp, #4]
   dcd22:	bd08      	pop	{r3, pc}
   dcd24:	0003023c 	.word	0x0003023c

000dcd28 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   dcd28:	b508      	push	{r3, lr}
   dcd2a:	4b02      	ldr	r3, [pc, #8]	; (dcd34 <hal_usart_end+0xc>)
   dcd2c:	681b      	ldr	r3, [r3, #0]
   dcd2e:	689b      	ldr	r3, [r3, #8]
   dcd30:	9301      	str	r3, [sp, #4]
   dcd32:	bd08      	pop	{r3, pc}
   dcd34:	0003023c 	.word	0x0003023c

000dcd38 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   dcd38:	b508      	push	{r3, lr}
   dcd3a:	4b02      	ldr	r3, [pc, #8]	; (dcd44 <hal_usart_write+0xc>)
   dcd3c:	681b      	ldr	r3, [r3, #0]
   dcd3e:	68db      	ldr	r3, [r3, #12]
   dcd40:	9301      	str	r3, [sp, #4]
   dcd42:	bd08      	pop	{r3, pc}
   dcd44:	0003023c 	.word	0x0003023c

000dcd48 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   dcd48:	b508      	push	{r3, lr}
   dcd4a:	4b02      	ldr	r3, [pc, #8]	; (dcd54 <hal_usart_available+0xc>)
   dcd4c:	681b      	ldr	r3, [r3, #0]
   dcd4e:	691b      	ldr	r3, [r3, #16]
   dcd50:	9301      	str	r3, [sp, #4]
   dcd52:	bd08      	pop	{r3, pc}
   dcd54:	0003023c 	.word	0x0003023c

000dcd58 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   dcd58:	b508      	push	{r3, lr}
   dcd5a:	4b02      	ldr	r3, [pc, #8]	; (dcd64 <hal_usart_read+0xc>)
   dcd5c:	681b      	ldr	r3, [r3, #0]
   dcd5e:	695b      	ldr	r3, [r3, #20]
   dcd60:	9301      	str	r3, [sp, #4]
   dcd62:	bd08      	pop	{r3, pc}
   dcd64:	0003023c 	.word	0x0003023c

000dcd68 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   dcd68:	b508      	push	{r3, lr}
   dcd6a:	4b02      	ldr	r3, [pc, #8]	; (dcd74 <hal_usart_peek+0xc>)
   dcd6c:	681b      	ldr	r3, [r3, #0]
   dcd6e:	699b      	ldr	r3, [r3, #24]
   dcd70:	9301      	str	r3, [sp, #4]
   dcd72:	bd08      	pop	{r3, pc}
   dcd74:	0003023c 	.word	0x0003023c

000dcd78 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   dcd78:	b508      	push	{r3, lr}
   dcd7a:	4b02      	ldr	r3, [pc, #8]	; (dcd84 <hal_usart_flush+0xc>)
   dcd7c:	681b      	ldr	r3, [r3, #0]
   dcd7e:	69db      	ldr	r3, [r3, #28]
   dcd80:	9301      	str	r3, [sp, #4]
   dcd82:	bd08      	pop	{r3, pc}
   dcd84:	0003023c 	.word	0x0003023c

000dcd88 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   dcd88:	b508      	push	{r3, lr}
   dcd8a:	4b02      	ldr	r3, [pc, #8]	; (dcd94 <hal_usart_is_enabled+0xc>)
   dcd8c:	681b      	ldr	r3, [r3, #0]
   dcd8e:	6a1b      	ldr	r3, [r3, #32]
   dcd90:	9301      	str	r3, [sp, #4]
   dcd92:	bd08      	pop	{r3, pc}
   dcd94:	0003023c 	.word	0x0003023c

000dcd98 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   dcd98:	b508      	push	{r3, lr}
   dcd9a:	4b02      	ldr	r3, [pc, #8]	; (dcda4 <hal_usart_available_data_for_write+0xc>)
   dcd9c:	681b      	ldr	r3, [r3, #0]
   dcd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dcda0:	9301      	str	r3, [sp, #4]
   dcda2:	bd08      	pop	{r3, pc}
   dcda4:	0003023c 	.word	0x0003023c

000dcda8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   dcda8:	b508      	push	{r3, lr}
   dcdaa:	4b02      	ldr	r3, [pc, #8]	; (dcdb4 <hal_usart_begin_config+0xc>)
   dcdac:	681b      	ldr	r3, [r3, #0]
   dcdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dcdb0:	9301      	str	r3, [sp, #4]
   dcdb2:	bd08      	pop	{r3, pc}
   dcdb4:	0003023c 	.word	0x0003023c

000dcdb8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   dcdb8:	b508      	push	{r3, lr}
   dcdba:	4b02      	ldr	r3, [pc, #8]	; (dcdc4 <HAL_USB_USART_Init+0xc>)
   dcdbc:	681b      	ldr	r3, [r3, #0]
   dcdbe:	681b      	ldr	r3, [r3, #0]
   dcdc0:	9301      	str	r3, [sp, #4]
   dcdc2:	bd08      	pop	{r3, pc}
   dcdc4:	0003024c 	.word	0x0003024c

000dcdc8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   dcdc8:	b508      	push	{r3, lr}
   dcdca:	4b02      	ldr	r3, [pc, #8]	; (dcdd4 <HAL_USB_USART_Begin+0xc>)
   dcdcc:	681b      	ldr	r3, [r3, #0]
   dcdce:	685b      	ldr	r3, [r3, #4]
   dcdd0:	9301      	str	r3, [sp, #4]
   dcdd2:	bd08      	pop	{r3, pc}
   dcdd4:	0003024c 	.word	0x0003024c

000dcdd8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   dcdd8:	b508      	push	{r3, lr}
   dcdda:	4b02      	ldr	r3, [pc, #8]	; (dcde4 <HAL_USB_USART_End+0xc>)
   dcddc:	681b      	ldr	r3, [r3, #0]
   dcdde:	689b      	ldr	r3, [r3, #8]
   dcde0:	9301      	str	r3, [sp, #4]
   dcde2:	bd08      	pop	{r3, pc}
   dcde4:	0003024c 	.word	0x0003024c

000dcde8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   dcde8:	b508      	push	{r3, lr}
   dcdea:	4b02      	ldr	r3, [pc, #8]	; (dcdf4 <HAL_USB_USART_Available_Data+0xc>)
   dcdec:	681b      	ldr	r3, [r3, #0]
   dcdee:	691b      	ldr	r3, [r3, #16]
   dcdf0:	9301      	str	r3, [sp, #4]
   dcdf2:	bd08      	pop	{r3, pc}
   dcdf4:	0003024c 	.word	0x0003024c

000dcdf8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   dcdf8:	b508      	push	{r3, lr}
   dcdfa:	4b02      	ldr	r3, [pc, #8]	; (dce04 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   dcdfc:	681b      	ldr	r3, [r3, #0]
   dcdfe:	695b      	ldr	r3, [r3, #20]
   dce00:	9301      	str	r3, [sp, #4]
   dce02:	bd08      	pop	{r3, pc}
   dce04:	0003024c 	.word	0x0003024c

000dce08 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dce08:	b508      	push	{r3, lr}
   dce0a:	4b02      	ldr	r3, [pc, #8]	; (dce14 <HAL_USB_USART_Receive_Data+0xc>)
   dce0c:	681b      	ldr	r3, [r3, #0]
   dce0e:	699b      	ldr	r3, [r3, #24]
   dce10:	9301      	str	r3, [sp, #4]
   dce12:	bd08      	pop	{r3, pc}
   dce14:	0003024c 	.word	0x0003024c

000dce18 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dce18:	b508      	push	{r3, lr}
   dce1a:	4b02      	ldr	r3, [pc, #8]	; (dce24 <HAL_USB_USART_Send_Data+0xc>)
   dce1c:	681b      	ldr	r3, [r3, #0]
   dce1e:	69db      	ldr	r3, [r3, #28]
   dce20:	9301      	str	r3, [sp, #4]
   dce22:	bd08      	pop	{r3, pc}
   dce24:	0003024c 	.word	0x0003024c

000dce28 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   dce28:	b508      	push	{r3, lr}
   dce2a:	4b02      	ldr	r3, [pc, #8]	; (dce34 <HAL_USB_USART_Flush_Data+0xc>)
   dce2c:	681b      	ldr	r3, [r3, #0]
   dce2e:	6a1b      	ldr	r3, [r3, #32]
   dce30:	9301      	str	r3, [sp, #4]
   dce32:	bd08      	pop	{r3, pc}
   dce34:	0003024c 	.word	0x0003024c

000dce38 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   dce38:	b508      	push	{r3, lr}
   dce3a:	4b02      	ldr	r3, [pc, #8]	; (dce44 <panic_+0xc>)
   dce3c:	681b      	ldr	r3, [r3, #0]
   dce3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dce40:	9301      	str	r3, [sp, #4]
   dce42:	bd08      	pop	{r3, pc}
   dce44:	00030260 	.word	0x00030260

000dce48 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   dce48:	b508      	push	{r3, lr}
   dce4a:	4b02      	ldr	r3, [pc, #8]	; (dce54 <jsmn_init+0xc>)
   dce4c:	681b      	ldr	r3, [r3, #0]
   dce4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dce50:	9301      	str	r3, [sp, #4]
   dce52:	bd08      	pop	{r3, pc}
   dce54:	00030260 	.word	0x00030260

000dce58 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   dce58:	b508      	push	{r3, lr}
   dce5a:	4b02      	ldr	r3, [pc, #8]	; (dce64 <jsmn_parse_deprecated+0xc>)
   dce5c:	681b      	ldr	r3, [r3, #0]
   dce5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dce60:	9301      	str	r3, [sp, #4]
   dce62:	bd08      	pop	{r3, pc}
   dce64:	00030260 	.word	0x00030260

000dce68 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   dce68:	b508      	push	{r3, lr}
   dce6a:	4b02      	ldr	r3, [pc, #8]	; (dce74 <log_message+0xc>)
   dce6c:	681b      	ldr	r3, [r3, #0]
   dce6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dce70:	9301      	str	r3, [sp, #4]
   dce72:	bd08      	pop	{r3, pc}
   dce74:	00030260 	.word	0x00030260

000dce78 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   dce78:	b508      	push	{r3, lr}
   dce7a:	4b02      	ldr	r3, [pc, #8]	; (dce84 <log_message_v+0xc>)
   dce7c:	681b      	ldr	r3, [r3, #0]
   dce7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dce80:	9301      	str	r3, [sp, #4]
   dce82:	bd08      	pop	{r3, pc}
   dce84:	00030260 	.word	0x00030260

000dce88 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   dce88:	b508      	push	{r3, lr}
   dce8a:	4b02      	ldr	r3, [pc, #8]	; (dce94 <log_write+0xc>)
   dce8c:	681b      	ldr	r3, [r3, #0]
   dce8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dce90:	9301      	str	r3, [sp, #4]
   dce92:	bd08      	pop	{r3, pc}
   dce94:	00030260 	.word	0x00030260

000dce98 <log_level_name>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   dce98:	b508      	push	{r3, lr}
   dce9a:	4b02      	ldr	r3, [pc, #8]	; (dcea4 <log_level_name+0xc>)
   dce9c:	681b      	ldr	r3, [r3, #0]
   dce9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dcea0:	9301      	str	r3, [sp, #4]
   dcea2:	bd08      	pop	{r3, pc}
   dcea4:	00030260 	.word	0x00030260

000dcea8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   dcea8:	b508      	push	{r3, lr}
   dceaa:	4b02      	ldr	r3, [pc, #8]	; (dceb4 <log_set_callbacks+0xc>)
   dceac:	681b      	ldr	r3, [r3, #0]
   dceae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   dceb0:	9301      	str	r3, [sp, #4]
   dceb2:	bd08      	pop	{r3, pc}
   dceb4:	00030260 	.word	0x00030260

000dceb8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   dceb8:	b508      	push	{r3, lr}
   dceba:	4b03      	ldr	r3, [pc, #12]	; (dcec8 <diag_get_source+0x10>)
   dcebc:	681b      	ldr	r3, [r3, #0]
   dcebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   dcec2:	9301      	str	r3, [sp, #4]
   dcec4:	bd08      	pop	{r3, pc}
   dcec6:	0000      	.short	0x0000
   dcec8:	00030260 	.word	0x00030260

000dcecc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   dcecc:	b508      	push	{r3, lr}
   dcece:	4b02      	ldr	r3, [pc, #8]	; (dced8 <system_mode+0xc>)
   dced0:	681b      	ldr	r3, [r3, #0]
   dced2:	681b      	ldr	r3, [r3, #0]
   dced4:	9301      	str	r3, [sp, #4]
   dced6:	bd08      	pop	{r3, pc}
   dced8:	00030220 	.word	0x00030220

000dcedc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   dcedc:	b508      	push	{r3, lr}
   dcede:	4b02      	ldr	r3, [pc, #8]	; (dcee8 <set_system_mode+0xc>)
   dcee0:	681b      	ldr	r3, [r3, #0]
   dcee2:	685b      	ldr	r3, [r3, #4]
   dcee4:	9301      	str	r3, [sp, #4]
   dcee6:	bd08      	pop	{r3, pc}
   dcee8:	00030220 	.word	0x00030220

000dceec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   dceec:	b508      	push	{r3, lr}
   dceee:	4b02      	ldr	r3, [pc, #8]	; (dcef8 <system_delay_ms+0xc>)
   dcef0:	681b      	ldr	r3, [r3, #0]
   dcef2:	695b      	ldr	r3, [r3, #20]
   dcef4:	9301      	str	r3, [sp, #4]
   dcef6:	bd08      	pop	{r3, pc}
   dcef8:	00030220 	.word	0x00030220

000dcefc <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   dcefc:	b508      	push	{r3, lr}
   dcefe:	4b02      	ldr	r3, [pc, #8]	; (dcf08 <system_subscribe_event+0xc>)
   dcf00:	681b      	ldr	r3, [r3, #0]
   dcf02:	6a1b      	ldr	r3, [r3, #32]
   dcf04:	9301      	str	r3, [sp, #4]
   dcf06:	bd08      	pop	{r3, pc}
   dcf08:	00030220 	.word	0x00030220

000dcf0c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   dcf0c:	b508      	push	{r3, lr}
   dcf0e:	4b02      	ldr	r3, [pc, #8]	; (dcf18 <system_thread_set_state+0xc>)
   dcf10:	681b      	ldr	r3, [r3, #0]
   dcf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dcf14:	9301      	str	r3, [sp, #4]
   dcf16:	bd08      	pop	{r3, pc}
   dcf18:	00030220 	.word	0x00030220

000dcf1c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   dcf1c:	b508      	push	{r3, lr}
   dcf1e:	4b02      	ldr	r3, [pc, #8]	; (dcf28 <application_thread_current+0xc>)
   dcf20:	681b      	ldr	r3, [r3, #0]
   dcf22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dcf24:	9301      	str	r3, [sp, #4]
   dcf26:	bd08      	pop	{r3, pc}
   dcf28:	00030220 	.word	0x00030220

000dcf2c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   dcf2c:	b508      	push	{r3, lr}
   dcf2e:	4b02      	ldr	r3, [pc, #8]	; (dcf38 <application_thread_invoke+0xc>)
   dcf30:	681b      	ldr	r3, [r3, #0]
   dcf32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dcf34:	9301      	str	r3, [sp, #4]
   dcf36:	bd08      	pop	{r3, pc}
   dcf38:	00030220 	.word	0x00030220

000dcf3c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   dcf3c:	b508      	push	{r3, lr}
   dcf3e:	4b02      	ldr	r3, [pc, #8]	; (dcf48 <system_thread_get_state+0xc>)
   dcf40:	681b      	ldr	r3, [r3, #0]
   dcf42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dcf44:	9301      	str	r3, [sp, #4]
   dcf46:	bd08      	pop	{r3, pc}
   dcf48:	00030220 	.word	0x00030220

000dcf4c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   dcf4c:	b508      	push	{r3, lr}
   dcf4e:	4b02      	ldr	r3, [pc, #8]	; (dcf58 <system_notify_time_changed+0xc>)
   dcf50:	681b      	ldr	r3, [r3, #0]
   dcf52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dcf54:	9301      	str	r3, [sp, #4]
   dcf56:	bd08      	pop	{r3, pc}
   dcf58:	00030220 	.word	0x00030220

000dcf5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   dcf5c:	b508      	push	{r3, lr}
   dcf5e:	4b03      	ldr	r3, [pc, #12]	; (dcf6c <system_ctrl_set_app_request_handler+0x10>)
   dcf60:	681b      	ldr	r3, [r3, #0]
   dcf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   dcf66:	9301      	str	r3, [sp, #4]
   dcf68:	bd08      	pop	{r3, pc}
   dcf6a:	0000      	.short	0x0000
   dcf6c:	00030220 	.word	0x00030220

000dcf70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   dcf70:	b508      	push	{r3, lr}
   dcf72:	4b03      	ldr	r3, [pc, #12]	; (dcf80 <system_ctrl_set_result+0x10>)
   dcf74:	681b      	ldr	r3, [r3, #0]
   dcf76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   dcf7a:	9301      	str	r3, [sp, #4]
   dcf7c:	bd08      	pop	{r3, pc}
   dcf7e:	0000      	.short	0x0000
   dcf80:	00030220 	.word	0x00030220

000dcf84 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   dcf84:	b508      	push	{r3, lr}
   dcf86:	4b03      	ldr	r3, [pc, #12]	; (dcf94 <system_sleep_ext+0x10>)
   dcf88:	681b      	ldr	r3, [r3, #0]
   dcf8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   dcf8e:	9301      	str	r3, [sp, #4]
   dcf90:	bd08      	pop	{r3, pc}
   dcf92:	0000      	.short	0x0000
   dcf94:	00030220 	.word	0x00030220

000dcf98 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   dcf98:	b508      	push	{r3, lr}
   dcf9a:	4b02      	ldr	r3, [pc, #8]	; (dcfa4 <spark_variable+0xc>)
   dcf9c:	681b      	ldr	r3, [r3, #0]
   dcf9e:	681b      	ldr	r3, [r3, #0]
   dcfa0:	9301      	str	r3, [sp, #4]
   dcfa2:	bd08      	pop	{r3, pc}
   dcfa4:	00030244 	.word	0x00030244

000dcfa8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   dcfa8:	b508      	push	{r3, lr}
   dcfaa:	4b02      	ldr	r3, [pc, #8]	; (dcfb4 <spark_function+0xc>)
   dcfac:	681b      	ldr	r3, [r3, #0]
   dcfae:	685b      	ldr	r3, [r3, #4]
   dcfb0:	9301      	str	r3, [sp, #4]
   dcfb2:	bd08      	pop	{r3, pc}
   dcfb4:	00030244 	.word	0x00030244

000dcfb8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dcfb8:	b508      	push	{r3, lr}
   dcfba:	4b02      	ldr	r3, [pc, #8]	; (dcfc4 <spark_process+0xc>)
   dcfbc:	681b      	ldr	r3, [r3, #0]
   dcfbe:	689b      	ldr	r3, [r3, #8]
   dcfc0:	9301      	str	r3, [sp, #4]
   dcfc2:	bd08      	pop	{r3, pc}
   dcfc4:	00030244 	.word	0x00030244

000dcfc8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dcfc8:	b508      	push	{r3, lr}
   dcfca:	4b02      	ldr	r3, [pc, #8]	; (dcfd4 <spark_cloud_flag_connect+0xc>)
   dcfcc:	681b      	ldr	r3, [r3, #0]
   dcfce:	68db      	ldr	r3, [r3, #12]
   dcfd0:	9301      	str	r3, [sp, #4]
   dcfd2:	bd08      	pop	{r3, pc}
   dcfd4:	00030244 	.word	0x00030244

000dcfd8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dcfd8:	b508      	push	{r3, lr}
   dcfda:	4b02      	ldr	r3, [pc, #8]	; (dcfe4 <spark_cloud_flag_connected+0xc>)
   dcfdc:	681b      	ldr	r3, [r3, #0]
   dcfde:	695b      	ldr	r3, [r3, #20]
   dcfe0:	9301      	str	r3, [sp, #4]
   dcfe2:	bd08      	pop	{r3, pc}
   dcfe4:	00030244 	.word	0x00030244

000dcfe8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dcfe8:	b508      	push	{r3, lr}
   dcfea:	4b02      	ldr	r3, [pc, #8]	; (dcff4 <spark_send_event+0xc>)
   dcfec:	681b      	ldr	r3, [r3, #0]
   dcfee:	6a1b      	ldr	r3, [r3, #32]
   dcff0:	9301      	str	r3, [sp, #4]
   dcff2:	bd08      	pop	{r3, pc}
   dcff4:	00030244 	.word	0x00030244

000dcff8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dcff8:	b508      	push	{r3, lr}
   dcffa:	4b02      	ldr	r3, [pc, #8]	; (dd004 <spark_sync_time_pending+0xc>)
   dcffc:	681b      	ldr	r3, [r3, #0]
   dcffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dd000:	9301      	str	r3, [sp, #4]
   dd002:	bd08      	pop	{r3, pc}
   dd004:	00030244 	.word	0x00030244

000dd008 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   dd008:	b508      	push	{r3, lr}
   dd00a:	4b02      	ldr	r3, [pc, #8]	; (dd014 <spark_sync_time_last+0xc>)
   dd00c:	681b      	ldr	r3, [r3, #0]
   dd00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dd010:	9301      	str	r3, [sp, #4]
   dd012:	bd08      	pop	{r3, pc}
   dd014:	00030244 	.word	0x00030244

000dd018 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dd018:	b508      	push	{r3, lr}
   dd01a:	4b02      	ldr	r3, [pc, #8]	; (dd024 <spark_set_random_seed_from_cloud_handler+0xc>)
   dd01c:	681b      	ldr	r3, [r3, #0]
   dd01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dd020:	9301      	str	r3, [sp, #4]
   dd022:	bd08      	pop	{r3, pc}
   dd024:	00030244 	.word	0x00030244

000dd028 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   dd028:	b508      	push	{r3, lr}
   dd02a:	4b02      	ldr	r3, [pc, #8]	; (dd034 <spark_cloud_disconnect+0xc>)
   dd02c:	681b      	ldr	r3, [r3, #0]
   dd02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dd030:	9301      	str	r3, [sp, #4]
   dd032:	bd08      	pop	{r3, pc}
   dd034:	00030244 	.word	0x00030244

000dd038 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dd038:	b508      	push	{r3, lr}
   dd03a:	4b02      	ldr	r3, [pc, #8]	; (dd044 <network_connect+0xc>)
   dd03c:	681b      	ldr	r3, [r3, #0]
   dd03e:	685b      	ldr	r3, [r3, #4]
   dd040:	9301      	str	r3, [sp, #4]
   dd042:	bd08      	pop	{r3, pc}
   dd044:	00030240 	.word	0x00030240

000dd048 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dd048:	b508      	push	{r3, lr}
   dd04a:	4b02      	ldr	r3, [pc, #8]	; (dd054 <network_connecting+0xc>)
   dd04c:	681b      	ldr	r3, [r3, #0]
   dd04e:	689b      	ldr	r3, [r3, #8]
   dd050:	9301      	str	r3, [sp, #4]
   dd052:	bd08      	pop	{r3, pc}
   dd054:	00030240 	.word	0x00030240

000dd058 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dd058:	b508      	push	{r3, lr}
   dd05a:	4b02      	ldr	r3, [pc, #8]	; (dd064 <network_disconnect+0xc>)
   dd05c:	681b      	ldr	r3, [r3, #0]
   dd05e:	68db      	ldr	r3, [r3, #12]
   dd060:	9301      	str	r3, [sp, #4]
   dd062:	bd08      	pop	{r3, pc}
   dd064:	00030240 	.word	0x00030240

000dd068 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dd068:	b508      	push	{r3, lr}
   dd06a:	4b02      	ldr	r3, [pc, #8]	; (dd074 <network_ready+0xc>)
   dd06c:	681b      	ldr	r3, [r3, #0]
   dd06e:	691b      	ldr	r3, [r3, #16]
   dd070:	9301      	str	r3, [sp, #4]
   dd072:	bd08      	pop	{r3, pc}
   dd074:	00030240 	.word	0x00030240

000dd078 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dd078:	b508      	push	{r3, lr}
   dd07a:	4b02      	ldr	r3, [pc, #8]	; (dd084 <network_on+0xc>)
   dd07c:	681b      	ldr	r3, [r3, #0]
   dd07e:	695b      	ldr	r3, [r3, #20]
   dd080:	9301      	str	r3, [sp, #4]
   dd082:	bd08      	pop	{r3, pc}
   dd084:	00030240 	.word	0x00030240

000dd088 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dd088:	b508      	push	{r3, lr}
   dd08a:	4b02      	ldr	r3, [pc, #8]	; (dd094 <network_off+0xc>)
   dd08c:	681b      	ldr	r3, [r3, #0]
   dd08e:	699b      	ldr	r3, [r3, #24]
   dd090:	9301      	str	r3, [sp, #4]
   dd092:	bd08      	pop	{r3, pc}
   dd094:	00030240 	.word	0x00030240

000dd098 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dd098:	b508      	push	{r3, lr}
   dd09a:	4b02      	ldr	r3, [pc, #8]	; (dd0a4 <network_listen+0xc>)
   dd09c:	681b      	ldr	r3, [r3, #0]
   dd09e:	69db      	ldr	r3, [r3, #28]
   dd0a0:	9301      	str	r3, [sp, #4]
   dd0a2:	bd08      	pop	{r3, pc}
   dd0a4:	00030240 	.word	0x00030240

000dd0a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dd0a8:	b508      	push	{r3, lr}
   dd0aa:	4b02      	ldr	r3, [pc, #8]	; (dd0b4 <network_listening+0xc>)
   dd0ac:	681b      	ldr	r3, [r3, #0]
   dd0ae:	6a1b      	ldr	r3, [r3, #32]
   dd0b0:	9301      	str	r3, [sp, #4]
   dd0b2:	bd08      	pop	{r3, pc}
   dd0b4:	00030240 	.word	0x00030240

000dd0b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dd0b8:	b508      	push	{r3, lr}
   dd0ba:	4b02      	ldr	r3, [pc, #8]	; (dd0c4 <network_set_listen_timeout+0xc>)
   dd0bc:	681b      	ldr	r3, [r3, #0]
   dd0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dd0c0:	9301      	str	r3, [sp, #4]
   dd0c2:	bd08      	pop	{r3, pc}
   dd0c4:	00030240 	.word	0x00030240

000dd0c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dd0c8:	b508      	push	{r3, lr}
   dd0ca:	4b02      	ldr	r3, [pc, #8]	; (dd0d4 <network_get_listen_timeout+0xc>)
   dd0cc:	681b      	ldr	r3, [r3, #0]
   dd0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dd0d0:	9301      	str	r3, [sp, #4]
   dd0d2:	bd08      	pop	{r3, pc}
   dd0d4:	00030240 	.word	0x00030240

000dd0d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   dd0d8:	b508      	push	{r3, lr}
   dd0da:	4b02      	ldr	r3, [pc, #8]	; (dd0e4 <network_is_on+0xc>)
   dd0dc:	681b      	ldr	r3, [r3, #0]
   dd0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dd0e0:	9301      	str	r3, [sp, #4]
   dd0e2:	bd08      	pop	{r3, pc}
   dd0e4:	00030240 	.word	0x00030240

000dd0e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   dd0e8:	b508      	push	{r3, lr}
   dd0ea:	4b02      	ldr	r3, [pc, #8]	; (dd0f4 <network_is_off+0xc>)
   dd0ec:	681b      	ldr	r3, [r3, #0]
   dd0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dd0f0:	9301      	str	r3, [sp, #4]
   dd0f2:	bd08      	pop	{r3, pc}
   dd0f4:	00030240 	.word	0x00030240

000dd0f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dd0f8:	b508      	push	{r3, lr}
   dd0fa:	4b02      	ldr	r3, [pc, #8]	; (dd104 <malloc+0xc>)
   dd0fc:	681b      	ldr	r3, [r3, #0]
   dd0fe:	681b      	ldr	r3, [r3, #0]
   dd100:	9301      	str	r3, [sp, #4]
   dd102:	bd08      	pop	{r3, pc}
   dd104:	0003021c 	.word	0x0003021c

000dd108 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dd108:	b508      	push	{r3, lr}
   dd10a:	4b02      	ldr	r3, [pc, #8]	; (dd114 <free+0xc>)
   dd10c:	681b      	ldr	r3, [r3, #0]
   dd10e:	685b      	ldr	r3, [r3, #4]
   dd110:	9301      	str	r3, [sp, #4]
   dd112:	bd08      	pop	{r3, pc}
   dd114:	0003021c 	.word	0x0003021c

000dd118 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dd118:	b508      	push	{r3, lr}
   dd11a:	4b02      	ldr	r3, [pc, #8]	; (dd124 <realloc+0xc>)
   dd11c:	681b      	ldr	r3, [r3, #0]
   dd11e:	689b      	ldr	r3, [r3, #8]
   dd120:	9301      	str	r3, [sp, #4]
   dd122:	bd08      	pop	{r3, pc}
   dd124:	0003021c 	.word	0x0003021c

000dd128 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dd128:	b508      	push	{r3, lr}
   dd12a:	4b02      	ldr	r3, [pc, #8]	; (dd134 <siprintf+0xc>)
   dd12c:	681b      	ldr	r3, [r3, #0]
   dd12e:	691b      	ldr	r3, [r3, #16]
   dd130:	9301      	str	r3, [sp, #4]
   dd132:	bd08      	pop	{r3, pc}
   dd134:	0003021c 	.word	0x0003021c

000dd138 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   dd138:	b508      	push	{r3, lr}
   dd13a:	4b02      	ldr	r3, [pc, #8]	; (dd144 <sscanf+0xc>)
   dd13c:	681b      	ldr	r3, [r3, #0]
   dd13e:	695b      	ldr	r3, [r3, #20]
   dd140:	9301      	str	r3, [sp, #4]
   dd142:	bd08      	pop	{r3, pc}
   dd144:	0003021c 	.word	0x0003021c

000dd148 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dd148:	b508      	push	{r3, lr}
   dd14a:	4b02      	ldr	r3, [pc, #8]	; (dd154 <snprintf+0xc>)
   dd14c:	681b      	ldr	r3, [r3, #0]
   dd14e:	69db      	ldr	r3, [r3, #28]
   dd150:	9301      	str	r3, [sp, #4]
   dd152:	bd08      	pop	{r3, pc}
   dd154:	0003021c 	.word	0x0003021c

000dd158 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dd158:	b508      	push	{r3, lr}
   dd15a:	4b02      	ldr	r3, [pc, #8]	; (dd164 <vsnprintf+0xc>)
   dd15c:	681b      	ldr	r3, [r3, #0]
   dd15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dd160:	9301      	str	r3, [sp, #4]
   dd162:	bd08      	pop	{r3, pc}
   dd164:	0003021c 	.word	0x0003021c

000dd168 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dd168:	b508      	push	{r3, lr}
   dd16a:	4b02      	ldr	r3, [pc, #8]	; (dd174 <abort+0xc>)
   dd16c:	681b      	ldr	r3, [r3, #0]
   dd16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dd170:	9301      	str	r3, [sp, #4]
   dd172:	bd08      	pop	{r3, pc}
   dd174:	0003021c 	.word	0x0003021c

000dd178 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dd178:	b508      	push	{r3, lr}
   dd17a:	4b02      	ldr	r3, [pc, #8]	; (dd184 <_malloc_r+0xc>)
   dd17c:	681b      	ldr	r3, [r3, #0]
   dd17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dd180:	9301      	str	r3, [sp, #4]
   dd182:	bd08      	pop	{r3, pc}
   dd184:	0003021c 	.word	0x0003021c

000dd188 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dd188:	b508      	push	{r3, lr}
   dd18a:	4b02      	ldr	r3, [pc, #8]	; (dd194 <__errno+0xc>)
   dd18c:	681b      	ldr	r3, [r3, #0]
   dd18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dd190:	9301      	str	r3, [sp, #4]
   dd192:	bd08      	pop	{r3, pc}
   dd194:	0003021c 	.word	0x0003021c

000dd198 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   dd198:	b508      	push	{r3, lr}
   dd19a:	4b02      	ldr	r3, [pc, #8]	; (dd1a4 <newlib_impure_ptr_callback+0xc>)
   dd19c:	681b      	ldr	r3, [r3, #0]
   dd19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dd1a0:	9301      	str	r3, [sp, #4]
   dd1a2:	bd08      	pop	{r3, pc}
   dd1a4:	0003021c 	.word	0x0003021c

000dd1a8 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   dd1a8:	b508      	push	{r3, lr}
   dd1aa:	4b02      	ldr	r3, [pc, #8]	; (dd1b4 <strftime+0xc>)
   dd1ac:	681b      	ldr	r3, [r3, #0]
   dd1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dd1b0:	9301      	str	r3, [sp, #4]
   dd1b2:	bd08      	pop	{r3, pc}
   dd1b4:	0003021c 	.word	0x0003021c

000dd1b8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dd1b8:	b508      	push	{r3, lr}
   dd1ba:	4b02      	ldr	r3, [pc, #8]	; (dd1c4 <localtime_r+0xc>)
   dd1bc:	681b      	ldr	r3, [r3, #0]
   dd1be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dd1c0:	9301      	str	r3, [sp, #4]
   dd1c2:	bd08      	pop	{r3, pc}
   dd1c4:	0003021c 	.word	0x0003021c

000dd1c8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dd1c8:	b508      	push	{r3, lr}
   dd1ca:	4b02      	ldr	r3, [pc, #8]	; (dd1d4 <gmtime_r+0xc>)
   dd1cc:	681b      	ldr	r3, [r3, #0]
   dd1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dd1d0:	9301      	str	r3, [sp, #4]
   dd1d2:	bd08      	pop	{r3, pc}
   dd1d4:	0003021c 	.word	0x0003021c

000dd1d8 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   dd1d8:	b508      	push	{r3, lr}
   dd1da:	4b02      	ldr	r3, [pc, #8]	; (dd1e4 <mktime+0xc>)
   dd1dc:	681b      	ldr	r3, [r3, #0]
   dd1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dd1e0:	9301      	str	r3, [sp, #4]
   dd1e2:	bd08      	pop	{r3, pc}
   dd1e4:	0003021c 	.word	0x0003021c

000dd1e8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   dd1e8:	428a      	cmp	r2, r1
{
   dd1ea:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   dd1ec:	d007      	beq.n	dd1fe <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   dd1ee:	9c02      	ldr	r4, [sp, #8]
   dd1f0:	1a40      	subs	r0, r0, r1
   dd1f2:	1ae4      	subs	r4, r4, r3
   dd1f4:	4360      	muls	r0, r4
   dd1f6:	1a52      	subs	r2, r2, r1
   dd1f8:	fb90 f0f2 	sdiv	r0, r0, r2
   dd1fc:	4418      	add	r0, r3
}
   dd1fe:	bd10      	pop	{r4, pc}

000dd200 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dd200:	2100      	movs	r1, #0
   dd202:	f7ff be73 	b.w	dceec <system_delay_ms>

000dd206 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dd206:	b510      	push	{r4, lr}
      if (_M_empty())
   dd208:	6883      	ldr	r3, [r0, #8]
   dd20a:	4604      	mov	r4, r0
   dd20c:	b90b      	cbnz	r3, dd212 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dd20e:	f003 fad7 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd212:	68c3      	ldr	r3, [r0, #12]
   dd214:	4798      	blx	r3
      if (_M_manager)
   dd216:	68a3      	ldr	r3, [r4, #8]
   dd218:	b11b      	cbz	r3, dd222 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dd21a:	2203      	movs	r2, #3
   dd21c:	4621      	mov	r1, r4
   dd21e:	4620      	mov	r0, r4
   dd220:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dd222:	4620      	mov	r0, r4
   dd224:	2110      	movs	r1, #16
}
   dd226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dd22a:	f003 ba89 	b.w	e0740 <_ZdlPvj>
	...

000dd230 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dd230:	4802      	ldr	r0, [pc, #8]	; (dd23c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   dd232:	2300      	movs	r3, #0
   dd234:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   dd236:	f7ff bbcf 	b.w	dc9d8 <os_mutex_recursive_create>
   dd23a:	bf00      	nop
   dd23c:	2003e518 	.word	0x2003e518

000dd240 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dd240:	2200      	movs	r2, #0
   dd242:	6840      	ldr	r0, [r0, #4]
   dd244:	4611      	mov	r1, r2
   dd246:	f7ff bf0f 	b.w	dd068 <network_ready>

000dd24a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dd24a:	2200      	movs	r2, #0
   dd24c:	6840      	ldr	r0, [r0, #4]
   dd24e:	4611      	mov	r1, r2
   dd250:	f7ff bf2a 	b.w	dd0a8 <network_listening>

000dd254 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dd254:	2200      	movs	r2, #0
   dd256:	6840      	ldr	r0, [r0, #4]
   dd258:	4611      	mov	r1, r2
   dd25a:	f7ff bf35 	b.w	dd0c8 <network_get_listen_timeout>

000dd25e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dd25e:	6840      	ldr	r0, [r0, #4]
   dd260:	2200      	movs	r2, #0
   dd262:	f7ff bf29 	b.w	dd0b8 <network_set_listen_timeout>

000dd266 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dd266:	6840      	ldr	r0, [r0, #4]
   dd268:	2200      	movs	r2, #0
   dd26a:	f081 0101 	eor.w	r1, r1, #1
   dd26e:	f7ff bf13 	b.w	dd098 <network_listen>

000dd272 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dd272:	2300      	movs	r3, #0
   dd274:	6840      	ldr	r0, [r0, #4]
   dd276:	461a      	mov	r2, r3
   dd278:	4619      	mov	r1, r3
   dd27a:	f7ff bf05 	b.w	dd088 <network_off>

000dd27e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dd27e:	2300      	movs	r3, #0
   dd280:	6840      	ldr	r0, [r0, #4]
   dd282:	461a      	mov	r2, r3
   dd284:	4619      	mov	r1, r3
   dd286:	f7ff bef7 	b.w	dd078 <network_on>

000dd28a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dd28a:	2200      	movs	r2, #0
   dd28c:	6840      	ldr	r0, [r0, #4]
   dd28e:	4611      	mov	r1, r2
   dd290:	f7ff beda 	b.w	dd048 <network_connecting>

000dd294 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dd294:	6840      	ldr	r0, [r0, #4]
   dd296:	2200      	movs	r2, #0
   dd298:	2102      	movs	r1, #2
   dd29a:	f7ff bedd 	b.w	dd058 <network_disconnect>

000dd29e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dd29e:	2300      	movs	r3, #0
   dd2a0:	6840      	ldr	r0, [r0, #4]
   dd2a2:	461a      	mov	r2, r3
   dd2a4:	f7ff bec8 	b.w	dd038 <network_connect>

000dd2a8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   dd2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   dd2aa:	4b1b      	ldr	r3, [pc, #108]	; (dd318 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   dd2ac:	6003      	str	r3, [r0, #0]
   dd2ae:	2500      	movs	r5, #0
   dd2b0:	460f      	mov	r7, r1
   dd2b2:	3330      	adds	r3, #48	; 0x30
   dd2b4:	2618      	movs	r6, #24
   dd2b6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dd2ba:	b089      	sub	sp, #36	; 0x24
   dd2bc:	6043      	str	r3, [r0, #4]
   dd2be:	4632      	mov	r2, r6
   dd2c0:	4629      	mov	r1, r5
   dd2c2:	4604      	mov	r4, r0
   dd2c4:	3010      	adds	r0, #16
   dd2c6:	f004 fa17 	bl	e16f8 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dd2ca:	6878      	ldr	r0, [r7, #4]
   dd2cc:	462a      	mov	r2, r5
   dd2ce:	4629      	mov	r1, r5
   dd2d0:	f7ff feca 	bl	dd068 <network_ready>
   dd2d4:	b918      	cbnz	r0, dd2de <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   dd2d6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   dd2d8:	4620      	mov	r0, r4
   dd2da:	b009      	add	sp, #36	; 0x24
   dd2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   dd2de:	4629      	mov	r1, r5
   dd2e0:	4632      	mov	r2, r6
   dd2e2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   dd2e4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   dd2e8:	f004 fa06 	bl	e16f8 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dd2ec:	a902      	add	r1, sp, #8
   dd2ee:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   dd2f0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dd2f4:	f7ff fb30 	bl	dc958 <cellular_signal>
   dd2f8:	b110      	cbz	r0, dd300 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   dd2fa:	2301      	movs	r3, #1
   dd2fc:	60a3      	str	r3, [r4, #8]
            return sig;
   dd2fe:	e7eb      	b.n	dd2d8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   dd300:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   dd302:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   dd304:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   dd306:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   dd308:	b90b      	cbnz	r3, dd30e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   dd30a:	2302      	movs	r3, #2
   dd30c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   dd30e:	a902      	add	r1, sp, #8
   dd310:	4620      	mov	r0, r4
   dd312:	f000 f8c0 	bl	dd496 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   dd316:	e7df      	b.n	dd2d8 <_ZN5spark13CellularClass4RSSIEv+0x30>
   dd318:	000e482c 	.word	0x000e482c

000dd31c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dd31c:	4b08      	ldr	r3, [pc, #32]	; (dd340 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dd31e:	b510      	push	{r4, lr}
   dd320:	2428      	movs	r4, #40	; 0x28
   dd322:	4622      	mov	r2, r4
   dd324:	4618      	mov	r0, r3
   dd326:	2100      	movs	r1, #0
   dd328:	f004 f9e6 	bl	e16f8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dd32c:	4b05      	ldr	r3, [pc, #20]	; (dd344 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   dd32e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   dd330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd334:	6042      	str	r2, [r0, #4]
   dd336:	2204      	movs	r2, #4
   dd338:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dd33a:	4a03      	ldr	r2, [pc, #12]	; (dd348 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dd33c:	601a      	str	r2, [r3, #0]
   dd33e:	bd10      	pop	{r4, pc}
   dd340:	2003e524 	.word	0x2003e524
   dd344:	2003e51c 	.word	0x2003e51c
   dd348:	000e47f0 	.word	0x000e47f0

000dd34c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   dd34c:	4770      	bx	lr

000dd34e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   dd34e:	7d00      	ldrb	r0, [r0, #20]
   dd350:	4770      	bx	lr

000dd352 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   dd352:	7d03      	ldrb	r3, [r0, #20]
   dd354:	b14b      	cbz	r3, dd36a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   dd356:	6983      	ldr	r3, [r0, #24]
   dd358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dd35c:	d005      	beq.n	dd36a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   dd35e:	6a00      	ldr	r0, [r0, #32]
   dd360:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   dd364:	bf18      	it	ne
   dd366:	2001      	movne	r0, #1
   dd368:	4770      	bx	lr
   dd36a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   dd36c:	4770      	bx	lr

000dd36e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   dd36e:	6803      	ldr	r3, [r0, #0]
   dd370:	6a1b      	ldr	r3, [r3, #32]
   dd372:	4718      	bx	r3

000dd374 <_ZN14CellularSignalD0Ev>:
   dd374:	b510      	push	{r4, lr}
   dd376:	2128      	movs	r1, #40	; 0x28
   dd378:	4604      	mov	r4, r0
   dd37a:	f003 f9e1 	bl	e0740 <_ZdlPvj>
   dd37e:	4620      	mov	r0, r4
   dd380:	bd10      	pop	{r4, pc}
	...

000dd384 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   dd384:	7d03      	ldrb	r3, [r0, #20]
   dd386:	b17b      	cbz	r3, dd3a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   dd388:	69c3      	ldr	r3, [r0, #28]
   dd38a:	2b00      	cmp	r3, #0
   dd38c:	db0c      	blt.n	dd3a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   dd38e:	ee07 3a90 	vmov	s15, r3
   dd392:	ed9f 7a07 	vldr	s14, [pc, #28]	; dd3b0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   dd396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd39a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd39e:	eddf 7a05 	vldr	s15, [pc, #20]	; dd3b4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   dd3a2:	ee20 0a27 	vmul.f32	s0, s0, s15
   dd3a6:	4770      	bx	lr
    return -1.0f;
   dd3a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dd3ac:	4770      	bx	lr
   dd3ae:	bf00      	nop
   dd3b0:	477fff00 	.word	0x477fff00
   dd3b4:	42c80000 	.word	0x42c80000

000dd3b8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   dd3b8:	7d03      	ldrb	r3, [r0, #20]
   dd3ba:	b163      	cbz	r3, dd3d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   dd3bc:	6983      	ldr	r3, [r0, #24]
   dd3be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dd3c2:	d008      	beq.n	dd3d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   dd3c4:	ee07 3a90 	vmov	s15, r3
   dd3c8:	ed9f 7a04 	vldr	s14, [pc, #16]	; dd3dc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   dd3cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd3d0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd3d4:	4770      	bx	lr
    return 0.0f;
   dd3d6:	ed9f 0a02 	vldr	s0, [pc, #8]	; dd3e0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   dd3da:	4770      	bx	lr
   dd3dc:	42c80000 	.word	0x42c80000
   dd3e0:	00000000 	.word	0x00000000

000dd3e4 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   dd3e4:	7d03      	ldrb	r3, [r0, #20]
   dd3e6:	b17b      	cbz	r3, dd408 <_ZNK14CellularSignal10getQualityEv+0x24>
   dd3e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   dd3ea:	2b00      	cmp	r3, #0
   dd3ec:	db0c      	blt.n	dd408 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   dd3ee:	ee07 3a90 	vmov	s15, r3
   dd3f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; dd410 <_ZNK14CellularSignal10getQualityEv+0x2c>
   dd3f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd3fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd3fe:	eddf 7a05 	vldr	s15, [pc, #20]	; dd414 <_ZNK14CellularSignal10getQualityEv+0x30>
   dd402:	ee20 0a27 	vmul.f32	s0, s0, s15
   dd406:	4770      	bx	lr
    return -1.0f;
   dd408:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dd40c:	4770      	bx	lr
   dd40e:	bf00      	nop
   dd410:	477fff00 	.word	0x477fff00
   dd414:	42c80000 	.word	0x42c80000

000dd418 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   dd418:	7d03      	ldrb	r3, [r0, #20]
   dd41a:	b163      	cbz	r3, dd436 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   dd41c:	6a03      	ldr	r3, [r0, #32]
   dd41e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dd422:	d008      	beq.n	dd436 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   dd424:	ee07 3a90 	vmov	s15, r3
   dd428:	ed9f 7a04 	vldr	s14, [pc, #16]	; dd43c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   dd42c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd430:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd434:	4770      	bx	lr
    return 0.0f;
   dd436:	ed9f 0a02 	vldr	s0, [pc, #8]	; dd440 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   dd43a:	4770      	bx	lr
   dd43c:	42c80000 	.word	0x42c80000
   dd440:	00000000 	.word	0x00000000

000dd444 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   dd444:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   dd446:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   dd448:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   dd44a:	da0a      	bge.n	dd462 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   dd44c:	212d      	movs	r1, #45	; 0x2d
   dd44e:	f002 fabc 	bl	df9ca <_ZN5Print5printEc>
            val = -n;
   dd452:	4261      	negs	r1, r4
            t = print('-');
   dd454:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   dd456:	220a      	movs	r2, #10
   dd458:	4630      	mov	r0, r6
   dd45a:	f002 fac5 	bl	df9e8 <_ZN5Print11printNumberEmh>
    }
}
   dd45e:	4428      	add	r0, r5
   dd460:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   dd462:	4621      	mov	r1, r4
        size_t t = 0;
   dd464:	2500      	movs	r5, #0
   dd466:	e7f6      	b.n	dd456 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000dd468 <_ZNK14CellularSignal7printToER5Print>:
{
   dd468:	b570      	push	{r4, r5, r6, lr}
   dd46a:	460c      	mov	r4, r1
   dd46c:	4605      	mov	r5, r0
   dd46e:	6881      	ldr	r1, [r0, #8]
   dd470:	4620      	mov	r0, r4
   dd472:	f7ff ffe7 	bl	dd444 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   dd476:	212c      	movs	r1, #44	; 0x2c
   dd478:	4606      	mov	r6, r0
   dd47a:	4620      	mov	r0, r4
   dd47c:	f002 faa5 	bl	df9ca <_ZN5Print5printEc>
   dd480:	68e9      	ldr	r1, [r5, #12]
   dd482:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   dd484:	4620      	mov	r0, r4
   dd486:	f7ff ffdd 	bl	dd444 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   dd48a:	4430      	add	r0, r6
   dd48c:	bd70      	pop	{r4, r5, r6, pc}

000dd48e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   dd48e:	f1a0 0004 	sub.w	r0, r0, #4
   dd492:	f7ff bfe9 	b.w	dd468 <_ZNK14CellularSignal7printToER5Print>

000dd496 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   dd496:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   dd498:	460d      	mov	r5, r1
   dd49a:	f100 0410 	add.w	r4, r0, #16
   dd49e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dd4a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dd4a2:	e895 0003 	ldmia.w	r5, {r0, r1}
   dd4a6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   dd4aa:	2001      	movs	r0, #1
   dd4ac:	bd30      	pop	{r4, r5, pc}

000dd4ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dd4ae:	4770      	bx	lr

000dd4b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dd4b0:	2000      	movs	r0, #0
   dd4b2:	4770      	bx	lr

000dd4b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dd4b4:	b510      	push	{r4, lr}
   dd4b6:	2110      	movs	r1, #16
   dd4b8:	4604      	mov	r4, r0
   dd4ba:	f003 f941 	bl	e0740 <_ZdlPvj>
   dd4be:	4620      	mov	r0, r4
   dd4c0:	bd10      	pop	{r4, pc}

000dd4c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   dd4c2:	b508      	push	{r3, lr}
      { delete this; }
   dd4c4:	f7ff fff6 	bl	dd4b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dd4c8:	bd08      	pop	{r3, pc}

000dd4ca <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dd4ca:	b530      	push	{r4, r5, lr}
        type_(type) {
   dd4cc:	2200      	movs	r2, #0
   dd4ce:	f64f 749c 	movw	r4, #65436	; 0xff9c
   dd4d2:	6002      	str	r2, [r0, #0]
   dd4d4:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   dd4d6:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dd4d8:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dd4da:	680c      	ldr	r4, [r1, #0]
   dd4dc:	8085      	strh	r5, [r0, #4]
   dd4de:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dd4e0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   dd4e2:	bd30      	pop	{r4, r5, pc}

000dd4e4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dd4e4:	b510      	push	{r4, lr}
   dd4e6:	4604      	mov	r4, r0
    free((void*)msg_);
   dd4e8:	6800      	ldr	r0, [r0, #0]
   dd4ea:	f7ff fe0d 	bl	dd108 <free>
}
   dd4ee:	4620      	mov	r0, r4
   dd4f0:	bd10      	pop	{r4, pc}

000dd4f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   dd4f2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dd4f4:	68c4      	ldr	r4, [r0, #12]
   dd4f6:	b1f4      	cbz	r4, dd536 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   dd4f8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dd4fa:	2b02      	cmp	r3, #2
   dd4fc:	d103      	bne.n	dd506 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dd4fe:	f104 000c 	add.w	r0, r4, #12
   dd502:	f7ff ffef 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   dd506:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   dd508:	b135      	cbz	r5, dd518 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   dd50a:	4628      	mov	r0, r5
   dd50c:	f7f7 fab8 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dd510:	2110      	movs	r1, #16
   dd512:	4628      	mov	r0, r5
   dd514:	f003 f914 	bl	e0740 <_ZdlPvj>
   dd518:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dd51a:	b135      	cbz	r5, dd52a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dd51c:	4628      	mov	r0, r5
   dd51e:	f7f7 faaf 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
   dd522:	2110      	movs	r1, #16
   dd524:	4628      	mov	r0, r5
   dd526:	f003 f90b 	bl	e0740 <_ZdlPvj>
   dd52a:	4620      	mov	r0, r4
   dd52c:	2114      	movs	r1, #20
   dd52e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd532:	f003 b905 	b.w	e0740 <_ZdlPvj>
   dd536:	bd38      	pop	{r3, r4, r5, pc}

000dd538 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   dd538:	b510      	push	{r4, lr}
   dd53a:	b088      	sub	sp, #32
   dd53c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   dd53e:	4668      	mov	r0, sp
   dd540:	f002 fafd 	bl	dfb3e <_ZN6StringC1EPKc>
    return (*fn)(p);
   dd544:	4669      	mov	r1, sp
   dd546:	a804      	add	r0, sp, #16
   dd548:	f002 fb44 	bl	dfbd4 <_ZN6StringC1ERKS_>
   dd54c:	a804      	add	r0, sp, #16
   dd54e:	47a0      	blx	r4
   dd550:	4604      	mov	r4, r0
   dd552:	a804      	add	r0, sp, #16
   dd554:	f002 faa8 	bl	dfaa8 <_ZN6StringD1Ev>
    String p(param);
   dd558:	4668      	mov	r0, sp
   dd55a:	f002 faa5 	bl	dfaa8 <_ZN6StringD1Ev>
}
   dd55e:	4620      	mov	r0, r4
   dd560:	b008      	add	sp, #32
   dd562:	bd10      	pop	{r4, pc}

000dd564 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   dd564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   dd566:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   dd568:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   dd56c:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   dd56e:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   dd570:	461a      	mov	r2, r3
   dd572:	4669      	mov	r1, sp
   dd574:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   dd576:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   dd57a:	f8ad 4000 	strh.w	r4, [sp]
   dd57e:	f7ff fd13 	bl	dcfa8 <spark_function>
}
   dd582:	b004      	add	sp, #16
   dd584:	bd10      	pop	{r4, pc}

000dd586 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   dd586:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   dd588:	230c      	movs	r3, #12
   dd58a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   dd58e:	6803      	ldr	r3, [r0, #0]
   dd590:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   dd594:	7a03      	ldrb	r3, [r0, #8]
   dd596:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   dd59a:	6843      	ldr	r3, [r0, #4]
   dd59c:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   dd59e:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   dd5a0:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   dd5a2:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dd5a6:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   dd5a8:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   dd5ac:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dd5b0:	f7ff fd3a 	bl	dd028 <spark_cloud_disconnect>
}
   dd5b4:	b005      	add	sp, #20
   dd5b6:	f85d fb04 	ldr.w	pc, [sp], #4

000dd5ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dd5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd5bc:	460e      	mov	r6, r1
   dd5be:	4604      	mov	r4, r0
   dd5c0:	f856 3b04 	ldr.w	r3, [r6], #4
   dd5c4:	9300      	str	r3, [sp, #0]
   dd5c6:	460d      	mov	r5, r1
   dd5c8:	a801      	add	r0, sp, #4
   dd5ca:	4631      	mov	r1, r6
   dd5cc:	f7fc fcd5 	bl	d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dd5d0:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd5d2:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   dd5d4:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd5d6:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   dd5d8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   dd5da:	2300      	movs	r3, #0
   dd5dc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dd5de:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   dd5e0:	f7f7 f84e 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd5e4:	4630      	mov	r0, r6
   dd5e6:	f7f7 f84b 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   dd5ea:	4628      	mov	r0, r5
   dd5ec:	2108      	movs	r1, #8
   dd5ee:	f003 f8a7 	bl	e0740 <_ZdlPvj>
        return p;
    }
   dd5f2:	4620      	mov	r0, r4
   dd5f4:	b002      	add	sp, #8
   dd5f6:	bd70      	pop	{r4, r5, r6, pc}

000dd5f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   dd5f8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dd5fa:	b510      	push	{r4, lr}
      if (_M_empty())
   dd5fc:	b90a      	cbnz	r2, dd602 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dd5fe:	f003 f8df 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
    }
   dd602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd606:	68c3      	ldr	r3, [r0, #12]
   dd608:	4718      	bx	r3

000dd60a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dd60a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dd60c:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   dd60e:	f100 0110 	add.w	r1, r0, #16
   dd612:	f7ff fff1 	bl	dd5f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   dd616:	bd08      	pop	{r3, pc}

000dd618 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   dd618:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dd61a:	b510      	push	{r4, lr}
      if (_M_empty())
   dd61c:	b90a      	cbnz	r2, dd622 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dd61e:	f003 f8cf 	bl	e07c0 <_ZSt25__throw_bad_function_callv>
    }
   dd622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd626:	68c3      	ldr	r3, [r0, #12]
   dd628:	4718      	bx	r3

000dd62a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dd62a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dd62c:	6800      	ldr	r0, [r0, #0]
   dd62e:	f100 0110 	add.w	r1, r0, #16
   dd632:	f7ff fff1 	bl	dd618 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   dd636:	bd08      	pop	{r3, pc}

000dd638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   dd638:	b538      	push	{r3, r4, r5, lr}
   dd63a:	2300      	movs	r3, #0
   dd63c:	4604      	mov	r4, r0
   dd63e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd640:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   dd642:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd644:	f7f6 fd27 	bl	d4096 <_Znwj>
   dd648:	b128      	cbz	r0, dd656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   dd64a:	2301      	movs	r3, #1
   dd64c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   dd650:	4b02      	ldr	r3, [pc, #8]	; (dd65c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dd652:	6003      	str	r3, [r0, #0]
   dd654:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd656:	6020      	str	r0, [r4, #0]
	}
   dd658:	4620      	mov	r0, r4
   dd65a:	bd38      	pop	{r3, r4, r5, pc}
   dd65c:	000e4868 	.word	0x000e4868

000dd660 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   dd660:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dd662:	2300      	movs	r3, #0
   dd664:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dd666:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dd668:	4604      	mov	r4, r0
   dd66a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dd66c:	b12b      	cbz	r3, dd67a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd66e:	2202      	movs	r2, #2
   dd670:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd672:	68eb      	ldr	r3, [r5, #12]
   dd674:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd676:	68ab      	ldr	r3, [r5, #8]
   dd678:	60a3      	str	r3, [r4, #8]
    }
   dd67a:	4620      	mov	r0, r4
   dd67c:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   dd680:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd682:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dd684:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dd686:	4668      	mov	r0, sp
   dd688:	f7ff ff1f 	bl	dd4ca <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dd68c:	f04f 0302 	mov.w	r3, #2
   dd690:	e8d4 2f4f 	ldrexb	r2, [r4]
   dd694:	2a00      	cmp	r2, #0
   dd696:	d103      	bne.n	dd6a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   dd698:	e8c4 3f41 	strexb	r1, r3, [r4]
   dd69c:	2900      	cmp	r1, #0
   dd69e:	d1f7      	bne.n	dd690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   dd6a0:	d125      	bne.n	dd6ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   dd6a2:	f104 050c 	add.w	r5, r4, #12
   dd6a6:	4669      	mov	r1, sp
   dd6a8:	4628      	mov	r0, r5
   dd6aa:	f7ff ff0e 	bl	dd4ca <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   dd6ae:	f3bf 8f5b 	dmb	ish
   dd6b2:	2301      	movs	r3, #1
   dd6b4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dd6b6:	2000      	movs	r0, #0
   dd6b8:	f104 0308 	add.w	r3, r4, #8
   dd6bc:	f3bf 8f5b 	dmb	ish
   dd6c0:	e853 6f00 	ldrex	r6, [r3]
   dd6c4:	e843 0200 	strex	r2, r0, [r3]
   dd6c8:	2a00      	cmp	r2, #0
   dd6ca:	d1f9      	bne.n	dd6c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   dd6cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dd6d0:	b16e      	cbz	r6, dd6ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   dd6d2:	f7ff fc23 	bl	dcf1c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dd6d6:	b178      	cbz	r0, dd6f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dd6d8:	4629      	mov	r1, r5
   dd6da:	4630      	mov	r0, r6
   dd6dc:	f7ff ff8c 	bl	dd5f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   dd6e0:	4630      	mov	r0, r6
   dd6e2:	f7f7 f9cd 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dd6e6:	2110      	movs	r1, #16
   dd6e8:	4630      	mov	r0, r6
   dd6ea:	f003 f829 	bl	e0740 <_ZdlPvj>
        p_->setError(std::move(error));
   dd6ee:	4668      	mov	r0, sp
   dd6f0:	f7ff fef8 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
    }
   dd6f4:	b009      	add	sp, #36	; 0x24
   dd6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dd6f8:	4631      	mov	r1, r6
   dd6fa:	a802      	add	r0, sp, #8
   dd6fc:	f7ff ffb0 	bl	dd660 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dd700:	68e0      	ldr	r0, [r4, #12]
   dd702:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dd706:	b108      	cbz	r0, dd70c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   dd708:	f004 f864 	bl	e17d4 <strdup>
        type_(type) {
   dd70c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dd70e:	2010      	movs	r0, #16
   dd710:	f8ad 501c 	strh.w	r5, [sp, #28]
   dd714:	f7f6 fcbf 	bl	d4096 <_Znwj>
   dd718:	4605      	mov	r5, r0
   dd71a:	b1e8      	cbz	r0, dd758 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   dd71c:	2700      	movs	r7, #0
   dd71e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd720:	2018      	movs	r0, #24
   dd722:	f7f6 fcb8 	bl	d4096 <_Znwj>
   dd726:	4604      	mov	r4, r0
   dd728:	b188      	cbz	r0, dd74e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   dd72a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   dd72c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dd72e:	a802      	add	r0, sp, #8
   dd730:	f7f7 fb5f 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd734:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dd736:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dd738:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd73a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dd73c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dd73e:	a906      	add	r1, sp, #24
   dd740:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dd742:	60e3      	str	r3, [r4, #12]
   dd744:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   dd748:	9205      	str	r2, [sp, #20]
   dd74a:	f7ff febe 	bl	dd4ca <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   dd74e:	4b08      	ldr	r3, [pc, #32]	; (dd770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   dd750:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dd752:	4b08      	ldr	r3, [pc, #32]	; (dd774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd754:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dd756:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   dd758:	a806      	add	r0, sp, #24
   dd75a:	f7ff fec3 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dd75e:	a802      	add	r0, sp, #8
   dd760:	f7f7 f98e 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dd764:	2200      	movs	r2, #0
   dd766:	4629      	mov	r1, r5
   dd768:	4803      	ldr	r0, [pc, #12]	; (dd778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   dd76a:	f7ff fbdf 	bl	dcf2c <application_thread_invoke>
   dd76e:	e7b7      	b.n	dd6e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   dd770:	000dd60b 	.word	0x000dd60b
   dd774:	000dd8a1 	.word	0x000dd8a1
   dd778:	000dd207 	.word	0x000dd207

000dd77c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dd77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd780:	b08a      	sub	sp, #40	; 0x28
   dd782:	4605      	mov	r5, r0
   dd784:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   dd788:	460c      	mov	r4, r1
   dd78a:	4617      	mov	r7, r2
   dd78c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dd78e:	f7ff fc23 	bl	dcfd8 <spark_cloud_flag_connected>
   dd792:	ae07      	add	r6, sp, #28
    if (!connected()) {
   dd794:	4682      	mov	sl, r0
   dd796:	bb38      	cbnz	r0, dd7e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   dd798:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dd79c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dd79e:	a905      	add	r1, sp, #20
   dd7a0:	4630      	mov	r0, r6
   dd7a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   dd7a6:	f7ff fe90 	bl	dd4ca <_ZN8particle5ErrorC1EOS0_>
   dd7aa:	2014      	movs	r0, #20
   dd7ac:	f7f6 fc73 	bl	d4096 <_Znwj>
   dd7b0:	4604      	mov	r4, r0
   dd7b2:	b148      	cbz	r0, dd7c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dd7b4:	2302      	movs	r3, #2
   dd7b6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd7b8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dd7ba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd7be:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   dd7c0:	4631      	mov	r1, r6
   dd7c2:	300c      	adds	r0, #12
   dd7c4:	f7ff fe81 	bl	dd4ca <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd7c8:	4628      	mov	r0, r5
	: __shared_count(__p)
   dd7ca:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd7cc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   dd7d0:	f7ff ff32 	bl	dd638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dd7d4:	4630      	mov	r0, r6
   dd7d6:	f7ff fe85 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dd7da:	a805      	add	r0, sp, #20
   dd7dc:	f7ff fe82 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
}
   dd7e0:	4628      	mov	r0, r5
   dd7e2:	b00a      	add	sp, #40	; 0x28
   dd7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dd7e8:	230c      	movs	r3, #12
   dd7ea:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dd7ee:	2014      	movs	r0, #20
   dd7f0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   dd7f4:	9307      	str	r3, [sp, #28]
   dd7f6:	f7f6 fc4e 	bl	d4096 <_Znwj>
   dd7fa:	4601      	mov	r1, r0
   dd7fc:	b128      	cbz	r0, dd80a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dd7fe:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   dd802:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd806:	f880 a001 	strb.w	sl, [r0, #1]
   dd80a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd80c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   dd80e:	f7ff ff13 	bl	dd638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   dd812:	4b22      	ldr	r3, [pc, #136]	; (dd89c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   dd814:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dd816:	2008      	movs	r0, #8
   dd818:	f7f6 fc3d 	bl	d4096 <_Znwj>
   dd81c:	4682      	mov	sl, r0
   dd81e:	b128      	cbz	r0, dd82c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd820:	9b03      	ldr	r3, [sp, #12]
   dd822:	f840 3b04 	str.w	r3, [r0], #4
   dd826:	a904      	add	r1, sp, #16
   dd828:	f7fc fba7 	bl	d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dd82c:	9600      	str	r6, [sp, #0]
   dd82e:	fa5f f389 	uxtb.w	r3, r9
   dd832:	4642      	mov	r2, r8
   dd834:	4639      	mov	r1, r7
   dd836:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   dd838:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dd83c:	f7ff fbd4 	bl	dcfe8 <spark_send_event>
   dd840:	b9b8      	cbnz	r0, dd872 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   dd842:	9b03      	ldr	r3, [sp, #12]
   dd844:	785b      	ldrb	r3, [r3, #1]
   dd846:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dd84a:	b993      	cbnz	r3, dd872 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   dd84c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   dd850:	a905      	add	r1, sp, #20
   dd852:	a803      	add	r0, sp, #12
   dd854:	9205      	str	r2, [sp, #20]
   dd856:	f8ad 3018 	strh.w	r3, [sp, #24]
   dd85a:	f7ff ff11 	bl	dd680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dd85e:	a805      	add	r0, sp, #20
   dd860:	f7ff fe40 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dd864:	a805      	add	r0, sp, #20
   dd866:	9909      	ldr	r1, [sp, #36]	; 0x24
   dd868:	f7ff fea7 	bl	dd5ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   dd86c:	a806      	add	r0, sp, #24
   dd86e:	f7f6 ff07 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd872:	9b03      	ldr	r3, [sp, #12]
   dd874:	9305      	str	r3, [sp, #20]
   dd876:	a904      	add	r1, sp, #16
   dd878:	a806      	add	r0, sp, #24
   dd87a:	f7fc fb7e 	bl	d9f7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd87e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dd880:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd882:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   dd884:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   dd886:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   dd888:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   dd88a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   dd88c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   dd88e:	f7f6 fef7 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd892:	a804      	add	r0, sp, #16
   dd894:	f7f6 fef4 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   dd898:	e7a2      	b.n	dd7e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   dd89a:	bf00      	nop
   dd89c:	000dd965 	.word	0x000dd965

000dd8a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   dd8a0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dd8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd8a4:	4605      	mov	r5, r0
	  switch (__op)
   dd8a6:	d007      	beq.n	dd8b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   dd8a8:	2a03      	cmp	r2, #3
   dd8aa:	d018      	beq.n	dd8de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   dd8ac:	2a01      	cmp	r2, #1
   dd8ae:	d101      	bne.n	dd8b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dd8b0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dd8b2:	6003      	str	r3, [r0, #0]
	}
   dd8b4:	2000      	movs	r0, #0
   dd8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dd8b8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   dd8ba:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dd8bc:	f7f6 fbeb 	bl	d4096 <_Znwj>
   dd8c0:	4604      	mov	r4, r0
   dd8c2:	b150      	cbz	r0, dd8da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dd8c4:	4631      	mov	r1, r6
   dd8c6:	f7ff fecb 	bl	dd660 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dd8ca:	6930      	ldr	r0, [r6, #16]
   dd8cc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dd8d0:	b108      	cbz	r0, dd8d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   dd8d2:	f003 ff7f 	bl	e17d4 <strdup>
        type_(type) {
   dd8d6:	6120      	str	r0, [r4, #16]
   dd8d8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   dd8da:	602c      	str	r4, [r5, #0]
	}
   dd8dc:	e7ea      	b.n	dd8b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dd8de:	6804      	ldr	r4, [r0, #0]
   dd8e0:	2c00      	cmp	r4, #0
   dd8e2:	d0e7      	beq.n	dd8b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   dd8e4:	f104 0010 	add.w	r0, r4, #16
   dd8e8:	f7ff fdfc 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dd8ec:	4620      	mov	r0, r4
   dd8ee:	f7f7 f8c7 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dd8f2:	2118      	movs	r1, #24
   dd8f4:	4620      	mov	r0, r4
   dd8f6:	f002 ff23 	bl	e0740 <_ZdlPvj>
   dd8fa:	e7db      	b.n	dd8b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000dd8fc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   dd8fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dd8fe:	2300      	movs	r3, #0
   dd900:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dd902:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dd904:	4604      	mov	r4, r0
   dd906:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dd908:	b12b      	cbz	r3, dd916 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd90a:	2202      	movs	r2, #2
   dd90c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd90e:	68eb      	ldr	r3, [r5, #12]
   dd910:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd912:	68ab      	ldr	r3, [r5, #8]
   dd914:	60a3      	str	r3, [r4, #8]
    }
   dd916:	4620      	mov	r0, r4
   dd918:	bd38      	pop	{r3, r4, r5, pc}

000dd91a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   dd91a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dd91c:	b570      	push	{r4, r5, r6, lr}
   dd91e:	4604      	mov	r4, r0
	  switch (__op)
   dd920:	d007      	beq.n	dd932 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   dd922:	2a03      	cmp	r2, #3
   dd924:	d012      	beq.n	dd94c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   dd926:	2a01      	cmp	r2, #1
   dd928:	d101      	bne.n	dd92e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dd92a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dd92c:	6003      	str	r3, [r0, #0]
	}
   dd92e:	2000      	movs	r0, #0
   dd930:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dd932:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   dd934:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dd936:	f7f6 fbae 	bl	d4096 <_Znwj>
   dd93a:	4605      	mov	r5, r0
   dd93c:	b120      	cbz	r0, dd948 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   dd93e:	4631      	mov	r1, r6
   dd940:	f7ff ffdc 	bl	dd8fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dd944:	7c33      	ldrb	r3, [r6, #16]
   dd946:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   dd948:	6025      	str	r5, [r4, #0]
	}
   dd94a:	e7f0      	b.n	dd92e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dd94c:	6804      	ldr	r4, [r0, #0]
   dd94e:	2c00      	cmp	r4, #0
   dd950:	d0ed      	beq.n	dd92e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   dd952:	4620      	mov	r0, r4
   dd954:	f7f7 f894 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dd958:	2114      	movs	r1, #20
   dd95a:	4620      	mov	r0, r4
   dd95c:	f002 fef0 	bl	e0740 <_ZdlPvj>
   dd960:	e7e5      	b.n	dd92e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000dd964 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dd964:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd966:	b089      	sub	sp, #36	; 0x24
   dd968:	4604      	mov	r4, r0
   dd96a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dd96c:	a801      	add	r0, sp, #4
   dd96e:	4611      	mov	r1, r2
   dd970:	f7ff fe23 	bl	dd5ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dd974:	b1a4      	cbz	r4, dd9a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   dd976:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dd978:	b11d      	cbz	r5, dd982 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   dd97a:	4628      	mov	r0, r5
   dd97c:	f003 ff2a 	bl	e17d4 <strdup>
   dd980:	4605      	mov	r5, r0
   dd982:	a801      	add	r0, sp, #4
   dd984:	a903      	add	r1, sp, #12
        type_(type) {
   dd986:	9503      	str	r5, [sp, #12]
   dd988:	f8ad 4010 	strh.w	r4, [sp, #16]
   dd98c:	f7ff fe78 	bl	dd680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dd990:	a803      	add	r0, sp, #12
   dd992:	f7ff fda7 	bl	dd4e4 <_ZN8particle5ErrorD1Ev>
   dd996:	a802      	add	r0, sp, #8
   dd998:	f7f6 fe72 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dd99c:	b009      	add	sp, #36	; 0x24
   dd99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dd9a0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dd9a2:	2301      	movs	r3, #1
   dd9a4:	e8d5 2f4f 	ldrexb	r2, [r5]
   dd9a8:	2a00      	cmp	r2, #0
   dd9aa:	d103      	bne.n	dd9b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   dd9ac:	e8c5 3f41 	strexb	r1, r3, [r5]
   dd9b0:	2900      	cmp	r1, #0
   dd9b2:	d1f7      	bne.n	dd9a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   dd9b4:	d1ef      	bne.n	dd996 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   dd9b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   dd9b8:	f3bf 8f5b 	dmb	ish
   dd9bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dd9be:	1d2b      	adds	r3, r5, #4
   dd9c0:	f3bf 8f5b 	dmb	ish
   dd9c4:	e853 6f00 	ldrex	r6, [r3]
   dd9c8:	e843 4200 	strex	r2, r4, [r3]
   dd9cc:	2a00      	cmp	r2, #0
   dd9ce:	d1f9      	bne.n	dd9c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   dd9d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dd9d4:	2e00      	cmp	r6, #0
   dd9d6:	d0de      	beq.n	dd996 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   dd9d8:	4620      	mov	r0, r4
   dd9da:	f7ff fa9f 	bl	dcf1c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dd9de:	4607      	mov	r7, r0
   dd9e0:	b160      	cbz	r0, dd9fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dd9e2:	f105 010c 	add.w	r1, r5, #12
   dd9e6:	4630      	mov	r0, r6
   dd9e8:	f7ff fe16 	bl	dd618 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   dd9ec:	4630      	mov	r0, r6
   dd9ee:	f7f7 f847 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dd9f2:	2110      	movs	r1, #16
   dd9f4:	4630      	mov	r0, r6
   dd9f6:	f002 fea3 	bl	e0740 <_ZdlPvj>
   dd9fa:	e7cc      	b.n	dd996 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dd9fc:	4631      	mov	r1, r6
   dd9fe:	a803      	add	r0, sp, #12
   dda00:	f7ff ff7c 	bl	dd8fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dda04:	7b2b      	ldrb	r3, [r5, #12]
   dda06:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dda0a:	2010      	movs	r0, #16
   dda0c:	f7f6 fb43 	bl	d4096 <_Znwj>
   dda10:	4605      	mov	r5, r0
   dda12:	b1d0      	cbz	r0, dda4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   dda14:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dda16:	2014      	movs	r0, #20
   dda18:	f7f6 fb3d 	bl	d4096 <_Znwj>
   dda1c:	4604      	mov	r4, r0
   dda1e:	b178      	cbz	r0, dda40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   dda20:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dda22:	4601      	mov	r1, r0
   dda24:	a803      	add	r0, sp, #12
   dda26:	f7f7 f9e4 	bl	d4df2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dda2a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dda2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dda2e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dda30:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   dda32:	9205      	str	r2, [sp, #20]
   dda34:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dda36:	60e3      	str	r3, [r4, #12]
   dda38:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   dda3c:	9206      	str	r2, [sp, #24]
   dda3e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   dda40:	4b06      	ldr	r3, [pc, #24]	; (dda5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   dda42:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dda44:	4b06      	ldr	r3, [pc, #24]	; (dda60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dda46:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dda48:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   dda4a:	a803      	add	r0, sp, #12
   dda4c:	f7f7 f818 	bl	d4a80 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dda50:	2200      	movs	r2, #0
   dda52:	4629      	mov	r1, r5
   dda54:	4803      	ldr	r0, [pc, #12]	; (dda64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   dda56:	f7ff fa69 	bl	dcf2c <application_thread_invoke>
   dda5a:	e7c7      	b.n	dd9ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   dda5c:	000dd62b 	.word	0x000dd62b
   dda60:	000dd91b 	.word	0x000dd91b
   dda64:	000dd207 	.word	0x000dd207

000dda68 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dda68:	2200      	movs	r2, #0
   dda6a:	6840      	ldr	r0, [r0, #4]
   dda6c:	4611      	mov	r1, r2
   dda6e:	f7ff bb1b 	b.w	dd0a8 <network_listening>

000dda72 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dda72:	2200      	movs	r2, #0
   dda74:	6840      	ldr	r0, [r0, #4]
   dda76:	4611      	mov	r1, r2
   dda78:	f7ff bb26 	b.w	dd0c8 <network_get_listen_timeout>

000dda7c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dda7c:	6840      	ldr	r0, [r0, #4]
   dda7e:	2200      	movs	r2, #0
   dda80:	f7ff bb1a 	b.w	dd0b8 <network_set_listen_timeout>

000dda84 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dda84:	6840      	ldr	r0, [r0, #4]
   dda86:	2200      	movs	r2, #0
   dda88:	f081 0101 	eor.w	r1, r1, #1
   dda8c:	f7ff bb04 	b.w	dd098 <network_listen>

000dda90 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dda90:	2300      	movs	r3, #0
   dda92:	6840      	ldr	r0, [r0, #4]
   dda94:	461a      	mov	r2, r3
   dda96:	4619      	mov	r1, r3
   dda98:	f7ff baf6 	b.w	dd088 <network_off>

000dda9c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dda9c:	2300      	movs	r3, #0
   dda9e:	6840      	ldr	r0, [r0, #4]
   ddaa0:	461a      	mov	r2, r3
   ddaa2:	4619      	mov	r1, r3
   ddaa4:	f7ff bae8 	b.w	dd078 <network_on>

000ddaa8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ddaa8:	2200      	movs	r2, #0
   ddaaa:	6840      	ldr	r0, [r0, #4]
   ddaac:	4611      	mov	r1, r2
   ddaae:	f7ff badb 	b.w	dd068 <network_ready>

000ddab2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ddab2:	2200      	movs	r2, #0
   ddab4:	6840      	ldr	r0, [r0, #4]
   ddab6:	4611      	mov	r1, r2
   ddab8:	f7ff bac6 	b.w	dd048 <network_connecting>

000ddabc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ddabc:	6840      	ldr	r0, [r0, #4]
   ddabe:	2200      	movs	r2, #0
   ddac0:	2102      	movs	r1, #2
   ddac2:	f7ff bac9 	b.w	dd058 <network_disconnect>

000ddac6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ddac6:	2300      	movs	r3, #0
   ddac8:	6840      	ldr	r0, [r0, #4]
   ddaca:	461a      	mov	r2, r3
   ddacc:	f7ff bab4 	b.w	dd038 <network_connect>

000ddad0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   ddad0:	4b02      	ldr	r3, [pc, #8]	; (ddadc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ddad2:	2203      	movs	r2, #3
   ddad4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ddad6:	4a02      	ldr	r2, [pc, #8]	; (ddae0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ddad8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ddada:	4770      	bx	lr
   ddadc:	2003e54c 	.word	0x2003e54c
   ddae0:	000e4884 	.word	0x000e4884

000ddae4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   ddae4:	6800      	ldr	r0, [r0, #0]
   ddae6:	f000 b951 	b.w	ddd8c <_ZN7TwoWire4lockEv>

000ddaea <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   ddaea:	b510      	push	{r4, lr}
   ddaec:	4604      	mov	r4, r0
      lock_(_lock) {
   ddaee:	6001      	str	r1, [r0, #0]
   ddaf0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   ddaf2:	b10a      	cbz	r2, ddaf8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   ddaf4:	f7ff fff6 	bl	ddae4 <_ZN9FuelGauge4lockEv>
}
   ddaf8:	4620      	mov	r0, r4
   ddafa:	bd10      	pop	{r4, pc}

000ddafc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   ddafc:	b513      	push	{r0, r1, r4, lr}
   ddafe:	4604      	mov	r4, r0
   ddb00:	9101      	str	r1, [sp, #4]
            return &Wire1;
   ddb02:	f002 fdf9 	bl	e06f8 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   ddb06:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   ddb08:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   ddb0a:	4620      	mov	r0, r4
   ddb0c:	f7ff ffed 	bl	ddaea <_ZN9FuelGaugeC1ER7TwoWireb>
}
   ddb10:	4620      	mov	r0, r4
   ddb12:	b002      	add	sp, #8
   ddb14:	bd10      	pop	{r4, pc}

000ddb16 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   ddb16:	6800      	ldr	r0, [r0, #0]
   ddb18:	f000 b941 	b.w	ddd9e <_ZN7TwoWire6unlockEv>

000ddb1c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   ddb1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   ddb20:	4604      	mov	r4, r0
   ddb22:	460d      	mov	r5, r1
   ddb24:	4617      	mov	r7, r2
   ddb26:	461e      	mov	r6, r3
   ddb28:	f7ff ffdc 	bl	ddae4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddb2c:	2336      	movs	r3, #54	; 0x36
   ddb2e:	f88d 3000 	strb.w	r3, [sp]
   ddb32:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   ddb34:	6820      	ldr	r0, [r4, #0]
   ddb36:	9301      	str	r3, [sp, #4]
   ddb38:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   ddb3c:	230a      	movs	r3, #10
   ddb3e:	4669      	mov	r1, sp
   ddb40:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddb42:	f88d 8008 	strb.w	r8, [sp, #8]
   ddb46:	f000 f905 	bl	ddd54 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   ddb4a:	6820      	ldr	r0, [r4, #0]
   ddb4c:	6803      	ldr	r3, [r0, #0]
   ddb4e:	4629      	mov	r1, r5
   ddb50:	689b      	ldr	r3, [r3, #8]
   ddb52:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   ddb54:	6820      	ldr	r0, [r4, #0]
   ddb56:	4641      	mov	r1, r8
   ddb58:	f000 f914 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
   ddb5c:	4605      	mov	r5, r0
   ddb5e:	b140      	cbz	r0, ddb72 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   ddb60:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   ddb64:	4620      	mov	r0, r4
   ddb66:	f7ff ffd6 	bl	ddb16 <_ZN9FuelGauge6unlockEv>
}
   ddb6a:	4628      	mov	r0, r5
   ddb6c:	b004      	add	sp, #16
   ddb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   ddb72:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   ddb74:	6820      	ldr	r0, [r4, #0]
   ddb76:	9301      	str	r3, [sp, #4]
   ddb78:	4669      	mov	r1, sp
   ddb7a:	f000 f8bb 	bl	ddcf4 <_ZN7TwoWire11requestFromERK16WireTransmission>
   ddb7e:	2802      	cmp	r0, #2
   ddb80:	d1ee      	bne.n	ddb60 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   ddb82:	6820      	ldr	r0, [r4, #0]
   ddb84:	6803      	ldr	r3, [r0, #0]
   ddb86:	695b      	ldr	r3, [r3, #20]
   ddb88:	4798      	blx	r3
   ddb8a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   ddb8c:	6820      	ldr	r0, [r4, #0]
   ddb8e:	6803      	ldr	r3, [r0, #0]
   ddb90:	695b      	ldr	r3, [r3, #20]
   ddb92:	4798      	blx	r3
   ddb94:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   ddb96:	e7e5      	b.n	ddb64 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000ddb98 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   ddb98:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   ddb9a:	2300      	movs	r3, #0
   ddb9c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   ddba0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   ddba4:	f10d 0206 	add.w	r2, sp, #6
   ddba8:	f10d 0307 	add.w	r3, sp, #7
   ddbac:	2104      	movs	r1, #4
   ddbae:	f7ff ffb5 	bl	ddb1c <_ZN9FuelGauge12readRegisterEhRhS0_>
   ddbb2:	b9b0      	cbnz	r0, ddbe2 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   ddbb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   ddbb8:	f003 f968 	bl	e0e8c <__aeabi_i2d>
   ddbbc:	4b0a      	ldr	r3, [pc, #40]	; (ddbe8 <_ZN9FuelGauge6getSoCEv+0x50>)
   ddbbe:	2200      	movs	r2, #0
   ddbc0:	f003 f9ce 	bl	e0f60 <__aeabi_dmul>
   ddbc4:	f003 fcc4 	bl	e1550 <__aeabi_d2f>
        return MSB + decimal;
   ddbc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   ddbcc:	ee00 3a10 	vmov	s0, r3
   ddbd0:	ee07 0a90 	vmov	s15, r0
   ddbd4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   ddbd8:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   ddbdc:	b003      	add	sp, #12
   ddbde:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   ddbe2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   ddbe6:	e7f9      	b.n	ddbdc <_ZN9FuelGauge6getSoCEv+0x44>
   ddbe8:	3f700000 	.word	0x3f700000

000ddbec <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   ddbec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   ddbf0:	4616      	mov	r6, r2
   ddbf2:	4604      	mov	r4, r0
   ddbf4:	461d      	mov	r5, r3
   ddbf6:	460f      	mov	r7, r1
      { _M_device.lock(); }
   ddbf8:	f7ff ff74 	bl	ddae4 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddbfc:	2336      	movs	r3, #54	; 0x36
   ddbfe:	f88d 3000 	strb.w	r3, [sp]
   ddc02:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   ddc04:	6820      	ldr	r0, [r4, #0]
   ddc06:	9301      	str	r3, [sp, #4]
   ddc08:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   ddc0c:	230a      	movs	r3, #10
   ddc0e:	4669      	mov	r1, sp
   ddc10:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddc12:	f88d 8008 	strb.w	r8, [sp, #8]
   ddc16:	f000 f89d 	bl	ddd54 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   ddc1a:	6820      	ldr	r0, [r4, #0]
   ddc1c:	6803      	ldr	r3, [r0, #0]
   ddc1e:	4639      	mov	r1, r7
   ddc20:	689b      	ldr	r3, [r3, #8]
   ddc22:	4798      	blx	r3
    i2c_.write(MSB);
   ddc24:	6820      	ldr	r0, [r4, #0]
   ddc26:	6803      	ldr	r3, [r0, #0]
   ddc28:	4631      	mov	r1, r6
   ddc2a:	689b      	ldr	r3, [r3, #8]
   ddc2c:	4798      	blx	r3
    i2c_.write(LSB);
   ddc2e:	6820      	ldr	r0, [r4, #0]
   ddc30:	6803      	ldr	r3, [r0, #0]
   ddc32:	4629      	mov	r1, r5
   ddc34:	689b      	ldr	r3, [r3, #8]
   ddc36:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   ddc38:	4641      	mov	r1, r8
   ddc3a:	6820      	ldr	r0, [r4, #0]
   ddc3c:	f000 f8a2 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
   ddc40:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   ddc42:	4620      	mov	r0, r4
   ddc44:	bf0c      	ite	eq
   ddc46:	2500      	moveq	r5, #0
   ddc48:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   ddc4c:	f7ff ff63 	bl	ddb16 <_ZN9FuelGauge6unlockEv>
}
   ddc50:	4628      	mov	r0, r5
   ddc52:	b004      	add	sp, #16
   ddc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ddc58 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   ddc58:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   ddc5a:	2240      	movs	r2, #64	; 0x40
   ddc5c:	2300      	movs	r3, #0
   ddc5e:	2106      	movs	r1, #6
   ddc60:	f7ff ffc4 	bl	ddbec <_ZN9FuelGauge13writeRegisterEhhh>
}
   ddc64:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ddc68:	bd08      	pop	{r3, pc}

000ddc6a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ddc6a:	4770      	bx	lr

000ddc6c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ddc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddc6e:	4606      	mov	r6, r0
   ddc70:	4615      	mov	r5, r2
   ddc72:	460c      	mov	r4, r1
   ddc74:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ddc76:	42bc      	cmp	r4, r7
   ddc78:	d006      	beq.n	ddc88 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ddc7a:	6833      	ldr	r3, [r6, #0]
   ddc7c:	f814 1b01 	ldrb.w	r1, [r4], #1
   ddc80:	689b      	ldr	r3, [r3, #8]
   ddc82:	4630      	mov	r0, r6
   ddc84:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ddc86:	e7f6      	b.n	ddc76 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ddc88:	4628      	mov	r0, r5
   ddc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ddc8c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ddc8c:	7c00      	ldrb	r0, [r0, #16]
   ddc8e:	2200      	movs	r2, #0
   ddc90:	f7fe bf62 	b.w	dcb58 <hal_i2c_write>

000ddc94 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ddc94:	7c00      	ldrb	r0, [r0, #16]
   ddc96:	2100      	movs	r1, #0
   ddc98:	f7fe bf66 	b.w	dcb68 <hal_i2c_available>

000ddc9c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ddc9c:	7c00      	ldrb	r0, [r0, #16]
   ddc9e:	2100      	movs	r1, #0
   ddca0:	f7fe bf6a 	b.w	dcb78 <hal_i2c_read>

000ddca4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ddca4:	7c00      	ldrb	r0, [r0, #16]
   ddca6:	2100      	movs	r1, #0
   ddca8:	f7fe bf6e 	b.w	dcb88 <hal_i2c_peek>

000ddcac <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ddcac:	7c00      	ldrb	r0, [r0, #16]
   ddcae:	2100      	movs	r1, #0
   ddcb0:	f7fe bf72 	b.w	dcb98 <hal_i2c_flush>

000ddcb4 <_ZN7TwoWireD0Ev>:
   ddcb4:	b510      	push	{r4, lr}
   ddcb6:	2114      	movs	r1, #20
   ddcb8:	4604      	mov	r4, r0
   ddcba:	f002 fd41 	bl	e0740 <_ZdlPvj>
   ddcbe:	4620      	mov	r0, r4
   ddcc0:	bd10      	pop	{r4, pc}
	...

000ddcc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ddcc4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ddcc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ddcca:	4604      	mov	r4, r0
   ddccc:	4608      	mov	r0, r1
   ddcce:	2100      	movs	r1, #0
   ddcd0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ddcd4:	4b03      	ldr	r3, [pc, #12]	; (ddce4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ddcd6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ddcd8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ddcda:	4611      	mov	r1, r2
   ddcdc:	f7fe ff6c 	bl	dcbb8 <hal_i2c_init>
}
   ddce0:	4620      	mov	r0, r4
   ddce2:	bd10      	pop	{r4, pc}
   ddce4:	000e48c0 	.word	0x000e48c0

000ddce8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ddce8:	2300      	movs	r3, #0
   ddcea:	7c00      	ldrb	r0, [r0, #16]
   ddcec:	461a      	mov	r2, r3
   ddcee:	4619      	mov	r1, r3
   ddcf0:	f7fe bf1a 	b.w	dcb28 <hal_i2c_begin>

000ddcf4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   ddcf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ddcf6:	2200      	movs	r2, #0
   ddcf8:	2314      	movs	r3, #20
   ddcfa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   ddcfe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   ddd02:	780b      	ldrb	r3, [r1, #0]
   ddd04:	f88d 3008 	strb.w	r3, [sp, #8]
   ddd08:	684b      	ldr	r3, [r1, #4]
   ddd0a:	9303      	str	r3, [sp, #12]
   ddd0c:	68cb      	ldr	r3, [r1, #12]
   ddd0e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   ddd10:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ddd12:	7a0b      	ldrb	r3, [r1, #8]
   ddd14:	9305      	str	r3, [sp, #20]
   ddd16:	a901      	add	r1, sp, #4
   ddd18:	f7fe ff66 	bl	dcbe8 <hal_i2c_request_ex>
}
   ddd1c:	b007      	add	sp, #28
   ddd1e:	f85d fb04 	ldr.w	pc, [sp], #4

000ddd22 <_ZN7TwoWire11requestFromEhjh>:
{
   ddd22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   ddd24:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddd26:	f88d 1000 	strb.w	r1, [sp]
   ddd2a:	f04f 0164 	mov.w	r1, #100	; 0x64
   ddd2e:	9103      	str	r1, [sp, #12]
   ddd30:	bf18      	it	ne
   ddd32:	2301      	movne	r3, #1
   ddd34:	4669      	mov	r1, sp
    size_ = size;
   ddd36:	9201      	str	r2, [sp, #4]
   ddd38:	f88d 3008 	strb.w	r3, [sp, #8]
   ddd3c:	f7ff ffda 	bl	ddcf4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   ddd40:	b005      	add	sp, #20
   ddd42:	f85d fb04 	ldr.w	pc, [sp], #4

000ddd46 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ddd46:	7c00      	ldrb	r0, [r0, #16]
   ddd48:	2200      	movs	r2, #0
   ddd4a:	f7fe bef5 	b.w	dcb38 <hal_i2c_begin_transmission>

000ddd4e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   ddd4e:	b2c9      	uxtb	r1, r1
   ddd50:	f7ff bff9 	b.w	ddd46 <_ZN7TwoWire17beginTransmissionEh>

000ddd54 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   ddd54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ddd56:	2300      	movs	r3, #0
   ddd58:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   ddd5c:	684a      	ldr	r2, [r1, #4]
   ddd5e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   ddd60:	2314      	movs	r3, #20
    };
   ddd62:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   ddd64:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   ddd68:	780b      	ldrb	r3, [r1, #0]
    };
   ddd6a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ddd6c:	7a0a      	ldrb	r2, [r1, #8]
   ddd6e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   ddd70:	7c00      	ldrb	r0, [r0, #16]
    };
   ddd72:	f88d 3008 	strb.w	r3, [sp, #8]
   ddd76:	aa01      	add	r2, sp, #4
   ddd78:	4619      	mov	r1, r3
   ddd7a:	f7fe fedd 	bl	dcb38 <hal_i2c_begin_transmission>
}
   ddd7e:	b007      	add	sp, #28
   ddd80:	f85d fb04 	ldr.w	pc, [sp], #4

000ddd84 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ddd84:	7c00      	ldrb	r0, [r0, #16]
   ddd86:	2200      	movs	r2, #0
   ddd88:	f7fe bede 	b.w	dcb48 <hal_i2c_end_transmission>

000ddd8c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   ddd8c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   ddd8e:	2100      	movs	r1, #0
   ddd90:	7c00      	ldrb	r0, [r0, #16]
   ddd92:	f7fe ff19 	bl	dcbc8 <hal_i2c_lock>
}
   ddd96:	fab0 f080 	clz	r0, r0
   ddd9a:	0940      	lsrs	r0, r0, #5
   ddd9c:	bd08      	pop	{r3, pc}

000ddd9e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   ddd9e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   ddda0:	2100      	movs	r1, #0
   ddda2:	7c00      	ldrb	r0, [r0, #16]
   ddda4:	f7fe ff18 	bl	dcbd8 <hal_i2c_unlock>
}
   ddda8:	fab0 f080 	clz	r0, r0
   dddac:	0940      	lsrs	r0, r0, #5
   dddae:	bd08      	pop	{r3, pc}

000dddb0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   dddb0:	4770      	bx	lr

000dddb2 <_ZN9IPAddressD0Ev>:
   dddb2:	b510      	push	{r4, lr}
   dddb4:	2118      	movs	r1, #24
   dddb6:	4604      	mov	r4, r0
   dddb8:	f002 fcc2 	bl	e0740 <_ZdlPvj>
   dddbc:	4620      	mov	r0, r4
   dddbe:	bd10      	pop	{r4, pc}

000dddc0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   dddc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   dddc2:	7d03      	ldrb	r3, [r0, #20]
   dddc4:	2b06      	cmp	r3, #6
{
   dddc6:	b08d      	sub	sp, #52	; 0x34
   dddc8:	460e      	mov	r6, r1
   dddca:	f100 0704 	add.w	r7, r0, #4
   dddce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   dddd2:	d012      	beq.n	dddfa <_ZNK9IPAddress7printToER5Print+0x3a>
   dddd4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   dddd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ddddc:	220a      	movs	r2, #10
   dddde:	4630      	mov	r0, r6
   ddde0:	f001 fe02 	bl	df9e8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ddde4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ddde6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ddde8:	d019      	beq.n	dde1e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dddea:	2c00      	cmp	r4, #0
   dddec:	d0f4      	beq.n	dddd8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dddee:	212e      	movs	r1, #46	; 0x2e
   dddf0:	4630      	mov	r0, r6
   dddf2:	f001 fdea 	bl	df9ca <_ZN5Print5printEc>
   dddf6:	4404      	add	r4, r0
   dddf8:	e7ee      	b.n	dddd8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dddfa:	232f      	movs	r3, #47	; 0x2f
   dddfc:	466a      	mov	r2, sp
   dddfe:	4639      	mov	r1, r7
   dde00:	200a      	movs	r0, #10
		buf[0] = 0;
   dde02:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dde06:	f7fe fef7 	bl	dcbf8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dde0a:	4668      	mov	r0, sp
   dde0c:	f003 fcff 	bl	e180e <strlen>
   dde10:	6833      	ldr	r3, [r6, #0]
   dde12:	4602      	mov	r2, r0
   dde14:	68db      	ldr	r3, [r3, #12]
   dde16:	4669      	mov	r1, sp
   dde18:	4630      	mov	r0, r6
   dde1a:	4798      	blx	r3
   dde1c:	4604      	mov	r4, r0
    }
    return n;
}
   dde1e:	4620      	mov	r0, r4
   dde20:	b00d      	add	sp, #52	; 0x34
   dde22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dde24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   dde24:	b510      	push	{r4, lr}
   dde26:	4b05      	ldr	r3, [pc, #20]	; (dde3c <_ZN9IPAddressC1Ev+0x18>)
   dde28:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dde2a:	2211      	movs	r2, #17
   dde2c:	f840 3b04 	str.w	r3, [r0], #4
   dde30:	2100      	movs	r1, #0
   dde32:	f003 fc61 	bl	e16f8 <memset>
}
   dde36:	4620      	mov	r0, r4
   dde38:	bd10      	pop	{r4, pc}
   dde3a:	bf00      	nop
   dde3c:	000e48e8 	.word	0x000e48e8

000dde40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dde40:	4603      	mov	r3, r0
   dde42:	4a07      	ldr	r2, [pc, #28]	; (dde60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dde44:	b510      	push	{r4, lr}
   dde46:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dde4a:	f101 0210 	add.w	r2, r1, #16
   dde4e:	f851 4b04 	ldr.w	r4, [r1], #4
   dde52:	f843 4b04 	str.w	r4, [r3], #4
   dde56:	4291      	cmp	r1, r2
   dde58:	d1f9      	bne.n	dde4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dde5a:	780a      	ldrb	r2, [r1, #0]
   dde5c:	701a      	strb	r2, [r3, #0]
}
   dde5e:	bd10      	pop	{r4, pc}
   dde60:	000e48e8 	.word	0x000e48e8

000dde64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dde64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dde66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dde6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dde6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dde72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dde76:	2304      	movs	r3, #4
   dde78:	6041      	str	r1, [r0, #4]
   dde7a:	7503      	strb	r3, [r0, #20]
}
   dde7c:	bd10      	pop	{r4, pc}

000dde7e <_ZN9IPAddressaSEPKh>:
{
   dde7e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dde80:	78cb      	ldrb	r3, [r1, #3]
   dde82:	9300      	str	r3, [sp, #0]
   dde84:	788b      	ldrb	r3, [r1, #2]
   dde86:	784a      	ldrb	r2, [r1, #1]
   dde88:	7809      	ldrb	r1, [r1, #0]
   dde8a:	f7ff ffeb 	bl	dde64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dde8e:	b002      	add	sp, #8
   dde90:	bd10      	pop	{r4, pc}

000dde92 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dde92:	f100 0310 	add.w	r3, r0, #16
   dde96:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dde98:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dde9c:	2901      	cmp	r1, #1
   dde9e:	4618      	mov	r0, r3
   ddea0:	d108      	bne.n	ddeb4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   ddea2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   ddea6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   ddeaa:	3a01      	subs	r2, #1
   ddeac:	f103 0310 	add.w	r3, r3, #16
   ddeb0:	d1f2      	bne.n	dde98 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   ddeb2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   ddeb4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   ddeb6:	bf04      	itt	eq
   ddeb8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   ddebc:	1852      	addeq	r2, r2, r1
   ddebe:	e7f4      	b.n	ddeaa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000ddec0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ddec0:	4770      	bx	lr

000ddec2 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   ddec2:	4770      	bx	lr

000ddec4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   ddec4:	2000      	movs	r0, #0
   ddec6:	4770      	bx	lr

000ddec8 <_ZN5spark16JSONBufferWriterD0Ev>:
   ddec8:	b510      	push	{r4, lr}
   ddeca:	2114      	movs	r1, #20
   ddecc:	4604      	mov	r4, r0
   ddece:	f002 fc37 	bl	e0740 <_ZdlPvj>
   dded2:	4620      	mov	r0, r4
   dded4:	bd10      	pop	{r4, pc}

000dded6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dded6:	b510      	push	{r4, lr}
   dded8:	2110      	movs	r1, #16
   ddeda:	4604      	mov	r4, r0
   ddedc:	f002 fc30 	bl	e0740 <_ZdlPvj>
   ddee0:	4620      	mov	r0, r4
   ddee2:	bd10      	pop	{r4, pc}

000ddee4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   ddee4:	b508      	push	{r3, lr}
      { delete this; }
   ddee6:	f7ff fff6 	bl	dded6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   ddeea:	bd08      	pop	{r3, pc}

000ddeec <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ddeec:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   ddeee:	68c4      	ldr	r4, [r0, #12]
   ddef0:	b17c      	cbz	r4, ddf12 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   ddef2:	6820      	ldr	r0, [r4, #0]
   ddef4:	b108      	cbz	r0, ddefa <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   ddef6:	f7f6 f8d4 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   ddefa:	7a23      	ldrb	r3, [r4, #8]
   ddefc:	b11b      	cbz	r3, ddf06 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   ddefe:	6860      	ldr	r0, [r4, #4]
   ddf00:	b108      	cbz	r0, ddf06 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   ddf02:	f7f6 f8ce 	bl	d40a2 <_ZdaPv>
   ddf06:	4620      	mov	r0, r4
   ddf08:	210c      	movs	r1, #12
   ddf0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ddf0e:	f002 bc17 	b.w	e0740 <_ZdlPvj>
   ddf12:	bd10      	pop	{r4, pc}

000ddf14 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   ddf14:	b538      	push	{r3, r4, r5, lr}
   ddf16:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   ddf18:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   ddf1c:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   ddf1e:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   ddf20:	d207      	bcs.n	ddf32 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   ddf22:	1ad2      	subs	r2, r2, r3
   ddf24:	6880      	ldr	r0, [r0, #8]
   ddf26:	42aa      	cmp	r2, r5
   ddf28:	bf28      	it	cs
   ddf2a:	462a      	movcs	r2, r5
   ddf2c:	4418      	add	r0, r3
   ddf2e:	f003 fbbb 	bl	e16a8 <memcpy>
    }
    n_ += size;
   ddf32:	6922      	ldr	r2, [r4, #16]
   ddf34:	442a      	add	r2, r5
   ddf36:	6122      	str	r2, [r4, #16]
}
   ddf38:	bd38      	pop	{r3, r4, r5, pc}

000ddf3a <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   ddf3a:	b40e      	push	{r1, r2, r3}
   ddf3c:	b517      	push	{r0, r1, r2, r4, lr}
   ddf3e:	ab05      	add	r3, sp, #20
   ddf40:	4604      	mov	r4, r0
   ddf42:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   ddf46:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   ddf48:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   ddf4a:	6903      	ldr	r3, [r0, #16]
   ddf4c:	6880      	ldr	r0, [r0, #8]
   ddf4e:	428b      	cmp	r3, r1
   ddf50:	bf38      	it	cc
   ddf52:	1ac9      	subcc	r1, r1, r3
   ddf54:	4418      	add	r0, r3
   ddf56:	bf28      	it	cs
   ddf58:	2100      	movcs	r1, #0
   ddf5a:	9b01      	ldr	r3, [sp, #4]
   ddf5c:	f7ff f8fc 	bl	dd158 <vsnprintf>
    va_end(args);
    n_ += n;
   ddf60:	6923      	ldr	r3, [r4, #16]
   ddf62:	4418      	add	r0, r3
   ddf64:	6120      	str	r0, [r4, #16]
}
   ddf66:	b003      	add	sp, #12
   ddf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ddf6c:	b003      	add	sp, #12
   ddf6e:	4770      	bx	lr

000ddf70 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
   ddf70:	b40e      	push	{r1, r2, r3}
   ddf72:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddf74:	b088      	sub	sp, #32
   ddf76:	af00      	add	r7, sp, #0
   ddf78:	f107 0534 	add.w	r5, r7, #52	; 0x34
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf7c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   ddf7e:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf82:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   ddf84:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf86:	462b      	mov	r3, r5
   ddf88:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   ddf8a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf8c:	f7ff f8e4 	bl	dd158 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   ddf90:	280f      	cmp	r0, #15
   ddf92:	687a      	ldr	r2, [r7, #4]
   ddf94:	d91a      	bls.n	ddfcc <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   ddf96:	f100 0308 	add.w	r3, r0, #8
   ddf9a:	f023 0307 	bic.w	r3, r3, #7
        }
   ddf9e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   ddfa0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddfa4:	1c41      	adds	r1, r0, #1
   ddfa6:	462b      	mov	r3, r5
   ddfa8:	4668      	mov	r0, sp
        va_start(args, fmt);
   ddfaa:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddfac:	f7ff f8d4 	bl	dd158 <vsnprintf>
        if (n > 0) {
   ddfb0:	1e02      	subs	r2, r0, #0
   ddfb2:	dd04      	ble.n	ddfbe <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   ddfb4:	6823      	ldr	r3, [r4, #0]
   ddfb6:	4669      	mov	r1, sp
   ddfb8:	689b      	ldr	r3, [r3, #8]
   ddfba:	4620      	mov	r0, r4
   ddfbc:	4798      	blx	r3
   ddfbe:	46b5      	mov	sp, r6
}
   ddfc0:	3720      	adds	r7, #32
   ddfc2:	46bd      	mov	sp, r7
   ddfc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ddfc8:	b003      	add	sp, #12
   ddfca:	4770      	bx	lr
    } else if (n > 0) {
   ddfcc:	2800      	cmp	r0, #0
   ddfce:	d0f7      	beq.n	ddfc0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   ddfd0:	6823      	ldr	r3, [r4, #0]
   ddfd2:	4602      	mov	r2, r0
   ddfd4:	689b      	ldr	r3, [r3, #8]
   ddfd6:	f107 0110 	add.w	r1, r7, #16
   ddfda:	4620      	mov	r0, r4
   ddfdc:	4798      	blx	r3
}
   ddfde:	e7ef      	b.n	ddfc0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000ddfe0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   ddfe0:	b510      	push	{r4, lr}
          _M_dispose();
   ddfe2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   ddfe4:	4604      	mov	r4, r0
          _M_dispose();
   ddfe6:	689b      	ldr	r3, [r3, #8]
   ddfe8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ddfea:	68a3      	ldr	r3, [r4, #8]
   ddfec:	3b01      	subs	r3, #1
   ddfee:	60a3      	str	r3, [r4, #8]
   ddff0:	b92b      	cbnz	r3, ddffe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   ddff2:	6823      	ldr	r3, [r4, #0]
   ddff4:	4620      	mov	r0, r4
   ddff6:	68db      	ldr	r3, [r3, #12]
    }
   ddff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   ddffc:	4718      	bx	r3
    }
   ddffe:	bd10      	pop	{r4, pc}

000de000 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   de000:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   de002:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   de004:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   de008:	689b      	ldr	r3, [r3, #8]
   de00a:	2201      	movs	r2, #1
   de00c:	f10d 0107 	add.w	r1, sp, #7
   de010:	4798      	blx	r3
}
   de012:	b003      	add	sp, #12
   de014:	f85d fb04 	ldr.w	pc, [sp], #4

000de018 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   de018:	b538      	push	{r3, r4, r5, lr}
   de01a:	680b      	ldr	r3, [r1, #0]
   de01c:	6003      	str	r3, [r0, #0]
   de01e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   de020:	6843      	ldr	r3, [r0, #4]
   de022:	429d      	cmp	r5, r3
    class __shared_ptr
   de024:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   de026:	d00c      	beq.n	de042 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   de028:	b115      	cbz	r5, de030 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   de02a:	686b      	ldr	r3, [r5, #4]
   de02c:	3301      	adds	r3, #1
   de02e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   de030:	6860      	ldr	r0, [r4, #4]
   de032:	b128      	cbz	r0, de040 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   de034:	6843      	ldr	r3, [r0, #4]
   de036:	3b01      	subs	r3, #1
   de038:	6043      	str	r3, [r0, #4]
   de03a:	b90b      	cbnz	r3, de040 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   de03c:	f7ff ffd0 	bl	ddfe0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   de040:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   de042:	4620      	mov	r0, r4
   de044:	bd38      	pop	{r3, r4, r5, pc}

000de046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   de046:	460b      	mov	r3, r1
   de048:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   de04a:	2200      	movs	r2, #0
   de04c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   de04e:	e9c0 2200 	strd	r2, r2, [r0]
   de052:	4604      	mov	r4, r0
        t_ = t;
   de054:	6083      	str	r3, [r0, #8]
    if (t) {
   de056:	b90b      	cbnz	r3, de05c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   de058:	4620      	mov	r0, r4
   de05a:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   de05c:	f7ff ffdc 	bl	de018 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   de060:	e7fa      	b.n	de058 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000de062 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   de062:	6883      	ldr	r3, [r0, #8]
   de064:	b1eb      	cbz	r3, de0a2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   de066:	781a      	ldrb	r2, [r3, #0]
   de068:	2a03      	cmp	r2, #3
   de06a:	d81a      	bhi.n	de0a2 <_ZNK5spark9JSONValue4typeEv+0x40>
   de06c:	e8df f002 	tbb	[pc, r2]
   de070:	1b021704 	.word	0x1b021704
   de074:	2005      	movs	r0, #5
   de076:	4770      	bx	lr
        const char c = d_->json[t_->start];
   de078:	6802      	ldr	r2, [r0, #0]
   de07a:	685b      	ldr	r3, [r3, #4]
   de07c:	6852      	ldr	r2, [r2, #4]
   de07e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   de080:	282d      	cmp	r0, #45	; 0x2d
   de082:	d012      	beq.n	de0aa <_ZNK5spark9JSONValue4typeEv+0x48>
   de084:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   de088:	2b09      	cmp	r3, #9
   de08a:	d90e      	bls.n	de0aa <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   de08c:	2874      	cmp	r0, #116	; 0x74
   de08e:	d00e      	beq.n	de0ae <_ZNK5spark9JSONValue4typeEv+0x4c>
   de090:	2866      	cmp	r0, #102	; 0x66
   de092:	d00c      	beq.n	de0ae <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   de094:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   de098:	4258      	negs	r0, r3
   de09a:	4158      	adcs	r0, r3
   de09c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   de09e:	2006      	movs	r0, #6
   de0a0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   de0a2:	2000      	movs	r0, #0
   de0a4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   de0a6:	2004      	movs	r0, #4
   de0a8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   de0aa:	2003      	movs	r0, #3
   de0ac:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   de0ae:	2002      	movs	r0, #2
}
   de0b0:	4770      	bx	lr
	...

000de0b4 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   de0b4:	b510      	push	{r4, lr}
   de0b6:	4604      	mov	r4, r0
    switch (type()) {
   de0b8:	f7ff ffd3 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
   de0bc:	2803      	cmp	r0, #3
   de0be:	d00d      	beq.n	de0dc <_ZNK5spark9JSONValue6toBoolEv+0x28>
   de0c0:	2804      	cmp	r0, #4
   de0c2:	d01e      	beq.n	de102 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   de0c4:	2802      	cmp	r0, #2
   de0c6:	d12b      	bne.n	de120 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   de0c8:	6822      	ldr	r2, [r4, #0]
   de0ca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   de0cc:	6852      	ldr	r2, [r2, #4]
   de0ce:	685b      	ldr	r3, [r3, #4]
   de0d0:	5cd0      	ldrb	r0, [r2, r3]
   de0d2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   de0d6:	4258      	negs	r0, r3
   de0d8:	4158      	adcs	r0, r3
}
   de0da:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   de0dc:	68a3      	ldr	r3, [r4, #8]
   de0de:	6822      	ldr	r2, [r4, #0]
   de0e0:	685b      	ldr	r3, [r3, #4]
   de0e2:	6854      	ldr	r4, [r2, #4]
   de0e4:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   de0e6:	490f      	ldr	r1, [pc, #60]	; (de124 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   de0e8:	4620      	mov	r0, r4
   de0ea:	f003 fb61 	bl	e17b0 <strcmp>
   de0ee:	2800      	cmp	r0, #0
   de0f0:	d0f3      	beq.n	de0da <_ZNK5spark9JSONValue6toBoolEv+0x26>
   de0f2:	490d      	ldr	r1, [pc, #52]	; (de128 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   de0f4:	4620      	mov	r0, r4
   de0f6:	f003 fb5b 	bl	e17b0 <strcmp>
   de0fa:	3800      	subs	r0, #0
   de0fc:	bf18      	it	ne
   de0fe:	2001      	movne	r0, #1
   de100:	e7eb      	b.n	de0da <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   de102:	6822      	ldr	r2, [r4, #0]
   de104:	68a3      	ldr	r3, [r4, #8]
   de106:	6852      	ldr	r2, [r2, #4]
   de108:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   de10a:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   de10c:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   de10e:	2800      	cmp	r0, #0
   de110:	d0e3      	beq.n	de0da <_ZNK5spark9JSONValue6toBoolEv+0x26>
   de112:	4906      	ldr	r1, [pc, #24]	; (de12c <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   de114:	4620      	mov	r0, r4
   de116:	f003 fb4b 	bl	e17b0 <strcmp>
   de11a:	2800      	cmp	r0, #0
   de11c:	d1e3      	bne.n	de0e6 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   de11e:	e7dc      	b.n	de0da <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   de120:	2000      	movs	r0, #0
   de122:	e7da      	b.n	de0da <_ZNK5spark9JSONValue6toBoolEv+0x26>
   de124:	000e48f6 	.word	0x000e48f6
   de128:	000e48f4 	.word	0x000e48f4
   de12c:	000e3b3a 	.word	0x000e3b3a

000de130 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   de130:	b510      	push	{r4, lr}
   de132:	4604      	mov	r4, r0
    switch (type()) {
   de134:	f7ff ff95 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
   de138:	2802      	cmp	r0, #2
   de13a:	d00e      	beq.n	de15a <_ZNK5spark9JSONValue5toIntEv+0x2a>
   de13c:	1ec3      	subs	r3, r0, #3
   de13e:	b2db      	uxtb	r3, r3
   de140:	2b01      	cmp	r3, #1
   de142:	d814      	bhi.n	de16e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   de144:	6822      	ldr	r2, [r4, #0]
   de146:	68a3      	ldr	r3, [r4, #8]
   de148:	6850      	ldr	r0, [r2, #4]
   de14a:	685b      	ldr	r3, [r3, #4]
}
   de14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   de150:	220a      	movs	r2, #10
   de152:	2100      	movs	r1, #0
   de154:	4418      	add	r0, r3
   de156:	f004 bacd 	b.w	e26f4 <strtol>
        const char* const s = d_->json + t_->start;
   de15a:	6822      	ldr	r2, [r4, #0]
   de15c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   de15e:	6852      	ldr	r2, [r2, #4]
   de160:	685b      	ldr	r3, [r3, #4]
   de162:	5cd0      	ldrb	r0, [r2, r3]
   de164:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   de168:	4258      	negs	r0, r3
   de16a:	4158      	adcs	r0, r3
}
   de16c:	bd10      	pop	{r4, pc}
    switch (type()) {
   de16e:	2000      	movs	r0, #0
   de170:	e7fc      	b.n	de16c <_ZNK5spark9JSONValue5toIntEv+0x3c>
   de172:	0000      	movs	r0, r0
   de174:	0000      	movs	r0, r0
	...

000de178 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   de178:	b510      	push	{r4, lr}
   de17a:	4604      	mov	r4, r0
    switch (type()) {
   de17c:	f7ff ff71 	bl	de062 <_ZNK5spark9JSONValue4typeEv>
   de180:	2802      	cmp	r0, #2
   de182:	d00d      	beq.n	de1a0 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   de184:	1ec3      	subs	r3, r0, #3
   de186:	b2db      	uxtb	r3, r3
   de188:	2b01      	cmp	r3, #1
   de18a:	d810      	bhi.n	de1ae <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   de18c:	6822      	ldr	r2, [r4, #0]
   de18e:	68a3      	ldr	r3, [r4, #8]
   de190:	6850      	ldr	r0, [r2, #4]
   de192:	685b      	ldr	r3, [r3, #4]
}
   de194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   de198:	2100      	movs	r1, #0
   de19a:	4418      	add	r0, r3
   de19c:	f004 b99e 	b.w	e24dc <strtod>
        const char* const s = d_->json + t_->start;
   de1a0:	6822      	ldr	r2, [r4, #0]
   de1a2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   de1a4:	6852      	ldr	r2, [r2, #4]
   de1a6:	685b      	ldr	r3, [r3, #4]
   de1a8:	5cd3      	ldrb	r3, [r2, r3]
   de1aa:	2b74      	cmp	r3, #116	; 0x74
   de1ac:	d002      	beq.n	de1b4 <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   de1ae:	ed9f 0b04 	vldr	d0, [pc, #16]	; de1c0 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   de1b2:	bd10      	pop	{r4, pc}
        return *s == 't';
   de1b4:	ed9f 0b04 	vldr	d0, [pc, #16]	; de1c8 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   de1b8:	e7fb      	b.n	de1b2 <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   de1ba:	bf00      	nop
   de1bc:	f3af 8000 	nop.w
	...
   de1cc:	3ff00000 	.word	0x3ff00000

000de1d0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   de1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de1d4:	4699      	mov	r9, r3
   de1d6:	b088      	sub	sp, #32
    parser.size = sizeof(jsmn_parser);
   de1d8:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   de1da:	4607      	mov	r7, r0
   de1dc:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   de1de:	eb0d 0003 	add.w	r0, sp, r3
   de1e2:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   de1e4:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   de1e6:	9304      	str	r3, [sp, #16]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de1e8:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   de1ea:	f7fe fe2d 	bl	dce48 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de1ee:	ab03      	add	r3, sp, #12
   de1f0:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   de1f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de1f6:	9400      	str	r4, [sp, #0]
   de1f8:	4623      	mov	r3, r4
   de1fa:	4642      	mov	r2, r8
   de1fc:	4639      	mov	r1, r7
   de1fe:	a804      	add	r0, sp, #16
    int nExt = -1;
   de200:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de202:	f7fe fe29 	bl	dce58 <jsmn_parse_deprecated>
    if (n <= 0) {
   de206:	1e05      	subs	r5, r0, #0
   de208:	dd27      	ble.n	de25a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
    if (nExt > n) {
   de20a:	9803      	ldr	r0, [sp, #12]
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   de20c:	4914      	ldr	r1, [pc, #80]	; (de260 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   de20e:	4285      	cmp	r5, r0
   de210:	bfb8      	it	lt
   de212:	4605      	movlt	r5, r0
   de214:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   de218:	bfac      	ite	ge
   de21a:	4630      	movge	r0, r6
   de21c:	0128      	lsllt	r0, r5, #4
   de21e:	f002 fac7 	bl	e07b0 <_ZnajRKSt9nothrow_t>
    if (!t) {
   de222:	4606      	mov	r6, r0
   de224:	b198      	cbz	r0, de24e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
    jsmn_init(&parser, nullptr); // Reset parser
   de226:	2100      	movs	r1, #0
   de228:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   de22a:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   de22c:	f7fe fe0c 	bl	dce48 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   de230:	e9cd 5400 	strd	r5, r4, [sp]
   de234:	4633      	mov	r3, r6
   de236:	4642      	mov	r2, r8
   de238:	4639      	mov	r1, r7
   de23a:	a804      	add	r0, sp, #16
   de23c:	f7fe fe0c 	bl	dce58 <jsmn_parse_deprecated>
   de240:	42a0      	cmp	r0, r4
   de242:	dd07      	ble.n	de254 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
    *tokens = t.release();
   de244:	f8ca 6000 	str.w	r6, [sl]
    return true;
   de248:	2001      	movs	r0, #1
    *count = n;
   de24a:	f8c9 5000 	str.w	r5, [r9]
}
   de24e:	b008      	add	sp, #32
   de250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   de254:	4630      	mov	r0, r6
   de256:	f7f5 ff24 	bl	d40a2 <_ZdaPv>
      }
   de25a:	4620      	mov	r0, r4
   de25c:	e7f7      	b.n	de24e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   de25e:	bf00      	nop
   de260:	000e4b18 	.word	0x000e4b18

000de264 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   de264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   de268:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   de26a:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   de26c:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   de26e:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   de270:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   de272:	4607      	mov	r7, r0
    const char *s = s1;
   de274:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   de276:	4619      	mov	r1, r3
                    *str = 0x0d;
   de278:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   de27c:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   de280:	42b4      	cmp	r4, r6
   de282:	d063      	beq.n	de34c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   de284:	4625      	mov	r5, r4
   de286:	f815 2b01 	ldrb.w	r2, [r5], #1
   de28a:	2a5c      	cmp	r2, #92	; 0x5c
   de28c:	d12b      	bne.n	de2e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   de28e:	42a1      	cmp	r1, r4
   de290:	d007      	beq.n	de2a2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   de292:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   de296:	4618      	mov	r0, r3
   de298:	465a      	mov	r2, fp
   de29a:	f003 fa13 	bl	e16c4 <memmove>
   de29e:	4603      	mov	r3, r0
                str += n;
   de2a0:	445b      	add	r3, fp
            if (s == end) {
   de2a2:	42b5      	cmp	r5, r6
   de2a4:	d039      	beq.n	de31a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   de2a6:	7862      	ldrb	r2, [r4, #1]
   de2a8:	2a75      	cmp	r2, #117	; 0x75
   de2aa:	d12a      	bne.n	de302 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   de2ac:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   de2ae:	1ab2      	subs	r2, r6, r2
   de2b0:	2a03      	cmp	r2, #3
   de2b2:	dd32      	ble.n	de31a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   de2b4:	1da0      	adds	r0, r4, #6
   de2b6:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   de2ba:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   de2be:	45ae      	cmp	lr, r5
   de2c0:	d053      	beq.n	de36a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   de2c2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   de2c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   de2ca:	fa5f fb82 	uxtb.w	fp, r2
   de2ce:	f1bb 0f09 	cmp.w	fp, #9
   de2d2:	d905      	bls.n	de2e0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   de2d4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   de2d8:	2a05      	cmp	r2, #5
   de2da:	d807      	bhi.n	de2ec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   de2dc:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   de2e0:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   de2e4:	e7eb      	b.n	de2be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   de2e6:	4628      	mov	r0, r5
   de2e8:	4604      	mov	r4, r0
   de2ea:	e7c9      	b.n	de280 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   de2ec:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   de2f0:	2a05      	cmp	r2, #5
   de2f2:	d812      	bhi.n	de31a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   de2f4:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   de2f8:	e7f2      	b.n	de2e0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   de2fa:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   de2fe:	4601      	mov	r1, r0
   de300:	e7f2      	b.n	de2e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   de302:	2a6e      	cmp	r2, #110	; 0x6e
   de304:	d01c      	beq.n	de340 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   de306:	d80e      	bhi.n	de326 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   de308:	2a62      	cmp	r2, #98	; 0x62
   de30a:	d013      	beq.n	de334 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   de30c:	d807      	bhi.n	de31e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   de30e:	2a2f      	cmp	r2, #47	; 0x2f
   de310:	d011      	beq.n	de336 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   de312:	2a5c      	cmp	r2, #92	; 0x5c
   de314:	d00f      	beq.n	de336 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   de316:	2a22      	cmp	r2, #34	; 0x22
   de318:	d00d      	beq.n	de336 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   de31a:	2000      	movs	r0, #0
   de31c:	e023      	b.n	de366 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   de31e:	2a66      	cmp	r2, #102	; 0x66
   de320:	d1fb      	bne.n	de31a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   de322:	220c      	movs	r2, #12
   de324:	e007      	b.n	de336 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   de326:	2a72      	cmp	r2, #114	; 0x72
   de328:	d00d      	beq.n	de346 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   de32a:	2a74      	cmp	r2, #116	; 0x74
   de32c:	d1f5      	bne.n	de31a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   de32e:	f883 a000 	strb.w	sl, [r3]
                    break;
   de332:	e001      	b.n	de338 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   de334:	2208      	movs	r2, #8
   de336:	701a      	strb	r2, [r3, #0]
                ++s;
   de338:	1ca1      	adds	r1, r4, #2
                ++str;
   de33a:	3301      	adds	r3, #1
                ++s;
   de33c:	4608      	mov	r0, r1
   de33e:	e7d3      	b.n	de2e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   de340:	f04f 020a 	mov.w	r2, #10
   de344:	e7f7      	b.n	de336 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   de346:	f883 9000 	strb.w	r9, [r3]
                    break;
   de34a:	e7f5      	b.n	de338 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   de34c:	42a1      	cmp	r1, r4
   de34e:	d006      	beq.n	de35e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   de350:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   de352:	4618      	mov	r0, r3
   de354:	4622      	mov	r2, r4
   de356:	f003 f9b5 	bl	e16c4 <memmove>
   de35a:	4603      	mov	r3, r0
        str += n;
   de35c:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   de35e:	eba3 0308 	sub.w	r3, r3, r8
   de362:	60bb      	str	r3, [r7, #8]
    return true;
   de364:	2001      	movs	r0, #1
}
   de366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   de36a:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   de36e:	d9c4      	bls.n	de2fa <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   de370:	4621      	mov	r1, r4
   de372:	e7b9      	b.n	de2e8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000de374 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   de374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de376:	4604      	mov	r4, r0
   de378:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   de37a:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   de37e:	2700      	movs	r7, #0
    while (t != end) {
   de380:	42b4      	cmp	r4, r6
   de382:	d010      	beq.n	de3a6 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   de384:	7823      	ldrb	r3, [r4, #0]
   de386:	2b03      	cmp	r3, #3
   de388:	d108      	bne.n	de39c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   de38a:	4629      	mov	r1, r5
   de38c:	4620      	mov	r0, r4
   de38e:	f7ff ff69 	bl	de264 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   de392:	b148      	cbz	r0, de3a8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   de394:	68a3      	ldr	r3, [r4, #8]
   de396:	54ef      	strb	r7, [r5, r3]
        ++t;
   de398:	3410      	adds	r4, #16
    while (t != end) {
   de39a:	e7f1      	b.n	de380 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   de39c:	2b00      	cmp	r3, #0
   de39e:	d1fb      	bne.n	de398 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   de3a0:	68a2      	ldr	r2, [r4, #8]
   de3a2:	54ab      	strb	r3, [r5, r2]
   de3a4:	e7f8      	b.n	de398 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   de3a6:	2001      	movs	r0, #1
}
   de3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000de3ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   de3ac:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   de3ae:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   de3b0:	e9c0 3300 	strd	r3, r3, [r0]
   de3b4:	4604      	mov	r4, r0
        n_(0) {
   de3b6:	480e      	ldr	r0, [pc, #56]	; (de3f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   de3b8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   de3bc:	b1a9      	cbz	r1, de3ea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   de3be:	780b      	ldrb	r3, [r1, #0]
   de3c0:	2b03      	cmp	r3, #3
   de3c2:	d006      	beq.n	de3d2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   de3c4:	b98b      	cbnz	r3, de3ea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   de3c6:	6813      	ldr	r3, [r2, #0]
   de3c8:	6858      	ldr	r0, [r3, #4]
   de3ca:	684b      	ldr	r3, [r1, #4]
   de3cc:	5cc3      	ldrb	r3, [r0, r3]
   de3ce:	2b6e      	cmp	r3, #110	; 0x6e
   de3d0:	d007      	beq.n	de3e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   de3d2:	6813      	ldr	r3, [r2, #0]
   de3d4:	684d      	ldr	r5, [r1, #4]
   de3d6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   de3d8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   de3da:	4428      	add	r0, r5
            n_ = t->end - t->start;
   de3dc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   de3de:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   de3e0:	60e3      	str	r3, [r4, #12]
   de3e2:	4611      	mov	r1, r2
   de3e4:	4620      	mov	r0, r4
   de3e6:	f7ff fe17 	bl	de018 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   de3ea:	4620      	mov	r0, r4
   de3ec:	bd38      	pop	{r3, r4, r5, pc}
   de3ee:	bf00      	nop
   de3f0:	000e4537 	.word	0x000e4537

000de3f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   de3f4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   de3f6:	2500      	movs	r5, #0
   de3f8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   de3fa:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   de3fe:	e9c0 5502 	strd	r5, r5, [r0, #8]
   de402:	e9c0 5504 	strd	r5, r5, [r0, #16]
   de406:	4604      	mov	r4, r0
   de408:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   de40a:	b14b      	cbz	r3, de420 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   de40c:	781a      	ldrb	r2, [r3, #0]
   de40e:	2a01      	cmp	r2, #1
   de410:	d106      	bne.n	de420 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   de412:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   de416:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   de418:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   de41a:	6143      	str	r3, [r0, #20]
   de41c:	f7ff fdfc 	bl	de018 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   de420:	4620      	mov	r0, r4
   de422:	bd38      	pop	{r3, r4, r5, pc}

000de424 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   de424:	b510      	push	{r4, lr}
    if (!n_) {
   de426:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   de428:	4604      	mov	r4, r0
    if (!n_) {
   de42a:	b163      	cbz	r3, de446 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   de42c:	6880      	ldr	r0, [r0, #8]
   de42e:	60e0      	str	r0, [r4, #12]
    --n_;
   de430:	3b01      	subs	r3, #1
    ++t_;
   de432:	3010      	adds	r0, #16
   de434:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   de436:	6120      	str	r0, [r4, #16]
    --n_;
   de438:	6163      	str	r3, [r4, #20]
    if (n_) {
   de43a:	b113      	cbz	r3, de442 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   de43c:	f7ff fd29 	bl	dde92 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   de440:	60a0      	str	r0, [r4, #8]
    return true;
   de442:	2001      	movs	r0, #1
   de444:	e000      	b.n	de448 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   de446:	4618      	mov	r0, r3
}
   de448:	bd10      	pop	{r4, pc}

000de44a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   de44a:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   de44c:	2500      	movs	r5, #0
   de44e:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   de450:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   de454:	e9c0 5502 	strd	r5, r5, [r0, #8]
   de458:	4604      	mov	r4, r0
   de45a:	4611      	mov	r1, r2
   de45c:	6105      	str	r5, [r0, #16]
    if (t && t->type == JSMN_ARRAY) {
   de45e:	b14b      	cbz	r3, de474 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
   de460:	781a      	ldrb	r2, [r3, #0]
   de462:	2a02      	cmp	r2, #2
   de464:	d106      	bne.n	de474 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
   de466:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
   de46a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
   de46c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
   de46e:	6103      	str	r3, [r0, #16]
   de470:	f7ff fdd2 	bl	de018 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   de474:	4620      	mov	r0, r4
   de476:	bd38      	pop	{r3, r4, r5, pc}

000de478 <_ZN5spark17JSONArrayIterator4nextEv>:
bool spark::JSONArrayIterator::next() {
   de478:	b510      	push	{r4, lr}
    if (!n_) {
   de47a:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
   de47c:	4604      	mov	r4, r0
    if (!n_) {
   de47e:	b14b      	cbz	r3, de494 <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
    v_ = t_;
   de480:	6880      	ldr	r0, [r0, #8]
   de482:	60e0      	str	r0, [r4, #12]
    --n_;
   de484:	3b01      	subs	r3, #1
   de486:	6123      	str	r3, [r4, #16]
    if (n_) {
   de488:	b113      	cbz	r3, de490 <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
   de48a:	f7ff fd02 	bl	dde92 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   de48e:	60a0      	str	r0, [r4, #8]
    return true;
   de490:	2001      	movs	r0, #1
   de492:	e000      	b.n	de496 <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
   de494:	4618      	mov	r0, r3
}
   de496:	bd10      	pop	{r4, pc}

000de498 <_ZN5spark10JSONWriter8endArrayEv>:
spark::JSONWriter& spark::JSONWriter::endArray() {
   de498:	b510      	push	{r4, lr}
    write(']');
   de49a:	215d      	movs	r1, #93	; 0x5d
spark::JSONWriter& spark::JSONWriter::endArray() {
   de49c:	4604      	mov	r4, r0
    write(']');
   de49e:	f7ff fdaf 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   de4a2:	2301      	movs	r3, #1
   de4a4:	7123      	strb	r3, [r4, #4]
}
   de4a6:	4620      	mov	r0, r4
   de4a8:	bd10      	pop	{r4, pc}

000de4aa <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   de4aa:	b510      	push	{r4, lr}
    write('}');
   de4ac:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   de4ae:	4604      	mov	r4, r0
    write('}');
   de4b0:	f7ff fda6 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   de4b4:	2301      	movs	r3, #1
   de4b6:	7123      	strb	r3, [r4, #4]
}
   de4b8:	4620      	mov	r0, r4
   de4ba:	bd10      	pop	{r4, pc}

000de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   de4bc:	b508      	push	{r3, lr}
    switch (state_) {
   de4be:	7903      	ldrb	r3, [r0, #4]
   de4c0:	2b01      	cmp	r3, #1
   de4c2:	d002      	beq.n	de4ca <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   de4c4:	2b02      	cmp	r3, #2
   de4c6:	d004      	beq.n	de4d2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   de4c8:	bd08      	pop	{r3, pc}
        write(',');
   de4ca:	212c      	movs	r1, #44	; 0x2c
        write(':');
   de4cc:	f7ff fd98 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
}
   de4d0:	e7fa      	b.n	de4c8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   de4d2:	213a      	movs	r1, #58	; 0x3a
   de4d4:	e7fa      	b.n	de4cc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000de4d6 <_ZN5spark10JSONWriter10beginArrayEv>:
spark::JSONWriter& spark::JSONWriter::beginArray() {
   de4d6:	b510      	push	{r4, lr}
   de4d8:	4604      	mov	r4, r0
    writeSeparator();
   de4da:	f7ff ffef 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
   de4de:	4620      	mov	r0, r4
   de4e0:	215b      	movs	r1, #91	; 0x5b
   de4e2:	f7ff fd8d 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   de4e6:	2300      	movs	r3, #0
   de4e8:	7123      	strb	r3, [r4, #4]
}
   de4ea:	4620      	mov	r0, r4
   de4ec:	bd10      	pop	{r4, pc}

000de4ee <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   de4ee:	b510      	push	{r4, lr}
   de4f0:	4604      	mov	r4, r0
    writeSeparator();
   de4f2:	f7ff ffe3 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   de4f6:	4620      	mov	r0, r4
   de4f8:	217b      	movs	r1, #123	; 0x7b
   de4fa:	f7ff fd81 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   de4fe:	2300      	movs	r3, #0
   de500:	7123      	strb	r3, [r4, #4]
}
   de502:	4620      	mov	r0, r4
   de504:	bd10      	pop	{r4, pc}
	...

000de508 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   de508:	b538      	push	{r3, r4, r5, lr}
   de50a:	4604      	mov	r4, r0
   de50c:	460d      	mov	r5, r1
    writeSeparator();
   de50e:	f7ff ffd5 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   de512:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   de514:	689b      	ldr	r3, [r3, #8]
    if (val) {
   de516:	b13d      	cbz	r5, de528 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   de518:	4905      	ldr	r1, [pc, #20]	; (de530 <_ZN5spark10JSONWriter5valueEb+0x28>)
   de51a:	2204      	movs	r2, #4
        write("false", 5);
   de51c:	4620      	mov	r0, r4
   de51e:	4798      	blx	r3
    state_ = NEXT;
   de520:	2301      	movs	r3, #1
   de522:	7123      	strb	r3, [r4, #4]
}
   de524:	4620      	mov	r0, r4
   de526:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   de528:	4902      	ldr	r1, [pc, #8]	; (de534 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   de52a:	2205      	movs	r2, #5
   de52c:	e7f6      	b.n	de51c <_ZN5spark10JSONWriter5valueEb+0x14>
   de52e:	bf00      	nop
   de530:	000e3b35 	.word	0x000e3b35
   de534:	000e3b3a 	.word	0x000e3b3a

000de538 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   de538:	b513      	push	{r0, r1, r4, lr}
   de53a:	4604      	mov	r4, r0
   de53c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   de53e:	f7ff ffbd 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   de542:	6823      	ldr	r3, [r4, #0]
   de544:	9a01      	ldr	r2, [sp, #4]
   de546:	68db      	ldr	r3, [r3, #12]
   de548:	4903      	ldr	r1, [pc, #12]	; (de558 <_ZN5spark10JSONWriter5valueEi+0x20>)
   de54a:	4620      	mov	r0, r4
   de54c:	4798      	blx	r3
    state_ = NEXT;
   de54e:	2301      	movs	r3, #1
}
   de550:	4620      	mov	r0, r4
    state_ = NEXT;
   de552:	7123      	strb	r3, [r4, #4]
}
   de554:	b002      	add	sp, #8
   de556:	bd10      	pop	{r4, pc}
   de558:	000e3ecf 	.word	0x000e3ecf

000de55c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   de55c:	b513      	push	{r0, r1, r4, lr}
   de55e:	4604      	mov	r4, r0
   de560:	9101      	str	r1, [sp, #4]
    writeSeparator();
   de562:	f7ff ffab 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   de566:	6823      	ldr	r3, [r4, #0]
   de568:	9a01      	ldr	r2, [sp, #4]
   de56a:	68db      	ldr	r3, [r3, #12]
   de56c:	4903      	ldr	r1, [pc, #12]	; (de57c <_ZN5spark10JSONWriter5valueEj+0x20>)
   de56e:	4620      	mov	r0, r4
   de570:	4798      	blx	r3
    state_ = NEXT;
   de572:	2301      	movs	r3, #1
}
   de574:	4620      	mov	r0, r4
    state_ = NEXT;
   de576:	7123      	strb	r3, [r4, #4]
}
   de578:	b002      	add	sp, #8
   de57a:	bd10      	pop	{r4, pc}
   de57c:	000e41e6 	.word	0x000e41e6

000de580 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
   de580:	b510      	push	{r4, lr}
   de582:	ed2d 8b02 	vpush	{d8}
   de586:	eeb0 8a40 	vmov.f32	s16, s0
   de58a:	eef0 8a60 	vmov.f32	s17, s1
   de58e:	b084      	sub	sp, #16
   de590:	4604      	mov	r4, r0
   de592:	9103      	str	r1, [sp, #12]
    writeSeparator();
   de594:	f7ff ff92 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, val);
   de598:	ed8d 8b00 	vstr	d8, [sp]
   de59c:	6823      	ldr	r3, [r4, #0]
   de59e:	9a03      	ldr	r2, [sp, #12]
   de5a0:	68db      	ldr	r3, [r3, #12]
   de5a2:	4905      	ldr	r1, [pc, #20]	; (de5b8 <_ZN5spark10JSONWriter5valueEdi+0x38>)
   de5a4:	4620      	mov	r0, r4
   de5a6:	4798      	blx	r3
    state_ = NEXT;
   de5a8:	2301      	movs	r3, #1
}
   de5aa:	4620      	mov	r0, r4
    state_ = NEXT;
   de5ac:	7123      	strb	r3, [r4, #4]
}
   de5ae:	b004      	add	sp, #16
   de5b0:	ecbd 8b02 	vpop	{d8}
   de5b4:	bd10      	pop	{r4, pc}
   de5b6:	bf00      	nop
   de5b8:	000e48f8 	.word	0x000e48f8

000de5bc <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   de5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de5be:	4604      	mov	r4, r0
   de5c0:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   de5c4:	f7ff ff7a 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   de5c8:	6823      	ldr	r3, [r4, #0]
   de5ca:	4905      	ldr	r1, [pc, #20]	; (de5e0 <_ZN5spark10JSONWriter5valueEd+0x24>)
   de5cc:	68dd      	ldr	r5, [r3, #12]
   de5ce:	4620      	mov	r0, r4
   de5d0:	463b      	mov	r3, r7
   de5d2:	4632      	mov	r2, r6
   de5d4:	47a8      	blx	r5
    state_ = NEXT;
   de5d6:	2301      	movs	r3, #1
   de5d8:	7123      	strb	r3, [r4, #4]
}
   de5da:	4620      	mov	r0, r4
   de5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   de5de:	bf00      	nop
   de5e0:	000e48fe 	.word	0x000e48fe

000de5e4 <_ZN5spark10JSONWriter9nullValueEv>:
spark::JSONWriter& spark::JSONWriter::nullValue() {
   de5e4:	b510      	push	{r4, lr}
   de5e6:	4604      	mov	r4, r0
    writeSeparator();
   de5e8:	f7ff ff68 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write("null", 4);
   de5ec:	6823      	ldr	r3, [r4, #0]
   de5ee:	4904      	ldr	r1, [pc, #16]	; (de600 <_ZN5spark10JSONWriter9nullValueEv+0x1c>)
   de5f0:	689b      	ldr	r3, [r3, #8]
   de5f2:	4620      	mov	r0, r4
   de5f4:	2204      	movs	r2, #4
   de5f6:	4798      	blx	r3
    state_ = NEXT;
   de5f8:	2301      	movs	r3, #1
   de5fa:	7123      	strb	r3, [r4, #4]
}
   de5fc:	4620      	mov	r0, r4
   de5fe:	bd10      	pop	{r4, pc}
   de600:	000e4901 	.word	0x000e4901

000de604 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   de604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de608:	460d      	mov	r5, r1
   de60a:	4617      	mov	r7, r2
    write('"');
   de60c:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   de60e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; de6b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   de612:	4604      	mov	r4, r0
    const char* const end = str + size;
   de614:	442f      	add	r7, r5
    write('"');
   de616:	f7ff fcf3 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   de61a:	4629      	mov	r1, r5
    while (s != end) {
   de61c:	42bd      	cmp	r5, r7
   de61e:	462a      	mov	r2, r5
   de620:	d038      	beq.n	de694 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   de622:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   de626:	2e22      	cmp	r6, #34	; 0x22
   de628:	d003      	beq.n	de632 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   de62a:	2e5c      	cmp	r6, #92	; 0x5c
   de62c:	d001      	beq.n	de632 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   de62e:	2e1f      	cmp	r6, #31
   de630:	d8f4      	bhi.n	de61c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   de632:	6823      	ldr	r3, [r4, #0]
   de634:	1a52      	subs	r2, r2, r1
   de636:	689b      	ldr	r3, [r3, #8]
   de638:	4620      	mov	r0, r4
   de63a:	4798      	blx	r3
            write('\\');
   de63c:	215c      	movs	r1, #92	; 0x5c
   de63e:	4620      	mov	r0, r4
   de640:	f7ff fcde 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   de644:	2e0d      	cmp	r6, #13
   de646:	d80a      	bhi.n	de65e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   de648:	2e07      	cmp	r6, #7
   de64a:	d91c      	bls.n	de686 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   de64c:	f1a6 0308 	sub.w	r3, r6, #8
   de650:	2b05      	cmp	r3, #5
   de652:	d818      	bhi.n	de686 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   de654:	e8df f003 	tbb	[pc, r3]
   de658:	17110f0d 	.word	0x17110f0d
   de65c:	1513      	.short	0x1513
   de65e:	2e22      	cmp	r6, #34	; 0x22
   de660:	d001      	beq.n	de666 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   de662:	2e5c      	cmp	r6, #92	; 0x5c
   de664:	d10f      	bne.n	de686 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   de666:	4631      	mov	r1, r6
                write('b');
   de668:	4620      	mov	r0, r4
   de66a:	f7ff fcc9 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   de66e:	4629      	mov	r1, r5
    while (s != end) {
   de670:	e7d4      	b.n	de61c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   de672:	2162      	movs	r1, #98	; 0x62
   de674:	e7f8      	b.n	de668 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   de676:	2174      	movs	r1, #116	; 0x74
   de678:	e7f6      	b.n	de668 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   de67a:	216e      	movs	r1, #110	; 0x6e
   de67c:	e7f4      	b.n	de668 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   de67e:	2166      	movs	r1, #102	; 0x66
   de680:	e7f2      	b.n	de668 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   de682:	2172      	movs	r1, #114	; 0x72
   de684:	e7f0      	b.n	de668 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   de686:	6823      	ldr	r3, [r4, #0]
   de688:	4632      	mov	r2, r6
   de68a:	68db      	ldr	r3, [r3, #12]
   de68c:	4641      	mov	r1, r8
   de68e:	4620      	mov	r0, r4
   de690:	4798      	blx	r3
                break;
   de692:	e7ec      	b.n	de66e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   de694:	428d      	cmp	r5, r1
   de696:	d004      	beq.n	de6a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   de698:	6823      	ldr	r3, [r4, #0]
   de69a:	1a6a      	subs	r2, r5, r1
   de69c:	689b      	ldr	r3, [r3, #8]
   de69e:	4620      	mov	r0, r4
   de6a0:	4798      	blx	r3
    write('"');
   de6a2:	2122      	movs	r1, #34	; 0x22
   de6a4:	4620      	mov	r0, r4
   de6a6:	f7ff fcab 	bl	de000 <_ZN5spark10JSONWriter5writeEc>
}
   de6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de6ae:	bf00      	nop
   de6b0:	000e4906 	.word	0x000e4906

000de6b4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   de6b4:	b513      	push	{r0, r1, r4, lr}
   de6b6:	4604      	mov	r4, r0
   de6b8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   de6bc:	f7ff fefe 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   de6c0:	4620      	mov	r0, r4
   de6c2:	e9dd 2100 	ldrd	r2, r1, [sp]
   de6c6:	f7ff ff9d 	bl	de604 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   de6ca:	2302      	movs	r3, #2
}
   de6cc:	4620      	mov	r0, r4
    state_ = VALUE;
   de6ce:	7123      	strb	r3, [r4, #4]
}
   de6d0:	b002      	add	sp, #8
   de6d2:	bd10      	pop	{r4, pc}

000de6d4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   de6d4:	b513      	push	{r0, r1, r4, lr}
   de6d6:	4604      	mov	r4, r0
   de6d8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   de6dc:	f7ff feee 	bl	de4bc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   de6e0:	4620      	mov	r0, r4
   de6e2:	e9dd 2100 	ldrd	r2, r1, [sp]
   de6e6:	f7ff ff8d 	bl	de604 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   de6ea:	2301      	movs	r3, #1
}
   de6ec:	4620      	mov	r0, r4
    state_ = NEXT;
   de6ee:	7123      	strb	r3, [r4, #4]
}
   de6f0:	b002      	add	sp, #8
   de6f2:	bd10      	pop	{r4, pc}

000de6f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   de6f4:	b538      	push	{r3, r4, r5, lr}
   de6f6:	2300      	movs	r3, #0
   de6f8:	4604      	mov	r4, r0
   de6fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   de6fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   de6fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   de700:	f7f5 fcc9 	bl	d4096 <_Znwj>
   de704:	b128      	cbz	r0, de712 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   de706:	2301      	movs	r3, #1
   de708:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   de70c:	4b02      	ldr	r3, [pc, #8]	; (de718 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   de70e:	6003      	str	r3, [r0, #0]
   de710:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   de712:	6020      	str	r0, [r4, #0]
	}
   de714:	4620      	mov	r0, r4
   de716:	bd38      	pop	{r3, r4, r5, pc}
   de718:	000e4914 	.word	0x000e4914

000de71c <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   de71c:	b5f0      	push	{r4, r5, r6, r7, lr}
   de71e:	4604      	mov	r4, r0
   de720:	b087      	sub	sp, #28
   de722:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   de724:	200c      	movs	r0, #12
   de726:	4927      	ldr	r1, [pc, #156]	; (de7c4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   de728:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   de72a:	f002 f83f 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   de72e:	4601      	mov	r1, r0
   de730:	b118      	cbz	r0, de73a <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   de732:	2300      	movs	r3, #0
   de734:	e9c0 3300 	strd	r3, r3, [r0]
   de738:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   de73a:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   de73c:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   de73e:	f7ff ffd9 	bl	de6f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   de742:	9a02      	ldr	r2, [sp, #8]
   de744:	b942      	cbnz	r2, de758 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   de746:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   de74a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   de74c:	a803      	add	r0, sp, #12
   de74e:	f7f5 ff97 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   de752:	4620      	mov	r0, r4
   de754:	b007      	add	sp, #28
   de756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   de758:	2300      	movs	r3, #0
   de75a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   de75c:	4629      	mov	r1, r5
   de75e:	ab01      	add	r3, sp, #4
   de760:	4630      	mov	r0, r6
   de762:	f7ff fd35 	bl	de1d0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   de766:	b918      	cbnz	r0, de770 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   de768:	e9c4 0000 	strd	r0, r0, [r4]
   de76c:	60a0      	str	r0, [r4, #8]
}
   de76e:	e7ed      	b.n	de74c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   de770:	4914      	ldr	r1, [pc, #80]	; (de7c4 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   de772:	9f02      	ldr	r7, [sp, #8]
   de774:	1c68      	adds	r0, r5, #1
   de776:	f002 f81b 	bl	e07b0 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   de77a:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   de77c:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   de77e:	6858      	ldr	r0, [r3, #4]
   de780:	2800      	cmp	r0, #0
   de782:	d0f1      	beq.n	de768 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   de784:	462a      	mov	r2, r5
   de786:	4631      	mov	r1, r6
   de788:	f002 ff8e 	bl	e16a8 <memcpy>
   de78c:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   de78e:	9901      	ldr	r1, [sp, #4]
   de790:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   de792:	2201      	movs	r2, #1
   de794:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   de796:	685a      	ldr	r2, [r3, #4]
   de798:	f7ff fdec 	bl	de374 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   de79c:	2800      	cmp	r0, #0
   de79e:	d0e3      	beq.n	de768 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   de7a0:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   de7a2:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   de7a4:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   de7a6:	9b03      	ldr	r3, [sp, #12]
   de7a8:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   de7aa:	b113      	cbz	r3, de7b2 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   de7ac:	685a      	ldr	r2, [r3, #4]
   de7ae:	3201      	adds	r2, #1
   de7b0:	605a      	str	r2, [r3, #4]
   de7b2:	aa04      	add	r2, sp, #16
   de7b4:	4620      	mov	r0, r4
   de7b6:	f7ff fc46 	bl	de046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   de7ba:	a805      	add	r0, sp, #20
   de7bc:	f7f5 ff60 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   de7c0:	e7c4      	b.n	de74c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   de7c2:	bf00      	nop
   de7c4:	000e4b18 	.word	0x000e4b18

000de7c8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   de7c8:	6880      	ldr	r0, [r0, #8]
   de7ca:	6803      	ldr	r3, [r0, #0]
   de7cc:	68db      	ldr	r3, [r3, #12]
   de7ce:	4718      	bx	r3

000de7d0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   de7d0:	4770      	bx	lr

000de7d2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   de7d2:	4608      	mov	r0, r1
   de7d4:	b111      	cbz	r1, de7dc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   de7d6:	680b      	ldr	r3, [r1, #0]
   de7d8:	685b      	ldr	r3, [r3, #4]
   de7da:	4718      	bx	r3
}
   de7dc:	4770      	bx	lr

000de7de <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   de7de:	4770      	bx	lr

000de7e0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   de7e0:	4770      	bx	lr

000de7e2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   de7e2:	4770      	bx	lr

000de7e4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   de7e4:	4770      	bx	lr

000de7e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   de7e6:	b538      	push	{r3, r4, r5, lr}
   de7e8:	4604      	mov	r4, r0
   de7ea:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   de7ec:	6800      	ldr	r0, [r0, #0]
   de7ee:	212e      	movs	r1, #46	; 0x2e
   de7f0:	f002 ffd4 	bl	e179c <strchrnul>
    size = s - category;
   de7f4:	6823      	ldr	r3, [r4, #0]
   de7f6:	1ac3      	subs	r3, r0, r3
   de7f8:	602b      	str	r3, [r5, #0]
    if (size) {
   de7fa:	b123      	cbz	r3, de806 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   de7fc:	7803      	ldrb	r3, [r0, #0]
   de7fe:	b103      	cbz	r3, de802 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   de800:	3001      	adds	r0, #1
   de802:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   de804:	6020      	str	r0, [r4, #0]
}
   de806:	4618      	mov	r0, r3
   de808:	bd38      	pop	{r3, r4, r5, pc}

000de80a <_ZN5spark16JSONStreamWriterD0Ev>:
   de80a:	b510      	push	{r4, lr}
   de80c:	210c      	movs	r1, #12
   de80e:	4604      	mov	r4, r0
   de810:	f001 ff96 	bl	e0740 <_ZdlPvj>
   de814:	4620      	mov	r0, r4
   de816:	bd10      	pop	{r4, pc}

000de818 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   de818:	b510      	push	{r4, lr}
   de81a:	2104      	movs	r1, #4
   de81c:	4604      	mov	r4, r0
   de81e:	f001 ff8f 	bl	e0740 <_ZdlPvj>
   de822:	4620      	mov	r0, r4
   de824:	bd10      	pop	{r4, pc}

000de826 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   de826:	b510      	push	{r4, lr}
   de828:	2104      	movs	r1, #4
   de82a:	4604      	mov	r4, r0
   de82c:	f001 ff88 	bl	e0740 <_ZdlPvj>
   de830:	4620      	mov	r0, r4
   de832:	bd10      	pop	{r4, pc}

000de834 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   de834:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   de836:	f002 ffbb 	bl	e17b0 <strcmp>
}
   de83a:	fab0 f080 	clz	r0, r0
   de83e:	0940      	lsrs	r0, r0, #5
   de840:	bd08      	pop	{r3, pc}

000de842 <__tcf_1>:
   de842:	4770      	bx	lr

000de844 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   de844:	b510      	push	{r4, lr}
   de846:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   de848:	f001 fd94 	bl	e0374 <_Z16_fetch_usbserialv>
   de84c:	4284      	cmp	r4, r0
   de84e:	d010      	beq.n	de872 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   de850:	f001 fd08 	bl	e0264 <_Z22__fetch_global_Serial1v>
   de854:	4284      	cmp	r4, r0
   de856:	d105      	bne.n	de864 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   de858:	f001 fd04 	bl	e0264 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   de85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   de860:	f001 bcfd 	b.w	e025e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   de864:	b12c      	cbz	r4, de872 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   de866:	6823      	ldr	r3, [r4, #0]
   de868:	4620      	mov	r0, r4
   de86a:	685b      	ldr	r3, [r3, #4]
}
   de86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   de870:	4718      	bx	r3
   de872:	bd10      	pop	{r4, pc}

000de874 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   de874:	b513      	push	{r0, r1, r4, lr}
   de876:	4604      	mov	r4, r0
    return value(val, strlen(val));
   de878:	4608      	mov	r0, r1
   de87a:	9101      	str	r1, [sp, #4]
   de87c:	f002 ffc7 	bl	e180e <strlen>
   de880:	9901      	ldr	r1, [sp, #4]
   de882:	4602      	mov	r2, r0
   de884:	4620      	mov	r0, r4
}
   de886:	b002      	add	sp, #8
   de888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   de88c:	f7ff bf22 	b.w	de6d4 <_ZN5spark10JSONWriter5valueEPKcj>

000de890 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   de890:	b513      	push	{r0, r1, r4, lr}
   de892:	4604      	mov	r4, r0
    write(str, strlen(str));
   de894:	4608      	mov	r0, r1
   de896:	9101      	str	r1, [sp, #4]
   de898:	f002 ffb9 	bl	e180e <strlen>
   de89c:	6823      	ldr	r3, [r4, #0]
   de89e:	9901      	ldr	r1, [sp, #4]
   de8a0:	68db      	ldr	r3, [r3, #12]
   de8a2:	4602      	mov	r2, r0
   de8a4:	4620      	mov	r0, r4
}
   de8a6:	b002      	add	sp, #8
   de8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   de8ac:	4718      	bx	r3

000de8ae <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   de8ae:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   de8b0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   de8b2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   de8b6:	68db      	ldr	r3, [r3, #12]
   de8b8:	2201      	movs	r2, #1
   de8ba:	f10d 0107 	add.w	r1, sp, #7
   de8be:	4798      	blx	r3
}
   de8c0:	b003      	add	sp, #12
   de8c2:	f85d fb04 	ldr.w	pc, [sp], #4

000de8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   de8c6:	b40e      	push	{r1, r2, r3}
   de8c8:	b503      	push	{r0, r1, lr}
   de8ca:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   de8cc:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   de8ce:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   de8d2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   de8d4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   de8d6:	f001 f8a5 	bl	dfa24 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   de8da:	b002      	add	sp, #8
   de8dc:	f85d eb04 	ldr.w	lr, [sp], #4
   de8e0:	b003      	add	sp, #12
   de8e2:	4770      	bx	lr

000de8e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   de8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   de8e8:	e9d0 9500 	ldrd	r9, r5, [r0]
   de8ec:	f04f 0814 	mov.w	r8, #20
   de8f0:	fb08 f505 	mul.w	r5, r8, r5
   de8f4:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   de8f6:	10ab      	asrs	r3, r5, #2
   de8f8:	4d18      	ldr	r5, [pc, #96]	; (de95c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   de8fa:	4617      	mov	r7, r2
   de8fc:	435d      	muls	r5, r3
   de8fe:	464c      	mov	r4, r9
      while (__len > 0)
   de900:	2d00      	cmp	r5, #0
   de902:	dd23      	ble.n	de94c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	  _DistanceType __half = __len >> 1;
   de904:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   de906:	fb08 f006 	mul.w	r0, r8, r6
   de90a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   de90e:	463a      	mov	r2, r7
   de910:	f8ba b004 	ldrh.w	fp, [sl, #4]
   de914:	5820      	ldr	r0, [r4, r0]
   de916:	9101      	str	r1, [sp, #4]
   de918:	455f      	cmp	r7, fp
   de91a:	bf28      	it	cs
   de91c:	465a      	movcs	r2, fp
   de91e:	f002 ff7e 	bl	e181e <strncmp>
                if (cmp == 0) {
   de922:	9901      	ldr	r1, [sp, #4]
   de924:	2301      	movs	r3, #1
   de926:	b978      	cbnz	r0, de948 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   de928:	455f      	cmp	r7, fp
   de92a:	d103      	bne.n	de934 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   de92c:	9a00      	ldr	r2, [sp, #0]
   de92e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   de930:	4635      	mov	r5, r6
   de932:	e7e5      	b.n	de900 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   de934:	bf8c      	ite	hi
   de936:	2001      	movhi	r0, #1
   de938:	2000      	movls	r0, #0
	  if (__comp(__middle, __val))
   de93a:	2800      	cmp	r0, #0
   de93c:	d0f8      	beq.n	de930 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	      __len = __len - __half - 1;
   de93e:	1bae      	subs	r6, r5, r6
	      ++__first;
   de940:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   de944:	3e01      	subs	r6, #1
   de946:	e7f3      	b.n	de930 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   de948:	0fc0      	lsrs	r0, r0, #31
   de94a:	e7f6      	b.n	de93a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   de94c:	eba4 0409 	sub.w	r4, r4, r9
}
   de950:	4802      	ldr	r0, [pc, #8]	; (de95c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   de952:	10a4      	asrs	r4, r4, #2
   de954:	4360      	muls	r0, r4
   de956:	b003      	add	sp, #12
   de958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de95c:	cccccccd 	.word	0xcccccccd

000de960 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   de960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   de962:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   de964:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   de966:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   de968:	b30b      	cbz	r3, de9ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   de96a:	b301      	cbz	r1, de9ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   de96c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   de96e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   de972:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   de974:	a903      	add	r1, sp, #12
   de976:	a801      	add	r0, sp, #4
   de978:	f7ff ff35 	bl	de7e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   de97c:	4601      	mov	r1, r0
   de97e:	b1b0      	cbz	r0, de9ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   de980:	f10d 030b 	add.w	r3, sp, #11
   de984:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   de986:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   de98a:	4620      	mov	r0, r4
   de98c:	f7ff ffaa 	bl	de8e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   de990:	f89d 300b 	ldrb.w	r3, [sp, #11]
   de994:	b15b      	cbz	r3, de9ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   de996:	6824      	ldr	r4, [r4, #0]
   de998:	2314      	movs	r3, #20
   de99a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   de99e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   de9a2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   de9a6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   de9a8:	bfa8      	it	ge
   de9aa:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   de9ac:	e7e2      	b.n	de974 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   de9ae:	4630      	mov	r0, r6
   de9b0:	b004      	add	sp, #16
   de9b2:	bd70      	pop	{r4, r5, r6, pc}

000de9b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   de9b4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   de9b6:	4c09      	ldr	r4, [pc, #36]	; (de9dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   de9b8:	7823      	ldrb	r3, [r4, #0]
   de9ba:	f3bf 8f5b 	dmb	ish
   de9be:	07db      	lsls	r3, r3, #31
   de9c0:	d409      	bmi.n	de9d6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   de9c2:	4620      	mov	r0, r4
   de9c4:	f7f5 fb7a 	bl	d40bc <__cxa_guard_acquire>
   de9c8:	b128      	cbz	r0, de9d6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   de9ca:	4620      	mov	r0, r4
   de9cc:	f7f5 fb7b 	bl	d40c6 <__cxa_guard_release>
   de9d0:	4803      	ldr	r0, [pc, #12]	; (de9e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   de9d2:	f002 fe51 	bl	e1678 <atexit>
}
   de9d6:	4803      	ldr	r0, [pc, #12]	; (de9e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   de9d8:	bd10      	pop	{r4, pc}
   de9da:	bf00      	nop
   de9dc:	2003e558 	.word	0x2003e558
   de9e0:	000de7df 	.word	0x000de7df
   de9e4:	2003e1c0 	.word	0x2003e1c0

000de9e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   de9e8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   de9ea:	4c09      	ldr	r4, [pc, #36]	; (dea10 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   de9ec:	7823      	ldrb	r3, [r4, #0]
   de9ee:	f3bf 8f5b 	dmb	ish
   de9f2:	07db      	lsls	r3, r3, #31
   de9f4:	d409      	bmi.n	dea0a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   de9f6:	4620      	mov	r0, r4
   de9f8:	f7f5 fb60 	bl	d40bc <__cxa_guard_acquire>
   de9fc:	b128      	cbz	r0, dea0a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   de9fe:	4620      	mov	r0, r4
   dea00:	f7f5 fb61 	bl	d40c6 <__cxa_guard_release>
   dea04:	4803      	ldr	r0, [pc, #12]	; (dea14 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   dea06:	f002 fe37 	bl	e1678 <atexit>
    return &factory;
}
   dea0a:	4803      	ldr	r0, [pc, #12]	; (dea18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   dea0c:	bd10      	pop	{r4, pc}
   dea0e:	bf00      	nop
   dea10:	2003e55c 	.word	0x2003e55c
   dea14:	000de843 	.word	0x000de843
   dea18:	2003e1c4 	.word	0x2003e1c4

000dea1c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   dea1c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   dea1e:	2500      	movs	r5, #0
   dea20:	4604      	mov	r4, r0
   dea22:	e9c0 5500 	strd	r5, r5, [r0]
   dea26:	e9c0 5504 	strd	r5, r5, [r0, #16]
   dea2a:	6085      	str	r5, [r0, #8]
   dea2c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   dea2e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   dea32:	f7fd ffd1 	bl	dc9d8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   dea36:	f7ff ffbd 	bl	de9b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   dea3a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dea3c:	f7ff ffd4 	bl	de9e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   dea40:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dea42:	6220      	str	r0, [r4, #32]
}
   dea44:	4620      	mov	r0, r4
   dea46:	bd38      	pop	{r3, r4, r5, pc}

000dea48 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   dea48:	b510      	push	{r4, lr}
    static LogManager mgr;
   dea4a:	4c0a      	ldr	r4, [pc, #40]	; (dea74 <_ZN5spark10LogManager8instanceEv+0x2c>)
   dea4c:	7823      	ldrb	r3, [r4, #0]
   dea4e:	f3bf 8f5b 	dmb	ish
   dea52:	07db      	lsls	r3, r3, #31
   dea54:	d40c      	bmi.n	dea70 <_ZN5spark10LogManager8instanceEv+0x28>
   dea56:	4620      	mov	r0, r4
   dea58:	f7f5 fb30 	bl	d40bc <__cxa_guard_acquire>
   dea5c:	b140      	cbz	r0, dea70 <_ZN5spark10LogManager8instanceEv+0x28>
   dea5e:	4806      	ldr	r0, [pc, #24]	; (dea78 <_ZN5spark10LogManager8instanceEv+0x30>)
   dea60:	f7ff ffdc 	bl	dea1c <_ZN5spark10LogManagerC1Ev>
   dea64:	4620      	mov	r0, r4
   dea66:	f7f5 fb2e 	bl	d40c6 <__cxa_guard_release>
   dea6a:	4804      	ldr	r0, [pc, #16]	; (dea7c <_ZN5spark10LogManager8instanceEv+0x34>)
   dea6c:	f002 fe04 	bl	e1678 <atexit>
    return &mgr;
}
   dea70:	4801      	ldr	r0, [pc, #4]	; (dea78 <_ZN5spark10LogManager8instanceEv+0x30>)
   dea72:	bd10      	pop	{r4, pc}
   dea74:	2003e554 	.word	0x2003e554
   dea78:	2003e564 	.word	0x2003e564
   dea7c:	000deeb1 	.word	0x000deeb1

000dea80 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   dea80:	4a02      	ldr	r2, [pc, #8]	; (dea8c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   dea82:	4903      	ldr	r1, [pc, #12]	; (dea90 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   dea84:	4803      	ldr	r0, [pc, #12]	; (dea94 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   dea86:	2300      	movs	r3, #0
   dea88:	f7fe ba0e 	b.w	dcea8 <log_set_callbacks>
   dea8c:	000ded39 	.word	0x000ded39
   dea90:	000decc5 	.word	0x000decc5
   dea94:	000dec45 	.word	0x000dec45

000dea98 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   dea98:	2300      	movs	r3, #0
   dea9a:	461a      	mov	r2, r3
   dea9c:	4619      	mov	r1, r3
   dea9e:	4618      	mov	r0, r3
   deaa0:	f7fe ba02 	b.w	dcea8 <log_set_callbacks>

000deaa4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   deaa4:	b570      	push	{r4, r5, r6, lr}
   deaa6:	b08a      	sub	sp, #40	; 0x28
   deaa8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   deaaa:	4601      	mov	r1, r0
   deaac:	a804      	add	r0, sp, #16
   deaae:	f7f9 f90b 	bl	d7cc8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   deab2:	4e14      	ldr	r6, [pc, #80]	; (deb04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   deab4:	a804      	add	r0, sp, #16
   deab6:	f7ff fcb5 	bl	de424 <_ZN5spark18JSONObjectIterator4nextEv>
   deaba:	b1e8      	cbz	r0, deaf8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   deabc:	a904      	add	r1, sp, #16
   deabe:	4668      	mov	r0, sp
   deac0:	f7f9 f913 	bl	d7cea <_ZNK5spark18JSONObjectIterator4nameEv>
   deac4:	9802      	ldr	r0, [sp, #8]
   deac6:	4631      	mov	r1, r6
   deac8:	f7ff feb4 	bl	de834 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   deacc:	4604      	mov	r4, r0
   deace:	b110      	cbz	r0, dead6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dead0:	1e2c      	subs	r4, r5, #0
   dead2:	bf18      	it	ne
   dead4:	2401      	movne	r4, #1
   dead6:	a801      	add	r0, sp, #4
   dead8:	f7f5 fdd2 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   deadc:	2c00      	cmp	r4, #0
   deade:	d0e9      	beq.n	deab4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   deae0:	a904      	add	r1, sp, #16
   deae2:	4668      	mov	r0, sp
   deae4:	f7f9 f912 	bl	d7d0c <_ZNK5spark18JSONObjectIterator5valueEv>
   deae8:	4668      	mov	r0, sp
   deaea:	f7ff fb21 	bl	de130 <_ZNK5spark9JSONValue5toIntEv>
   deaee:	6028      	str	r0, [r5, #0]
   deaf0:	a801      	add	r0, sp, #4
   deaf2:	f7f5 fdc5 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   deaf6:	e7dd      	b.n	deab4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   deaf8:	a805      	add	r0, sp, #20
   deafa:	f7f5 fdc1 	bl	d4680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   deafe:	b00a      	add	sp, #40	; 0x28
   deb00:	bd70      	pop	{r4, r5, r6, pc}
   deb02:	bf00      	nop
   deb04:	000e4940 	.word	0x000e4940

000deb08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   deb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   deb0a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   deb0c:	4620      	mov	r0, r4
   deb0e:	4912      	ldr	r1, [pc, #72]	; (deb58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   deb10:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   deb12:	f002 fe4d 	bl	e17b0 <strcmp>
   deb16:	b948      	cbnz	r0, deb2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   deb18:	f001 fc2c 	bl	e0374 <_Z16_fetch_usbserialv>
   deb1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   deb20:	f001 fc18 	bl	e0354 <_ZN9USBSerial5beginEl>
        return &Serial;
   deb24:	f001 fc26 	bl	e0374 <_Z16_fetch_usbserialv>
}
   deb28:	b003      	add	sp, #12
   deb2a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   deb2c:	490b      	ldr	r1, [pc, #44]	; (deb5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   deb2e:	4620      	mov	r0, r4
   deb30:	f002 fe3e 	bl	e17b0 <strcmp>
   deb34:	b970      	cbnz	r0, deb54 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   deb36:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   deb3a:	a901      	add	r1, sp, #4
   deb3c:	4628      	mov	r0, r5
        int baud = 9600;
   deb3e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   deb40:	f7ff ffb0 	bl	deaa4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   deb44:	f001 fb8e 	bl	e0264 <_Z22__fetch_global_Serial1v>
   deb48:	9901      	ldr	r1, [sp, #4]
   deb4a:	f001 fb85 	bl	e0258 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   deb4e:	f001 fb89 	bl	e0264 <_Z22__fetch_global_Serial1v>
   deb52:	e7e9      	b.n	deb28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   deb54:	2000      	movs	r0, #0
   deb56:	e7e7      	b.n	deb28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   deb58:	000e4945 	.word	0x000e4945
   deb5c:	000e494c 	.word	0x000e494c

000deb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   deb62:	e9d0 5300 	ldrd	r5, r3, [r0]
   deb66:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb68:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   deb6a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   deb6e:	42ae      	cmp	r6, r5
   deb70:	d005      	beq.n	deb7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   deb72:	f105 0008 	add.w	r0, r5, #8
   deb76:	f7ff fff3 	bl	deb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   deb7a:	3514      	adds	r5, #20
   deb7c:	e7f7      	b.n	deb6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   deb7e:	6820      	ldr	r0, [r4, #0]
   deb80:	f7fe fac2 	bl	dd108 <free>
}
   deb84:	4620      	mov	r0, r4
   deb86:	bd70      	pop	{r4, r5, r6, pc}

000deb88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb88:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   deb8a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb8e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   deb90:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   deb94:	42ae      	cmp	r6, r5
   deb96:	d004      	beq.n	deba2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   deb98:	4628      	mov	r0, r5
   deb9a:	f000 ff85 	bl	dfaa8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   deb9e:	3510      	adds	r5, #16
   deba0:	e7f8      	b.n	deb94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   deba2:	6820      	ldr	r0, [r4, #0]
   deba4:	f7fe fab0 	bl	dd108 <free>
}
   deba8:	4620      	mov	r0, r4
   debaa:	bd70      	pop	{r4, r5, r6, pc}

000debac <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   debac:	b510      	push	{r4, lr}
   debae:	4604      	mov	r4, r0
   debb0:	300c      	adds	r0, #12
   debb2:	f7ff ffd5 	bl	deb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   debb6:	4620      	mov	r0, r4
   debb8:	f7ff ffe6 	bl	deb88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   debbc:	4620      	mov	r0, r4
   debbe:	bd10      	pop	{r4, pc}

000debc0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   debc0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   debc2:	4b04      	ldr	r3, [pc, #16]	; (debd4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   debc4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   debc6:	f840 3b04 	str.w	r3, [r0], #4
   debca:	f7ff ffef 	bl	debac <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   debce:	4620      	mov	r0, r4
   debd0:	bd10      	pop	{r4, pc}
   debd2:	bf00      	nop
   debd4:	000e3970 	.word	0x000e3970

000debd8 <_ZN5spark16StreamLogHandlerD0Ev>:
   debd8:	b510      	push	{r4, lr}
   debda:	4604      	mov	r4, r0
   debdc:	f7ff fff0 	bl	debc0 <_ZN5spark16StreamLogHandlerD1Ev>
   debe0:	4620      	mov	r0, r4
   debe2:	2124      	movs	r1, #36	; 0x24
   debe4:	f001 fdac 	bl	e0740 <_ZdlPvj>
   debe8:	4620      	mov	r0, r4
   debea:	bd10      	pop	{r4, pc}

000debec <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   debec:	b510      	push	{r4, lr}
   debee:	4b03      	ldr	r3, [pc, #12]	; (debfc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   debf0:	6003      	str	r3, [r0, #0]
   debf2:	4604      	mov	r4, r0
   debf4:	f7ff ffe4 	bl	debc0 <_ZN5spark16StreamLogHandlerD1Ev>
   debf8:	4620      	mov	r0, r4
   debfa:	bd10      	pop	{r4, pc}
   debfc:	000e49e4 	.word	0x000e49e4

000dec00 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   dec00:	b510      	push	{r4, lr}
   dec02:	4604      	mov	r4, r0
   dec04:	f7ff fff2 	bl	debec <_ZN5spark20JSONStreamLogHandlerD1Ev>
   dec08:	4620      	mov	r0, r4
   dec0a:	2124      	movs	r1, #36	; 0x24
   dec0c:	f001 fd98 	bl	e0740 <_ZdlPvj>
   dec10:	4620      	mov	r0, r4
   dec12:	bd10      	pop	{r4, pc}

000dec14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   dec14:	2200      	movs	r2, #0
   dec16:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   dec1a:	b510      	push	{r4, lr}
        capacity_(0) {
   dec1c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   dec1e:	680c      	ldr	r4, [r1, #0]
   dec20:	6004      	str	r4, [r0, #0]
   dec22:	684c      	ldr	r4, [r1, #4]
   dec24:	6044      	str	r4, [r0, #4]
   dec26:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dec28:	600a      	str	r2, [r1, #0]
   dec2a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dec2c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dec2e:	608a      	str	r2, [r1, #8]
}
   dec30:	bd10      	pop	{r4, pc}

000dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   dec32:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   dec34:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   dec36:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   dec38:	6818      	ldr	r0, [r3, #0]
   dec3a:	f7fd fee5 	bl	dca08 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   dec3e:	4620      	mov	r0, r4
   dec40:	bd10      	pop	{r4, pc}
	...

000dec44 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   dec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dec48:	b087      	sub	sp, #28
   dec4a:	4680      	mov	r8, r0
   dec4c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   dec4e:	4b1c      	ldr	r3, [pc, #112]	; (decc0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   dec50:	685b      	ldr	r3, [r3, #4]
   dec52:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dec56:	4689      	mov	r9, r1
   dec58:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   dec5a:	b96b      	cbnz	r3, dec78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   dec5c:	f7ff fef4 	bl	dea48 <_ZN5spark10LogManager8instanceEv>
   dec60:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dec62:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   dec66:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dec68:	9305      	str	r3, [sp, #20]
   dec6a:	f7fd fec5 	bl	dc9f8 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   dec6e:	7b23      	ldrb	r3, [r4, #12]
   dec70:	b12b      	cbz	r3, dec7e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   dec72:	a805      	add	r0, sp, #20
   dec74:	f7ff ffdd 	bl	dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   dec78:	b007      	add	sp, #28
   dec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   dec7e:	2301      	movs	r3, #1
   dec80:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   dec82:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   dec86:	fa5f f989 	uxtb.w	r9, r9
   dec8a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dec8e:	45aa      	cmp	sl, r5
   dec90:	d012      	beq.n	decb8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   dec92:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   dec96:	4631      	mov	r1, r6
   dec98:	1d38      	adds	r0, r7, #4
   dec9a:	f7ff fe61 	bl	de960 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dec9e:	4581      	cmp	r9, r0
   deca0:	d3f5      	bcc.n	dec8e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   deca2:	683b      	ldr	r3, [r7, #0]
   deca4:	9a03      	ldr	r2, [sp, #12]
   deca6:	9200      	str	r2, [sp, #0]
   deca8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   decac:	464a      	mov	r2, r9
   decae:	4633      	mov	r3, r6
   decb0:	4641      	mov	r1, r8
   decb2:	4638      	mov	r0, r7
   decb4:	47d8      	blx	fp
   decb6:	e7ea      	b.n	dec8e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   decb8:	2300      	movs	r3, #0
   decba:	7323      	strb	r3, [r4, #12]
   decbc:	e7d9      	b.n	dec72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   decbe:	bf00      	nop
   decc0:	e000ed00 	.word	0xe000ed00

000decc4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   decc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   decc8:	469b      	mov	fp, r3
   decca:	4b1a      	ldr	r3, [pc, #104]	; (ded34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   deccc:	685b      	ldr	r3, [r3, #4]
   decce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   decd2:	4680      	mov	r8, r0
   decd4:	4689      	mov	r9, r1
   decd6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   decd8:	b96b      	cbnz	r3, decf6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   decda:	f7ff feb5 	bl	dea48 <_ZN5spark10LogManager8instanceEv>
   decde:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dece0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   dece4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   dece6:	9301      	str	r3, [sp, #4]
   dece8:	f7fd fe86 	bl	dc9f8 <os_mutex_recursive_lock>
        if (that->isActive()) {
   decec:	7b23      	ldrb	r3, [r4, #12]
   decee:	b12b      	cbz	r3, decfc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   decf0:	a801      	add	r0, sp, #4
   decf2:	f7ff ff9e 	bl	dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   decf6:	b003      	add	sp, #12
   decf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   decfc:	2301      	movs	r3, #1
   decfe:	7323      	strb	r3, [r4, #12]
   ded00:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   ded04:	b2f6      	uxtb	r6, r6
   ded06:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ded0a:	4555      	cmp	r5, sl
   ded0c:	d00e      	beq.n	ded2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   ded0e:	f855 7b04 	ldr.w	r7, [r5], #4
   ded12:	4659      	mov	r1, fp
   ded14:	1d38      	adds	r0, r7, #4
   ded16:	f7ff fe23 	bl	de960 <_ZNK5spark6detail9LogFilter5levelEPKc>
   ded1a:	4286      	cmp	r6, r0
   ded1c:	d3f5      	bcc.n	ded0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   ded1e:	683b      	ldr	r3, [r7, #0]
   ded20:	464a      	mov	r2, r9
   ded22:	68db      	ldr	r3, [r3, #12]
   ded24:	4641      	mov	r1, r8
   ded26:	4638      	mov	r0, r7
   ded28:	4798      	blx	r3
   ded2a:	e7ee      	b.n	ded0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   ded2c:	2300      	movs	r3, #0
   ded2e:	7323      	strb	r3, [r4, #12]
   ded30:	e7de      	b.n	decf0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   ded32:	bf00      	nop
   ded34:	e000ed00 	.word	0xe000ed00

000ded38 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   ded38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   ded3c:	4b16      	ldr	r3, [pc, #88]	; (ded98 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   ded3e:	685b      	ldr	r3, [r3, #4]
   ded40:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ded44:	4605      	mov	r5, r0
   ded46:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ded48:	bb1b      	cbnz	r3, ded92 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ded4a:	f7ff fe7d 	bl	dea48 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ded4e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ded52:	4604      	mov	r4, r0
   ded54:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ded56:	9301      	str	r3, [sp, #4]
   ded58:	f7fd fe4e 	bl	dc9f8 <os_mutex_recursive_lock>
   ded5c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ded60:	2446      	movs	r4, #70	; 0x46
   ded62:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ded66:	45b0      	cmp	r8, r6
   ded68:	d109      	bne.n	ded7e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ded6a:	a801      	add	r0, sp, #4
   ded6c:	f7ff ff61 	bl	dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ded70:	42a5      	cmp	r5, r4
   ded72:	bfb4      	ite	lt
   ded74:	2000      	movlt	r0, #0
   ded76:	2001      	movge	r0, #1
}
   ded78:	b002      	add	sp, #8
   ded7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ded7e:	f856 0b04 	ldr.w	r0, [r6], #4
   ded82:	4639      	mov	r1, r7
   ded84:	3004      	adds	r0, #4
   ded86:	f7ff fdeb 	bl	de960 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ded8a:	4284      	cmp	r4, r0
   ded8c:	bfa8      	it	ge
   ded8e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ded90:	e7e9      	b.n	ded66 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ded92:	2000      	movs	r0, #0
   ded94:	e7f0      	b.n	ded78 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ded96:	bf00      	nop
   ded98:	e000ed00 	.word	0xe000ed00

000ded9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ded9c:	b570      	push	{r4, r5, r6, lr}
   ded9e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   deda0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   deda4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   deda6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   dedaa:	4282      	cmp	r2, r0
   dedac:	d007      	beq.n	dedbe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   dedae:	4601      	mov	r1, r0
            if (*p == value) {
   dedb0:	681d      	ldr	r5, [r3, #0]
   dedb2:	f851 6b04 	ldr.w	r6, [r1], #4
   dedb6:	42ae      	cmp	r6, r5
   dedb8:	d003      	beq.n	dedc2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   dedba:	4608      	mov	r0, r1
   dedbc:	e7f5      	b.n	dedaa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   dedbe:	2000      	movs	r0, #0
}
   dedc0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   dedc2:	1a52      	subs	r2, r2, r1
   dedc4:	f002 fc7e 	bl	e16c4 <memmove>
    --size_;
   dedc8:	6863      	ldr	r3, [r4, #4]
   dedca:	3b01      	subs	r3, #1
   dedcc:	6063      	str	r3, [r4, #4]
    return true;
   dedce:	2001      	movs	r0, #1
   dedd0:	e7f6      	b.n	dedc0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000dedd2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   dedd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   dedd4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   dedd8:	4604      	mov	r4, r0
   dedda:	6a40      	ldr	r0, [r0, #36]	; 0x24
   deddc:	9101      	str	r1, [sp, #4]
   dedde:	9303      	str	r3, [sp, #12]
   dede0:	f7fd fe0a 	bl	dc9f8 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   dede4:	a901      	add	r1, sp, #4
   dede6:	4620      	mov	r0, r4
   dede8:	f7ff ffd8 	bl	ded9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   dedec:	b118      	cbz	r0, dedf6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   dedee:	6863      	ldr	r3, [r4, #4]
   dedf0:	b90b      	cbnz	r3, dedf6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   dedf2:	f7ff fe51 	bl	dea98 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dedf6:	a803      	add	r0, sp, #12
   dedf8:	f7ff ff1b 	bl	dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dedfc:	b004      	add	sp, #16
   dedfe:	bd10      	pop	{r4, pc}

000dee00 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   dee00:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   dee02:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   dee06:	2318      	movs	r3, #24
   dee08:	4604      	mov	r4, r0
   dee0a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   dee0e:	42ae      	cmp	r6, r5
   dee10:	d015      	beq.n	dee3e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   dee12:	f105 0110 	add.w	r1, r5, #16
   dee16:	4620      	mov	r0, r4
   dee18:	f7ff ffc0 	bl	ded9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   dee1c:	6863      	ldr	r3, [r4, #4]
   dee1e:	b90b      	cbnz	r3, dee24 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   dee20:	f7ff fe3a 	bl	dea98 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   dee24:	69e0      	ldr	r0, [r4, #28]
   dee26:	6929      	ldr	r1, [r5, #16]
   dee28:	6803      	ldr	r3, [r0, #0]
   dee2a:	68db      	ldr	r3, [r3, #12]
   dee2c:	4798      	blx	r3
        if (h.stream) {
   dee2e:	6969      	ldr	r1, [r5, #20]
   dee30:	b119      	cbz	r1, dee3a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   dee32:	6a20      	ldr	r0, [r4, #32]
   dee34:	6803      	ldr	r3, [r0, #0]
   dee36:	68db      	ldr	r3, [r3, #12]
   dee38:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   dee3a:	3518      	adds	r5, #24
   dee3c:	e7e7      	b.n	dee0e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   dee3e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dee42:	2618      	movs	r6, #24
   dee44:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dee48:	42ae      	cmp	r6, r5
   dee4a:	d004      	beq.n	dee56 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   dee4c:	4628      	mov	r0, r5
   dee4e:	f000 fe2b 	bl	dfaa8 <_ZN6StringD1Ev>
   dee52:	3518      	adds	r5, #24
   dee54:	e7f8      	b.n	dee48 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   dee56:	2300      	movs	r3, #0
   dee58:	6163      	str	r3, [r4, #20]
}
   dee5a:	bd70      	pop	{r4, r5, r6, pc}

000dee5c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   dee5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dee5e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   dee60:	f7ff fe1a 	bl	dea98 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dee64:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dee68:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dee6a:	9301      	str	r3, [sp, #4]
   dee6c:	f7fd fdc4 	bl	dc9f8 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   dee70:	4620      	mov	r0, r4
   dee72:	f7ff ffc5 	bl	dee00 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   dee76:	a801      	add	r0, sp, #4
   dee78:	f7ff fedb 	bl	dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   dee7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dee7e:	b108      	cbz	r0, dee84 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   dee80:	f7fd fdb2 	bl	dc9e8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   dee84:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dee88:	2618      	movs	r6, #24
   dee8a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dee8e:	42ae      	cmp	r6, r5
   dee90:	d004      	beq.n	dee9c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dee92:	4628      	mov	r0, r5
   dee94:	f000 fe08 	bl	dfaa8 <_ZN6StringD1Ev>
   dee98:	3518      	adds	r5, #24
   dee9a:	e7f8      	b.n	dee8e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dee9c:	6920      	ldr	r0, [r4, #16]
   dee9e:	f7fe f933 	bl	dd108 <free>
   deea2:	6820      	ldr	r0, [r4, #0]
   deea4:	f7fe f930 	bl	dd108 <free>
}
   deea8:	4620      	mov	r0, r4
   deeaa:	b002      	add	sp, #8
   deeac:	bd70      	pop	{r4, r5, r6, pc}
	...

000deeb0 <__tcf_2>:
    static LogManager mgr;
   deeb0:	4801      	ldr	r0, [pc, #4]	; (deeb8 <__tcf_2+0x8>)
   deeb2:	f7ff bfd3 	b.w	dee5c <_ZN5spark10LogManagerD1Ev>
   deeb6:	bf00      	nop
   deeb8:	2003e564 	.word	0x2003e564

000deebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   deebc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   deebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   deec0:	4606      	mov	r6, r0
   deec2:	460c      	mov	r4, r1
   deec4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   deec6:	d927      	bls.n	def18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   deec8:	4290      	cmp	r0, r2
   deeca:	d226      	bcs.n	def1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   deecc:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   deed0:	1a6c      	subs	r4, r5, r1
   deed2:	f1a1 0714 	sub.w	r7, r1, #20
   deed6:	4404      	add	r4, r0
        capacity_(0) {
   deed8:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   deeda:	42af      	cmp	r7, r5
   deedc:	d03d      	beq.n	def5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   deede:	b1a4      	cbz	r4, def0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   deee0:	682b      	ldr	r3, [r5, #0]
   deee2:	6023      	str	r3, [r4, #0]
   deee4:	88ab      	ldrh	r3, [r5, #4]
   deee6:	80a3      	strh	r3, [r4, #4]
   deee8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   deeec:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   deeee:	e9c4 6602 	strd	r6, r6, [r4, #8]
   deef2:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   deef4:	68ab      	ldr	r3, [r5, #8]
   deef6:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   deef8:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   deefa:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   deefc:	68ea      	ldr	r2, [r5, #12]
   deefe:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   def00:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   def02:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   def04:	692a      	ldr	r2, [r5, #16]
   def06:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   def08:	612b      	str	r3, [r5, #16]
   def0a:	f105 0008 	add.w	r0, r5, #8
   def0e:	f7ff fe27 	bl	deb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   def12:	3d14      	subs	r5, #20
   def14:	3c14      	subs	r4, #20
   def16:	e7e0      	b.n	deeda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   def18:	d01f      	beq.n	def5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   def1a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   def1c:	42ac      	cmp	r4, r5
   def1e:	d01c      	beq.n	def5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   def20:	b1a6      	cbz	r6, def4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   def22:	6823      	ldr	r3, [r4, #0]
   def24:	6033      	str	r3, [r6, #0]
   def26:	88a3      	ldrh	r3, [r4, #4]
   def28:	80b3      	strh	r3, [r6, #4]
   def2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   def2e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   def30:	e9c6 7702 	strd	r7, r7, [r6, #8]
   def34:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   def36:	68a3      	ldr	r3, [r4, #8]
   def38:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   def3a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   def3c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   def3e:	68e2      	ldr	r2, [r4, #12]
   def40:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   def42:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   def44:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   def46:	6922      	ldr	r2, [r4, #16]
   def48:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   def4a:	6123      	str	r3, [r4, #16]
   def4c:	f104 0008 	add.w	r0, r4, #8
   def50:	f7ff fe06 	bl	deb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   def54:	3414      	adds	r4, #20
   def56:	3614      	adds	r6, #20
   def58:	e7e0      	b.n	def1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   def5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000def5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   def5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   def5e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   def62:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   def64:	4604      	mov	r4, r0
   def66:	460e      	mov	r6, r1
   def68:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   def6a:	db0d      	blt.n	def88 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   def6c:	3501      	adds	r5, #1
        if (n > 0) {
   def6e:	2d00      	cmp	r5, #0
   def70:	6800      	ldr	r0, [r0, #0]
   def72:	dd04      	ble.n	def7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   def74:	00a9      	lsls	r1, r5, #2
   def76:	f7fe f8cf 	bl	dd118 <realloc>
            if (!d) {
   def7a:	b918      	cbnz	r0, def84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   def7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   def7e:	f7fe f8c3 	bl	dd108 <free>
        T* d = nullptr;
   def82:	2000      	movs	r0, #0
        data_ = d;
   def84:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   def86:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   def88:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   def8a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   def8c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   def90:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   def92:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   def96:	1d08      	adds	r0, r1, #4
   def98:	f002 fb94 	bl	e16c4 <memmove>
    new(p) T(std::move(value));
   def9c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   defa0:	6863      	ldr	r3, [r4, #4]
   defa2:	3301      	adds	r3, #1
   defa4:	6063      	str	r3, [r4, #4]
    return true;
   defa6:	2001      	movs	r0, #1
   defa8:	e7e8      	b.n	def7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000defaa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   defaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   defac:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   defb0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   defb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   defb4:	9301      	str	r3, [sp, #4]
   defb6:	460d      	mov	r5, r1
   defb8:	f7fd fd1e 	bl	dc9f8 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   defbc:	e9d4 3100 	ldrd	r3, r1, [r4]
   defc0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   defc4:	4283      	cmp	r3, r0
   defc6:	461a      	mov	r2, r3
   defc8:	d00b      	beq.n	defe2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   defca:	6812      	ldr	r2, [r2, #0]
   defcc:	42aa      	cmp	r2, r5
   defce:	f103 0304 	add.w	r3, r3, #4
   defd2:	d1f7      	bne.n	defc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   defd4:	a801      	add	r0, sp, #4
   defd6:	f7ff fe2c 	bl	dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   defda:	2500      	movs	r5, #0
}
   defdc:	4628      	mov	r0, r5
   defde:	b003      	add	sp, #12
   defe0:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   defe2:	462a      	mov	r2, r5
   defe4:	4620      	mov	r0, r4
   defe6:	f7ff ffb9 	bl	def5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   defea:	4605      	mov	r5, r0
   defec:	2800      	cmp	r0, #0
   defee:	d0f1      	beq.n	defd4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   deff0:	6863      	ldr	r3, [r4, #4]
   deff2:	2b01      	cmp	r3, #1
   deff4:	d101      	bne.n	deffa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   deff6:	f7ff fd43 	bl	dea80 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   deffa:	a801      	add	r0, sp, #4
   deffc:	f7ff fe19 	bl	dec32 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   df000:	e7ec      	b.n	defdc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000df002 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   df002:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   df004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df006:	4604      	mov	r4, r0
   df008:	460d      	mov	r5, r1
   df00a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   df00c:	d914      	bls.n	df038 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   df00e:	4290      	cmp	r0, r2
   df010:	d213      	bcs.n	df03a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   df012:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   df016:	1a75      	subs	r5, r6, r1
   df018:	f1a1 0710 	sub.w	r7, r1, #16
   df01c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   df01e:	42b7      	cmp	r7, r6
   df020:	d018      	beq.n	df054 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   df022:	b11c      	cbz	r4, df02c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   df024:	4631      	mov	r1, r6
   df026:	4620      	mov	r0, r4
   df028:	f000 fdba 	bl	dfba0 <_ZN6StringC1EOS_>
                end->~T();
   df02c:	4630      	mov	r0, r6
   df02e:	f000 fd3b 	bl	dfaa8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   df032:	3e10      	subs	r6, #16
   df034:	3c10      	subs	r4, #16
   df036:	e7f2      	b.n	df01e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   df038:	d00c      	beq.n	df054 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   df03a:	42b5      	cmp	r5, r6
   df03c:	d00a      	beq.n	df054 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   df03e:	b11c      	cbz	r4, df048 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   df040:	4629      	mov	r1, r5
   df042:	4620      	mov	r0, r4
   df044:	f000 fdac 	bl	dfba0 <_ZN6StringC1EOS_>
                p->~T();
   df048:	4628      	mov	r0, r5
   df04a:	f000 fd2d 	bl	dfaa8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   df04e:	3510      	adds	r5, #16
   df050:	3410      	adds	r4, #16
   df052:	e7f2      	b.n	df03a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   df054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df056 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   df056:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   df058:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   df05a:	4605      	mov	r5, r0
        if (n > 0) {
   df05c:	dd11      	ble.n	df082 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   df05e:	0130      	lsls	r0, r6, #4
   df060:	f7fe f84a 	bl	dd0f8 <malloc>
            if (!d) {
   df064:	4604      	mov	r4, r0
   df066:	b158      	cbz	r0, df080 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   df068:	e9d5 1200 	ldrd	r1, r2, [r5]
   df06c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   df070:	f7ff ffc7 	bl	df002 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   df074:	6828      	ldr	r0, [r5, #0]
   df076:	f7fe f847 	bl	dd108 <free>
        data_ = d;
   df07a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   df07c:	60ae      	str	r6, [r5, #8]
        return true;
   df07e:	2001      	movs	r0, #1
    }
   df080:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   df082:	2400      	movs	r4, #0
   df084:	e7f6      	b.n	df074 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000df086 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   df086:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df08a:	4691      	mov	r9, r2
   df08c:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   df08e:	2300      	movs	r3, #0
   df090:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   df092:	f8d9 1004 	ldr.w	r1, [r9, #4]
   df096:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   df098:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   df09a:	4299      	cmp	r1, r3
        capacity_(0) {
   df09c:	e9c0 3300 	strd	r3, r3, [r0]
   df0a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   df0a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   df0a8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   df0ac:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   df0ae:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   df0b0:	dc23      	bgt.n	df0fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   df0b2:	e9d9 5700 	ldrd	r5, r7, [r9]
   df0b6:	2314      	movs	r3, #20
   df0b8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   df0bc:	42af      	cmp	r7, r5
   df0be:	d03b      	beq.n	df138 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   df0c0:	4629      	mov	r1, r5
   df0c2:	a80d      	add	r0, sp, #52	; 0x34
   df0c4:	f000 fd6c 	bl	dfba0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   df0c8:	a90d      	add	r1, sp, #52	; 0x34
   df0ca:	a811      	add	r0, sp, #68	; 0x44
   df0cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   df0ce:	f000 fd67 	bl	dfba0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   df0d2:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   df0d6:	4299      	cmp	r1, r3
   df0d8:	da1b      	bge.n	df112 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   df0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   df0dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   df0de:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   df0e2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   df0e6:	4631      	mov	r1, r6
   df0e8:	f106 0010 	add.w	r0, r6, #16
   df0ec:	f7ff ff89 	bl	df002 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   df0f0:	b9ee      	cbnz	r6, df12e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   df0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   df0f4:	3301      	adds	r3, #1
   df0f6:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   df0f8:	e011      	b.n	df11e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   df0fa:	a80a      	add	r0, sp, #40	; 0x28
   df0fc:	f7ff ffab 	bl	df056 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   df100:	2800      	cmp	r0, #0
   df102:	d1d6      	bne.n	df0b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   df104:	a80a      	add	r0, sp, #40	; 0x28
   df106:	f7ff fd3f 	bl	deb88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   df10a:	4620      	mov	r0, r4
   df10c:	b017      	add	sp, #92	; 0x5c
   df10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   df112:	3101      	adds	r1, #1
   df114:	a80a      	add	r0, sp, #40	; 0x28
   df116:	f7ff ff9e 	bl	df056 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   df11a:	2800      	cmp	r0, #0
   df11c:	d1dd      	bne.n	df0da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   df11e:	a811      	add	r0, sp, #68	; 0x44
   df120:	f000 fcc2 	bl	dfaa8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   df124:	a80d      	add	r0, sp, #52	; 0x34
   df126:	f000 fcbf 	bl	dfaa8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   df12a:	3514      	adds	r5, #20
   df12c:	e7c6      	b.n	df0bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   df12e:	a911      	add	r1, sp, #68	; 0x44
   df130:	4630      	mov	r0, r6
   df132:	f000 fd35 	bl	dfba0 <_ZN6StringC1EOS_>
   df136:	e7dc      	b.n	df0f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   df138:	2600      	movs	r6, #0
   df13a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   df13e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   df140:	4637      	mov	r7, r6
   df142:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   df146:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   df14a:	429e      	cmp	r6, r3
   df14c:	f280 8097 	bge.w	df27e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   df150:	0133      	lsls	r3, r6, #4
   df152:	58d3      	ldr	r3, [r2, r3]
   df154:	9308      	str	r3, [sp, #32]
        if (!category) {
   df156:	b90b      	cbnz	r3, df15c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   df158:	3601      	adds	r6, #1
   df15a:	e7f4      	b.n	df146 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   df15c:	fb0a f306 	mul.w	r3, sl, r6
   df160:	9709      	str	r7, [sp, #36]	; 0x24
   df162:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   df164:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   df166:	a909      	add	r1, sp, #36	; 0x24
   df168:	a808      	add	r0, sp, #32
   df16a:	f7ff fb3c 	bl	de7e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   df16e:	4683      	mov	fp, r0
   df170:	2800      	cmp	r0, #0
   df172:	d0f1      	beq.n	df158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   df174:	4601      	mov	r1, r0
   df176:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   df178:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   df17c:	f10d 031f 	add.w	r3, sp, #31
   df180:	4628      	mov	r0, r5
   df182:	f7ff fbaf 	bl	de8e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df186:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   df18a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df18c:	f1b8 0f00 	cmp.w	r8, #0
   df190:	d166      	bne.n	df260 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   df192:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   df196:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   df19a:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   df19e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   df1a2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   df1a6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   df1aa:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   df1ae:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   df1b2:	4293      	cmp	r3, r2
   df1b4:	db1a      	blt.n	df1ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   df1b6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   df1ba:	f1bb 0f00 	cmp.w	fp, #0
   df1be:	dd4a      	ble.n	df256 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   df1c0:	fb0a f00b 	mul.w	r0, sl, fp
   df1c4:	f7fd ff98 	bl	dd0f8 <malloc>
            if (!d) {
   df1c8:	9004      	str	r0, [sp, #16]
   df1ca:	2800      	cmp	r0, #0
   df1cc:	d045      	beq.n	df25a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   df1ce:	e9d5 1200 	ldrd	r1, r2, [r5]
   df1d2:	fb0a 1202 	mla	r2, sl, r2, r1
   df1d6:	f7ff fe71 	bl	deebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   df1da:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   df1dc:	6828      	ldr	r0, [r5, #0]
   df1de:	9304      	str	r3, [sp, #16]
   df1e0:	f7fd ff92 	bl	dd108 <free>
        data_ = d;
   df1e4:	9b04      	ldr	r3, [sp, #16]
   df1e6:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   df1e8:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   df1ec:	9b01      	ldr	r3, [sp, #4]
   df1ee:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   df1f2:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   df1f4:	fb0a f303 	mul.w	r3, sl, r3
   df1f8:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   df1fc:	f101 0014 	add.w	r0, r1, #20
   df200:	fb0a b202 	mla	r2, sl, r2, fp
   df204:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   df206:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   df208:	f7ff fe58 	bl	deebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   df20c:	9904      	ldr	r1, [sp, #16]
   df20e:	b1a9      	cbz	r1, df23c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   df210:	9b05      	ldr	r3, [sp, #20]
   df212:	9a11      	ldr	r2, [sp, #68]	; 0x44
   df214:	f84b 2003 	str.w	r2, [fp, r3]
   df218:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   df21c:	808b      	strh	r3, [r1, #4]
   df21e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   df222:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   df224:	e9c1 7702 	strd	r7, r7, [r1, #8]
   df228:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   df22a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   df22c:	608b      	str	r3, [r1, #8]
   df22e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   df230:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   df232:	60cb      	str	r3, [r1, #12]
   df234:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   df236:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   df238:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   df23a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   df23c:	686b      	ldr	r3, [r5, #4]
   df23e:	3301      	adds	r3, #1
   df240:	606b      	str	r3, [r5, #4]
   df242:	a813      	add	r0, sp, #76	; 0x4c
   df244:	f7ff fc8c 	bl	deb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df248:	f1b8 0f00 	cmp.w	r8, #0
   df24c:	d008      	beq.n	df260 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   df24e:	a80d      	add	r0, sp, #52	; 0x34
   df250:	f7ff fc86 	bl	deb60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   df254:	e756      	b.n	df104 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   df256:	4643      	mov	r3, r8
   df258:	e7c0      	b.n	df1dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df25a:	f04f 0801 	mov.w	r8, #1
   df25e:	e7f0      	b.n	df242 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   df260:	9b01      	ldr	r3, [sp, #4]
   df262:	682d      	ldr	r5, [r5, #0]
   df264:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   df268:	9b08      	ldr	r3, [sp, #32]
   df26a:	781b      	ldrb	r3, [r3, #0]
   df26c:	b92b      	cbnz	r3, df27a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   df26e:	f8d9 3000 	ldr.w	r3, [r9]
   df272:	9a02      	ldr	r2, [sp, #8]
   df274:	4413      	add	r3, r2
   df276:	7c1b      	ldrb	r3, [r3, #16]
   df278:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   df27a:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   df27c:	e773      	b.n	df166 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df27e:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   df280:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df282:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   df284:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df286:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   df288:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   df28a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   df28c:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df28e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   df290:	60a2      	str	r2, [r4, #8]
   df292:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   df294:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df296:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   df298:	60e2      	str	r2, [r4, #12]
   df29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   df29c:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df29e:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   df2a0:	6122      	str	r2, [r4, #16]
   df2a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   df2a4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   df2a6:	9b03      	ldr	r3, [sp, #12]
   df2a8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   df2aa:	6162      	str	r2, [r4, #20]
   df2ac:	7623      	strb	r3, [r4, #24]
   df2ae:	e7ce      	b.n	df24e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000df2b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   df2b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   df2b2:	4605      	mov	r5, r0
   df2b4:	4b09      	ldr	r3, [pc, #36]	; (df2dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   df2b6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   df2ba:	4604      	mov	r4, r0
   df2bc:	460e      	mov	r6, r1
        filter_(level, filters) {
   df2be:	a801      	add	r0, sp, #4
   df2c0:	4611      	mov	r1, r2
   df2c2:	f7f4 ffb6 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   df2c6:	aa01      	add	r2, sp, #4
   df2c8:	4631      	mov	r1, r6
   df2ca:	4628      	mov	r0, r5
   df2cc:	f7ff fedb 	bl	df086 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   df2d0:	a801      	add	r0, sp, #4
   df2d2:	f7f4 ff6d 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   df2d6:	4620      	mov	r0, r4
   df2d8:	b004      	add	sp, #16
   df2da:	bd70      	pop	{r4, r5, r6, pc}
   df2dc:	000e3970 	.word	0x000e3970

000df2e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   df2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   df2e2:	460f      	mov	r7, r1
   df2e4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   df2e6:	4926      	ldr	r1, [pc, #152]	; (df380 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   df2e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   df2ea:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   df2ec:	4616      	mov	r6, r2
   df2ee:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   df2f0:	f002 fa5e 	bl	e17b0 <strcmp>
   df2f4:	bb00      	cbnz	r0, df338 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   df2f6:	b1e4      	cbz	r4, df332 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   df2f8:	4629      	mov	r1, r5
   df2fa:	4668      	mov	r0, sp
   df2fc:	f7ff fc8a 	bl	dec14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   df300:	4920      	ldr	r1, [pc, #128]	; (df384 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   df302:	2024      	movs	r0, #36	; 0x24
   df304:	f001 fa52 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   df308:	4605      	mov	r5, r0
   df30a:	b170      	cbz	r0, df32a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   df30c:	4669      	mov	r1, sp
   df30e:	a803      	add	r0, sp, #12
   df310:	f7f4 ff8f 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   df314:	aa03      	add	r2, sp, #12
   df316:	4631      	mov	r1, r6
   df318:	4628      	mov	r0, r5
   df31a:	f7ff ffc9 	bl	df2b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   df31e:	a803      	add	r0, sp, #12
   df320:	f7f4 ff46 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   df324:	4b18      	ldr	r3, [pc, #96]	; (df388 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   df326:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   df328:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   df32a:	4668      	mov	r0, sp
   df32c:	f7f4 ff40 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   df330:	462c      	mov	r4, r5
}
   df332:	4620      	mov	r0, r4
   df334:	b007      	add	sp, #28
   df336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   df338:	4914      	ldr	r1, [pc, #80]	; (df38c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   df33a:	4638      	mov	r0, r7
   df33c:	f002 fa38 	bl	e17b0 <strcmp>
   df340:	b9e0      	cbnz	r0, df37c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   df342:	2c00      	cmp	r4, #0
   df344:	d0f5      	beq.n	df332 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   df346:	4629      	mov	r1, r5
   df348:	4668      	mov	r0, sp
   df34a:	f7ff fc63 	bl	dec14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   df34e:	490d      	ldr	r1, [pc, #52]	; (df384 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   df350:	2024      	movs	r0, #36	; 0x24
   df352:	f001 fa2b 	bl	e07ac <_ZnwjRKSt9nothrow_t>
   df356:	4605      	mov	r5, r0
   df358:	2800      	cmp	r0, #0
   df35a:	d0e6      	beq.n	df32a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   df35c:	4669      	mov	r1, sp
   df35e:	a803      	add	r0, sp, #12
   df360:	f7f4 ff67 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   df364:	aa03      	add	r2, sp, #12
   df366:	4631      	mov	r1, r6
   df368:	4628      	mov	r0, r5
   df36a:	f7ff ffa1 	bl	df2b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   df36e:	a803      	add	r0, sp, #12
   df370:	f7f4 ff1e 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   df374:	4b06      	ldr	r3, [pc, #24]	; (df390 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   df376:	602b      	str	r3, [r5, #0]
   df378:	622c      	str	r4, [r5, #32]
}
   df37a:	e7d6      	b.n	df32a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   df37c:	2400      	movs	r4, #0
   df37e:	e7d8      	b.n	df332 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   df380:	000e4954 	.word	0x000e4954
   df384:	000e4b18 	.word	0x000e4b18
   df388:	000e49e4 	.word	0x000e49e4
   df38c:	000e4958 	.word	0x000e4958
   df390:	000e49cc 	.word	0x000e49cc

000df394 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   df394:	4b01      	ldr	r3, [pc, #4]	; (df39c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   df396:	4a02      	ldr	r2, [pc, #8]	; (df3a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   df398:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   df39a:	4770      	bx	lr
   df39c:	2003e560 	.word	0x2003e560
   df3a0:	000e4969 	.word	0x000e4969

000df3a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df3a8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   df3aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df3ae:	4604      	mov	r4, r0
   df3b0:	460e      	mov	r6, r1
   df3b2:	4617      	mov	r7, r2
   df3b4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   df3b6:	f000 ffdd 	bl	e0374 <_Z16_fetch_usbserialv>
   df3ba:	4581      	cmp	r9, r0
   df3bc:	d04c      	beq.n	df458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   df3be:	792b      	ldrb	r3, [r5, #4]
   df3c0:	0719      	lsls	r1, r3, #28
   df3c2:	d504      	bpl.n	df3ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   df3c4:	696a      	ldr	r2, [r5, #20]
   df3c6:	4954      	ldr	r1, [pc, #336]	; (df518 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   df3c8:	4620      	mov	r0, r4
   df3ca:	f7ff fa7c 	bl	de8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   df3ce:	f1b8 0f00 	cmp.w	r8, #0
   df3d2:	d00d      	beq.n	df3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   df3d4:	215b      	movs	r1, #91	; 0x5b
   df3d6:	4620      	mov	r0, r4
   df3d8:	f7ff fa69 	bl	de8ae <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   df3dc:	4641      	mov	r1, r8
   df3de:	4620      	mov	r0, r4
   df3e0:	f7ff fa56 	bl	de890 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   df3e4:	6823      	ldr	r3, [r4, #0]
   df3e6:	494d      	ldr	r1, [pc, #308]	; (df51c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   df3e8:	68db      	ldr	r3, [r3, #12]
   df3ea:	2202      	movs	r2, #2
   df3ec:	4620      	mov	r0, r4
   df3ee:	4798      	blx	r3
    if (attr.has_file) {
   df3f0:	792b      	ldrb	r3, [r5, #4]
   df3f2:	07da      	lsls	r2, r3, #31
   df3f4:	d523      	bpl.n	df43e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   df3f6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   df3fa:	212f      	movs	r1, #47	; 0x2f
   df3fc:	4640      	mov	r0, r8
   df3fe:	f002 fa33 	bl	e1868 <strrchr>
    if (s1) {
   df402:	b108      	cbz	r0, df408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   df404:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   df408:	4641      	mov	r1, r8
   df40a:	4620      	mov	r0, r4
   df40c:	f7ff fa40 	bl	de890 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   df410:	792b      	ldrb	r3, [r5, #4]
   df412:	079b      	lsls	r3, r3, #30
   df414:	d508      	bpl.n	df428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   df416:	213a      	movs	r1, #58	; 0x3a
   df418:	4620      	mov	r0, r4
   df41a:	f7ff fa48 	bl	de8ae <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   df41e:	68ea      	ldr	r2, [r5, #12]
   df420:	493f      	ldr	r1, [pc, #252]	; (df520 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   df422:	4620      	mov	r0, r4
   df424:	f7ff fa4f 	bl	de8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   df428:	792a      	ldrb	r2, [r5, #4]
   df42a:	6823      	ldr	r3, [r4, #0]
   df42c:	f012 0f04 	tst.w	r2, #4
   df430:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   df432:	bf14      	ite	ne
   df434:	493b      	ldrne	r1, [pc, #236]	; (df524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   df436:	493c      	ldreq	r1, [pc, #240]	; (df528 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   df438:	2202      	movs	r2, #2
            write(": ", 2);
   df43a:	4620      	mov	r0, r4
   df43c:	4798      	blx	r3
    if (attr.has_function) {
   df43e:	792b      	ldrb	r3, [r5, #4]
   df440:	0758      	lsls	r0, r3, #29
   df442:	d51d      	bpl.n	df480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   df444:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   df446:	460b      	mov	r3, r1
   df448:	461a      	mov	r2, r3
    for (; *s; ++s) {
   df44a:	f813 0b01 	ldrb.w	r0, [r3], #1
   df44e:	b160      	cbz	r0, df46a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   df450:	2820      	cmp	r0, #32
   df452:	d108      	bne.n	df466 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   df454:	4619      	mov	r1, r3
   df456:	e7f7      	b.n	df448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   df458:	4834      	ldr	r0, [pc, #208]	; (df52c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   df45a:	f000 f966 	bl	df72a <_ZN5spark12NetworkClass9listeningEv>
   df45e:	2800      	cmp	r0, #0
   df460:	d0ad      	beq.n	df3be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   df462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   df466:	2828      	cmp	r0, #40	; 0x28
   df468:	d1ee      	bne.n	df448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   df46a:	6823      	ldr	r3, [r4, #0]
   df46c:	1a52      	subs	r2, r2, r1
   df46e:	68db      	ldr	r3, [r3, #12]
   df470:	4620      	mov	r0, r4
   df472:	4798      	blx	r3
        write("(): ", 4);
   df474:	6823      	ldr	r3, [r4, #0]
   df476:	492e      	ldr	r1, [pc, #184]	; (df530 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   df478:	68db      	ldr	r3, [r3, #12]
   df47a:	2204      	movs	r2, #4
   df47c:	4620      	mov	r0, r4
   df47e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   df480:	2100      	movs	r1, #0
   df482:	4638      	mov	r0, r7
   df484:	f7fd fd08 	bl	dce98 <log_level_name>
   df488:	4601      	mov	r1, r0
    write(s);
   df48a:	4620      	mov	r0, r4
   df48c:	f7ff fa00 	bl	de890 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   df490:	6823      	ldr	r3, [r4, #0]
   df492:	4925      	ldr	r1, [pc, #148]	; (df528 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   df494:	68db      	ldr	r3, [r3, #12]
   df496:	2202      	movs	r2, #2
   df498:	4620      	mov	r0, r4
   df49a:	4798      	blx	r3
    if (msg) {
   df49c:	b11e      	cbz	r6, df4a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   df49e:	4631      	mov	r1, r6
   df4a0:	4620      	mov	r0, r4
   df4a2:	f7ff f9f5 	bl	de890 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   df4a6:	792b      	ldrb	r3, [r5, #4]
   df4a8:	f013 0f30 	tst.w	r3, #48	; 0x30
   df4ac:	d02c      	beq.n	df508 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   df4ae:	6823      	ldr	r3, [r4, #0]
   df4b0:	4920      	ldr	r1, [pc, #128]	; (df534 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   df4b2:	68db      	ldr	r3, [r3, #12]
   df4b4:	2202      	movs	r2, #2
   df4b6:	4620      	mov	r0, r4
   df4b8:	4798      	blx	r3
        if (attr.has_code) {
   df4ba:	792b      	ldrb	r3, [r5, #4]
   df4bc:	06d9      	lsls	r1, r3, #27
   df4be:	d50a      	bpl.n	df4d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   df4c0:	6823      	ldr	r3, [r4, #0]
   df4c2:	491d      	ldr	r1, [pc, #116]	; (df538 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   df4c4:	68db      	ldr	r3, [r3, #12]
   df4c6:	2207      	movs	r2, #7
   df4c8:	4620      	mov	r0, r4
   df4ca:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   df4cc:	69aa      	ldr	r2, [r5, #24]
   df4ce:	491b      	ldr	r1, [pc, #108]	; (df53c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   df4d0:	4620      	mov	r0, r4
   df4d2:	f7ff f9f8 	bl	de8c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   df4d6:	792b      	ldrb	r3, [r5, #4]
   df4d8:	069a      	lsls	r2, r3, #26
   df4da:	d511      	bpl.n	df500 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   df4dc:	06db      	lsls	r3, r3, #27
   df4de:	d505      	bpl.n	df4ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   df4e0:	6823      	ldr	r3, [r4, #0]
   df4e2:	4910      	ldr	r1, [pc, #64]	; (df524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   df4e4:	68db      	ldr	r3, [r3, #12]
   df4e6:	2202      	movs	r2, #2
   df4e8:	4620      	mov	r0, r4
   df4ea:	4798      	blx	r3
            write("details = ", 10);
   df4ec:	6823      	ldr	r3, [r4, #0]
   df4ee:	4914      	ldr	r1, [pc, #80]	; (df540 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   df4f0:	68db      	ldr	r3, [r3, #12]
   df4f2:	4620      	mov	r0, r4
   df4f4:	220a      	movs	r2, #10
   df4f6:	4798      	blx	r3
            write(attr.details);
   df4f8:	69e9      	ldr	r1, [r5, #28]
   df4fa:	4620      	mov	r0, r4
   df4fc:	f7ff f9c8 	bl	de890 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   df500:	215d      	movs	r1, #93	; 0x5d
   df502:	4620      	mov	r0, r4
   df504:	f7ff f9d3 	bl	de8ae <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   df508:	6823      	ldr	r3, [r4, #0]
   df50a:	490e      	ldr	r1, [pc, #56]	; (df544 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   df50c:	68db      	ldr	r3, [r3, #12]
   df50e:	4620      	mov	r0, r4
   df510:	2202      	movs	r2, #2
}
   df512:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   df516:	4718      	bx	r3
   df518:	000e496d 	.word	0x000e496d
   df51c:	000e4974 	.word	0x000e4974
   df520:	000e3ecf 	.word	0x000e3ecf
   df524:	000e4977 	.word	0x000e4977
   df528:	000e497c 	.word	0x000e497c
   df52c:	2003e58c 	.word	0x2003e58c
   df530:	000e497a 	.word	0x000e497a
   df534:	000e497f 	.word	0x000e497f
   df538:	000e4982 	.word	0x000e4982
   df53c:	000e498a 	.word	0x000e498a
   df540:	000e498d 	.word	0x000e498d
   df544:	000e4535 	.word	0x000e4535

000df548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   df54c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   df54e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df552:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   df554:	4605      	mov	r5, r0
   df556:	460f      	mov	r7, r1
   df558:	4690      	mov	r8, r2
   df55a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   df55c:	f000 ff0a 	bl	e0374 <_Z16_fetch_usbserialv>
   df560:	4581      	cmp	r9, r0
   df562:	d105      	bne.n	df570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   df564:	4849      	ldr	r0, [pc, #292]	; (df68c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   df566:	f000 f8e0 	bl	df72a <_ZN5spark12NetworkClass9listeningEv>
   df56a:	2800      	cmp	r0, #0
   df56c:	f040 808a 	bne.w	df684 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   df570:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   df572:	4a47      	ldr	r2, [pc, #284]	; (df690 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   df574:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   df576:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   df57a:	a801      	add	r0, sp, #4
        strm_(stream) {
   df57c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   df57e:	f88d 9008 	strb.w	r9, [sp, #8]
   df582:	f7fe ffb4 	bl	de4ee <_ZN5spark10JSONWriter11beginObjectEv>
   df586:	4649      	mov	r1, r9
   df588:	4640      	mov	r0, r8
   df58a:	f7fd fc85 	bl	dce98 <log_level_name>
    json.name("l", 1).value(s);
   df58e:	4941      	ldr	r1, [pc, #260]	; (df694 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   df590:	4680      	mov	r8, r0
   df592:	2201      	movs	r2, #1
   df594:	a801      	add	r0, sp, #4
   df596:	f7ff f88d 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df59a:	4641      	mov	r1, r8
   df59c:	f7ff f96a 	bl	de874 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   df5a0:	b13f      	cbz	r7, df5b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   df5a2:	493d      	ldr	r1, [pc, #244]	; (df698 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   df5a4:	2201      	movs	r2, #1
   df5a6:	a801      	add	r0, sp, #4
   df5a8:	f7ff f884 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df5ac:	4639      	mov	r1, r7
   df5ae:	f7ff f961 	bl	de874 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   df5b2:	b13e      	cbz	r6, df5c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   df5b4:	4939      	ldr	r1, [pc, #228]	; (df69c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   df5b6:	2201      	movs	r2, #1
   df5b8:	a801      	add	r0, sp, #4
   df5ba:	f7ff f87b 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df5be:	4631      	mov	r1, r6
   df5c0:	f7ff f958 	bl	de874 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   df5c4:	7923      	ldrb	r3, [r4, #4]
   df5c6:	07df      	lsls	r7, r3, #31
   df5c8:	d50e      	bpl.n	df5e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   df5ca:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   df5cc:	212f      	movs	r1, #47	; 0x2f
   df5ce:	4630      	mov	r0, r6
   df5d0:	f002 f94a 	bl	e1868 <strrchr>
    if (s1) {
   df5d4:	b100      	cbz	r0, df5d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   df5d6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   df5d8:	4931      	ldr	r1, [pc, #196]	; (df6a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   df5da:	2201      	movs	r2, #1
   df5dc:	a801      	add	r0, sp, #4
   df5de:	f7ff f869 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df5e2:	4631      	mov	r1, r6
   df5e4:	f7ff f946 	bl	de874 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   df5e8:	7923      	ldrb	r3, [r4, #4]
   df5ea:	079e      	lsls	r6, r3, #30
   df5ec:	d507      	bpl.n	df5fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   df5ee:	492d      	ldr	r1, [pc, #180]	; (df6a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   df5f0:	2202      	movs	r2, #2
   df5f2:	a801      	add	r0, sp, #4
   df5f4:	f7ff f85e 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df5f8:	68e1      	ldr	r1, [r4, #12]
   df5fa:	f7fe ff9d 	bl	de538 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   df5fe:	7923      	ldrb	r3, [r4, #4]
   df600:	0758      	lsls	r0, r3, #29
   df602:	d514      	bpl.n	df62e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   df604:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   df606:	4633      	mov	r3, r6
   df608:	461f      	mov	r7, r3
    for (; *s; ++s) {
   df60a:	f813 2b01 	ldrb.w	r2, [r3], #1
   df60e:	b12a      	cbz	r2, df61c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   df610:	2a20      	cmp	r2, #32
   df612:	d101      	bne.n	df618 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   df614:	461e      	mov	r6, r3
   df616:	e7f7      	b.n	df608 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   df618:	2a28      	cmp	r2, #40	; 0x28
   df61a:	d1f5      	bne.n	df608 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   df61c:	4922      	ldr	r1, [pc, #136]	; (df6a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   df61e:	2202      	movs	r2, #2
   df620:	a801      	add	r0, sp, #4
   df622:	f7ff f847 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df626:	1bba      	subs	r2, r7, r6
   df628:	4631      	mov	r1, r6
   df62a:	f7ff f853 	bl	de6d4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   df62e:	7923      	ldrb	r3, [r4, #4]
   df630:	0719      	lsls	r1, r3, #28
   df632:	d507      	bpl.n	df644 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   df634:	491d      	ldr	r1, [pc, #116]	; (df6ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   df636:	2201      	movs	r2, #1
   df638:	a801      	add	r0, sp, #4
   df63a:	f7ff f83b 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df63e:	6961      	ldr	r1, [r4, #20]
   df640:	f7fe ff8c 	bl	de55c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   df644:	7923      	ldrb	r3, [r4, #4]
   df646:	06da      	lsls	r2, r3, #27
   df648:	d508      	bpl.n	df65c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   df64a:	2204      	movs	r2, #4
   df64c:	4918      	ldr	r1, [pc, #96]	; (df6b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   df64e:	eb0d 0002 	add.w	r0, sp, r2
   df652:	f7ff f82f 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df656:	69a1      	ldr	r1, [r4, #24]
   df658:	f7fe ff6e 	bl	de538 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   df65c:	7923      	ldrb	r3, [r4, #4]
   df65e:	069b      	lsls	r3, r3, #26
   df660:	d507      	bpl.n	df672 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   df662:	4914      	ldr	r1, [pc, #80]	; (df6b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   df664:	2206      	movs	r2, #6
   df666:	a801      	add	r0, sp, #4
   df668:	f7ff f824 	bl	de6b4 <_ZN5spark10JSONWriter4nameEPKcj>
   df66c:	69e1      	ldr	r1, [r4, #28]
   df66e:	f7ff f901 	bl	de874 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   df672:	a801      	add	r0, sp, #4
   df674:	f7fe ff19 	bl	de4aa <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   df678:	6a28      	ldr	r0, [r5, #32]
   df67a:	490f      	ldr	r1, [pc, #60]	; (df6b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   df67c:	6803      	ldr	r3, [r0, #0]
   df67e:	2202      	movs	r2, #2
   df680:	68db      	ldr	r3, [r3, #12]
   df682:	4798      	blx	r3
}
   df684:	b005      	add	sp, #20
   df686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   df68a:	bf00      	nop
   df68c:	2003e58c 	.word	0x2003e58c
   df690:	000e49b4 	.word	0x000e49b4
   df694:	000e494a 	.word	0x000e494a
   df698:	000e4245 	.word	0x000e4245
   df69c:	000e39e5 	.word	0x000e39e5
   df6a0:	000e3d9e 	.word	0x000e3d9e
   df6a4:	000e4998 	.word	0x000e4998
   df6a8:	000e499b 	.word	0x000e499b
   df6ac:	000e451c 	.word	0x000e451c
   df6b0:	000e499e 	.word	0x000e499e
   df6b4:	000e49a3 	.word	0x000e49a3
   df6b8:	000e4535 	.word	0x000e4535

000df6bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   df6bc:	2300      	movs	r3, #0
   df6be:	6840      	ldr	r0, [r0, #4]
   df6c0:	461a      	mov	r2, r3
   df6c2:	f7fd bcb9 	b.w	dd038 <network_connect>

000df6c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   df6c6:	6840      	ldr	r0, [r0, #4]
   df6c8:	2200      	movs	r2, #0
   df6ca:	2102      	movs	r1, #2
   df6cc:	f7fd bcc4 	b.w	dd058 <network_disconnect>

000df6d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   df6d0:	2200      	movs	r2, #0
   df6d2:	6840      	ldr	r0, [r0, #4]
   df6d4:	4611      	mov	r1, r2
   df6d6:	f7fd bcb7 	b.w	dd048 <network_connecting>

000df6da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   df6da:	2200      	movs	r2, #0
   df6dc:	6840      	ldr	r0, [r0, #4]
   df6de:	4611      	mov	r1, r2
   df6e0:	f7fd bcc2 	b.w	dd068 <network_ready>

000df6e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   df6e4:	2300      	movs	r3, #0
   df6e6:	6840      	ldr	r0, [r0, #4]
   df6e8:	461a      	mov	r2, r3
   df6ea:	4619      	mov	r1, r3
   df6ec:	f7fd bcc4 	b.w	dd078 <network_on>

000df6f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   df6f0:	2300      	movs	r3, #0
   df6f2:	6840      	ldr	r0, [r0, #4]
   df6f4:	461a      	mov	r2, r3
   df6f6:	4619      	mov	r1, r3
   df6f8:	f7fd bcc6 	b.w	dd088 <network_off>

000df6fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   df6fc:	6840      	ldr	r0, [r0, #4]
   df6fe:	2100      	movs	r1, #0
   df700:	f7fd bcea 	b.w	dd0d8 <network_is_on>

000df704 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   df704:	6840      	ldr	r0, [r0, #4]
   df706:	2100      	movs	r1, #0
   df708:	f7fd bcee 	b.w	dd0e8 <network_is_off>

000df70c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   df70c:	6840      	ldr	r0, [r0, #4]
   df70e:	2200      	movs	r2, #0
   df710:	f081 0101 	eor.w	r1, r1, #1
   df714:	f7fd bcc0 	b.w	dd098 <network_listen>

000df718 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   df718:	6840      	ldr	r0, [r0, #4]
   df71a:	2200      	movs	r2, #0
   df71c:	f7fd bccc 	b.w	dd0b8 <network_set_listen_timeout>

000df720 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   df720:	2200      	movs	r2, #0
   df722:	6840      	ldr	r0, [r0, #4]
   df724:	4611      	mov	r1, r2
   df726:	f7fd bccf 	b.w	dd0c8 <network_get_listen_timeout>

000df72a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   df72a:	2200      	movs	r2, #0
   df72c:	6840      	ldr	r0, [r0, #4]
   df72e:	4611      	mov	r1, r2
   df730:	f7fd bcba 	b.w	dd0a8 <network_listening>

000df734 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   df734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   df738:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   df73a:	b095      	sub	sp, #84	; 0x54
   df73c:	4616      	mov	r6, r2
   df73e:	460d      	mov	r5, r1
   df740:	4607      	mov	r7, r0
    IPAddress addr;
   df742:	f7fe fb6f 	bl	dde24 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   df746:	4621      	mov	r1, r4
   df748:	2218      	movs	r2, #24
   df74a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   df74c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   df74e:	f001 ffd3 	bl	e16f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   df752:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   df754:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   df758:	4621      	mov	r1, r4
   df75a:	466b      	mov	r3, sp
   df75c:	aa0c      	add	r2, sp, #48	; 0x30
   df75e:	4630      	mov	r0, r6
   df760:	f7fd fa5a 	bl	dcc18 <netdb_getaddrinfo>
    if (!r) {
   df764:	4604      	mov	r4, r0
   df766:	2800      	cmp	r0, #0
   df768:	d146      	bne.n	df7f8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   df76a:	4602      	mov	r2, r0
   df76c:	2101      	movs	r1, #1
   df76e:	6868      	ldr	r0, [r5, #4]
   df770:	f7fd fc7a 	bl	dd068 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   df774:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   df776:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   df778:	4622      	mov	r2, r4
   df77a:	6868      	ldr	r0, [r5, #4]
   df77c:	f7fd fc74 	bl	dd068 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   df780:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   df782:	4681      	mov	r9, r0
        bool ok = false;
   df784:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   df786:	2e00      	cmp	r6, #0
   df788:	d036      	beq.n	df7f8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   df78a:	2900      	cmp	r1, #0
   df78c:	d134      	bne.n	df7f8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   df78e:	6873      	ldr	r3, [r6, #4]
   df790:	2b02      	cmp	r3, #2
   df792:	d003      	beq.n	df79c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   df794:	2b0a      	cmp	r3, #10
   df796:	d00b      	beq.n	df7b0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   df798:	69f6      	ldr	r6, [r6, #28]
   df79a:	e7f4      	b.n	df786 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   df79c:	f1b8 0f00 	cmp.w	r8, #0
   df7a0:	d004      	beq.n	df7ac <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   df7a2:	6971      	ldr	r1, [r6, #20]
   df7a4:	4638      	mov	r0, r7
   df7a6:	3104      	adds	r1, #4
   df7a8:	f7fe fb69 	bl	dde7e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   df7ac:	4641      	mov	r1, r8
   df7ae:	e7f3      	b.n	df798 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   df7b0:	f1b9 0f00 	cmp.w	r9, #0
   df7b4:	d101      	bne.n	df7ba <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   df7b6:	4649      	mov	r1, r9
   df7b8:	e7ee      	b.n	df798 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   df7ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   df7bc:	2210      	movs	r2, #16
   df7be:	a801      	add	r0, sp, #4
   df7c0:	f001 ff9a 	bl	e16f8 <memset>
                    a.v = 6;
   df7c4:	2306      	movs	r3, #6
   df7c6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   df7ca:	ad01      	add	r5, sp, #4
   df7cc:	f104 0308 	add.w	r3, r4, #8
   df7d0:	3418      	adds	r4, #24
   df7d2:	6818      	ldr	r0, [r3, #0]
   df7d4:	6859      	ldr	r1, [r3, #4]
   df7d6:	462a      	mov	r2, r5
   df7d8:	c203      	stmia	r2!, {r0, r1}
   df7da:	3308      	adds	r3, #8
   df7dc:	42a3      	cmp	r3, r4
   df7de:	4615      	mov	r5, r2
   df7e0:	d1f7      	bne.n	df7d2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   df7e2:	a901      	add	r1, sp, #4
   df7e4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   df7e6:	ad07      	add	r5, sp, #28
   df7e8:	f7fe fb2a 	bl	dde40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   df7ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df7ee:	1d3c      	adds	r4, r7, #4
   df7f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df7f2:	682b      	ldr	r3, [r5, #0]
   df7f4:	7023      	strb	r3, [r4, #0]
   df7f6:	e7de      	b.n	df7b6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   df7f8:	9800      	ldr	r0, [sp, #0]
   df7fa:	f7fd fa05 	bl	dcc08 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   df7fe:	4638      	mov	r0, r7
   df800:	b015      	add	sp, #84	; 0x54
   df802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000df808 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   df808:	4b02      	ldr	r3, [pc, #8]	; (df814 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   df80a:	4a03      	ldr	r2, [pc, #12]	; (df818 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   df80c:	601a      	str	r2, [r3, #0]
   df80e:	2200      	movs	r2, #0
   df810:	605a      	str	r2, [r3, #4]

} // spark
   df812:	4770      	bx	lr
   df814:	2003e58c 	.word	0x2003e58c
   df818:	000e4a2c 	.word	0x000e4a2c

000df81c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   df81c:	b508      	push	{r3, lr}
            return &Wire1;
   df81e:	f000 ff6b 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   df822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   df826:	f7fe bab1 	b.w	ddd8c <_ZN7TwoWire4lockEv>

000df82a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   df82a:	b510      	push	{r4, lr}
   df82c:	4604      	mov	r4, r0
    lock_(_lock)
   df82e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   df830:	b109      	cbz	r1, df836 <_ZN4PMICC1Eb+0xc>
        lock();
   df832:	f7ff fff3 	bl	df81c <_ZN4PMIC4lockEv.constprop.0>
}
   df836:	4620      	mov	r0, r4
   df838:	bd10      	pop	{r4, pc}

000df83a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   df83a:	b508      	push	{r3, lr}
            return &Wire1;
   df83c:	f000 ff5c 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   df840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   df844:	f7fe baab 	b.w	ddd9e <_ZN7TwoWire6unlockEv>

000df848 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   df848:	b510      	push	{r4, lr}
    if (lock_) {
   df84a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   df84c:	4604      	mov	r4, r0
    if (lock_) {
   df84e:	b10b      	cbz	r3, df854 <_ZN4PMICD1Ev+0xc>
        unlock();
   df850:	f7ff fff3 	bl	df83a <_ZN4PMIC6unlockEv>
}
   df854:	4620      	mov	r0, r4
   df856:	bd10      	pop	{r4, pc}

000df858 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   df858:	b510      	push	{r4, lr}
   df85a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   df85c:	6800      	ldr	r0, [r0, #0]
   df85e:	f7ff ffec 	bl	df83a <_ZN4PMIC6unlockEv>
   df862:	4620      	mov	r0, r4
   df864:	bd10      	pop	{r4, pc}

000df866 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   df866:	b530      	push	{r4, r5, lr}
   df868:	b087      	sub	sp, #28
   df86a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df86c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df86e:	f7ff ffd5 	bl	df81c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df872:	236b      	movs	r3, #107	; 0x6b
   df874:	f88d 3008 	strb.w	r3, [sp, #8]
   df878:	2300      	movs	r3, #0
   df87a:	2401      	movs	r4, #1
   df87c:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   df87e:	230a      	movs	r3, #10
   df880:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df882:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   df886:	f000 ff37 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   df88a:	a902      	add	r1, sp, #8
   df88c:	f7fe fa62 	bl	ddd54 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   df890:	f000 ff32 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   df894:	6803      	ldr	r3, [r0, #0]
   df896:	4629      	mov	r1, r5
   df898:	689b      	ldr	r3, [r3, #8]
   df89a:	4798      	blx	r3
            return &Wire1;
   df89c:	f000 ff2c 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   df8a0:	4621      	mov	r1, r4
   df8a2:	f7fe fa6f 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   df8a6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   df8a8:	f000 ff26 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   df8ac:	a902      	add	r1, sp, #8
   df8ae:	f7fe fa21 	bl	ddcf4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   df8b2:	f000 ff21 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   df8b6:	6803      	ldr	r3, [r0, #0]
   df8b8:	695b      	ldr	r3, [r3, #20]
   df8ba:	4798      	blx	r3
   df8bc:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   df8be:	a801      	add	r0, sp, #4
   df8c0:	f7ff ffca 	bl	df858 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df8c4:	b2e0      	uxtb	r0, r4
   df8c6:	b007      	add	sp, #28
   df8c8:	bd30      	pop	{r4, r5, pc}

000df8ca <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   df8ca:	b570      	push	{r4, r5, r6, lr}
   df8cc:	b086      	sub	sp, #24
   df8ce:	4614      	mov	r4, r2
   df8d0:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df8d2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df8d4:	f7ff ffa2 	bl	df81c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df8d8:	236b      	movs	r3, #107	; 0x6b
   df8da:	f88d 3008 	strb.w	r3, [sp, #8]
   df8de:	2300      	movs	r3, #0
   df8e0:	9303      	str	r3, [sp, #12]
   df8e2:	2601      	movs	r6, #1
    timeout_ = ms;
   df8e4:	230a      	movs	r3, #10
   df8e6:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df8e8:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   df8ec:	f000 ff04 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   df8f0:	a902      	add	r1, sp, #8
   df8f2:	f7fe fa2f 	bl	ddd54 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   df8f6:	f000 feff 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   df8fa:	6803      	ldr	r3, [r0, #0]
   df8fc:	4629      	mov	r1, r5
   df8fe:	689b      	ldr	r3, [r3, #8]
   df900:	4798      	blx	r3
            return &Wire1;
   df902:	f000 fef9 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   df906:	6803      	ldr	r3, [r0, #0]
   df908:	4621      	mov	r1, r4
   df90a:	689b      	ldr	r3, [r3, #8]
   df90c:	4798      	blx	r3
            return &Wire1;
   df90e:	f000 fef3 	bl	e06f8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   df912:	4631      	mov	r1, r6
   df914:	f7fe fa36 	bl	ddd84 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   df918:	a801      	add	r0, sp, #4
   df91a:	f7ff ff9d 	bl	df858 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df91e:	b006      	add	sp, #24
   df920:	bd70      	pop	{r4, r5, r6, pc}

000df922 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   df922:	b513      	push	{r0, r1, r4, lr}
   df924:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df926:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df928:	f7ff ff78 	bl	df81c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   df92c:	2101      	movs	r1, #1
   df92e:	4620      	mov	r0, r4
   df930:	f7ff ff99 	bl	df866 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   df934:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   df938:	f040 0210 	orr.w	r2, r0, #16
   df93c:	2101      	movs	r1, #1
   df93e:	4620      	mov	r0, r4
   df940:	f7ff ffc3 	bl	df8ca <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   df944:	a801      	add	r0, sp, #4
   df946:	f7ff ff87 	bl	df858 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df94a:	2001      	movs	r0, #1
   df94c:	b002      	add	sp, #8
   df94e:	bd10      	pop	{r4, pc}

000df950 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   df950:	b513      	push	{r0, r1, r4, lr}
   df952:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df954:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df956:	f7ff ff61 	bl	df81c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   df95a:	2101      	movs	r1, #1
   df95c:	4620      	mov	r0, r4
   df95e:	f7ff ff82 	bl	df866 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   df962:	2101      	movs	r1, #1
   df964:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   df968:	4620      	mov	r0, r4
   df96a:	f7ff ffae 	bl	df8ca <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   df96e:	a801      	add	r0, sp, #4
   df970:	f7ff ff72 	bl	df858 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df974:	2001      	movs	r0, #1
   df976:	b002      	add	sp, #8
   df978:	bd10      	pop	{r4, pc}

000df97a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   df97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df97c:	4606      	mov	r6, r0
   df97e:	460d      	mov	r5, r1
  size_t n = 0;
   df980:	188f      	adds	r7, r1, r2
   df982:	2400      	movs	r4, #0
  while (size--) {
   df984:	42bd      	cmp	r5, r7
   df986:	d00c      	beq.n	df9a2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   df988:	6833      	ldr	r3, [r6, #0]
   df98a:	f815 1b01 	ldrb.w	r1, [r5], #1
   df98e:	689b      	ldr	r3, [r3, #8]
   df990:	4630      	mov	r0, r6
   df992:	4798      	blx	r3
     if (chunk>=0)
   df994:	1e03      	subs	r3, r0, #0
   df996:	db01      	blt.n	df99c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   df998:	441c      	add	r4, r3
  while (size--) {
   df99a:	e7f3      	b.n	df984 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   df99c:	2c00      	cmp	r4, #0
   df99e:	bf08      	it	eq
   df9a0:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   df9a2:	4620      	mov	r0, r4
   df9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df9a6 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   df9a6:	b513      	push	{r0, r1, r4, lr}
   df9a8:	4604      	mov	r4, r0
    }
   df9aa:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   df9ac:	b159      	cbz	r1, df9c6 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   df9ae:	9101      	str	r1, [sp, #4]
   df9b0:	f001 ff2d 	bl	e180e <strlen>
   df9b4:	6823      	ldr	r3, [r4, #0]
   df9b6:	9901      	ldr	r1, [sp, #4]
   df9b8:	68db      	ldr	r3, [r3, #12]
   df9ba:	4602      	mov	r2, r0
   df9bc:	4620      	mov	r0, r4
    }
   df9be:	b002      	add	sp, #8
   df9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   df9c4:	4718      	bx	r3
    }
   df9c6:	b002      	add	sp, #8
   df9c8:	bd10      	pop	{r4, pc}

000df9ca <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   df9ca:	6803      	ldr	r3, [r0, #0]
   df9cc:	689b      	ldr	r3, [r3, #8]
   df9ce:	4718      	bx	r3

000df9d0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   df9d0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   df9d2:	210d      	movs	r1, #13
{
   df9d4:	4605      	mov	r5, r0
  size_t n = print('\r');
   df9d6:	f7ff fff8 	bl	df9ca <_ZN5Print5printEc>
  n += print('\n');
   df9da:	210a      	movs	r1, #10
  size_t n = print('\r');
   df9dc:	4604      	mov	r4, r0
  n += print('\n');
   df9de:	4628      	mov	r0, r5
   df9e0:	f7ff fff3 	bl	df9ca <_ZN5Print5printEc>
  return n;
}
   df9e4:	4420      	add	r0, r4
   df9e6:	bd38      	pop	{r3, r4, r5, pc}

000df9e8 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   df9e8:	b530      	push	{r4, r5, lr}
   df9ea:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   df9ec:	2300      	movs	r3, #0
   df9ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   df9f2:	2a01      	cmp	r2, #1
   df9f4:	bf98      	it	ls
   df9f6:	220a      	movls	r2, #10
   df9f8:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   df9fa:	460d      	mov	r5, r1
   df9fc:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   dfa00:	fb01 5312 	mls	r3, r1, r2, r5
   dfa04:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dfa08:	2b09      	cmp	r3, #9
   dfa0a:	bf94      	ite	ls
   dfa0c:	3330      	addls	r3, #48	; 0x30
   dfa0e:	3337      	addhi	r3, #55	; 0x37
   dfa10:	b2db      	uxtb	r3, r3
  } while(n);
   dfa12:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dfa14:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   dfa18:	d9ef      	bls.n	df9fa <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   dfa1a:	4621      	mov	r1, r4
   dfa1c:	f7ff ffc3 	bl	df9a6 <_ZN5Print5writeEPKc>
}
   dfa20:	b00b      	add	sp, #44	; 0x2c
   dfa22:	bd30      	pop	{r4, r5, pc}

000dfa24 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   dfa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dfa28:	b086      	sub	sp, #24
   dfa2a:	af00      	add	r7, sp, #0
   dfa2c:	4605      	mov	r5, r0
   dfa2e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   dfa30:	1d38      	adds	r0, r7, #4
   dfa32:	2114      	movs	r1, #20
{
   dfa34:	4614      	mov	r4, r2
    va_copy(args2, args);
   dfa36:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   dfa38:	f7fd fb8e 	bl	dd158 <vsnprintf>

    if (n<bufsize)
   dfa3c:	2813      	cmp	r0, #19
   dfa3e:	d80e      	bhi.n	dfa5e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dfa40:	1d39      	adds	r1, r7, #4
   dfa42:	4628      	mov	r0, r5
   dfa44:	f7ff ffaf 	bl	df9a6 <_ZN5Print5writeEPKc>
   dfa48:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dfa4a:	b11e      	cbz	r6, dfa54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dfa4c:	4628      	mov	r0, r5
   dfa4e:	f7ff ffbf 	bl	df9d0 <_ZN5Print7printlnEv>
   dfa52:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dfa54:	4620      	mov	r0, r4
   dfa56:	3718      	adds	r7, #24
   dfa58:	46bd      	mov	sp, r7
   dfa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dfa5e:	f100 0308 	add.w	r3, r0, #8
   dfa62:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dfa66:	46e8      	mov	r8, sp
        char bigger[n+1];
   dfa68:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dfa6c:	4622      	mov	r2, r4
   dfa6e:	1c41      	adds	r1, r0, #1
   dfa70:	683b      	ldr	r3, [r7, #0]
   dfa72:	4668      	mov	r0, sp
   dfa74:	f7fd fb70 	bl	dd158 <vsnprintf>
  return write(str);
   dfa78:	4669      	mov	r1, sp
   dfa7a:	4628      	mov	r0, r5
   dfa7c:	f7ff ff93 	bl	df9a6 <_ZN5Print5writeEPKc>
   dfa80:	4604      	mov	r4, r0
   dfa82:	46c5      	mov	sp, r8
   dfa84:	e7e1      	b.n	dfa4a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000dfa88 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   dfa88:	4b01      	ldr	r3, [pc, #4]	; (dfa90 <_GLOBAL__sub_I_RGB+0x8>)
   dfa8a:	2200      	movs	r2, #0
   dfa8c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   dfa8e:	4770      	bx	lr
   dfa90:	2003e594 	.word	0x2003e594

000dfa94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dfa94:	b510      	push	{r4, lr}
   dfa96:	4604      	mov	r4, r0
   dfa98:	4608      	mov	r0, r1
{
    _spi = spi;
   dfa9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dfa9c:	f7fd f8c4 	bl	dcc28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dfaa0:	2300      	movs	r3, #0
   dfaa2:	6063      	str	r3, [r4, #4]
}
   dfaa4:	4620      	mov	r0, r4
   dfaa6:	bd10      	pop	{r4, pc}

000dfaa8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dfaa8:	b510      	push	{r4, lr}
   dfaaa:	4604      	mov	r4, r0
{
	free(buffer);
   dfaac:	6800      	ldr	r0, [r0, #0]
   dfaae:	f7fd fb2b 	bl	dd108 <free>
}
   dfab2:	4620      	mov	r0, r4
   dfab4:	bd10      	pop	{r4, pc}

000dfab6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dfab6:	b510      	push	{r4, lr}
   dfab8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dfaba:	6800      	ldr	r0, [r0, #0]
   dfabc:	b108      	cbz	r0, dfac2 <_ZN6String10invalidateEv+0xc>
   dfabe:	f7fd fb23 	bl	dd108 <free>
	buffer = NULL;
   dfac2:	2300      	movs	r3, #0
	capacity = len = 0;
   dfac4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dfac8:	6023      	str	r3, [r4, #0]
}
   dfaca:	bd10      	pop	{r4, pc}

000dfacc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dfacc:	b538      	push	{r3, r4, r5, lr}
   dface:	4604      	mov	r4, r0
   dfad0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dfad2:	6800      	ldr	r0, [r0, #0]
   dfad4:	3101      	adds	r1, #1
   dfad6:	f7fd fb1f 	bl	dd118 <realloc>
	if (newbuffer) {
   dfada:	b110      	cbz	r0, dfae2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dfadc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dfae0:	2001      	movs	r0, #1
	}
	return 0;
}
   dfae2:	bd38      	pop	{r3, r4, r5, pc}

000dfae4 <_ZN6String7reserveEj>:
{
   dfae4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dfae6:	6803      	ldr	r3, [r0, #0]
{
   dfae8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dfaea:	b123      	cbz	r3, dfaf6 <_ZN6String7reserveEj+0x12>
   dfaec:	6843      	ldr	r3, [r0, #4]
   dfaee:	428b      	cmp	r3, r1
   dfaf0:	d301      	bcc.n	dfaf6 <_ZN6String7reserveEj+0x12>
   dfaf2:	2001      	movs	r0, #1
}
   dfaf4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dfaf6:	4620      	mov	r0, r4
   dfaf8:	f7ff ffe8 	bl	dfacc <_ZN6String12changeBufferEj>
   dfafc:	2800      	cmp	r0, #0
   dfafe:	d0f9      	beq.n	dfaf4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dfb00:	68a3      	ldr	r3, [r4, #8]
   dfb02:	2b00      	cmp	r3, #0
   dfb04:	d1f5      	bne.n	dfaf2 <_ZN6String7reserveEj+0xe>
   dfb06:	6822      	ldr	r2, [r4, #0]
   dfb08:	7013      	strb	r3, [r2, #0]
   dfb0a:	e7f2      	b.n	dfaf2 <_ZN6String7reserveEj+0xe>

000dfb0c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dfb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dfb0e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dfb10:	4611      	mov	r1, r2
   dfb12:	9201      	str	r2, [sp, #4]
{
   dfb14:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dfb16:	f7ff ffe5 	bl	dfae4 <_ZN6String7reserveEj>
   dfb1a:	9a01      	ldr	r2, [sp, #4]
   dfb1c:	b928      	cbnz	r0, dfb2a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dfb1e:	4620      	mov	r0, r4
   dfb20:	f7ff ffc9 	bl	dfab6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dfb24:	4620      	mov	r0, r4
   dfb26:	b003      	add	sp, #12
   dfb28:	bd30      	pop	{r4, r5, pc}
	len = length;
   dfb2a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dfb2c:	4629      	mov	r1, r5
   dfb2e:	6820      	ldr	r0, [r4, #0]
   dfb30:	f001 fdba 	bl	e16a8 <memcpy>
	buffer[len] = 0;
   dfb34:	6822      	ldr	r2, [r4, #0]
   dfb36:	68a3      	ldr	r3, [r4, #8]
   dfb38:	2100      	movs	r1, #0
   dfb3a:	54d1      	strb	r1, [r2, r3]
	return *this;
   dfb3c:	e7f2      	b.n	dfb24 <_ZN6String4copyEPKcj+0x18>

000dfb3e <_ZN6StringC1EPKc>:
	buffer = NULL;
   dfb3e:	2300      	movs	r3, #0
String::String(const char *cstr)
   dfb40:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dfb42:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dfb46:	4604      	mov	r4, r0
	len = 0;
   dfb48:	6083      	str	r3, [r0, #8]
	flags = 0;
   dfb4a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dfb4c:	b141      	cbz	r1, dfb60 <_ZN6StringC1EPKc+0x22>
   dfb4e:	4608      	mov	r0, r1
   dfb50:	9101      	str	r1, [sp, #4]
   dfb52:	f001 fe5c 	bl	e180e <strlen>
   dfb56:	9901      	ldr	r1, [sp, #4]
   dfb58:	4602      	mov	r2, r0
   dfb5a:	4620      	mov	r0, r4
   dfb5c:	f7ff ffd6 	bl	dfb0c <_ZN6String4copyEPKcj>
}
   dfb60:	4620      	mov	r0, r4
   dfb62:	b002      	add	sp, #8
   dfb64:	bd10      	pop	{r4, pc}

000dfb66 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dfb66:	b538      	push	{r3, r4, r5, lr}
   dfb68:	4605      	mov	r5, r0
	if (buffer) {
   dfb6a:	6800      	ldr	r0, [r0, #0]
{
   dfb6c:	460c      	mov	r4, r1
	if (buffer) {
   dfb6e:	b168      	cbz	r0, dfb8c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dfb70:	686a      	ldr	r2, [r5, #4]
   dfb72:	688b      	ldr	r3, [r1, #8]
   dfb74:	429a      	cmp	r2, r3
   dfb76:	d307      	bcc.n	dfb88 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   dfb78:	6809      	ldr	r1, [r1, #0]
   dfb7a:	f001 fe23 	bl	e17c4 <strcpy>
			len = rhs.len;
   dfb7e:	68a3      	ldr	r3, [r4, #8]
   dfb80:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dfb82:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dfb84:	60a3      	str	r3, [r4, #8]
}
   dfb86:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dfb88:	f7fd fabe 	bl	dd108 <free>
	buffer = rhs.buffer;
   dfb8c:	6823      	ldr	r3, [r4, #0]
   dfb8e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dfb90:	6863      	ldr	r3, [r4, #4]
   dfb92:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dfb94:	68a3      	ldr	r3, [r4, #8]
   dfb96:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dfb98:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dfb9a:	e9c4 3300 	strd	r3, r3, [r4]
   dfb9e:	e7f1      	b.n	dfb84 <_ZN6String4moveERS_+0x1e>

000dfba0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   dfba0:	b510      	push	{r4, lr}
	buffer = NULL;
   dfba2:	2300      	movs	r3, #0
	capacity = 0;
   dfba4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dfba8:	4604      	mov	r4, r0
	len = 0;
   dfbaa:	6083      	str	r3, [r0, #8]
	flags = 0;
   dfbac:	7303      	strb	r3, [r0, #12]
	move(rval);
   dfbae:	f7ff ffda 	bl	dfb66 <_ZN6String4moveERS_>
}
   dfbb2:	4620      	mov	r0, r4
   dfbb4:	bd10      	pop	{r4, pc}

000dfbb6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dfbb6:	4288      	cmp	r0, r1
{
   dfbb8:	b510      	push	{r4, lr}
   dfbba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dfbbc:	d005      	beq.n	dfbca <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dfbbe:	680b      	ldr	r3, [r1, #0]
   dfbc0:	b12b      	cbz	r3, dfbce <_ZN6StringaSERKS_+0x18>
   dfbc2:	688a      	ldr	r2, [r1, #8]
   dfbc4:	4619      	mov	r1, r3
   dfbc6:	f7ff ffa1 	bl	dfb0c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dfbca:	4620      	mov	r0, r4
   dfbcc:	bd10      	pop	{r4, pc}
	else invalidate();
   dfbce:	f7ff ff72 	bl	dfab6 <_ZN6String10invalidateEv>
   dfbd2:	e7fa      	b.n	dfbca <_ZN6StringaSERKS_+0x14>

000dfbd4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dfbd4:	b510      	push	{r4, lr}
	buffer = NULL;
   dfbd6:	2300      	movs	r3, #0
String::String(const String &value)
   dfbd8:	4604      	mov	r4, r0
	capacity = 0;
   dfbda:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dfbde:	6083      	str	r3, [r0, #8]
	flags = 0;
   dfbe0:	7303      	strb	r3, [r0, #12]
	*this = value;
   dfbe2:	f7ff ffe8 	bl	dfbb6 <_ZN6StringaSERKS_>
}
   dfbe6:	4620      	mov	r0, r4
   dfbe8:	bd10      	pop	{r4, pc}

000dfbea <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dfbea:	4288      	cmp	r0, r1
{
   dfbec:	b510      	push	{r4, lr}
   dfbee:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dfbf0:	d001      	beq.n	dfbf6 <_ZN6StringaSEOS_+0xc>
   dfbf2:	f7ff ffb8 	bl	dfb66 <_ZN6String4moveERS_>
	return *this;
}
   dfbf6:	4620      	mov	r0, r4
   dfbf8:	bd10      	pop	{r4, pc}

000dfbfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dfbfa:	b513      	push	{r0, r1, r4, lr}
   dfbfc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dfbfe:	b159      	cbz	r1, dfc18 <_ZN6StringaSEPKc+0x1e>
   dfc00:	4608      	mov	r0, r1
   dfc02:	9101      	str	r1, [sp, #4]
   dfc04:	f001 fe03 	bl	e180e <strlen>
   dfc08:	9901      	ldr	r1, [sp, #4]
   dfc0a:	4602      	mov	r2, r0
   dfc0c:	4620      	mov	r0, r4
   dfc0e:	f7ff ff7d 	bl	dfb0c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dfc12:	4620      	mov	r0, r4
   dfc14:	b002      	add	sp, #8
   dfc16:	bd10      	pop	{r4, pc}
	else invalidate();
   dfc18:	f7ff ff4d 	bl	dfab6 <_ZN6String10invalidateEv>
   dfc1c:	e7f9      	b.n	dfc12 <_ZN6StringaSEPKc+0x18>

000dfc1e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dfc1e:	b570      	push	{r4, r5, r6, lr}
   dfc20:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dfc22:	460e      	mov	r6, r1
   dfc24:	b909      	cbnz	r1, dfc2a <_ZN6String6concatEPKcj+0xc>
   dfc26:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dfc28:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dfc2a:	b16a      	cbz	r2, dfc48 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dfc2c:	6884      	ldr	r4, [r0, #8]
   dfc2e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dfc30:	4621      	mov	r1, r4
   dfc32:	f7ff ff57 	bl	dfae4 <_ZN6String7reserveEj>
   dfc36:	2800      	cmp	r0, #0
   dfc38:	d0f5      	beq.n	dfc26 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dfc3a:	6828      	ldr	r0, [r5, #0]
   dfc3c:	68ab      	ldr	r3, [r5, #8]
   dfc3e:	4631      	mov	r1, r6
   dfc40:	4418      	add	r0, r3
   dfc42:	f001 fdbf 	bl	e17c4 <strcpy>
	len = newlen;
   dfc46:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dfc48:	2001      	movs	r0, #1
   dfc4a:	e7ed      	b.n	dfc28 <_ZN6String6concatEPKcj+0xa>

000dfc4c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dfc4c:	b513      	push	{r0, r1, r4, lr}
   dfc4e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dfc50:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dfc52:	b151      	cbz	r1, dfc6a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dfc54:	9101      	str	r1, [sp, #4]
   dfc56:	f001 fdda 	bl	e180e <strlen>
   dfc5a:	9901      	ldr	r1, [sp, #4]
   dfc5c:	4602      	mov	r2, r0
   dfc5e:	4620      	mov	r0, r4
}
   dfc60:	b002      	add	sp, #8
   dfc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dfc66:	f7ff bfda 	b.w	dfc1e <_ZN6String6concatEPKcj>
}
   dfc6a:	b002      	add	sp, #8
   dfc6c:	bd10      	pop	{r4, pc}

000dfc6e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dfc6e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dfc70:	688a      	ldr	r2, [r1, #8]
   dfc72:	6809      	ldr	r1, [r1, #0]
{
   dfc74:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dfc76:	f7ff ffd2 	bl	dfc1e <_ZN6String6concatEPKcj>
   dfc7a:	b910      	cbnz	r0, dfc82 <_ZplRK15StringSumHelperRK6String+0x14>
   dfc7c:	4620      	mov	r0, r4
   dfc7e:	f7ff ff1a 	bl	dfab6 <_ZN6String10invalidateEv>
	return a;
}
   dfc82:	4620      	mov	r0, r4
   dfc84:	bd10      	pop	{r4, pc}

000dfc86 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dfc86:	b513      	push	{r0, r1, r4, lr}
   dfc88:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dfc8a:	b929      	cbnz	r1, dfc98 <_ZplRK15StringSumHelperPKc+0x12>
   dfc8c:	4620      	mov	r0, r4
   dfc8e:	f7ff ff12 	bl	dfab6 <_ZN6String10invalidateEv>
	return a;
}
   dfc92:	4620      	mov	r0, r4
   dfc94:	b002      	add	sp, #8
   dfc96:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dfc98:	4608      	mov	r0, r1
   dfc9a:	9101      	str	r1, [sp, #4]
   dfc9c:	f001 fdb7 	bl	e180e <strlen>
   dfca0:	9901      	ldr	r1, [sp, #4]
   dfca2:	4602      	mov	r2, r0
   dfca4:	4620      	mov	r0, r4
   dfca6:	f7ff ffba 	bl	dfc1e <_ZN6String6concatEPKcj>
   dfcaa:	2800      	cmp	r0, #0
   dfcac:	d0ee      	beq.n	dfc8c <_ZplRK15StringSumHelperPKc+0x6>
   dfcae:	e7f0      	b.n	dfc92 <_ZplRK15StringSumHelperPKc+0xc>

000dfcb0 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   dfcb0:	6802      	ldr	r2, [r0, #0]
{
   dfcb2:	460b      	mov	r3, r1
   dfcb4:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   dfcb6:	b162      	cbz	r2, dfcd2 <_ZNK6String9compareToERKS_+0x22>
   dfcb8:	b941      	cbnz	r1, dfccc <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   dfcba:	6880      	ldr	r0, [r0, #8]
   dfcbc:	b160      	cbz	r0, dfcd8 <_ZNK6String9compareToERKS_+0x28>
   dfcbe:	7810      	ldrb	r0, [r2, #0]
   dfcc0:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   dfcc2:	6898      	ldr	r0, [r3, #8]
   dfcc4:	b140      	cbz	r0, dfcd8 <_ZNK6String9compareToERKS_+0x28>
   dfcc6:	7809      	ldrb	r1, [r1, #0]
   dfcc8:	4248      	negs	r0, r1
   dfcca:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   dfccc:	4610      	mov	r0, r2
   dfcce:	f001 bd6f 	b.w	e17b0 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   dfcd2:	2900      	cmp	r1, #0
   dfcd4:	d1f5      	bne.n	dfcc2 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   dfcd6:	4608      	mov	r0, r1
}
   dfcd8:	4770      	bx	lr

000dfcda <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   dfcda:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   dfcdc:	6882      	ldr	r2, [r0, #8]
   dfcde:	688b      	ldr	r3, [r1, #8]
   dfce0:	429a      	cmp	r2, r3
   dfce2:	d105      	bne.n	dfcf0 <_ZNK6String6equalsERKS_+0x16>
   dfce4:	f7ff ffe4 	bl	dfcb0 <_ZNK6String9compareToERKS_>
   dfce8:	fab0 f080 	clz	r0, r0
   dfcec:	0940      	lsrs	r0, r0, #5
}
   dfcee:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   dfcf0:	2000      	movs	r0, #0
   dfcf2:	e7fc      	b.n	dfcee <_ZNK6String6equalsERKS_+0x14>

000dfcf4 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   dfcf4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dfcf6:	6882      	ldr	r2, [r0, #8]
   dfcf8:	b93a      	cbnz	r2, dfd0a <_ZNK6String6equalsEPKc+0x16>
   dfcfa:	b121      	cbz	r1, dfd06 <_ZNK6String6equalsEPKc+0x12>
   dfcfc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dfcfe:	fab0 f080 	clz	r0, r0
   dfd02:	0940      	lsrs	r0, r0, #5
   dfd04:	e000      	b.n	dfd08 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dfd06:	2001      	movs	r0, #1
}
   dfd08:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dfd0a:	6800      	ldr	r0, [r0, #0]
   dfd0c:	b909      	cbnz	r1, dfd12 <_ZNK6String6equalsEPKc+0x1e>
   dfd0e:	7800      	ldrb	r0, [r0, #0]
   dfd10:	e7f5      	b.n	dfcfe <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dfd12:	f001 fd4d 	bl	e17b0 <strcmp>
   dfd16:	e7f2      	b.n	dfcfe <_ZNK6String6equalsEPKc+0xa>

000dfd18 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dfd18:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dfd1a:	6883      	ldr	r3, [r0, #8]
   dfd1c:	688a      	ldr	r2, [r1, #8]
   dfd1e:	4293      	cmp	r3, r2
   dfd20:	d30b      	bcc.n	dfd3a <_ZNK6String8endsWithERKS_+0x22>
   dfd22:	6800      	ldr	r0, [r0, #0]
   dfd24:	b140      	cbz	r0, dfd38 <_ZNK6String8endsWithERKS_+0x20>
   dfd26:	6809      	ldr	r1, [r1, #0]
   dfd28:	b149      	cbz	r1, dfd3e <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   dfd2a:	1a9b      	subs	r3, r3, r2
   dfd2c:	4418      	add	r0, r3
   dfd2e:	f001 fd3f 	bl	e17b0 <strcmp>
   dfd32:	fab0 f080 	clz	r0, r0
   dfd36:	0940      	lsrs	r0, r0, #5
}
   dfd38:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dfd3a:	2000      	movs	r0, #0
   dfd3c:	e7fc      	b.n	dfd38 <_ZNK6String8endsWithERKS_+0x20>
   dfd3e:	4608      	mov	r0, r1
   dfd40:	e7fa      	b.n	dfd38 <_ZNK6String8endsWithERKS_+0x20>
	...

000dfd44 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dfd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dfd46:	429a      	cmp	r2, r3
{
   dfd48:	460f      	mov	r7, r1
   dfd4a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dfd4c:	490c      	ldr	r1, [pc, #48]	; (dfd80 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   dfd4e:	bf88      	it	hi
   dfd50:	4613      	movhi	r3, r2
{
   dfd52:	4614      	mov	r4, r2
   dfd54:	4606      	mov	r6, r0
	if (left > right) {
   dfd56:	bf84      	itt	hi
   dfd58:	462c      	movhi	r4, r5
   dfd5a:	461d      	movhi	r5, r3
	String out;
   dfd5c:	f7ff feef 	bl	dfb3e <_ZN6StringC1EPKc>
	if (left > len) return out;
   dfd60:	68ba      	ldr	r2, [r7, #8]
   dfd62:	42a2      	cmp	r2, r4
   dfd64:	d30a      	bcc.n	dfd7c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dfd66:	6839      	ldr	r1, [r7, #0]
   dfd68:	42aa      	cmp	r2, r5
   dfd6a:	bf94      	ite	ls
   dfd6c:	ebc4 0202 	rsbls	r2, r4, r2
   dfd70:	ebc4 0205 	rsbhi	r2, r4, r5
   dfd74:	4421      	add	r1, r4
   dfd76:	4630      	mov	r0, r6
   dfd78:	f7ff fec8 	bl	dfb0c <_ZN6String4copyEPKcj>
	return out;
}
   dfd7c:	4630      	mov	r0, r6
   dfd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dfd80:	000e4537 	.word	0x000e4537

000dfd84 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dfd84:	b40e      	push	{r1, r2, r3}
   dfd86:	b570      	push	{r4, r5, r6, lr}
   dfd88:	b087      	sub	sp, #28
   dfd8a:	ad0b      	add	r5, sp, #44	; 0x2c
   dfd8c:	4604      	mov	r4, r0
   dfd8e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dfd92:	9201      	str	r2, [sp, #4]
   dfd94:	462b      	mov	r3, r5
   dfd96:	2105      	movs	r1, #5
   dfd98:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dfd9a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dfd9c:	f7fd f9dc 	bl	dd158 <vsnprintf>
    va_end(marker);

    String result;
   dfda0:	490b      	ldr	r1, [pc, #44]	; (dfdd0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dfda2:	4606      	mov	r6, r0
    String result;
   dfda4:	4620      	mov	r0, r4
   dfda6:	f7ff feca 	bl	dfb3e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dfdaa:	4631      	mov	r1, r6
   dfdac:	4620      	mov	r0, r4
   dfdae:	f7ff fe99 	bl	dfae4 <_ZN6String7reserveEj>
    if (result.buffer) {
   dfdb2:	6820      	ldr	r0, [r4, #0]
   dfdb4:	b130      	cbz	r0, dfdc4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dfdb6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dfdb8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dfdba:	462b      	mov	r3, r5
   dfdbc:	1c71      	adds	r1, r6, #1
   dfdbe:	f7fd f9cb 	bl	dd158 <vsnprintf>
        va_end(marker);
        result.len = n;
   dfdc2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dfdc4:	4620      	mov	r0, r4
   dfdc6:	b007      	add	sp, #28
   dfdc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dfdcc:	b003      	add	sp, #12
   dfdce:	4770      	bx	lr
   dfdd0:	000e4537 	.word	0x000e4537

000dfdd4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dfdd4:	b510      	push	{r4, lr}
   dfdd6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dfdd8:	6800      	ldr	r0, [r0, #0]
   dfdda:	b118      	cbz	r0, dfde4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dfddc:	f7fd f994 	bl	dd108 <free>
            wakeupSource_ = nullptr;
   dfde0:	2300      	movs	r3, #0
   dfde2:	6023      	str	r3, [r4, #0]
        }
    }
   dfde4:	bd10      	pop	{r4, pc}

000dfde6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dfde6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dfde8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dfdec:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dfdee:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dfdf0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dfdf2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dfdf6:	f8c0 2006 	str.w	r2, [r0, #6]
   dfdfa:	889b      	ldrh	r3, [r3, #4]
   dfdfc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dfdfe:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dfe00:	f7ff ffe8 	bl	dfdd4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dfe04:	682b      	ldr	r3, [r5, #0]
   dfe06:	b113      	cbz	r3, dfe0e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dfe08:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dfe0a:	2300      	movs	r3, #0
   dfe0c:	602b      	str	r3, [r5, #0]
    }
   dfe0e:	4620      	mov	r0, r4
   dfe10:	bd38      	pop	{r3, r4, r5, pc}
	...

000dfe14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dfe14:	b538      	push	{r3, r4, r5, lr}
   dfe16:	460c      	mov	r4, r1
   dfe18:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dfe1a:	f7ff ffdb 	bl	dfdd4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dfe1e:	b144      	cbz	r4, dfe32 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dfe20:	8820      	ldrh	r0, [r4, #0]
   dfe22:	f7fd f969 	bl	dd0f8 <malloc>
   dfe26:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dfe28:	b128      	cbz	r0, dfe36 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dfe2a:	8822      	ldrh	r2, [r4, #0]
   dfe2c:	4621      	mov	r1, r4
   dfe2e:	f001 fc3b 	bl	e16a8 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dfe32:	2000      	movs	r0, #0
    }
   dfe34:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dfe36:	4801      	ldr	r0, [pc, #4]	; (dfe3c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dfe38:	e7fc      	b.n	dfe34 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dfe3a:	bf00      	nop
   dfe3c:	fffffefc 	.word	0xfffffefc

000dfe40 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dfe40:	b5f0      	push	{r4, r5, r6, r7, lr}
   dfe42:	4d2d      	ldr	r5, [pc, #180]	; (dfef8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dfe44:	7d0b      	ldrb	r3, [r1, #20]
   dfe46:	4604      	mov	r4, r0
   dfe48:	b08b      	sub	sp, #44	; 0x2c
   dfe4a:	4608      	mov	r0, r1
   dfe4c:	1daf      	adds	r7, r5, #6
   dfe4e:	2b00      	cmp	r3, #0
   dfe50:	d038      	beq.n	dfec4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dfe52:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dfe54:	791b      	ldrb	r3, [r3, #4]
   dfe56:	2b00      	cmp	r3, #0
   dfe58:	d034      	beq.n	dfec4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dfe5a:	2200      	movs	r2, #0
    SleepResult() {}
   dfe5c:	4b27      	ldr	r3, [pc, #156]	; (dfefc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dfe5e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dfe60:	a902      	add	r1, sp, #8
   dfe62:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dfe64:	9202      	str	r2, [sp, #8]
   dfe66:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dfe6a:	f88d 200e 	strb.w	r2, [sp, #14]
   dfe6e:	f7fd f889 	bl	dcf84 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dfe72:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dfe76:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dfe7a:	b200      	sxth	r0, r0
   dfe7c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dfe80:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dfe84:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dfe86:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dfe88:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dfe8a:	4628      	mov	r0, r5
   dfe8c:	f7ff ffc2 	bl	dfe14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dfe90:	a802      	add	r0, sp, #8
   dfe92:	f7ff ff9f 	bl	dfdd4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dfe96:	2300      	movs	r3, #0
   dfe98:	6023      	str	r3, [r4, #0]
   dfe9a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dfe9c:	71a3      	strb	r3, [r4, #6]
   dfe9e:	8123      	strh	r3, [r4, #8]
   dfea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dfea4:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dfea6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dfeaa:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dfeac:	683b      	ldr	r3, [r7, #0]
   dfeae:	f8c4 3006 	str.w	r3, [r4, #6]
   dfeb2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dfeb4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dfeb6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dfeb8:	4620      	mov	r0, r4
   dfeba:	f7ff ffab 	bl	dfe14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dfebe:	4620      	mov	r0, r4
   dfec0:	b00b      	add	sp, #44	; 0x2c
   dfec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dfec4:	2600      	movs	r6, #0
   dfec6:	2320      	movs	r3, #32
   dfec8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dfecc:	4b0c      	ldr	r3, [pc, #48]	; (dff00 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dfece:	9300      	str	r3, [sp, #0]
   dfed0:	490c      	ldr	r1, [pc, #48]	; (dff04 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dfed2:	4633      	mov	r3, r6
   dfed4:	aa02      	add	r2, sp, #8
   dfed6:	2032      	movs	r0, #50	; 0x32
   dfed8:	f7fc ffc6 	bl	dce68 <log_message>
    SleepResult() {}
   dfedc:	4b07      	ldr	r3, [pc, #28]	; (dfefc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dfede:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dfee0:	a902      	add	r1, sp, #8
        error_ = error;
   dfee2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dfee6:	4804      	ldr	r0, [pc, #16]	; (dfef8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dfee8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dfeea:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dfeee:	f8ad 300c 	strh.w	r3, [sp, #12]
   dfef2:	f7ff ff78 	bl	dfde6 <_ZN17SystemSleepResultaSEOS_>
   dfef6:	e7cb      	b.n	dfe90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dfef8:	2003e5a4 	.word	0x2003e5a4
   dfefc:	ffff0000 	.word	0xffff0000
   dff00:	000e4a67 	.word	0x000e4a67
   dff04:	000e4a60 	.word	0x000e4a60

000dff08 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dff08:	4b05      	ldr	r3, [pc, #20]	; (dff20 <_GLOBAL__sub_I_System+0x18>)
   dff0a:	2202      	movs	r2, #2
   dff0c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dff0e:	4b05      	ldr	r3, [pc, #20]	; (dff24 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dff10:	4a05      	ldr	r2, [pc, #20]	; (dff28 <_GLOBAL__sub_I_System+0x20>)
   dff12:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dff14:	2000      	movs	r0, #0
   dff16:	6018      	str	r0, [r3, #0]
   dff18:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dff1a:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dff1c:	f7fc bfde 	b.w	dcedc <set_system_mode>
   dff20:	2003e5b0 	.word	0x2003e5b0
   dff24:	2003e5a4 	.word	0x2003e5a4
   dff28:	ffff0000 	.word	0xffff0000

000dff2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dff2c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dff2e:	2000      	movs	r0, #0
   dff30:	f7fd f862 	bl	dcff8 <spark_sync_time_pending>
   dff34:	b128      	cbz	r0, dff42 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dff36:	f7fd f84f 	bl	dcfd8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dff3a:	f080 0001 	eor.w	r0, r0, #1
   dff3e:	b2c0      	uxtb	r0, r0
    }
   dff40:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dff42:	2001      	movs	r0, #1
   dff44:	e7fc      	b.n	dff40 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000dff46 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dff46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dff48:	4602      	mov	r2, r0
   dff4a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dff4c:	4668      	mov	r0, sp
    struct timeval tv = {
   dff4e:	2100      	movs	r1, #0
    };
   dff50:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dff54:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dff58:	f7fc fdae 	bl	dcab8 <hal_rtc_set_time>
   dff5c:	4602      	mov	r2, r0
   dff5e:	b910      	cbnz	r0, dff66 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dff60:	4601      	mov	r1, r0
   dff62:	f7fc fff3 	bl	dcf4c <system_notify_time_changed>
    }
}
   dff66:	b005      	add	sp, #20
   dff68:	f85d fb04 	ldr.w	pc, [sp], #4

000dff6c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dff6c:	b530      	push	{r4, r5, lr}
   dff6e:	4604      	mov	r4, r0
    t += time_zone_cache;
   dff70:	4818      	ldr	r0, [pc, #96]	; (dffd4 <_ZN9TimeClass7timeStrEx+0x68>)
   dff72:	e9d0 1000 	ldrd	r1, r0, [r0]
   dff76:	1852      	adds	r2, r2, r1
   dff78:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dff7c:	4816      	ldr	r0, [pc, #88]	; (dffd8 <_ZN9TimeClass7timeStrEx+0x6c>)
   dff7e:	e9d0 1000 	ldrd	r1, r0, [r0]
   dff82:	1852      	adds	r2, r2, r1
{
   dff84:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dff86:	eb40 0303 	adc.w	r3, r0, r3
   dff8a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dff8e:	2224      	movs	r2, #36	; 0x24
   dff90:	eb0d 0002 	add.w	r0, sp, r2
   dff94:	2100      	movs	r1, #0
   dff96:	f001 fbaf 	bl	e16f8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dff9a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dff9c:	a909      	add	r1, sp, #36	; 0x24
   dff9e:	4668      	mov	r0, sp
   dffa0:	f7fd f90a 	bl	dd1b8 <localtime_r>
    char ascstr[26] = {};
   dffa4:	2216      	movs	r2, #22
   dffa6:	4629      	mov	r1, r5
   dffa8:	a803      	add	r0, sp, #12
   dffaa:	9502      	str	r5, [sp, #8]
   dffac:	f001 fba4 	bl	e16f8 <memset>
    asctime_r(&calendar_time, ascstr);
   dffb0:	a902      	add	r1, sp, #8
   dffb2:	a809      	add	r0, sp, #36	; 0x24
   dffb4:	f001 fb3a 	bl	e162c <asctime_r>
    int len = strlen(ascstr);
   dffb8:	a802      	add	r0, sp, #8
   dffba:	f001 fc28 	bl	e180e <strlen>
    ascstr[len-1] = 0; // remove final newline
   dffbe:	ab12      	add	r3, sp, #72	; 0x48
   dffc0:	4418      	add	r0, r3
    return String(ascstr);
   dffc2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dffc4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dffc8:	4620      	mov	r0, r4
   dffca:	f7ff fdb8 	bl	dfb3e <_ZN6StringC1EPKc>
}
   dffce:	4620      	mov	r0, r4
   dffd0:	b013      	add	sp, #76	; 0x4c
   dffd2:	bd30      	pop	{r4, r5, pc}
   dffd4:	2003e5c8 	.word	0x2003e5c8
   dffd8:	2003e5c0 	.word	0x2003e5c0

000dffdc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dffe0:	b0a5      	sub	sp, #148	; 0x94
   dffe2:	4607      	mov	r7, r0
   dffe4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dffe6:	a814      	add	r0, sp, #80	; 0x50
{
   dffe8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dffea:	223f      	movs	r2, #63	; 0x3f
{
   dffec:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dffee:	f001 fc28 	bl	e1842 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dfff2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dfff4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dfff6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dfffa:	f001 fc08 	bl	e180e <strlen>
   dfffe:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   e0000:	bb5d      	cbnz	r5, e005a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   e0002:	492a      	ldr	r1, [pc, #168]	; (e00ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   e0004:	a803      	add	r0, sp, #12
   e0006:	f001 fbdd 	bl	e17c4 <strcpy>
   e000a:	ae14      	add	r6, sp, #80	; 0x50
{
   e000c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   e000e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   e0012:	45ab      	cmp	fp, r5
   e0014:	d936      	bls.n	e0084 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   e0016:	46b1      	mov	r9, r6
   e0018:	f105 0a01 	add.w	sl, r5, #1
   e001c:	f819 3b01 	ldrb.w	r3, [r9], #1
   e0020:	2b25      	cmp	r3, #37	; 0x25
   e0022:	d117      	bne.n	e0054 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   e0024:	7873      	ldrb	r3, [r6, #1]
   e0026:	2b7a      	cmp	r3, #122	; 0x7a
   e0028:	d114      	bne.n	e0054 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   e002a:	a803      	add	r0, sp, #12
   e002c:	f001 fbef 	bl	e180e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   e0030:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   e0032:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   e0034:	1828      	adds	r0, r5, r0
   e0036:	4418      	add	r0, r3
   e0038:	ebab 0205 	sub.w	r2, fp, r5
   e003c:	1cb1      	adds	r1, r6, #2
   e003e:	f001 fb33 	bl	e16a8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   e0042:	4622      	mov	r2, r4
   e0044:	a903      	add	r1, sp, #12
   e0046:	4630      	mov	r0, r6
   e0048:	f001 fb2e 	bl	e16a8 <memcpy>
            len = strlen(format_str);
   e004c:	a814      	add	r0, sp, #80	; 0x50
   e004e:	f001 fbde 	bl	e180e <strlen>
   e0052:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   e0054:	464e      	mov	r6, r9
   e0056:	4655      	mov	r5, sl
   e0058:	e7d9      	b.n	e000e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   e005a:	213c      	movs	r1, #60	; 0x3c
   e005c:	fb95 f3f1 	sdiv	r3, r5, r1
   e0060:	2b00      	cmp	r3, #0
   e0062:	bfb8      	it	lt
   e0064:	425b      	neglt	r3, r3
   e0066:	fbb3 f2f1 	udiv	r2, r3, r1
   e006a:	fb01 3312 	mls	r3, r1, r2, r3
   e006e:	9300      	str	r3, [sp, #0]
   e0070:	4a0f      	ldr	r2, [pc, #60]	; (e00b0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   e0072:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e0076:	2110      	movs	r1, #16
   e0078:	a803      	add	r0, sp, #12
   e007a:	fb95 f3f3 	sdiv	r3, r5, r3
   e007e:	f7fd f863 	bl	dd148 <snprintf>
   e0082:	e7c2      	b.n	e000a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   e0084:	2100      	movs	r1, #0
   e0086:	222e      	movs	r2, #46	; 0x2e
   e0088:	a808      	add	r0, sp, #32
   e008a:	9107      	str	r1, [sp, #28]
   e008c:	f001 fb34 	bl	e16f8 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   e0090:	4643      	mov	r3, r8
   e0092:	aa14      	add	r2, sp, #80	; 0x50
   e0094:	2132      	movs	r1, #50	; 0x32
   e0096:	a807      	add	r0, sp, #28
   e0098:	f7fd f886 	bl	dd1a8 <strftime>
    return String(buf);
   e009c:	a907      	add	r1, sp, #28
   e009e:	4638      	mov	r0, r7
   e00a0:	f7ff fd4d 	bl	dfb3e <_ZN6StringC1EPKc>
}
   e00a4:	4638      	mov	r0, r7
   e00a6:	b025      	add	sp, #148	; 0x94
   e00a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e00ac:	000e4a8e 	.word	0x000e4a8e
   e00b0:	000e4a90 	.word	0x000e4a90

000e00b4 <_ZN9TimeClass6formatExPKc>:
{
   e00b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   e00b6:	b08d      	sub	sp, #52	; 0x34
   e00b8:	e9cd 2300 	strd	r2, r3, [sp]
   e00bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   e00be:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   e00c0:	b915      	cbnz	r5, e00c8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   e00c2:	4b19      	ldr	r3, [pc, #100]	; (e0128 <_ZN9TimeClass6formatExPKc+0x74>)
   e00c4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   e00c6:	b12d      	cbz	r5, e00d4 <_ZN9TimeClass6formatExPKc+0x20>
   e00c8:	4b18      	ldr	r3, [pc, #96]	; (e012c <_ZN9TimeClass6formatExPKc+0x78>)
   e00ca:	4628      	mov	r0, r5
   e00cc:	6819      	ldr	r1, [r3, #0]
   e00ce:	f001 fb6f 	bl	e17b0 <strcmp>
   e00d2:	b938      	cbnz	r0, e00e4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   e00d4:	e9dd 2300 	ldrd	r2, r3, [sp]
   e00d8:	4620      	mov	r0, r4
   e00da:	f7ff ff47 	bl	dff6c <_ZN9TimeClass7timeStrEx>
}
   e00de:	4620      	mov	r0, r4
   e00e0:	b00d      	add	sp, #52	; 0x34
   e00e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   e00e4:	4e12      	ldr	r6, [pc, #72]	; (e0130 <_ZN9TimeClass6formatExPKc+0x7c>)
   e00e6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   e00e8:	4f12      	ldr	r7, [pc, #72]	; (e0134 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   e00ea:	e9d6 3200 	ldrd	r3, r2, [r6]
   e00ee:	185b      	adds	r3, r3, r1
   e00f0:	9901      	ldr	r1, [sp, #4]
   e00f2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   e00f6:	e9d7 0100 	ldrd	r0, r1, [r7]
   e00fa:	181b      	adds	r3, r3, r0
   e00fc:	eb41 0202 	adc.w	r2, r1, r2
   e0100:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   e0104:	2100      	movs	r1, #0
   e0106:	2224      	movs	r2, #36	; 0x24
   e0108:	a803      	add	r0, sp, #12
   e010a:	f001 faf5 	bl	e16f8 <memset>
    localtime_r(&t, &calendar_time);
   e010e:	a903      	add	r1, sp, #12
   e0110:	4668      	mov	r0, sp
   e0112:	f7fd f851 	bl	dd1b8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   e0116:	6832      	ldr	r2, [r6, #0]
   e0118:	683b      	ldr	r3, [r7, #0]
   e011a:	a903      	add	r1, sp, #12
   e011c:	4413      	add	r3, r2
   e011e:	4620      	mov	r0, r4
   e0120:	462a      	mov	r2, r5
   e0122:	f7ff ff5b 	bl	dffdc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   e0126:	e7da      	b.n	e00de <_ZN9TimeClass6formatExPKc+0x2a>
   e0128:	2003e5b8 	.word	0x2003e5b8
   e012c:	2003e1c8 	.word	0x2003e1c8
   e0130:	2003e5c8 	.word	0x2003e5c8
   e0134:	2003e5c0 	.word	0x2003e5c0

000e0138 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   e0138:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   e013a:	2000      	movs	r0, #0
   e013c:	f7fc fca4 	bl	dca88 <hal_rtc_time_is_valid>
    if (rtcstate)
   e0140:	4604      	mov	r4, r0
   e0142:	b9a0      	cbnz	r0, e016e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   e0144:	f7fc fec2 	bl	dcecc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   e0148:	2801      	cmp	r0, #1
   e014a:	d110      	bne.n	e016e <_ZN9TimeClass7isValidEv+0x36>
   e014c:	4620      	mov	r0, r4
   e014e:	f7fc fef5 	bl	dcf3c <system_thread_get_state>
   e0152:	b960      	cbnz	r0, e016e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   e0154:	f7ff feea 	bl	dff2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   e0158:	b910      	cbnz	r0, e0160 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   e015a:	f7fc ff2d 	bl	dcfb8 <spark_process>
        while (_while() && !_condition()) {
   e015e:	e7f9      	b.n	e0154 <_ZN9TimeClass7isValidEv+0x1c>
   e0160:	f7ff fee4 	bl	dff2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   e0164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   e0168:	2000      	movs	r0, #0
   e016a:	f7fc bc8d 	b.w	dca88 <hal_rtc_time_is_valid>
}
   e016e:	4620      	mov	r0, r4
   e0170:	bd10      	pop	{r4, pc}

000e0172 <_ZN9TimeClass3nowEv>:
{
   e0172:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   e0174:	f7ff ffe0 	bl	e0138 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   e0178:	2210      	movs	r2, #16
   e017a:	2100      	movs	r1, #0
   e017c:	4668      	mov	r0, sp
   e017e:	f001 fabb 	bl	e16f8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   e0182:	2100      	movs	r1, #0
   e0184:	4668      	mov	r0, sp
   e0186:	f7fc fc8f 	bl	dcaa8 <hal_rtc_get_time>
}
   e018a:	9800      	ldr	r0, [sp, #0]
   e018c:	b005      	add	sp, #20
   e018e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e0194 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e0194:	4b02      	ldr	r3, [pc, #8]	; (e01a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e0196:	681a      	ldr	r2, [r3, #0]
   e0198:	4b02      	ldr	r3, [pc, #8]	; (e01a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e019a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   e019c:	4770      	bx	lr
   e019e:	bf00      	nop
   e01a0:	2003e1c8 	.word	0x2003e1c8
   e01a4:	2003e5b8 	.word	0x2003e5b8

000e01a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   e01a8:	4770      	bx	lr

000e01aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e01aa:	7441      	strb	r1, [r0, #17]
}
   e01ac:	4770      	bx	lr

000e01ae <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e01ae:	4770      	bx	lr

000e01b0 <_ZN11USARTSerial17availableForWriteEv>:
{
   e01b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   e01b2:	7c00      	ldrb	r0, [r0, #16]
   e01b4:	f7fc fdf0 	bl	dcd98 <hal_usart_available_data_for_write>
}
   e01b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e01bc:	bd08      	pop	{r3, pc}

000e01be <_ZN11USARTSerial9availableEv>:
{
   e01be:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   e01c0:	7c00      	ldrb	r0, [r0, #16]
   e01c2:	f7fc fdc1 	bl	dcd48 <hal_usart_available>
}
   e01c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e01ca:	bd08      	pop	{r3, pc}

000e01cc <_ZN11USARTSerial4peekEv>:
{
   e01cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   e01ce:	7c00      	ldrb	r0, [r0, #16]
   e01d0:	f7fc fdca 	bl	dcd68 <hal_usart_peek>
}
   e01d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e01d8:	bd08      	pop	{r3, pc}

000e01da <_ZN11USARTSerial4readEv>:
{
   e01da:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   e01dc:	7c00      	ldrb	r0, [r0, #16]
   e01de:	f7fc fdbb 	bl	dcd58 <hal_usart_read>
}
   e01e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e01e6:	bd08      	pop	{r3, pc}

000e01e8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   e01e8:	7c00      	ldrb	r0, [r0, #16]
   e01ea:	f7fc bdc5 	b.w	dcd78 <hal_usart_flush>

000e01ee <_ZN11USARTSerial5writeEh>:
{
   e01ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e01f0:	7c45      	ldrb	r5, [r0, #17]
{
   e01f2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e01f4:	b12d      	cbz	r5, e0202 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   e01f6:	7c20      	ldrb	r0, [r4, #16]
}
   e01f8:	b003      	add	sp, #12
   e01fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   e01fe:	f7fc bd9b 	b.w	dcd38 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e0202:	7c00      	ldrb	r0, [r0, #16]
   e0204:	9101      	str	r1, [sp, #4]
   e0206:	f7fc fdc7 	bl	dcd98 <hal_usart_available_data_for_write>
   e020a:	2800      	cmp	r0, #0
   e020c:	9901      	ldr	r1, [sp, #4]
   e020e:	dcf2      	bgt.n	e01f6 <_ZN11USARTSerial5writeEh+0x8>
}
   e0210:	4628      	mov	r0, r5
   e0212:	b003      	add	sp, #12
   e0214:	bd30      	pop	{r4, r5, pc}

000e0216 <_ZN11USARTSerialD0Ev>:
   e0216:	b510      	push	{r4, lr}
   e0218:	2114      	movs	r1, #20
   e021a:	4604      	mov	r4, r0
   e021c:	f000 fa90 	bl	e0740 <_ZdlPvj>
   e0220:	4620      	mov	r0, r4
   e0222:	bd10      	pop	{r4, pc}

000e0224 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   e0224:	b510      	push	{r4, lr}
   e0226:	f04f 0c00 	mov.w	ip, #0
   e022a:	4604      	mov	r4, r0
   e022c:	4608      	mov	r0, r1
   e022e:	4611      	mov	r1, r2
   e0230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e0234:	e9c4 c201 	strd	ip, r2, [r4, #4]
   e0238:	4a04      	ldr	r2, [pc, #16]	; (e024c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   e023a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   e023c:	2201      	movs	r2, #1
  _serial = serial;
   e023e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e0240:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   e0242:	461a      	mov	r2, r3
   e0244:	f7fc fd68 	bl	dcd18 <hal_usart_init>
}
   e0248:	4620      	mov	r0, r4
   e024a:	bd10      	pop	{r4, pc}
   e024c:	000e4ac0 	.word	0x000e4ac0

000e0250 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   e0250:	7c00      	ldrb	r0, [r0, #16]
   e0252:	2300      	movs	r3, #0
   e0254:	f7fc bda8 	b.w	dcda8 <hal_usart_begin_config>

000e0258 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   e0258:	2200      	movs	r2, #0
   e025a:	f7ff bff9 	b.w	e0250 <_ZN11USARTSerial5beginEmm>

000e025e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   e025e:	7c00      	ldrb	r0, [r0, #16]
   e0260:	f7fc bd62 	b.w	dcd28 <hal_usart_end>

000e0264 <_Z22__fetch_global_Serial1v>:
{
   e0264:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e0266:	4c0d      	ldr	r4, [pc, #52]	; (e029c <_Z22__fetch_global_Serial1v+0x38>)
   e0268:	7821      	ldrb	r1, [r4, #0]
   e026a:	f3bf 8f5b 	dmb	ish
   e026e:	f011 0101 	ands.w	r1, r1, #1
   e0272:	d110      	bne.n	e0296 <_Z22__fetch_global_Serial1v+0x32>
   e0274:	4620      	mov	r0, r4
   e0276:	9101      	str	r1, [sp, #4]
   e0278:	f7f3 ff20 	bl	d40bc <__cxa_guard_acquire>
   e027c:	9901      	ldr	r1, [sp, #4]
   e027e:	b150      	cbz	r0, e0296 <_Z22__fetch_global_Serial1v+0x32>
   e0280:	4b07      	ldr	r3, [pc, #28]	; (e02a0 <_Z22__fetch_global_Serial1v+0x3c>)
   e0282:	4a08      	ldr	r2, [pc, #32]	; (e02a4 <_Z22__fetch_global_Serial1v+0x40>)
   e0284:	4808      	ldr	r0, [pc, #32]	; (e02a8 <_Z22__fetch_global_Serial1v+0x44>)
   e0286:	f7ff ffcd 	bl	e0224 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   e028a:	4620      	mov	r0, r4
   e028c:	f7f3 ff1b 	bl	d40c6 <__cxa_guard_release>
   e0290:	4806      	ldr	r0, [pc, #24]	; (e02ac <_Z22__fetch_global_Serial1v+0x48>)
   e0292:	f001 f9f1 	bl	e1678 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e0296:	4804      	ldr	r0, [pc, #16]	; (e02a8 <_Z22__fetch_global_Serial1v+0x44>)
   e0298:	b002      	add	sp, #8
   e029a:	bd10      	pop	{r4, pc}
   e029c:	2003e5d0 	.word	0x2003e5d0
   e02a0:	2003e658 	.word	0x2003e658
   e02a4:	2003e5d4 	.word	0x2003e5d4
   e02a8:	2003e6dc 	.word	0x2003e6dc
   e02ac:	000e01af 	.word	0x000e01af

000e02b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e02b0:	7441      	strb	r1, [r0, #17]
}
   e02b2:	4770      	bx	lr

000e02b4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e02b4:	4770      	bx	lr

000e02b6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e02b6:	4770      	bx	lr

000e02b8 <_ZN9USBSerial4readEv>:
{
   e02b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e02ba:	2100      	movs	r1, #0
   e02bc:	7c00      	ldrb	r0, [r0, #16]
   e02be:	f7fc fda3 	bl	dce08 <HAL_USB_USART_Receive_Data>
}
   e02c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e02c6:	bd08      	pop	{r3, pc}

000e02c8 <_ZN9USBSerial4peekEv>:
{
   e02c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e02ca:	2101      	movs	r1, #1
   e02cc:	7c00      	ldrb	r0, [r0, #16]
   e02ce:	f7fc fd9b 	bl	dce08 <HAL_USB_USART_Receive_Data>
}
   e02d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e02d6:	bd08      	pop	{r3, pc}

000e02d8 <_ZN9USBSerial17availableForWriteEv>:
{
   e02d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e02da:	7c00      	ldrb	r0, [r0, #16]
   e02dc:	f7fc fd8c 	bl	dcdf8 <HAL_USB_USART_Available_Data_For_Write>
}
   e02e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e02e4:	bd08      	pop	{r3, pc}

000e02e6 <_ZN9USBSerial9availableEv>:
{
   e02e6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e02e8:	7c00      	ldrb	r0, [r0, #16]
   e02ea:	f7fc fd7d 	bl	dcde8 <HAL_USB_USART_Available_Data>
}
   e02ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e02f2:	bd08      	pop	{r3, pc}

000e02f4 <_ZN9USBSerial5writeEh>:
{
   e02f4:	b513      	push	{r0, r1, r4, lr}
   e02f6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e02f8:	7c00      	ldrb	r0, [r0, #16]
{
   e02fa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e02fc:	f7fc fd7c 	bl	dcdf8 <HAL_USB_USART_Available_Data_For_Write>
   e0300:	2800      	cmp	r0, #0
   e0302:	9901      	ldr	r1, [sp, #4]
   e0304:	dc01      	bgt.n	e030a <_ZN9USBSerial5writeEh+0x16>
   e0306:	7c60      	ldrb	r0, [r4, #17]
   e0308:	b120      	cbz	r0, e0314 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e030a:	7c20      	ldrb	r0, [r4, #16]
   e030c:	f7fc fd84 	bl	dce18 <HAL_USB_USART_Send_Data>
   e0310:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   e0314:	b002      	add	sp, #8
   e0316:	bd10      	pop	{r4, pc}

000e0318 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   e0318:	7c00      	ldrb	r0, [r0, #16]
   e031a:	f7fc bd85 	b.w	dce28 <HAL_USB_USART_Flush_Data>

000e031e <_ZN9USBSerialD0Ev>:
   e031e:	b510      	push	{r4, lr}
   e0320:	2114      	movs	r1, #20
   e0322:	4604      	mov	r4, r0
   e0324:	f000 fa0c 	bl	e0740 <_ZdlPvj>
   e0328:	4620      	mov	r0, r4
   e032a:	bd10      	pop	{r4, pc}

000e032c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e032c:	b510      	push	{r4, lr}
   e032e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e0332:	4604      	mov	r4, r0
   e0334:	4608      	mov	r0, r1
   e0336:	2100      	movs	r1, #0
   e0338:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e033c:	4b04      	ldr	r3, [pc, #16]	; (e0350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e033e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   e0340:	2301      	movs	r3, #1
  _serial = serial;
   e0342:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e0344:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   e0346:	4611      	mov	r1, r2
   e0348:	f7fc fd36 	bl	dcdb8 <HAL_USB_USART_Init>
}
   e034c:	4620      	mov	r0, r4
   e034e:	bd10      	pop	{r4, pc}
   e0350:	000e4af0 	.word	0x000e4af0

000e0354 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   e0354:	7c00      	ldrb	r0, [r0, #16]
   e0356:	2200      	movs	r2, #0
   e0358:	f7fc bd36 	b.w	dcdc8 <HAL_USB_USART_Begin>

000e035c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   e035c:	7c00      	ldrb	r0, [r0, #16]
   e035e:	f7fc bd3b 	b.w	dcdd8 <HAL_USB_USART_End>

000e0362 <_Z19acquireSerialBufferv>:
{
   e0362:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e0364:	2214      	movs	r2, #20
{
   e0366:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e0368:	2100      	movs	r1, #0
   e036a:	f001 f9c5 	bl	e16f8 <memset>
}
   e036e:	4620      	mov	r0, r4
   e0370:	bd10      	pop	{r4, pc}
	...

000e0374 <_Z16_fetch_usbserialv>:
{
   e0374:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e0376:	4c0f      	ldr	r4, [pc, #60]	; (e03b4 <_Z16_fetch_usbserialv+0x40>)
{
   e0378:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e037a:	a803      	add	r0, sp, #12
   e037c:	f7ff fff1 	bl	e0362 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e0380:	7821      	ldrb	r1, [r4, #0]
   e0382:	f3bf 8f5b 	dmb	ish
   e0386:	f011 0101 	ands.w	r1, r1, #1
   e038a:	d10f      	bne.n	e03ac <_Z16_fetch_usbserialv+0x38>
   e038c:	4620      	mov	r0, r4
   e038e:	9101      	str	r1, [sp, #4]
   e0390:	f7f3 fe94 	bl	d40bc <__cxa_guard_acquire>
   e0394:	9901      	ldr	r1, [sp, #4]
   e0396:	b148      	cbz	r0, e03ac <_Z16_fetch_usbserialv+0x38>
   e0398:	aa03      	add	r2, sp, #12
   e039a:	4807      	ldr	r0, [pc, #28]	; (e03b8 <_Z16_fetch_usbserialv+0x44>)
   e039c:	f7ff ffc6 	bl	e032c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e03a0:	4620      	mov	r0, r4
   e03a2:	f7f3 fe90 	bl	d40c6 <__cxa_guard_release>
   e03a6:	4805      	ldr	r0, [pc, #20]	; (e03bc <_Z16_fetch_usbserialv+0x48>)
   e03a8:	f001 f966 	bl	e1678 <atexit>
	return _usbserial;
}
   e03ac:	4802      	ldr	r0, [pc, #8]	; (e03b8 <_Z16_fetch_usbserialv+0x44>)
   e03ae:	b008      	add	sp, #32
   e03b0:	bd10      	pop	{r4, pc}
   e03b2:	bf00      	nop
   e03b4:	2003e6f0 	.word	0x2003e6f0
   e03b8:	2003e6f4 	.word	0x2003e6f4
   e03bc:	000e02b5 	.word	0x000e02b5

000e03c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   e03c0:	4b01      	ldr	r3, [pc, #4]	; (e03c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   e03c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   e03c4:	4770      	bx	lr
   e03c6:	bf00      	nop
   e03c8:	2003e1d0 	.word	0x2003e1d0

000e03cc <serialEventRun>:
{
   e03cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e03ce:	4b0b      	ldr	r3, [pc, #44]	; (e03fc <serialEventRun+0x30>)
   e03d0:	b143      	cbz	r3, e03e4 <serialEventRun+0x18>
   e03d2:	f7ff ffcf 	bl	e0374 <_Z16_fetch_usbserialv>
   e03d6:	6803      	ldr	r3, [r0, #0]
   e03d8:	691b      	ldr	r3, [r3, #16]
   e03da:	4798      	blx	r3
   e03dc:	2800      	cmp	r0, #0
   e03de:	dd01      	ble.n	e03e4 <serialEventRun+0x18>
        serialEvent();
   e03e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   e03e4:	4b06      	ldr	r3, [pc, #24]	; (e0400 <serialEventRun+0x34>)
   e03e6:	b143      	cbz	r3, e03fa <serialEventRun+0x2e>
   e03e8:	f7ff ff3c 	bl	e0264 <_Z22__fetch_global_Serial1v>
   e03ec:	6803      	ldr	r3, [r0, #0]
   e03ee:	691b      	ldr	r3, [r3, #16]
   e03f0:	4798      	blx	r3
   e03f2:	2800      	cmp	r0, #0
   e03f4:	dd01      	ble.n	e03fa <serialEventRun+0x2e>
        serialEvent1();
   e03f6:	f3af 8000 	nop.w
}
   e03fa:	bd08      	pop	{r3, pc}
	...

000e0404 <_post_loop>:
{
   e0404:	b508      	push	{r3, lr}
	serialEventRun();
   e0406:	f7ff ffe1 	bl	e03cc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e040a:	f7fc fb35 	bl	dca78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e040e:	4b01      	ldr	r3, [pc, #4]	; (e0414 <_post_loop+0x10>)
   e0410:	6018      	str	r0, [r3, #0]
}
   e0412:	bd08      	pop	{r3, pc}
   e0414:	2003e71c 	.word	0x2003e71c

000e0418 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e0418:	4805      	ldr	r0, [pc, #20]	; (e0430 <_Z33system_initialize_user_backup_ramv+0x18>)
   e041a:	4a06      	ldr	r2, [pc, #24]	; (e0434 <_Z33system_initialize_user_backup_ramv+0x1c>)
   e041c:	4906      	ldr	r1, [pc, #24]	; (e0438 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   e041e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e0420:	1a12      	subs	r2, r2, r0
   e0422:	f001 f941 	bl	e16a8 <memcpy>
    __backup_sram_signature = signature;
   e0426:	4b05      	ldr	r3, [pc, #20]	; (e043c <_Z33system_initialize_user_backup_ramv+0x24>)
   e0428:	4a05      	ldr	r2, [pc, #20]	; (e0440 <_Z33system_initialize_user_backup_ramv+0x28>)
   e042a:	601a      	str	r2, [r3, #0]
}
   e042c:	bd08      	pop	{r3, pc}
   e042e:	bf00      	nop
   e0430:	2003f400 	.word	0x2003f400
   e0434:	2003f404 	.word	0x2003f404
   e0438:	000e4e30 	.word	0x000e4e30
   e043c:	2003f400 	.word	0x2003f400
   e0440:	9a271c1e 	.word	0x9a271c1e

000e0444 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e0444:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e0446:	2300      	movs	r3, #0
   e0448:	9300      	str	r3, [sp, #0]
   e044a:	461a      	mov	r2, r3
   e044c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e0450:	f7fc fd8e 	bl	dcf70 <system_ctrl_set_result>
}
   e0454:	b003      	add	sp, #12
   e0456:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e045c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   e045c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e045e:	8843      	ldrh	r3, [r0, #2]
   e0460:	2b0a      	cmp	r3, #10
   e0462:	d008      	beq.n	e0476 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e0464:	2b50      	cmp	r3, #80	; 0x50
   e0466:	d10b      	bne.n	e0480 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   e0468:	4b09      	ldr	r3, [pc, #36]	; (e0490 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e046a:	681b      	ldr	r3, [r3, #0]
   e046c:	b14b      	cbz	r3, e0482 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   e046e:	b003      	add	sp, #12
   e0470:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   e0474:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   e0476:	f7ff ffe5 	bl	e0444 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   e047a:	b003      	add	sp, #12
   e047c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e0480:	2300      	movs	r3, #0
   e0482:	9300      	str	r3, [sp, #0]
   e0484:	461a      	mov	r2, r3
   e0486:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e048a:	f7fc fd71 	bl	dcf70 <system_ctrl_set_result>
}
   e048e:	e7f4      	b.n	e047a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   e0490:	2003e70c 	.word	0x2003e70c

000e0494 <module_user_init_hook>:
{
   e0494:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e0496:	4812      	ldr	r0, [pc, #72]	; (e04e0 <module_user_init_hook+0x4c>)
   e0498:	2100      	movs	r1, #0
   e049a:	f7fc fe7d 	bl	dd198 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   e049e:	4b11      	ldr	r3, [pc, #68]	; (e04e4 <module_user_init_hook+0x50>)
   e04a0:	681a      	ldr	r2, [r3, #0]
   e04a2:	4b11      	ldr	r3, [pc, #68]	; (e04e8 <module_user_init_hook+0x54>)
   e04a4:	429a      	cmp	r2, r3
   e04a6:	4b11      	ldr	r3, [pc, #68]	; (e04ec <module_user_init_hook+0x58>)
   e04a8:	bf0c      	ite	eq
   e04aa:	2201      	moveq	r2, #1
   e04ac:	2200      	movne	r2, #0
   e04ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e04b0:	d001      	beq.n	e04b6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   e04b2:	f7ff ffb1 	bl	e0418 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e04b6:	f7fc fac7 	bl	dca48 <HAL_RNG_GetRandomNumber>
   e04ba:	4604      	mov	r4, r0
    srand(seed);
   e04bc:	f001 f924 	bl	e1708 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e04c0:	4b0b      	ldr	r3, [pc, #44]	; (e04f0 <module_user_init_hook+0x5c>)
   e04c2:	b113      	cbz	r3, e04ca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   e04c4:	4620      	mov	r0, r4
   e04c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e04ca:	2100      	movs	r1, #0
   e04cc:	4808      	ldr	r0, [pc, #32]	; (e04f0 <module_user_init_hook+0x5c>)
   e04ce:	f7fc fda3 	bl	dd018 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   e04d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e04d6:	4807      	ldr	r0, [pc, #28]	; (e04f4 <module_user_init_hook+0x60>)
   e04d8:	2100      	movs	r1, #0
   e04da:	f7fc bd3f 	b.w	dcf5c <system_ctrl_set_app_request_handler>
   e04de:	bf00      	nop
   e04e0:	000e03c1 	.word	0x000e03c1
   e04e4:	2003f400 	.word	0x2003f400
   e04e8:	9a271c1e 	.word	0x9a271c1e
   e04ec:	2003e708 	.word	0x2003e708
   e04f0:	00000000 	.word	0x00000000
   e04f4:	000e045d 	.word	0x000e045d

000e04f8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   e04f8:	b508      	push	{r3, lr}
   e04fa:	4b02      	ldr	r3, [pc, #8]	; (e0504 <spark_protocol_instance+0xc>)
   e04fc:	681b      	ldr	r3, [r3, #0]
   e04fe:	681b      	ldr	r3, [r3, #0]
   e0500:	9301      	str	r3, [sp, #4]
   e0502:	bd08      	pop	{r3, pc}
   e0504:	0003025c 	.word	0x0003025c

000e0508 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   e0508:	b508      	push	{r3, lr}
   e050a:	4b02      	ldr	r3, [pc, #8]	; (e0514 <spark_protocol_set_product_id+0xc>)
   e050c:	681b      	ldr	r3, [r3, #0]
   e050e:	685b      	ldr	r3, [r3, #4]
   e0510:	9301      	str	r3, [sp, #4]
   e0512:	bd08      	pop	{r3, pc}
   e0514:	0003025c 	.word	0x0003025c

000e0518 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   e0518:	b508      	push	{r3, lr}
   e051a:	4b02      	ldr	r3, [pc, #8]	; (e0524 <spark_protocol_set_product_firmware_version+0xc>)
   e051c:	681b      	ldr	r3, [r3, #0]
   e051e:	689b      	ldr	r3, [r3, #8]
   e0520:	9301      	str	r3, [sp, #4]
   e0522:	bd08      	pop	{r3, pc}
   e0524:	0003025c 	.word	0x0003025c

000e0528 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   e0528:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   e052a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   e052c:	d902      	bls.n	e0534 <pinAvailable+0xc>
    return false;
   e052e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   e0530:	b002      	add	sp, #8
   e0532:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   e0534:	f1a0 030b 	sub.w	r3, r0, #11
   e0538:	2b02      	cmp	r3, #2
   e053a:	d81a      	bhi.n	e0572 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e053c:	4c17      	ldr	r4, [pc, #92]	; (e059c <pinAvailable+0x74>)
   e053e:	7821      	ldrb	r1, [r4, #0]
   e0540:	f3bf 8f5b 	dmb	ish
   e0544:	f011 0101 	ands.w	r1, r1, #1
   e0548:	d10b      	bne.n	e0562 <pinAvailable+0x3a>
   e054a:	4620      	mov	r0, r4
   e054c:	9101      	str	r1, [sp, #4]
   e054e:	f7f3 fdb5 	bl	d40bc <__cxa_guard_acquire>
   e0552:	9901      	ldr	r1, [sp, #4]
   e0554:	b128      	cbz	r0, e0562 <pinAvailable+0x3a>
   e0556:	4812      	ldr	r0, [pc, #72]	; (e05a0 <pinAvailable+0x78>)
   e0558:	f7ff fa9c 	bl	dfa94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   e055c:	4620      	mov	r0, r4
   e055e:	f7f3 fdb2 	bl	d40c6 <__cxa_guard_release>
   e0562:	4b0f      	ldr	r3, [pc, #60]	; (e05a0 <pinAvailable+0x78>)
   e0564:	7818      	ldrb	r0, [r3, #0]
   e0566:	f7fc fb67 	bl	dcc38 <hal_spi_is_enabled>
   e056a:	2800      	cmp	r0, #0
   e056c:	d1df      	bne.n	e052e <pinAvailable+0x6>
  return true; // 'pin' is available
   e056e:	2001      	movs	r0, #1
   e0570:	e7de      	b.n	e0530 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   e0572:	2801      	cmp	r0, #1
   e0574:	d809      	bhi.n	e058a <pinAvailable+0x62>
   e0576:	f000 f89b 	bl	e06b0 <_Z19__fetch_global_Wirev>
   e057a:	2100      	movs	r1, #0
   e057c:	7c00      	ldrb	r0, [r0, #16]
   e057e:	f7fc fb13 	bl	dcba8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   e0582:	f080 0001 	eor.w	r0, r0, #1
   e0586:	b2c0      	uxtb	r0, r0
   e0588:	e7d2      	b.n	e0530 <pinAvailable+0x8>
   e058a:	3809      	subs	r0, #9
   e058c:	2801      	cmp	r0, #1
   e058e:	d8ee      	bhi.n	e056e <pinAvailable+0x46>
   e0590:	f7ff fe68 	bl	e0264 <_Z22__fetch_global_Serial1v>
   e0594:	7c00      	ldrb	r0, [r0, #16]
   e0596:	f7fc fbf7 	bl	dcd88 <hal_usart_is_enabled>
   e059a:	e7f2      	b.n	e0582 <pinAvailable+0x5a>
   e059c:	2003e710 	.word	0x2003e710
   e05a0:	2003e714 	.word	0x2003e714

000e05a4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e05a4:	2823      	cmp	r0, #35	; 0x23
{
   e05a6:	b538      	push	{r3, r4, r5, lr}
   e05a8:	4604      	mov	r4, r0
   e05aa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e05ac:	d80a      	bhi.n	e05c4 <pinMode+0x20>
   e05ae:	29ff      	cmp	r1, #255	; 0xff
   e05b0:	d008      	beq.n	e05c4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   e05b2:	f7ff ffb9 	bl	e0528 <pinAvailable>
   e05b6:	b128      	cbz	r0, e05c4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   e05b8:	4629      	mov	r1, r5
   e05ba:	4620      	mov	r0, r4
}
   e05bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   e05c0:	f7fc ba8a 	b.w	dcad8 <HAL_Pin_Mode>
}
   e05c4:	bd38      	pop	{r3, r4, r5, pc}

000e05c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   e05c6:	b538      	push	{r3, r4, r5, lr}
   e05c8:	4604      	mov	r4, r0
   e05ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e05cc:	f7fc fa8c 	bl	dcae8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   e05d0:	28ff      	cmp	r0, #255	; 0xff
   e05d2:	d010      	beq.n	e05f6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   e05d4:	2806      	cmp	r0, #6
   e05d6:	d804      	bhi.n	e05e2 <digitalWrite+0x1c>
   e05d8:	234d      	movs	r3, #77	; 0x4d
   e05da:	fa23 f000 	lsr.w	r0, r3, r0
   e05de:	07c3      	lsls	r3, r0, #31
   e05e0:	d409      	bmi.n	e05f6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   e05e2:	4620      	mov	r0, r4
   e05e4:	f7ff ffa0 	bl	e0528 <pinAvailable>
   e05e8:	b128      	cbz	r0, e05f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   e05ea:	4629      	mov	r1, r5
   e05ec:	4620      	mov	r0, r4
}
   e05ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   e05f2:	f7fc ba81 	b.w	dcaf8 <HAL_GPIO_Write>
}
   e05f6:	bd38      	pop	{r3, r4, r5, pc}

000e05f8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   e05f8:	b510      	push	{r4, lr}
   e05fa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e05fc:	f7fc fa74 	bl	dcae8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   e0600:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   e0602:	b2db      	uxtb	r3, r3
   e0604:	2b01      	cmp	r3, #1
   e0606:	d908      	bls.n	e061a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   e0608:	4620      	mov	r0, r4
   e060a:	f7ff ff8d 	bl	e0528 <pinAvailable>
   e060e:	b120      	cbz	r0, e061a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e0610:	4620      	mov	r0, r4
}
   e0612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   e0616:	f7fc ba77 	b.w	dcb08 <HAL_GPIO_Read>
}
   e061a:	2000      	movs	r0, #0
   e061c:	bd10      	pop	{r4, pc}

000e061e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   e061e:	280d      	cmp	r0, #13
{
   e0620:	b510      	push	{r4, lr}
   e0622:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   e0624:	bf9c      	itt	ls
   e0626:	340e      	addls	r4, #14
   e0628:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e062a:	4620      	mov	r0, r4
   e062c:	f7ff ff7c 	bl	e0528 <pinAvailable>
   e0630:	b150      	cbz	r0, e0648 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   e0632:	2103      	movs	r1, #3
   e0634:	4620      	mov	r0, r4
   e0636:	f7fc fa47 	bl	dcac8 <HAL_Validate_Pin_Function>
   e063a:	2803      	cmp	r0, #3
   e063c:	d104      	bne.n	e0648 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   e063e:	4620      	mov	r0, r4
}
   e0640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   e0644:	f7fc ba68 	b.w	dcb18 <hal_adc_read>
}
   e0648:	2000      	movs	r0, #0
   e064a:	bd10      	pop	{r4, pc}

000e064c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e064c:	4770      	bx	lr

000e064e <__tcf_1>:
   e064e:	4770      	bx	lr

000e0650 <_Z17acquireWireBufferv>:
{
   e0650:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   e0652:	2300      	movs	r3, #0
   e0654:	2520      	movs	r5, #32
   e0656:	8043      	strh	r3, [r0, #2]
   e0658:	2314      	movs	r3, #20
{
   e065a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   e065c:	8003      	strh	r3, [r0, #0]
   e065e:	6085      	str	r5, [r0, #8]
   e0660:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e0662:	4906      	ldr	r1, [pc, #24]	; (e067c <_Z17acquireWireBufferv+0x2c>)
   e0664:	4628      	mov	r0, r5
   e0666:	f000 f8a3 	bl	e07b0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e066a:	4904      	ldr	r1, [pc, #16]	; (e067c <_Z17acquireWireBufferv+0x2c>)
	};
   e066c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e066e:	4628      	mov	r0, r5
   e0670:	f000 f89e 	bl	e07b0 <_ZnajRKSt9nothrow_t>
	};
   e0674:	60e0      	str	r0, [r4, #12]
}
   e0676:	4620      	mov	r0, r4
   e0678:	bd38      	pop	{r3, r4, r5, pc}
   e067a:	bf00      	nop
   e067c:	000e4b18 	.word	0x000e4b18

000e0680 <_Z18acquireWire1Bufferv>:
   e0680:	b538      	push	{r3, r4, r5, lr}
   e0682:	2300      	movs	r3, #0
   e0684:	2520      	movs	r5, #32
   e0686:	8043      	strh	r3, [r0, #2]
   e0688:	2314      	movs	r3, #20
   e068a:	4604      	mov	r4, r0
   e068c:	8003      	strh	r3, [r0, #0]
   e068e:	6085      	str	r5, [r0, #8]
   e0690:	6105      	str	r5, [r0, #16]
   e0692:	4906      	ldr	r1, [pc, #24]	; (e06ac <_Z18acquireWire1Bufferv+0x2c>)
   e0694:	4628      	mov	r0, r5
   e0696:	f000 f88b 	bl	e07b0 <_ZnajRKSt9nothrow_t>
   e069a:	4904      	ldr	r1, [pc, #16]	; (e06ac <_Z18acquireWire1Bufferv+0x2c>)
   e069c:	6060      	str	r0, [r4, #4]
   e069e:	4628      	mov	r0, r5
   e06a0:	f000 f886 	bl	e07b0 <_ZnajRKSt9nothrow_t>
   e06a4:	60e0      	str	r0, [r4, #12]
   e06a6:	4620      	mov	r0, r4
   e06a8:	bd38      	pop	{r3, r4, r5, pc}
   e06aa:	bf00      	nop
   e06ac:	000e4b18 	.word	0x000e4b18

000e06b0 <_Z19__fetch_global_Wirev>:
{
   e06b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e06b2:	4d0e      	ldr	r5, [pc, #56]	; (e06ec <_Z19__fetch_global_Wirev+0x3c>)
   e06b4:	7829      	ldrb	r1, [r5, #0]
   e06b6:	f3bf 8f5b 	dmb	ish
   e06ba:	f011 0401 	ands.w	r4, r1, #1
{
   e06be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e06c0:	d111      	bne.n	e06e6 <_Z19__fetch_global_Wirev+0x36>
   e06c2:	4628      	mov	r0, r5
   e06c4:	f7f3 fcfa 	bl	d40bc <__cxa_guard_acquire>
   e06c8:	b168      	cbz	r0, e06e6 <_Z19__fetch_global_Wirev+0x36>
   e06ca:	a801      	add	r0, sp, #4
   e06cc:	f7ff ffc0 	bl	e0650 <_Z17acquireWireBufferv>
   e06d0:	aa01      	add	r2, sp, #4
   e06d2:	4621      	mov	r1, r4
   e06d4:	4806      	ldr	r0, [pc, #24]	; (e06f0 <_Z19__fetch_global_Wirev+0x40>)
   e06d6:	f7fd faf5 	bl	ddcc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e06da:	4628      	mov	r0, r5
   e06dc:	f7f3 fcf3 	bl	d40c6 <__cxa_guard_release>
   e06e0:	4804      	ldr	r0, [pc, #16]	; (e06f4 <_Z19__fetch_global_Wirev+0x44>)
   e06e2:	f000 ffc9 	bl	e1678 <atexit>
	return wire;
}
   e06e6:	4802      	ldr	r0, [pc, #8]	; (e06f0 <_Z19__fetch_global_Wirev+0x40>)
   e06e8:	b007      	add	sp, #28
   e06ea:	bd30      	pop	{r4, r5, pc}
   e06ec:	2003e720 	.word	0x2003e720
   e06f0:	2003e728 	.word	0x2003e728
   e06f4:	000e064d 	.word	0x000e064d

000e06f8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   e06f8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   e06fa:	4c0e      	ldr	r4, [pc, #56]	; (e0734 <_Z20__fetch_global_Wire1v+0x3c>)
   e06fc:	7823      	ldrb	r3, [r4, #0]
   e06fe:	f3bf 8f5b 	dmb	ish
   e0702:	07db      	lsls	r3, r3, #31
{
   e0704:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   e0706:	d411      	bmi.n	e072c <_Z20__fetch_global_Wire1v+0x34>
   e0708:	4620      	mov	r0, r4
   e070a:	f7f3 fcd7 	bl	d40bc <__cxa_guard_acquire>
   e070e:	b168      	cbz	r0, e072c <_Z20__fetch_global_Wire1v+0x34>
   e0710:	a801      	add	r0, sp, #4
   e0712:	f7ff ffb5 	bl	e0680 <_Z18acquireWire1Bufferv>
   e0716:	aa01      	add	r2, sp, #4
   e0718:	2101      	movs	r1, #1
   e071a:	4807      	ldr	r0, [pc, #28]	; (e0738 <_Z20__fetch_global_Wire1v+0x40>)
   e071c:	f7fd fad2 	bl	ddcc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e0720:	4620      	mov	r0, r4
   e0722:	f7f3 fcd0 	bl	d40c6 <__cxa_guard_release>
   e0726:	4805      	ldr	r0, [pc, #20]	; (e073c <_Z20__fetch_global_Wire1v+0x44>)
   e0728:	f000 ffa6 	bl	e1678 <atexit>
	return wire;
}
   e072c:	4802      	ldr	r0, [pc, #8]	; (e0738 <_Z20__fetch_global_Wire1v+0x40>)
   e072e:	b006      	add	sp, #24
   e0730:	bd10      	pop	{r4, pc}
   e0732:	bf00      	nop
   e0734:	2003e724 	.word	0x2003e724
   e0738:	2003e73c 	.word	0x2003e73c
   e073c:	000e064f 	.word	0x000e064f

000e0740 <_ZdlPvj>:
   e0740:	f7f3 bcad 	b.w	d409e <_ZdlPv>

000e0744 <_ZSt11_Hash_bytesPKvjj>:
   e0744:	4b18      	ldr	r3, [pc, #96]	; (e07a8 <_ZSt11_Hash_bytesPKvjj+0x64>)
   e0746:	b570      	push	{r4, r5, r6, lr}
   e0748:	404a      	eors	r2, r1
   e074a:	460d      	mov	r5, r1
   e074c:	1846      	adds	r6, r0, r1
   e074e:	2d03      	cmp	r5, #3
   e0750:	eba6 0405 	sub.w	r4, r6, r5
   e0754:	d908      	bls.n	e0768 <_ZSt11_Hash_bytesPKvjj+0x24>
   e0756:	6824      	ldr	r4, [r4, #0]
   e0758:	435c      	muls	r4, r3
   e075a:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
   e075e:	435a      	muls	r2, r3
   e0760:	435c      	muls	r4, r3
   e0762:	4062      	eors	r2, r4
   e0764:	3d04      	subs	r5, #4
   e0766:	e7f2      	b.n	e074e <_ZSt11_Hash_bytesPKvjj+0xa>
   e0768:	088d      	lsrs	r5, r1, #2
   e076a:	f06f 0403 	mvn.w	r4, #3
   e076e:	fb04 1105 	mla	r1, r4, r5, r1
   e0772:	2902      	cmp	r1, #2
   e0774:	eb00 0485 	add.w	r4, r0, r5, lsl #2
   e0778:	d011      	beq.n	e079e <_ZSt11_Hash_bytesPKvjj+0x5a>
   e077a:	2903      	cmp	r1, #3
   e077c:	d00c      	beq.n	e0798 <_ZSt11_Hash_bytesPKvjj+0x54>
   e077e:	2901      	cmp	r1, #1
   e0780:	d103      	bne.n	e078a <_ZSt11_Hash_bytesPKvjj+0x46>
   e0782:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
   e0786:	4042      	eors	r2, r0
   e0788:	435a      	muls	r2, r3
   e078a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
   e078e:	fb03 f002 	mul.w	r0, r3, r2
   e0792:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
   e0796:	bd70      	pop	{r4, r5, r6, pc}
   e0798:	78a1      	ldrb	r1, [r4, #2]
   e079a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
   e079e:	7861      	ldrb	r1, [r4, #1]
   e07a0:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
   e07a4:	e7ed      	b.n	e0782 <_ZSt11_Hash_bytesPKvjj+0x3e>
   e07a6:	bf00      	nop
   e07a8:	5bd1e995 	.word	0x5bd1e995

000e07ac <_ZnwjRKSt9nothrow_t>:
   e07ac:	f7f3 bc73 	b.w	d4096 <_Znwj>

000e07b0 <_ZnajRKSt9nothrow_t>:
   e07b0:	f7f3 bc73 	b.w	d409a <_Znaj>

000e07b4 <_ZSt17__throw_bad_allocv>:
   e07b4:	b508      	push	{r3, lr}
   e07b6:	f7fc fcd7 	bl	dd168 <abort>

000e07ba <_ZSt20__throw_length_errorPKc>:
   e07ba:	b508      	push	{r3, lr}
   e07bc:	f7fc fcd4 	bl	dd168 <abort>

000e07c0 <_ZSt25__throw_bad_function_callv>:
   e07c0:	b508      	push	{r3, lr}
   e07c2:	f7fc fcd1 	bl	dd168 <abort>
	...

000e07c8 <floor>:
   e07c8:	ec51 0b10 	vmov	r0, r1, d0
   e07cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e07ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e07d2:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   e07d6:	2d13      	cmp	r5, #19
   e07d8:	ee10 6a10 	vmov	r6, s0
   e07dc:	460c      	mov	r4, r1
   e07de:	dc20      	bgt.n	e0822 <floor+0x5a>
   e07e0:	2d00      	cmp	r5, #0
   e07e2:	db3d      	blt.n	e0860 <floor+0x98>
   e07e4:	4f38      	ldr	r7, [pc, #224]	; (e08c8 <floor+0x100>)
   e07e6:	412f      	asrs	r7, r5
   e07e8:	ea01 0307 	and.w	r3, r1, r7
   e07ec:	4303      	orrs	r3, r0
   e07ee:	d01d      	beq.n	e082c <floor+0x64>
   e07f0:	a333      	add	r3, pc, #204	; (adr r3, e08c0 <floor+0xf8>)
   e07f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e07f6:	f000 f9fd 	bl	e0bf4 <__adddf3>
   e07fa:	2200      	movs	r2, #0
   e07fc:	2300      	movs	r3, #0
   e07fe:	f000 fe3f 	bl	e1480 <__aeabi_dcmpgt>
   e0802:	b148      	cbz	r0, e0818 <floor+0x50>
   e0804:	2c00      	cmp	r4, #0
   e0806:	da04      	bge.n	e0812 <floor+0x4a>
   e0808:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   e080c:	fa43 f505 	asr.w	r5, r3, r5
   e0810:	442c      	add	r4, r5
   e0812:	ea24 0407 	bic.w	r4, r4, r7
   e0816:	2600      	movs	r6, #0
   e0818:	4623      	mov	r3, r4
   e081a:	4632      	mov	r2, r6
   e081c:	ec43 2b10 	vmov	d0, r2, r3
   e0820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0822:	2d33      	cmp	r5, #51	; 0x33
   e0824:	dd05      	ble.n	e0832 <floor+0x6a>
   e0826:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   e082a:	d029      	beq.n	e0880 <floor+0xb8>
   e082c:	ec41 0b10 	vmov	d0, r0, r1
   e0830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0832:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   e0836:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   e083a:	40df      	lsrs	r7, r3
   e083c:	4207      	tst	r7, r0
   e083e:	d0f5      	beq.n	e082c <floor+0x64>
   e0840:	a31f      	add	r3, pc, #124	; (adr r3, e08c0 <floor+0xf8>)
   e0842:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0846:	f000 f9d5 	bl	e0bf4 <__adddf3>
   e084a:	2200      	movs	r2, #0
   e084c:	2300      	movs	r3, #0
   e084e:	f000 fe17 	bl	e1480 <__aeabi_dcmpgt>
   e0852:	2800      	cmp	r0, #0
   e0854:	d0e0      	beq.n	e0818 <floor+0x50>
   e0856:	2c00      	cmp	r4, #0
   e0858:	db23      	blt.n	e08a2 <floor+0xda>
   e085a:	ea26 0607 	bic.w	r6, r6, r7
   e085e:	e7db      	b.n	e0818 <floor+0x50>
   e0860:	a317      	add	r3, pc, #92	; (adr r3, e08c0 <floor+0xf8>)
   e0862:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0866:	f000 f9c5 	bl	e0bf4 <__adddf3>
   e086a:	2200      	movs	r2, #0
   e086c:	2300      	movs	r3, #0
   e086e:	f000 fe07 	bl	e1480 <__aeabi_dcmpgt>
   e0872:	2800      	cmp	r0, #0
   e0874:	d0d0      	beq.n	e0818 <floor+0x50>
   e0876:	2c00      	cmp	r4, #0
   e0878:	db0a      	blt.n	e0890 <floor+0xc8>
   e087a:	2600      	movs	r6, #0
   e087c:	4634      	mov	r4, r6
   e087e:	e7cb      	b.n	e0818 <floor+0x50>
   e0880:	ee10 2a10 	vmov	r2, s0
   e0884:	460b      	mov	r3, r1
   e0886:	f000 f9b5 	bl	e0bf4 <__adddf3>
   e088a:	ec41 0b10 	vmov	d0, r0, r1
   e088e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0890:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   e0894:	4a0d      	ldr	r2, [pc, #52]	; (e08cc <floor+0x104>)
   e0896:	431e      	orrs	r6, r3
   e0898:	2e00      	cmp	r6, #0
   e089a:	bf18      	it	ne
   e089c:	4614      	movne	r4, r2
   e089e:	2600      	movs	r6, #0
   e08a0:	e7ba      	b.n	e0818 <floor+0x50>
   e08a2:	2d14      	cmp	r5, #20
   e08a4:	d008      	beq.n	e08b8 <floor+0xf0>
   e08a6:	2301      	movs	r3, #1
   e08a8:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   e08ac:	fa03 f505 	lsl.w	r5, r3, r5
   e08b0:	19ae      	adds	r6, r5, r6
   e08b2:	bf28      	it	cs
   e08b4:	18e4      	addcs	r4, r4, r3
   e08b6:	e7d0      	b.n	e085a <floor+0x92>
   e08b8:	3401      	adds	r4, #1
   e08ba:	e7ce      	b.n	e085a <floor+0x92>
   e08bc:	f3af 8000 	nop.w
   e08c0:	8800759c 	.word	0x8800759c
   e08c4:	7e37e43c 	.word	0x7e37e43c
   e08c8:	000fffff 	.word	0x000fffff
   e08cc:	bff00000 	.word	0xbff00000

000e08d0 <logf>:
   e08d0:	b510      	push	{r4, lr}
   e08d2:	ed2d 8b02 	vpush	{d8}
   e08d6:	b08a      	sub	sp, #40	; 0x28
   e08d8:	eeb0 8a40 	vmov.f32	s16, s0
   e08dc:	f000 f87a 	bl	e09d4 <__ieee754_logf>
   e08e0:	4b37      	ldr	r3, [pc, #220]	; (e09c0 <logf+0xf0>)
   e08e2:	f993 4000 	ldrsb.w	r4, [r3]
   e08e6:	1c63      	adds	r3, r4, #1
   e08e8:	d033      	beq.n	e0952 <logf+0x82>
   e08ea:	eeb4 8a48 	vcmp.f32	s16, s16
   e08ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e08f2:	d62e      	bvs.n	e0952 <logf+0x82>
   e08f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   e08f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e08fc:	dc29      	bgt.n	e0952 <logf+0x82>
   e08fe:	4b31      	ldr	r3, [pc, #196]	; (e09c4 <logf+0xf4>)
   e0900:	9301      	str	r3, [sp, #4]
   e0902:	ee18 0a10 	vmov	r0, s16
   e0906:	2300      	movs	r3, #0
   e0908:	9308      	str	r3, [sp, #32]
   e090a:	f000 fad1 	bl	e0eb0 <__aeabi_f2d>
   e090e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e0912:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e0916:	b304      	cbz	r4, e095a <logf+0x8a>
   e0918:	4b2b      	ldr	r3, [pc, #172]	; (e09c8 <logf+0xf8>)
   e091a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   e091e:	2200      	movs	r2, #0
   e0920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e0924:	e9cd 2306 	strd	r2, r3, [sp, #24]
   e0928:	d141      	bne.n	e09ae <logf+0xde>
   e092a:	2302      	movs	r3, #2
   e092c:	429c      	cmp	r4, r3
   e092e:	9300      	str	r3, [sp, #0]
   e0930:	d137      	bne.n	e09a2 <logf+0xd2>
   e0932:	f7fc fc29 	bl	dd188 <__errno>
   e0936:	2322      	movs	r3, #34	; 0x22
   e0938:	6003      	str	r3, [r0, #0]
   e093a:	9b08      	ldr	r3, [sp, #32]
   e093c:	b32b      	cbz	r3, e098a <logf+0xba>
   e093e:	f7fc fc23 	bl	dd188 <__errno>
   e0942:	9b08      	ldr	r3, [sp, #32]
   e0944:	6003      	str	r3, [r0, #0]
   e0946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e094a:	f000 fe01 	bl	e1550 <__aeabi_d2f>
   e094e:	ee00 0a10 	vmov	s0, r0
   e0952:	b00a      	add	sp, #40	; 0x28
   e0954:	ecbd 8b02 	vpop	{d8}
   e0958:	bd10      	pop	{r4, pc}
   e095a:	4b1c      	ldr	r3, [pc, #112]	; (e09cc <logf+0xfc>)
   e095c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   e0960:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   e0964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e0968:	e9cd 2306 	strd	r2, r3, [sp, #24]
   e096c:	d017      	beq.n	e099e <logf+0xce>
   e096e:	2301      	movs	r3, #1
   e0970:	9300      	str	r3, [sp, #0]
   e0972:	4668      	mov	r0, sp
   e0974:	f000 f92e 	bl	e0bd4 <matherr>
   e0978:	b1e8      	cbz	r0, e09b6 <logf+0xe6>
   e097a:	4815      	ldr	r0, [pc, #84]	; (e09d0 <logf+0x100>)
   e097c:	f000 f92c 	bl	e0bd8 <nan>
   e0980:	ed8d 0b06 	vstr	d0, [sp, #24]
   e0984:	9b08      	ldr	r3, [sp, #32]
   e0986:	2b00      	cmp	r3, #0
   e0988:	d1d9      	bne.n	e093e <logf+0x6e>
   e098a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e098e:	f000 fddf 	bl	e1550 <__aeabi_d2f>
   e0992:	ee00 0a10 	vmov	s0, r0
   e0996:	b00a      	add	sp, #40	; 0x28
   e0998:	ecbd 8b02 	vpop	{d8}
   e099c:	bd10      	pop	{r4, pc}
   e099e:	2302      	movs	r3, #2
   e09a0:	9300      	str	r3, [sp, #0]
   e09a2:	4668      	mov	r0, sp
   e09a4:	f000 f916 	bl	e0bd4 <matherr>
   e09a8:	2800      	cmp	r0, #0
   e09aa:	d1eb      	bne.n	e0984 <logf+0xb4>
   e09ac:	e7c1      	b.n	e0932 <logf+0x62>
   e09ae:	2301      	movs	r3, #1
   e09b0:	2c02      	cmp	r4, #2
   e09b2:	9300      	str	r3, [sp, #0]
   e09b4:	d1dd      	bne.n	e0972 <logf+0xa2>
   e09b6:	f7fc fbe7 	bl	dd188 <__errno>
   e09ba:	2321      	movs	r3, #33	; 0x21
   e09bc:	6003      	str	r3, [r0, #0]
   e09be:	e7dc      	b.n	e097a <logf+0xaa>
   e09c0:	2003e1cc 	.word	0x2003e1cc
   e09c4:	000e4b1c 	.word	0x000e4b1c
   e09c8:	fff00000 	.word	0xfff00000
   e09cc:	c7efffff 	.word	0xc7efffff
   e09d0:	000e4b20 	.word	0x000e4b20

000e09d4 <__ieee754_logf>:
   e09d4:	ee10 3a10 	vmov	r3, s0
   e09d8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   e09dc:	d02d      	beq.n	e0a3a <__ieee754_logf+0x66>
   e09de:	2b00      	cmp	r3, #0
   e09e0:	db32      	blt.n	e0a48 <__ieee754_logf+0x74>
   e09e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   e09e6:	da3f      	bge.n	e0a68 <__ieee754_logf+0x94>
   e09e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   e09ec:	b430      	push	{r4, r5}
   e09ee:	db32      	blt.n	e0a56 <__ieee754_logf+0x82>
   e09f0:	2500      	movs	r5, #0
   e09f2:	4868      	ldr	r0, [pc, #416]	; (e0b94 <__ieee754_logf+0x1c0>)
   e09f4:	4c68      	ldr	r4, [pc, #416]	; (e0b98 <__ieee754_logf+0x1c4>)
   e09f6:	f3c3 0116 	ubfx	r1, r3, #0, #23
   e09fa:	4408      	add	r0, r1
   e09fc:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   e0a00:	15db      	asrs	r3, r3, #23
   e0a02:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   e0a06:	3b7f      	subs	r3, #127	; 0x7f
   e0a08:	430a      	orrs	r2, r1
   e0a0a:	442b      	add	r3, r5
   e0a0c:	ee00 2a10 	vmov	s0, r2
   e0a10:	f101 050f 	add.w	r5, r1, #15
   e0a14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   e0a18:	402c      	ands	r4, r5
   e0a1a:	ee30 0a67 	vsub.f32	s0, s0, s15
   e0a1e:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   e0a22:	bb24      	cbnz	r4, e0a6e <__ieee754_logf+0x9a>
   e0a24:	eeb5 0a40 	vcmp.f32	s0, #0.0
   e0a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e0a2c:	d161      	bne.n	e0af2 <__ieee754_logf+0x11e>
   e0a2e:	2b00      	cmp	r3, #0
   e0a30:	f040 8093 	bne.w	e0b5a <__ieee754_logf+0x186>
   e0a34:	ed9f 0a59 	vldr	s0, [pc, #356]	; e0b9c <__ieee754_logf+0x1c8>
   e0a38:	e059      	b.n	e0aee <__ieee754_logf+0x11a>
   e0a3a:	ed9f 7a59 	vldr	s14, [pc, #356]	; e0ba0 <__ieee754_logf+0x1cc>
   e0a3e:	eddf 7a57 	vldr	s15, [pc, #348]	; e0b9c <__ieee754_logf+0x1c8>
   e0a42:	ee87 0a27 	vdiv.f32	s0, s14, s15
   e0a46:	4770      	bx	lr
   e0a48:	ee70 7a40 	vsub.f32	s15, s0, s0
   e0a4c:	ed9f 7a53 	vldr	s14, [pc, #332]	; e0b9c <__ieee754_logf+0x1c8>
   e0a50:	ee87 0a87 	vdiv.f32	s0, s15, s14
   e0a54:	4770      	bx	lr
   e0a56:	eddf 7a53 	vldr	s15, [pc, #332]	; e0ba4 <__ieee754_logf+0x1d0>
   e0a5a:	ee60 7a27 	vmul.f32	s15, s0, s15
   e0a5e:	f06f 0518 	mvn.w	r5, #24
   e0a62:	ee17 3a90 	vmov	r3, s15
   e0a66:	e7c4      	b.n	e09f2 <__ieee754_logf+0x1e>
   e0a68:	ee30 0a00 	vadd.f32	s0, s0, s0
   e0a6c:	4770      	bx	lr
   e0a6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   e0a72:	ee30 7a07 	vadd.f32	s14, s0, s14
   e0a76:	ed9f 3a4c 	vldr	s6, [pc, #304]	; e0ba8 <__ieee754_logf+0x1d4>
   e0a7a:	eddf 4a4c 	vldr	s9, [pc, #304]	; e0bac <__ieee754_logf+0x1d8>
   e0a7e:	eddf 5a4c 	vldr	s11, [pc, #304]	; e0bb0 <__ieee754_logf+0x1dc>
   e0a82:	eddf 3a4c 	vldr	s7, [pc, #304]	; e0bb4 <__ieee754_logf+0x1e0>
   e0a86:	ed9f 5a4c 	vldr	s10, [pc, #304]	; e0bb8 <__ieee754_logf+0x1e4>
   e0a8a:	eddf 7a4c 	vldr	s15, [pc, #304]	; e0bbc <__ieee754_logf+0x1e8>
   e0a8e:	eddf 6a4c 	vldr	s13, [pc, #304]	; e0bc0 <__ieee754_logf+0x1ec>
   e0a92:	484c      	ldr	r0, [pc, #304]	; (e0bc4 <__ieee754_logf+0x1f0>)
   e0a94:	ee80 4a07 	vdiv.f32	s8, s0, s14
   e0a98:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   e0a9c:	4408      	add	r0, r1
   e0a9e:	f502 7222 	add.w	r2, r2, #648	; 0x288
   e0aa2:	4302      	orrs	r2, r0
   e0aa4:	2a00      	cmp	r2, #0
   e0aa6:	ee07 3a10 	vmov	s14, r3
   e0aaa:	ee24 6a04 	vmul.f32	s12, s8, s8
   e0aae:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   e0ab2:	ee26 7a06 	vmul.f32	s14, s12, s12
   e0ab6:	eee7 4a03 	vfma.f32	s9, s14, s6
   e0aba:	eea7 5a23 	vfma.f32	s10, s14, s7
   e0abe:	eee4 5a87 	vfma.f32	s11, s9, s14
   e0ac2:	eee5 6a07 	vfma.f32	s13, s10, s14
   e0ac6:	eee5 7a87 	vfma.f32	s15, s11, s14
   e0aca:	ee67 7a86 	vmul.f32	s15, s15, s12
   e0ace:	eee6 7a87 	vfma.f32	s15, s13, s14
   e0ad2:	dd2b      	ble.n	e0b2c <__ieee754_logf+0x158>
   e0ad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   e0ad8:	ee20 7a07 	vmul.f32	s14, s0, s14
   e0adc:	ee27 7a00 	vmul.f32	s14, s14, s0
   e0ae0:	bb53      	cbnz	r3, e0b38 <__ieee754_logf+0x164>
   e0ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
   e0ae6:	eea7 7ac4 	vfms.f32	s14, s15, s8
   e0aea:	ee30 0a47 	vsub.f32	s0, s0, s14
   e0aee:	bc30      	pop	{r4, r5}
   e0af0:	4770      	bx	lr
   e0af2:	eddf 7a35 	vldr	s15, [pc, #212]	; e0bc8 <__ieee754_logf+0x1f4>
   e0af6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   e0afa:	eea0 7a67 	vfms.f32	s14, s0, s15
   e0afe:	eef0 7a47 	vmov.f32	s15, s14
   e0b02:	ee20 7a00 	vmul.f32	s14, s0, s0
   e0b06:	ee27 7a27 	vmul.f32	s14, s14, s15
   e0b0a:	2b00      	cmp	r3, #0
   e0b0c:	d0ed      	beq.n	e0aea <__ieee754_logf+0x116>
   e0b0e:	ee07 3a90 	vmov	s15, r3
   e0b12:	ed9f 6a2e 	vldr	s12, [pc, #184]	; e0bcc <__ieee754_logf+0x1f8>
   e0b16:	eddf 6a2e 	vldr	s13, [pc, #184]	; e0bd0 <__ieee754_logf+0x1fc>
   e0b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0b1e:	eea7 7ac6 	vfms.f32	s14, s15, s12
   e0b22:	ee37 0a40 	vsub.f32	s0, s14, s0
   e0b26:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   e0b2a:	e7e0      	b.n	e0aee <__ieee754_logf+0x11a>
   e0b2c:	bb13      	cbnz	r3, e0b74 <__ieee754_logf+0x1a0>
   e0b2e:	ee70 7a67 	vsub.f32	s15, s0, s15
   e0b32:	eea7 0ac4 	vfms.f32	s0, s15, s8
   e0b36:	e7da      	b.n	e0aee <__ieee754_logf+0x11a>
   e0b38:	eddf 6a24 	vldr	s13, [pc, #144]	; e0bcc <__ieee754_logf+0x1f8>
   e0b3c:	ed9f 6a24 	vldr	s12, [pc, #144]	; e0bd0 <__ieee754_logf+0x1fc>
   e0b40:	ee77 7a87 	vadd.f32	s15, s15, s14
   e0b44:	ee62 6aa6 	vmul.f32	s13, s5, s13
   e0b48:	eee7 6a84 	vfma.f32	s13, s15, s8
   e0b4c:	ee37 7a66 	vsub.f32	s14, s14, s13
   e0b50:	ee37 0a40 	vsub.f32	s0, s14, s0
   e0b54:	ee92 0a86 	vfnms.f32	s0, s5, s12
   e0b58:	e7c9      	b.n	e0aee <__ieee754_logf+0x11a>
   e0b5a:	ee07 3a90 	vmov	s15, r3
   e0b5e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; e0bcc <__ieee754_logf+0x1f8>
   e0b62:	ed9f 7a1b 	vldr	s14, [pc, #108]	; e0bd0 <__ieee754_logf+0x1fc>
   e0b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0b6a:	ee27 0a80 	vmul.f32	s0, s15, s0
   e0b6e:	eea7 0a87 	vfma.f32	s0, s15, s14
   e0b72:	e7bc      	b.n	e0aee <__ieee754_logf+0x11a>
   e0b74:	ed9f 7a15 	vldr	s14, [pc, #84]	; e0bcc <__ieee754_logf+0x1f8>
   e0b78:	eddf 6a15 	vldr	s13, [pc, #84]	; e0bd0 <__ieee754_logf+0x1fc>
   e0b7c:	ee70 7a67 	vsub.f32	s15, s0, s15
   e0b80:	ee27 7a62 	vnmul.f32	s14, s14, s5
   e0b84:	eea7 7a84 	vfma.f32	s14, s15, s8
   e0b88:	ee37 0a40 	vsub.f32	s0, s14, s0
   e0b8c:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   e0b90:	e7ad      	b.n	e0aee <__ieee754_logf+0x11a>
   e0b92:	bf00      	nop
   e0b94:	004afb20 	.word	0x004afb20
   e0b98:	007ffff0 	.word	0x007ffff0
   e0b9c:	00000000 	.word	0x00000000
   e0ba0:	cc000000 	.word	0xcc000000
   e0ba4:	4c000000 	.word	0x4c000000
   e0ba8:	3e178897 	.word	0x3e178897
   e0bac:	3e3a3325 	.word	0x3e3a3325
   e0bb0:	3e924925 	.word	0x3e924925
   e0bb4:	3e1cd04f 	.word	0x3e1cd04f
   e0bb8:	3e638e29 	.word	0x3e638e29
   e0bbc:	3f2aaaab 	.word	0x3f2aaaab
   e0bc0:	3ecccccd 	.word	0x3ecccccd
   e0bc4:	ffcf5c30 	.word	0xffcf5c30
   e0bc8:	3eaaaaab 	.word	0x3eaaaaab
   e0bcc:	3717f7d1 	.word	0x3717f7d1
   e0bd0:	3f317180 	.word	0x3f317180

000e0bd4 <matherr>:
   e0bd4:	2000      	movs	r0, #0
   e0bd6:	4770      	bx	lr

000e0bd8 <nan>:
   e0bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; e0be0 <nan+0x8>
   e0bdc:	4770      	bx	lr
   e0bde:	bf00      	nop
   e0be0:	00000000 	.word	0x00000000
   e0be4:	7ff80000 	.word	0x7ff80000

000e0be8 <__aeabi_drsub>:
   e0be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e0bec:	e002      	b.n	e0bf4 <__adddf3>
   e0bee:	bf00      	nop

000e0bf0 <__aeabi_dsub>:
   e0bf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e0bf4 <__adddf3>:
   e0bf4:	b530      	push	{r4, r5, lr}
   e0bf6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e0bfa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e0bfe:	ea94 0f05 	teq	r4, r5
   e0c02:	bf08      	it	eq
   e0c04:	ea90 0f02 	teqeq	r0, r2
   e0c08:	bf1f      	itttt	ne
   e0c0a:	ea54 0c00 	orrsne.w	ip, r4, r0
   e0c0e:	ea55 0c02 	orrsne.w	ip, r5, r2
   e0c12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e0c16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0c1a:	f000 80e2 	beq.w	e0de2 <__adddf3+0x1ee>
   e0c1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e0c22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e0c26:	bfb8      	it	lt
   e0c28:	426d      	neglt	r5, r5
   e0c2a:	dd0c      	ble.n	e0c46 <__adddf3+0x52>
   e0c2c:	442c      	add	r4, r5
   e0c2e:	ea80 0202 	eor.w	r2, r0, r2
   e0c32:	ea81 0303 	eor.w	r3, r1, r3
   e0c36:	ea82 0000 	eor.w	r0, r2, r0
   e0c3a:	ea83 0101 	eor.w	r1, r3, r1
   e0c3e:	ea80 0202 	eor.w	r2, r0, r2
   e0c42:	ea81 0303 	eor.w	r3, r1, r3
   e0c46:	2d36      	cmp	r5, #54	; 0x36
   e0c48:	bf88      	it	hi
   e0c4a:	bd30      	pophi	{r4, r5, pc}
   e0c4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e0c50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e0c54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e0c58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e0c5c:	d002      	beq.n	e0c64 <__adddf3+0x70>
   e0c5e:	4240      	negs	r0, r0
   e0c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e0c64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e0c68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e0c6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e0c70:	d002      	beq.n	e0c78 <__adddf3+0x84>
   e0c72:	4252      	negs	r2, r2
   e0c74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e0c78:	ea94 0f05 	teq	r4, r5
   e0c7c:	f000 80a7 	beq.w	e0dce <__adddf3+0x1da>
   e0c80:	f1a4 0401 	sub.w	r4, r4, #1
   e0c84:	f1d5 0e20 	rsbs	lr, r5, #32
   e0c88:	db0d      	blt.n	e0ca6 <__adddf3+0xb2>
   e0c8a:	fa02 fc0e 	lsl.w	ip, r2, lr
   e0c8e:	fa22 f205 	lsr.w	r2, r2, r5
   e0c92:	1880      	adds	r0, r0, r2
   e0c94:	f141 0100 	adc.w	r1, r1, #0
   e0c98:	fa03 f20e 	lsl.w	r2, r3, lr
   e0c9c:	1880      	adds	r0, r0, r2
   e0c9e:	fa43 f305 	asr.w	r3, r3, r5
   e0ca2:	4159      	adcs	r1, r3
   e0ca4:	e00e      	b.n	e0cc4 <__adddf3+0xd0>
   e0ca6:	f1a5 0520 	sub.w	r5, r5, #32
   e0caa:	f10e 0e20 	add.w	lr, lr, #32
   e0cae:	2a01      	cmp	r2, #1
   e0cb0:	fa03 fc0e 	lsl.w	ip, r3, lr
   e0cb4:	bf28      	it	cs
   e0cb6:	f04c 0c02 	orrcs.w	ip, ip, #2
   e0cba:	fa43 f305 	asr.w	r3, r3, r5
   e0cbe:	18c0      	adds	r0, r0, r3
   e0cc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e0cc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0cc8:	d507      	bpl.n	e0cda <__adddf3+0xe6>
   e0cca:	f04f 0e00 	mov.w	lr, #0
   e0cce:	f1dc 0c00 	rsbs	ip, ip, #0
   e0cd2:	eb7e 0000 	sbcs.w	r0, lr, r0
   e0cd6:	eb6e 0101 	sbc.w	r1, lr, r1
   e0cda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e0cde:	d31b      	bcc.n	e0d18 <__adddf3+0x124>
   e0ce0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e0ce4:	d30c      	bcc.n	e0d00 <__adddf3+0x10c>
   e0ce6:	0849      	lsrs	r1, r1, #1
   e0ce8:	ea5f 0030 	movs.w	r0, r0, rrx
   e0cec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e0cf0:	f104 0401 	add.w	r4, r4, #1
   e0cf4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e0cf8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e0cfc:	f080 809a 	bcs.w	e0e34 <__adddf3+0x240>
   e0d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e0d04:	bf08      	it	eq
   e0d06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e0d0a:	f150 0000 	adcs.w	r0, r0, #0
   e0d0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0d12:	ea41 0105 	orr.w	r1, r1, r5
   e0d16:	bd30      	pop	{r4, r5, pc}
   e0d18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e0d1c:	4140      	adcs	r0, r0
   e0d1e:	eb41 0101 	adc.w	r1, r1, r1
   e0d22:	3c01      	subs	r4, #1
   e0d24:	bf28      	it	cs
   e0d26:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   e0d2a:	d2e9      	bcs.n	e0d00 <__adddf3+0x10c>
   e0d2c:	f091 0f00 	teq	r1, #0
   e0d30:	bf04      	itt	eq
   e0d32:	4601      	moveq	r1, r0
   e0d34:	2000      	moveq	r0, #0
   e0d36:	fab1 f381 	clz	r3, r1
   e0d3a:	bf08      	it	eq
   e0d3c:	3320      	addeq	r3, #32
   e0d3e:	f1a3 030b 	sub.w	r3, r3, #11
   e0d42:	f1b3 0220 	subs.w	r2, r3, #32
   e0d46:	da0c      	bge.n	e0d62 <__adddf3+0x16e>
   e0d48:	320c      	adds	r2, #12
   e0d4a:	dd08      	ble.n	e0d5e <__adddf3+0x16a>
   e0d4c:	f102 0c14 	add.w	ip, r2, #20
   e0d50:	f1c2 020c 	rsb	r2, r2, #12
   e0d54:	fa01 f00c 	lsl.w	r0, r1, ip
   e0d58:	fa21 f102 	lsr.w	r1, r1, r2
   e0d5c:	e00c      	b.n	e0d78 <__adddf3+0x184>
   e0d5e:	f102 0214 	add.w	r2, r2, #20
   e0d62:	bfd8      	it	le
   e0d64:	f1c2 0c20 	rsble	ip, r2, #32
   e0d68:	fa01 f102 	lsl.w	r1, r1, r2
   e0d6c:	fa20 fc0c 	lsr.w	ip, r0, ip
   e0d70:	bfdc      	itt	le
   e0d72:	ea41 010c 	orrle.w	r1, r1, ip
   e0d76:	4090      	lslle	r0, r2
   e0d78:	1ae4      	subs	r4, r4, r3
   e0d7a:	bfa2      	ittt	ge
   e0d7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e0d80:	4329      	orrge	r1, r5
   e0d82:	bd30      	popge	{r4, r5, pc}
   e0d84:	ea6f 0404 	mvn.w	r4, r4
   e0d88:	3c1f      	subs	r4, #31
   e0d8a:	da1c      	bge.n	e0dc6 <__adddf3+0x1d2>
   e0d8c:	340c      	adds	r4, #12
   e0d8e:	dc0e      	bgt.n	e0dae <__adddf3+0x1ba>
   e0d90:	f104 0414 	add.w	r4, r4, #20
   e0d94:	f1c4 0220 	rsb	r2, r4, #32
   e0d98:	fa20 f004 	lsr.w	r0, r0, r4
   e0d9c:	fa01 f302 	lsl.w	r3, r1, r2
   e0da0:	ea40 0003 	orr.w	r0, r0, r3
   e0da4:	fa21 f304 	lsr.w	r3, r1, r4
   e0da8:	ea45 0103 	orr.w	r1, r5, r3
   e0dac:	bd30      	pop	{r4, r5, pc}
   e0dae:	f1c4 040c 	rsb	r4, r4, #12
   e0db2:	f1c4 0220 	rsb	r2, r4, #32
   e0db6:	fa20 f002 	lsr.w	r0, r0, r2
   e0dba:	fa01 f304 	lsl.w	r3, r1, r4
   e0dbe:	ea40 0003 	orr.w	r0, r0, r3
   e0dc2:	4629      	mov	r1, r5
   e0dc4:	bd30      	pop	{r4, r5, pc}
   e0dc6:	fa21 f004 	lsr.w	r0, r1, r4
   e0dca:	4629      	mov	r1, r5
   e0dcc:	bd30      	pop	{r4, r5, pc}
   e0dce:	f094 0f00 	teq	r4, #0
   e0dd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e0dd6:	bf06      	itte	eq
   e0dd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e0ddc:	3401      	addeq	r4, #1
   e0dde:	3d01      	subne	r5, #1
   e0de0:	e74e      	b.n	e0c80 <__adddf3+0x8c>
   e0de2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e0de6:	bf18      	it	ne
   e0de8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0dec:	d029      	beq.n	e0e42 <__adddf3+0x24e>
   e0dee:	ea94 0f05 	teq	r4, r5
   e0df2:	bf08      	it	eq
   e0df4:	ea90 0f02 	teqeq	r0, r2
   e0df8:	d005      	beq.n	e0e06 <__adddf3+0x212>
   e0dfa:	ea54 0c00 	orrs.w	ip, r4, r0
   e0dfe:	bf04      	itt	eq
   e0e00:	4619      	moveq	r1, r3
   e0e02:	4610      	moveq	r0, r2
   e0e04:	bd30      	pop	{r4, r5, pc}
   e0e06:	ea91 0f03 	teq	r1, r3
   e0e0a:	bf1e      	ittt	ne
   e0e0c:	2100      	movne	r1, #0
   e0e0e:	2000      	movne	r0, #0
   e0e10:	bd30      	popne	{r4, r5, pc}
   e0e12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e0e16:	d105      	bne.n	e0e24 <__adddf3+0x230>
   e0e18:	0040      	lsls	r0, r0, #1
   e0e1a:	4149      	adcs	r1, r1
   e0e1c:	bf28      	it	cs
   e0e1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e0e22:	bd30      	pop	{r4, r5, pc}
   e0e24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e0e28:	bf3c      	itt	cc
   e0e2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e0e2e:	bd30      	popcc	{r4, r5, pc}
   e0e30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0e34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e0e38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e0e3c:	f04f 0000 	mov.w	r0, #0
   e0e40:	bd30      	pop	{r4, r5, pc}
   e0e42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e0e46:	bf1a      	itte	ne
   e0e48:	4619      	movne	r1, r3
   e0e4a:	4610      	movne	r0, r2
   e0e4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e0e50:	bf1c      	itt	ne
   e0e52:	460b      	movne	r3, r1
   e0e54:	4602      	movne	r2, r0
   e0e56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e0e5a:	bf06      	itte	eq
   e0e5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e0e60:	ea91 0f03 	teqeq	r1, r3
   e0e64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e0e68:	bd30      	pop	{r4, r5, pc}
   e0e6a:	bf00      	nop

000e0e6c <__aeabi_ui2d>:
   e0e6c:	f090 0f00 	teq	r0, #0
   e0e70:	bf04      	itt	eq
   e0e72:	2100      	moveq	r1, #0
   e0e74:	4770      	bxeq	lr
   e0e76:	b530      	push	{r4, r5, lr}
   e0e78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0e7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0e80:	f04f 0500 	mov.w	r5, #0
   e0e84:	f04f 0100 	mov.w	r1, #0
   e0e88:	e750      	b.n	e0d2c <__adddf3+0x138>
   e0e8a:	bf00      	nop

000e0e8c <__aeabi_i2d>:
   e0e8c:	f090 0f00 	teq	r0, #0
   e0e90:	bf04      	itt	eq
   e0e92:	2100      	moveq	r1, #0
   e0e94:	4770      	bxeq	lr
   e0e96:	b530      	push	{r4, r5, lr}
   e0e98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0e9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0ea0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e0ea4:	bf48      	it	mi
   e0ea6:	4240      	negmi	r0, r0
   e0ea8:	f04f 0100 	mov.w	r1, #0
   e0eac:	e73e      	b.n	e0d2c <__adddf3+0x138>
   e0eae:	bf00      	nop

000e0eb0 <__aeabi_f2d>:
   e0eb0:	0042      	lsls	r2, r0, #1
   e0eb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e0eb6:	ea4f 0131 	mov.w	r1, r1, rrx
   e0eba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e0ebe:	bf1f      	itttt	ne
   e0ec0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e0ec4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e0ec8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e0ecc:	4770      	bxne	lr
   e0ece:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   e0ed2:	bf08      	it	eq
   e0ed4:	4770      	bxeq	lr
   e0ed6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   e0eda:	bf04      	itt	eq
   e0edc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   e0ee0:	4770      	bxeq	lr
   e0ee2:	b530      	push	{r4, r5, lr}
   e0ee4:	f44f 7460 	mov.w	r4, #896	; 0x380
   e0ee8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0eec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e0ef0:	e71c      	b.n	e0d2c <__adddf3+0x138>
   e0ef2:	bf00      	nop

000e0ef4 <__aeabi_ul2d>:
   e0ef4:	ea50 0201 	orrs.w	r2, r0, r1
   e0ef8:	bf08      	it	eq
   e0efa:	4770      	bxeq	lr
   e0efc:	b530      	push	{r4, r5, lr}
   e0efe:	f04f 0500 	mov.w	r5, #0
   e0f02:	e00a      	b.n	e0f1a <__aeabi_l2d+0x16>

000e0f04 <__aeabi_l2d>:
   e0f04:	ea50 0201 	orrs.w	r2, r0, r1
   e0f08:	bf08      	it	eq
   e0f0a:	4770      	bxeq	lr
   e0f0c:	b530      	push	{r4, r5, lr}
   e0f0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e0f12:	d502      	bpl.n	e0f1a <__aeabi_l2d+0x16>
   e0f14:	4240      	negs	r0, r0
   e0f16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e0f1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0f1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0f22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e0f26:	f43f aed8 	beq.w	e0cda <__adddf3+0xe6>
   e0f2a:	f04f 0203 	mov.w	r2, #3
   e0f2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0f32:	bf18      	it	ne
   e0f34:	3203      	addne	r2, #3
   e0f36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0f3a:	bf18      	it	ne
   e0f3c:	3203      	addne	r2, #3
   e0f3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e0f42:	f1c2 0320 	rsb	r3, r2, #32
   e0f46:	fa00 fc03 	lsl.w	ip, r0, r3
   e0f4a:	fa20 f002 	lsr.w	r0, r0, r2
   e0f4e:	fa01 fe03 	lsl.w	lr, r1, r3
   e0f52:	ea40 000e 	orr.w	r0, r0, lr
   e0f56:	fa21 f102 	lsr.w	r1, r1, r2
   e0f5a:	4414      	add	r4, r2
   e0f5c:	e6bd      	b.n	e0cda <__adddf3+0xe6>
   e0f5e:	bf00      	nop

000e0f60 <__aeabi_dmul>:
   e0f60:	b570      	push	{r4, r5, r6, lr}
   e0f62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e0f66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e0f6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e0f6e:	bf1d      	ittte	ne
   e0f70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e0f74:	ea94 0f0c 	teqne	r4, ip
   e0f78:	ea95 0f0c 	teqne	r5, ip
   e0f7c:	f000 f8de 	bleq	e113c <__aeabi_dmul+0x1dc>
   e0f80:	442c      	add	r4, r5
   e0f82:	ea81 0603 	eor.w	r6, r1, r3
   e0f86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e0f8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e0f8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e0f92:	bf18      	it	ne
   e0f94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e0f98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e0fa0:	d038      	beq.n	e1014 <__aeabi_dmul+0xb4>
   e0fa2:	fba0 ce02 	umull	ip, lr, r0, r2
   e0fa6:	f04f 0500 	mov.w	r5, #0
   e0faa:	fbe1 e502 	umlal	lr, r5, r1, r2
   e0fae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e0fb2:	fbe0 e503 	umlal	lr, r5, r0, r3
   e0fb6:	f04f 0600 	mov.w	r6, #0
   e0fba:	fbe1 5603 	umlal	r5, r6, r1, r3
   e0fbe:	f09c 0f00 	teq	ip, #0
   e0fc2:	bf18      	it	ne
   e0fc4:	f04e 0e01 	orrne.w	lr, lr, #1
   e0fc8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e0fcc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e0fd0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e0fd4:	d204      	bcs.n	e0fe0 <__aeabi_dmul+0x80>
   e0fd6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e0fda:	416d      	adcs	r5, r5
   e0fdc:	eb46 0606 	adc.w	r6, r6, r6
   e0fe0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e0fe4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e0fe8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e0fec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e0ff0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e0ff4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e0ff8:	bf88      	it	hi
   e0ffa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e0ffe:	d81e      	bhi.n	e103e <__aeabi_dmul+0xde>
   e1000:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e1004:	bf08      	it	eq
   e1006:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e100a:	f150 0000 	adcs.w	r0, r0, #0
   e100e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1012:	bd70      	pop	{r4, r5, r6, pc}
   e1014:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e1018:	ea46 0101 	orr.w	r1, r6, r1
   e101c:	ea40 0002 	orr.w	r0, r0, r2
   e1020:	ea81 0103 	eor.w	r1, r1, r3
   e1024:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e1028:	bfc2      	ittt	gt
   e102a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e102e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1032:	bd70      	popgt	{r4, r5, r6, pc}
   e1034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1038:	f04f 0e00 	mov.w	lr, #0
   e103c:	3c01      	subs	r4, #1
   e103e:	f300 80ab 	bgt.w	e1198 <__aeabi_dmul+0x238>
   e1042:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e1046:	bfde      	ittt	le
   e1048:	2000      	movle	r0, #0
   e104a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e104e:	bd70      	pople	{r4, r5, r6, pc}
   e1050:	f1c4 0400 	rsb	r4, r4, #0
   e1054:	3c20      	subs	r4, #32
   e1056:	da35      	bge.n	e10c4 <__aeabi_dmul+0x164>
   e1058:	340c      	adds	r4, #12
   e105a:	dc1b      	bgt.n	e1094 <__aeabi_dmul+0x134>
   e105c:	f104 0414 	add.w	r4, r4, #20
   e1060:	f1c4 0520 	rsb	r5, r4, #32
   e1064:	fa00 f305 	lsl.w	r3, r0, r5
   e1068:	fa20 f004 	lsr.w	r0, r0, r4
   e106c:	fa01 f205 	lsl.w	r2, r1, r5
   e1070:	ea40 0002 	orr.w	r0, r0, r2
   e1074:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e1078:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e107c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1080:	fa21 f604 	lsr.w	r6, r1, r4
   e1084:	eb42 0106 	adc.w	r1, r2, r6
   e1088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e108c:	bf08      	it	eq
   e108e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1092:	bd70      	pop	{r4, r5, r6, pc}
   e1094:	f1c4 040c 	rsb	r4, r4, #12
   e1098:	f1c4 0520 	rsb	r5, r4, #32
   e109c:	fa00 f304 	lsl.w	r3, r0, r4
   e10a0:	fa20 f005 	lsr.w	r0, r0, r5
   e10a4:	fa01 f204 	lsl.w	r2, r1, r4
   e10a8:	ea40 0002 	orr.w	r0, r0, r2
   e10ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e10b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e10b4:	f141 0100 	adc.w	r1, r1, #0
   e10b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e10bc:	bf08      	it	eq
   e10be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e10c2:	bd70      	pop	{r4, r5, r6, pc}
   e10c4:	f1c4 0520 	rsb	r5, r4, #32
   e10c8:	fa00 f205 	lsl.w	r2, r0, r5
   e10cc:	ea4e 0e02 	orr.w	lr, lr, r2
   e10d0:	fa20 f304 	lsr.w	r3, r0, r4
   e10d4:	fa01 f205 	lsl.w	r2, r1, r5
   e10d8:	ea43 0302 	orr.w	r3, r3, r2
   e10dc:	fa21 f004 	lsr.w	r0, r1, r4
   e10e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e10e4:	fa21 f204 	lsr.w	r2, r1, r4
   e10e8:	ea20 0002 	bic.w	r0, r0, r2
   e10ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e10f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e10f4:	bf08      	it	eq
   e10f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e10fa:	bd70      	pop	{r4, r5, r6, pc}
   e10fc:	f094 0f00 	teq	r4, #0
   e1100:	d10f      	bne.n	e1122 <__aeabi_dmul+0x1c2>
   e1102:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e1106:	0040      	lsls	r0, r0, #1
   e1108:	eb41 0101 	adc.w	r1, r1, r1
   e110c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1110:	bf08      	it	eq
   e1112:	3c01      	subeq	r4, #1
   e1114:	d0f7      	beq.n	e1106 <__aeabi_dmul+0x1a6>
   e1116:	ea41 0106 	orr.w	r1, r1, r6
   e111a:	f095 0f00 	teq	r5, #0
   e111e:	bf18      	it	ne
   e1120:	4770      	bxne	lr
   e1122:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e1126:	0052      	lsls	r2, r2, #1
   e1128:	eb43 0303 	adc.w	r3, r3, r3
   e112c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e1130:	bf08      	it	eq
   e1132:	3d01      	subeq	r5, #1
   e1134:	d0f7      	beq.n	e1126 <__aeabi_dmul+0x1c6>
   e1136:	ea43 0306 	orr.w	r3, r3, r6
   e113a:	4770      	bx	lr
   e113c:	ea94 0f0c 	teq	r4, ip
   e1140:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1144:	bf18      	it	ne
   e1146:	ea95 0f0c 	teqne	r5, ip
   e114a:	d00c      	beq.n	e1166 <__aeabi_dmul+0x206>
   e114c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1150:	bf18      	it	ne
   e1152:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1156:	d1d1      	bne.n	e10fc <__aeabi_dmul+0x19c>
   e1158:	ea81 0103 	eor.w	r1, r1, r3
   e115c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1160:	f04f 0000 	mov.w	r0, #0
   e1164:	bd70      	pop	{r4, r5, r6, pc}
   e1166:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e116a:	bf06      	itte	eq
   e116c:	4610      	moveq	r0, r2
   e116e:	4619      	moveq	r1, r3
   e1170:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1174:	d019      	beq.n	e11aa <__aeabi_dmul+0x24a>
   e1176:	ea94 0f0c 	teq	r4, ip
   e117a:	d102      	bne.n	e1182 <__aeabi_dmul+0x222>
   e117c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e1180:	d113      	bne.n	e11aa <__aeabi_dmul+0x24a>
   e1182:	ea95 0f0c 	teq	r5, ip
   e1186:	d105      	bne.n	e1194 <__aeabi_dmul+0x234>
   e1188:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e118c:	bf1c      	itt	ne
   e118e:	4610      	movne	r0, r2
   e1190:	4619      	movne	r1, r3
   e1192:	d10a      	bne.n	e11aa <__aeabi_dmul+0x24a>
   e1194:	ea81 0103 	eor.w	r1, r1, r3
   e1198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e119c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e11a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e11a4:	f04f 0000 	mov.w	r0, #0
   e11a8:	bd70      	pop	{r4, r5, r6, pc}
   e11aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e11ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e11b2:	bd70      	pop	{r4, r5, r6, pc}

000e11b4 <__aeabi_ddiv>:
   e11b4:	b570      	push	{r4, r5, r6, lr}
   e11b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e11ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e11be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e11c2:	bf1d      	ittte	ne
   e11c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e11c8:	ea94 0f0c 	teqne	r4, ip
   e11cc:	ea95 0f0c 	teqne	r5, ip
   e11d0:	f000 f8a7 	bleq	e1322 <__aeabi_ddiv+0x16e>
   e11d4:	eba4 0405 	sub.w	r4, r4, r5
   e11d8:	ea81 0e03 	eor.w	lr, r1, r3
   e11dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e11e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e11e4:	f000 8088 	beq.w	e12f8 <__aeabi_ddiv+0x144>
   e11e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e11ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e11f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e11f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e11f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e11fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e1200:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e1204:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e1208:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e120c:	429d      	cmp	r5, r3
   e120e:	bf08      	it	eq
   e1210:	4296      	cmpeq	r6, r2
   e1212:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e1216:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e121a:	d202      	bcs.n	e1222 <__aeabi_ddiv+0x6e>
   e121c:	085b      	lsrs	r3, r3, #1
   e121e:	ea4f 0232 	mov.w	r2, r2, rrx
   e1222:	1ab6      	subs	r6, r6, r2
   e1224:	eb65 0503 	sbc.w	r5, r5, r3
   e1228:	085b      	lsrs	r3, r3, #1
   e122a:	ea4f 0232 	mov.w	r2, r2, rrx
   e122e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e1232:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e1236:	ebb6 0e02 	subs.w	lr, r6, r2
   e123a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e123e:	bf22      	ittt	cs
   e1240:	1ab6      	subcs	r6, r6, r2
   e1242:	4675      	movcs	r5, lr
   e1244:	ea40 000c 	orrcs.w	r0, r0, ip
   e1248:	085b      	lsrs	r3, r3, #1
   e124a:	ea4f 0232 	mov.w	r2, r2, rrx
   e124e:	ebb6 0e02 	subs.w	lr, r6, r2
   e1252:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1256:	bf22      	ittt	cs
   e1258:	1ab6      	subcs	r6, r6, r2
   e125a:	4675      	movcs	r5, lr
   e125c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e1260:	085b      	lsrs	r3, r3, #1
   e1262:	ea4f 0232 	mov.w	r2, r2, rrx
   e1266:	ebb6 0e02 	subs.w	lr, r6, r2
   e126a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e126e:	bf22      	ittt	cs
   e1270:	1ab6      	subcs	r6, r6, r2
   e1272:	4675      	movcs	r5, lr
   e1274:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e1278:	085b      	lsrs	r3, r3, #1
   e127a:	ea4f 0232 	mov.w	r2, r2, rrx
   e127e:	ebb6 0e02 	subs.w	lr, r6, r2
   e1282:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1286:	bf22      	ittt	cs
   e1288:	1ab6      	subcs	r6, r6, r2
   e128a:	4675      	movcs	r5, lr
   e128c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e1290:	ea55 0e06 	orrs.w	lr, r5, r6
   e1294:	d018      	beq.n	e12c8 <__aeabi_ddiv+0x114>
   e1296:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e129a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e129e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e12a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e12a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e12aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e12ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e12b2:	d1c0      	bne.n	e1236 <__aeabi_ddiv+0x82>
   e12b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e12b8:	d10b      	bne.n	e12d2 <__aeabi_ddiv+0x11e>
   e12ba:	ea41 0100 	orr.w	r1, r1, r0
   e12be:	f04f 0000 	mov.w	r0, #0
   e12c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e12c6:	e7b6      	b.n	e1236 <__aeabi_ddiv+0x82>
   e12c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e12cc:	bf04      	itt	eq
   e12ce:	4301      	orreq	r1, r0
   e12d0:	2000      	moveq	r0, #0
   e12d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e12d6:	bf88      	it	hi
   e12d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e12dc:	f63f aeaf 	bhi.w	e103e <__aeabi_dmul+0xde>
   e12e0:	ebb5 0c03 	subs.w	ip, r5, r3
   e12e4:	bf04      	itt	eq
   e12e6:	ebb6 0c02 	subseq.w	ip, r6, r2
   e12ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e12ee:	f150 0000 	adcs.w	r0, r0, #0
   e12f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e12f6:	bd70      	pop	{r4, r5, r6, pc}
   e12f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e12fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e1300:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e1304:	bfc2      	ittt	gt
   e1306:	ebd4 050c 	rsbsgt	r5, r4, ip
   e130a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e130e:	bd70      	popgt	{r4, r5, r6, pc}
   e1310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1314:	f04f 0e00 	mov.w	lr, #0
   e1318:	3c01      	subs	r4, #1
   e131a:	e690      	b.n	e103e <__aeabi_dmul+0xde>
   e131c:	ea45 0e06 	orr.w	lr, r5, r6
   e1320:	e68d      	b.n	e103e <__aeabi_dmul+0xde>
   e1322:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1326:	ea94 0f0c 	teq	r4, ip
   e132a:	bf08      	it	eq
   e132c:	ea95 0f0c 	teqeq	r5, ip
   e1330:	f43f af3b 	beq.w	e11aa <__aeabi_dmul+0x24a>
   e1334:	ea94 0f0c 	teq	r4, ip
   e1338:	d10a      	bne.n	e1350 <__aeabi_ddiv+0x19c>
   e133a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e133e:	f47f af34 	bne.w	e11aa <__aeabi_dmul+0x24a>
   e1342:	ea95 0f0c 	teq	r5, ip
   e1346:	f47f af25 	bne.w	e1194 <__aeabi_dmul+0x234>
   e134a:	4610      	mov	r0, r2
   e134c:	4619      	mov	r1, r3
   e134e:	e72c      	b.n	e11aa <__aeabi_dmul+0x24a>
   e1350:	ea95 0f0c 	teq	r5, ip
   e1354:	d106      	bne.n	e1364 <__aeabi_ddiv+0x1b0>
   e1356:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e135a:	f43f aefd 	beq.w	e1158 <__aeabi_dmul+0x1f8>
   e135e:	4610      	mov	r0, r2
   e1360:	4619      	mov	r1, r3
   e1362:	e722      	b.n	e11aa <__aeabi_dmul+0x24a>
   e1364:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1368:	bf18      	it	ne
   e136a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e136e:	f47f aec5 	bne.w	e10fc <__aeabi_dmul+0x19c>
   e1372:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e1376:	f47f af0d 	bne.w	e1194 <__aeabi_dmul+0x234>
   e137a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e137e:	f47f aeeb 	bne.w	e1158 <__aeabi_dmul+0x1f8>
   e1382:	e712      	b.n	e11aa <__aeabi_dmul+0x24a>

000e1384 <__gedf2>:
   e1384:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   e1388:	e006      	b.n	e1398 <__cmpdf2+0x4>
   e138a:	bf00      	nop

000e138c <__ledf2>:
   e138c:	f04f 0c01 	mov.w	ip, #1
   e1390:	e002      	b.n	e1398 <__cmpdf2+0x4>
   e1392:	bf00      	nop

000e1394 <__cmpdf2>:
   e1394:	f04f 0c01 	mov.w	ip, #1
   e1398:	f84d cd04 	str.w	ip, [sp, #-4]!
   e139c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e13a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e13a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e13a8:	bf18      	it	ne
   e13aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e13ae:	d01b      	beq.n	e13e8 <__cmpdf2+0x54>
   e13b0:	b001      	add	sp, #4
   e13b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e13b6:	bf0c      	ite	eq
   e13b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e13bc:	ea91 0f03 	teqne	r1, r3
   e13c0:	bf02      	ittt	eq
   e13c2:	ea90 0f02 	teqeq	r0, r2
   e13c6:	2000      	moveq	r0, #0
   e13c8:	4770      	bxeq	lr
   e13ca:	f110 0f00 	cmn.w	r0, #0
   e13ce:	ea91 0f03 	teq	r1, r3
   e13d2:	bf58      	it	pl
   e13d4:	4299      	cmppl	r1, r3
   e13d6:	bf08      	it	eq
   e13d8:	4290      	cmpeq	r0, r2
   e13da:	bf2c      	ite	cs
   e13dc:	17d8      	asrcs	r0, r3, #31
   e13de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e13e2:	f040 0001 	orr.w	r0, r0, #1
   e13e6:	4770      	bx	lr
   e13e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e13ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e13f0:	d102      	bne.n	e13f8 <__cmpdf2+0x64>
   e13f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e13f6:	d107      	bne.n	e1408 <__cmpdf2+0x74>
   e13f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e13fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1400:	d1d6      	bne.n	e13b0 <__cmpdf2+0x1c>
   e1402:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e1406:	d0d3      	beq.n	e13b0 <__cmpdf2+0x1c>
   e1408:	f85d 0b04 	ldr.w	r0, [sp], #4
   e140c:	4770      	bx	lr
   e140e:	bf00      	nop

000e1410 <__aeabi_cdrcmple>:
   e1410:	4684      	mov	ip, r0
   e1412:	4610      	mov	r0, r2
   e1414:	4662      	mov	r2, ip
   e1416:	468c      	mov	ip, r1
   e1418:	4619      	mov	r1, r3
   e141a:	4663      	mov	r3, ip
   e141c:	e000      	b.n	e1420 <__aeabi_cdcmpeq>
   e141e:	bf00      	nop

000e1420 <__aeabi_cdcmpeq>:
   e1420:	b501      	push	{r0, lr}
   e1422:	f7ff ffb7 	bl	e1394 <__cmpdf2>
   e1426:	2800      	cmp	r0, #0
   e1428:	bf48      	it	mi
   e142a:	f110 0f00 	cmnmi.w	r0, #0
   e142e:	bd01      	pop	{r0, pc}

000e1430 <__aeabi_dcmpeq>:
   e1430:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1434:	f7ff fff4 	bl	e1420 <__aeabi_cdcmpeq>
   e1438:	bf0c      	ite	eq
   e143a:	2001      	moveq	r0, #1
   e143c:	2000      	movne	r0, #0
   e143e:	f85d fb08 	ldr.w	pc, [sp], #8
   e1442:	bf00      	nop

000e1444 <__aeabi_dcmplt>:
   e1444:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1448:	f7ff ffea 	bl	e1420 <__aeabi_cdcmpeq>
   e144c:	bf34      	ite	cc
   e144e:	2001      	movcc	r0, #1
   e1450:	2000      	movcs	r0, #0
   e1452:	f85d fb08 	ldr.w	pc, [sp], #8
   e1456:	bf00      	nop

000e1458 <__aeabi_dcmple>:
   e1458:	f84d ed08 	str.w	lr, [sp, #-8]!
   e145c:	f7ff ffe0 	bl	e1420 <__aeabi_cdcmpeq>
   e1460:	bf94      	ite	ls
   e1462:	2001      	movls	r0, #1
   e1464:	2000      	movhi	r0, #0
   e1466:	f85d fb08 	ldr.w	pc, [sp], #8
   e146a:	bf00      	nop

000e146c <__aeabi_dcmpge>:
   e146c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1470:	f7ff ffce 	bl	e1410 <__aeabi_cdrcmple>
   e1474:	bf94      	ite	ls
   e1476:	2001      	movls	r0, #1
   e1478:	2000      	movhi	r0, #0
   e147a:	f85d fb08 	ldr.w	pc, [sp], #8
   e147e:	bf00      	nop

000e1480 <__aeabi_dcmpgt>:
   e1480:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1484:	f7ff ffc4 	bl	e1410 <__aeabi_cdrcmple>
   e1488:	bf34      	ite	cc
   e148a:	2001      	movcc	r0, #1
   e148c:	2000      	movcs	r0, #0
   e148e:	f85d fb08 	ldr.w	pc, [sp], #8
   e1492:	bf00      	nop

000e1494 <__aeabi_dcmpun>:
   e1494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e149c:	d102      	bne.n	e14a4 <__aeabi_dcmpun+0x10>
   e149e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e14a2:	d10a      	bne.n	e14ba <__aeabi_dcmpun+0x26>
   e14a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e14a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e14ac:	d102      	bne.n	e14b4 <__aeabi_dcmpun+0x20>
   e14ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e14b2:	d102      	bne.n	e14ba <__aeabi_dcmpun+0x26>
   e14b4:	f04f 0000 	mov.w	r0, #0
   e14b8:	4770      	bx	lr
   e14ba:	f04f 0001 	mov.w	r0, #1
   e14be:	4770      	bx	lr

000e14c0 <__aeabi_d2iz>:
   e14c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e14c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e14c8:	d215      	bcs.n	e14f6 <__aeabi_d2iz+0x36>
   e14ca:	d511      	bpl.n	e14f0 <__aeabi_d2iz+0x30>
   e14cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e14d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e14d4:	d912      	bls.n	e14fc <__aeabi_d2iz+0x3c>
   e14d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e14da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e14de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e14e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e14e6:	fa23 f002 	lsr.w	r0, r3, r2
   e14ea:	bf18      	it	ne
   e14ec:	4240      	negne	r0, r0
   e14ee:	4770      	bx	lr
   e14f0:	f04f 0000 	mov.w	r0, #0
   e14f4:	4770      	bx	lr
   e14f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e14fa:	d105      	bne.n	e1508 <__aeabi_d2iz+0x48>
   e14fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e1500:	bf08      	it	eq
   e1502:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e1506:	4770      	bx	lr
   e1508:	f04f 0000 	mov.w	r0, #0
   e150c:	4770      	bx	lr
   e150e:	bf00      	nop

000e1510 <__aeabi_d2uiz>:
   e1510:	004a      	lsls	r2, r1, #1
   e1512:	d211      	bcs.n	e1538 <__aeabi_d2uiz+0x28>
   e1514:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1518:	d211      	bcs.n	e153e <__aeabi_d2uiz+0x2e>
   e151a:	d50d      	bpl.n	e1538 <__aeabi_d2uiz+0x28>
   e151c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e1520:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e1524:	d40e      	bmi.n	e1544 <__aeabi_d2uiz+0x34>
   e1526:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e152a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e152e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e1532:	fa23 f002 	lsr.w	r0, r3, r2
   e1536:	4770      	bx	lr
   e1538:	f04f 0000 	mov.w	r0, #0
   e153c:	4770      	bx	lr
   e153e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e1542:	d102      	bne.n	e154a <__aeabi_d2uiz+0x3a>
   e1544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e1548:	4770      	bx	lr
   e154a:	f04f 0000 	mov.w	r0, #0
   e154e:	4770      	bx	lr

000e1550 <__aeabi_d2f>:
   e1550:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e1558:	bf24      	itt	cs
   e155a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e155e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e1562:	d90d      	bls.n	e1580 <__aeabi_d2f+0x30>
   e1564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e1568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e156c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e1570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e1574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e1578:	bf08      	it	eq
   e157a:	f020 0001 	biceq.w	r0, r0, #1
   e157e:	4770      	bx	lr
   e1580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e1584:	d121      	bne.n	e15ca <__aeabi_d2f+0x7a>
   e1586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e158a:	bfbc      	itt	lt
   e158c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e1590:	4770      	bxlt	lr
   e1592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1596:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e159a:	f1c2 0218 	rsb	r2, r2, #24
   e159e:	f1c2 0c20 	rsb	ip, r2, #32
   e15a2:	fa10 f30c 	lsls.w	r3, r0, ip
   e15a6:	fa20 f002 	lsr.w	r0, r0, r2
   e15aa:	bf18      	it	ne
   e15ac:	f040 0001 	orrne.w	r0, r0, #1
   e15b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e15b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e15b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   e15bc:	ea40 000c 	orr.w	r0, r0, ip
   e15c0:	fa23 f302 	lsr.w	r3, r3, r2
   e15c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e15c8:	e7cc      	b.n	e1564 <__aeabi_d2f+0x14>
   e15ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e15ce:	d107      	bne.n	e15e0 <__aeabi_d2f+0x90>
   e15d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e15d4:	bf1e      	ittt	ne
   e15d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e15da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e15de:	4770      	bxne	lr
   e15e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e15e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e15e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e15ec:	4770      	bx	lr
   e15ee:	bf00      	nop

000e15f0 <__aeabi_d2ulz>:
   e15f0:	b5d0      	push	{r4, r6, r7, lr}
   e15f2:	4b0c      	ldr	r3, [pc, #48]	; (e1624 <__aeabi_d2ulz+0x34>)
   e15f4:	2200      	movs	r2, #0
   e15f6:	4606      	mov	r6, r0
   e15f8:	460f      	mov	r7, r1
   e15fa:	f7ff fcb1 	bl	e0f60 <__aeabi_dmul>
   e15fe:	f7ff ff87 	bl	e1510 <__aeabi_d2uiz>
   e1602:	4604      	mov	r4, r0
   e1604:	f7ff fc32 	bl	e0e6c <__aeabi_ui2d>
   e1608:	4b07      	ldr	r3, [pc, #28]	; (e1628 <__aeabi_d2ulz+0x38>)
   e160a:	2200      	movs	r2, #0
   e160c:	f7ff fca8 	bl	e0f60 <__aeabi_dmul>
   e1610:	4602      	mov	r2, r0
   e1612:	460b      	mov	r3, r1
   e1614:	4630      	mov	r0, r6
   e1616:	4639      	mov	r1, r7
   e1618:	f7ff faea 	bl	e0bf0 <__aeabi_dsub>
   e161c:	f7ff ff78 	bl	e1510 <__aeabi_d2uiz>
   e1620:	4621      	mov	r1, r4
   e1622:	bdd0      	pop	{r4, r6, r7, pc}
   e1624:	3df00000 	.word	0x3df00000
   e1628:	41f00000 	.word	0x41f00000

000e162c <asctime_r>:
   e162c:	b510      	push	{r4, lr}
   e162e:	460c      	mov	r4, r1
   e1630:	6941      	ldr	r1, [r0, #20]
   e1632:	6903      	ldr	r3, [r0, #16]
   e1634:	6982      	ldr	r2, [r0, #24]
   e1636:	b086      	sub	sp, #24
   e1638:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e163c:	9104      	str	r1, [sp, #16]
   e163e:	6801      	ldr	r1, [r0, #0]
   e1640:	9103      	str	r1, [sp, #12]
   e1642:	6841      	ldr	r1, [r0, #4]
   e1644:	9102      	str	r1, [sp, #8]
   e1646:	6881      	ldr	r1, [r0, #8]
   e1648:	9101      	str	r1, [sp, #4]
   e164a:	68c1      	ldr	r1, [r0, #12]
   e164c:	9100      	str	r1, [sp, #0]
   e164e:	4907      	ldr	r1, [pc, #28]	; (e166c <asctime_r+0x40>)
   e1650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e1654:	440b      	add	r3, r1
   e1656:	4906      	ldr	r1, [pc, #24]	; (e1670 <asctime_r+0x44>)
   e1658:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e165c:	440a      	add	r2, r1
   e165e:	4620      	mov	r0, r4
   e1660:	4904      	ldr	r1, [pc, #16]	; (e1674 <asctime_r+0x48>)
   e1662:	f7fb fd61 	bl	dd128 <siprintf>
   e1666:	4620      	mov	r0, r4
   e1668:	b006      	add	sp, #24
   e166a:	bd10      	pop	{r4, pc}
   e166c:	000e4b56 	.word	0x000e4b56
   e1670:	000e4b41 	.word	0x000e4b41
   e1674:	000e4b21 	.word	0x000e4b21

000e1678 <atexit>:
   e1678:	2300      	movs	r3, #0
   e167a:	4601      	mov	r1, r0
   e167c:	461a      	mov	r2, r3
   e167e:	4618      	mov	r0, r3
   e1680:	f001 b8ae 	b.w	e27e0 <__register_exitproc>

000e1684 <gmtime>:
   e1684:	b538      	push	{r3, r4, r5, lr}
   e1686:	4b07      	ldr	r3, [pc, #28]	; (e16a4 <gmtime+0x20>)
   e1688:	681d      	ldr	r5, [r3, #0]
   e168a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   e168c:	4604      	mov	r4, r0
   e168e:	b91b      	cbnz	r3, e1698 <gmtime+0x14>
   e1690:	2024      	movs	r0, #36	; 0x24
   e1692:	f7fb fd31 	bl	dd0f8 <malloc>
   e1696:	63e8      	str	r0, [r5, #60]	; 0x3c
   e1698:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   e169a:	4620      	mov	r0, r4
   e169c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e16a0:	f7fb bd92 	b.w	dd1c8 <gmtime_r>
   e16a4:	2003e1d0 	.word	0x2003e1d0

000e16a8 <memcpy>:
   e16a8:	440a      	add	r2, r1
   e16aa:	4291      	cmp	r1, r2
   e16ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   e16b0:	d100      	bne.n	e16b4 <memcpy+0xc>
   e16b2:	4770      	bx	lr
   e16b4:	b510      	push	{r4, lr}
   e16b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   e16ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   e16be:	4291      	cmp	r1, r2
   e16c0:	d1f9      	bne.n	e16b6 <memcpy+0xe>
   e16c2:	bd10      	pop	{r4, pc}

000e16c4 <memmove>:
   e16c4:	4288      	cmp	r0, r1
   e16c6:	b510      	push	{r4, lr}
   e16c8:	eb01 0402 	add.w	r4, r1, r2
   e16cc:	d902      	bls.n	e16d4 <memmove+0x10>
   e16ce:	4284      	cmp	r4, r0
   e16d0:	4623      	mov	r3, r4
   e16d2:	d807      	bhi.n	e16e4 <memmove+0x20>
   e16d4:	1e43      	subs	r3, r0, #1
   e16d6:	42a1      	cmp	r1, r4
   e16d8:	d008      	beq.n	e16ec <memmove+0x28>
   e16da:	f811 2b01 	ldrb.w	r2, [r1], #1
   e16de:	f803 2f01 	strb.w	r2, [r3, #1]!
   e16e2:	e7f8      	b.n	e16d6 <memmove+0x12>
   e16e4:	4402      	add	r2, r0
   e16e6:	4601      	mov	r1, r0
   e16e8:	428a      	cmp	r2, r1
   e16ea:	d100      	bne.n	e16ee <memmove+0x2a>
   e16ec:	bd10      	pop	{r4, pc}
   e16ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e16f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   e16f6:	e7f7      	b.n	e16e8 <memmove+0x24>

000e16f8 <memset>:
   e16f8:	4402      	add	r2, r0
   e16fa:	4603      	mov	r3, r0
   e16fc:	4293      	cmp	r3, r2
   e16fe:	d100      	bne.n	e1702 <memset+0xa>
   e1700:	4770      	bx	lr
   e1702:	f803 1b01 	strb.w	r1, [r3], #1
   e1706:	e7f9      	b.n	e16fc <memset+0x4>

000e1708 <srand>:
   e1708:	b538      	push	{r3, r4, r5, lr}
   e170a:	4b0d      	ldr	r3, [pc, #52]	; (e1740 <srand+0x38>)
   e170c:	681d      	ldr	r5, [r3, #0]
   e170e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e1710:	4604      	mov	r4, r0
   e1712:	b97b      	cbnz	r3, e1734 <srand+0x2c>
   e1714:	2018      	movs	r0, #24
   e1716:	f7fb fcef 	bl	dd0f8 <malloc>
   e171a:	4a0a      	ldr	r2, [pc, #40]	; (e1744 <srand+0x3c>)
   e171c:	4b0a      	ldr	r3, [pc, #40]	; (e1748 <srand+0x40>)
   e171e:	63a8      	str	r0, [r5, #56]	; 0x38
   e1720:	e9c0 2300 	strd	r2, r3, [r0]
   e1724:	4b09      	ldr	r3, [pc, #36]	; (e174c <srand+0x44>)
   e1726:	6083      	str	r3, [r0, #8]
   e1728:	230b      	movs	r3, #11
   e172a:	8183      	strh	r3, [r0, #12]
   e172c:	2201      	movs	r2, #1
   e172e:	2300      	movs	r3, #0
   e1730:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e1734:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e1736:	2200      	movs	r2, #0
   e1738:	611c      	str	r4, [r3, #16]
   e173a:	615a      	str	r2, [r3, #20]
   e173c:	bd38      	pop	{r3, r4, r5, pc}
   e173e:	bf00      	nop
   e1740:	2003e1d0 	.word	0x2003e1d0
   e1744:	abcd330e 	.word	0xabcd330e
   e1748:	e66d1234 	.word	0xe66d1234
   e174c:	0005deec 	.word	0x0005deec

000e1750 <rename>:
   e1750:	4b02      	ldr	r3, [pc, #8]	; (e175c <rename+0xc>)
   e1752:	460a      	mov	r2, r1
   e1754:	4601      	mov	r1, r0
   e1756:	6818      	ldr	r0, [r3, #0]
   e1758:	f000 b802 	b.w	e1760 <_rename_r>
   e175c:	2003e1d0 	.word	0x2003e1d0

000e1760 <_rename_r>:
   e1760:	b538      	push	{r3, r4, r5, lr}
   e1762:	4604      	mov	r4, r0
   e1764:	460d      	mov	r5, r1
   e1766:	f001 fc1d 	bl	e2fa4 <_link_r>
   e176a:	1c43      	adds	r3, r0, #1
   e176c:	d008      	beq.n	e1780 <_rename_r+0x20>
   e176e:	4629      	mov	r1, r5
   e1770:	4620      	mov	r0, r4
   e1772:	f001 f813 	bl	e279c <_unlink_r>
   e1776:	3001      	adds	r0, #1
   e1778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e177c:	bf18      	it	ne
   e177e:	2000      	movne	r0, #0
   e1780:	bd38      	pop	{r3, r4, r5, pc}

000e1782 <strchr>:
   e1782:	b2c9      	uxtb	r1, r1
   e1784:	4603      	mov	r3, r0
   e1786:	f810 2b01 	ldrb.w	r2, [r0], #1
   e178a:	b11a      	cbz	r2, e1794 <strchr+0x12>
   e178c:	428a      	cmp	r2, r1
   e178e:	d1f9      	bne.n	e1784 <strchr+0x2>
   e1790:	4618      	mov	r0, r3
   e1792:	4770      	bx	lr
   e1794:	2900      	cmp	r1, #0
   e1796:	bf18      	it	ne
   e1798:	2300      	movne	r3, #0
   e179a:	e7f9      	b.n	e1790 <strchr+0xe>

000e179c <strchrnul>:
   e179c:	b510      	push	{r4, lr}
   e179e:	4604      	mov	r4, r0
   e17a0:	f7ff ffef 	bl	e1782 <strchr>
   e17a4:	b918      	cbnz	r0, e17ae <strchrnul+0x12>
   e17a6:	4620      	mov	r0, r4
   e17a8:	f000 f831 	bl	e180e <strlen>
   e17ac:	4420      	add	r0, r4
   e17ae:	bd10      	pop	{r4, pc}

000e17b0 <strcmp>:
   e17b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   e17b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   e17b8:	2a01      	cmp	r2, #1
   e17ba:	bf28      	it	cs
   e17bc:	429a      	cmpcs	r2, r3
   e17be:	d0f7      	beq.n	e17b0 <strcmp>
   e17c0:	1ad0      	subs	r0, r2, r3
   e17c2:	4770      	bx	lr

000e17c4 <strcpy>:
   e17c4:	4603      	mov	r3, r0
   e17c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   e17ca:	f803 2b01 	strb.w	r2, [r3], #1
   e17ce:	2a00      	cmp	r2, #0
   e17d0:	d1f9      	bne.n	e17c6 <strcpy+0x2>
   e17d2:	4770      	bx	lr

000e17d4 <strdup>:
   e17d4:	4b02      	ldr	r3, [pc, #8]	; (e17e0 <strdup+0xc>)
   e17d6:	4601      	mov	r1, r0
   e17d8:	6818      	ldr	r0, [r3, #0]
   e17da:	f000 b803 	b.w	e17e4 <_strdup_r>
   e17de:	bf00      	nop
   e17e0:	2003e1d0 	.word	0x2003e1d0

000e17e4 <_strdup_r>:
   e17e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e17e6:	4604      	mov	r4, r0
   e17e8:	4608      	mov	r0, r1
   e17ea:	460d      	mov	r5, r1
   e17ec:	f000 f80f 	bl	e180e <strlen>
   e17f0:	1c42      	adds	r2, r0, #1
   e17f2:	4611      	mov	r1, r2
   e17f4:	4620      	mov	r0, r4
   e17f6:	9201      	str	r2, [sp, #4]
   e17f8:	f7fb fcbe 	bl	dd178 <_malloc_r>
   e17fc:	4604      	mov	r4, r0
   e17fe:	b118      	cbz	r0, e1808 <_strdup_r+0x24>
   e1800:	9a01      	ldr	r2, [sp, #4]
   e1802:	4629      	mov	r1, r5
   e1804:	f7ff ff50 	bl	e16a8 <memcpy>
   e1808:	4620      	mov	r0, r4
   e180a:	b003      	add	sp, #12
   e180c:	bd30      	pop	{r4, r5, pc}

000e180e <strlen>:
   e180e:	4603      	mov	r3, r0
   e1810:	f813 2b01 	ldrb.w	r2, [r3], #1
   e1814:	2a00      	cmp	r2, #0
   e1816:	d1fb      	bne.n	e1810 <strlen+0x2>
   e1818:	1a18      	subs	r0, r3, r0
   e181a:	3801      	subs	r0, #1
   e181c:	4770      	bx	lr

000e181e <strncmp>:
   e181e:	b510      	push	{r4, lr}
   e1820:	b16a      	cbz	r2, e183e <strncmp+0x20>
   e1822:	3901      	subs	r1, #1
   e1824:	1884      	adds	r4, r0, r2
   e1826:	f810 3b01 	ldrb.w	r3, [r0], #1
   e182a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   e182e:	4293      	cmp	r3, r2
   e1830:	d103      	bne.n	e183a <strncmp+0x1c>
   e1832:	42a0      	cmp	r0, r4
   e1834:	d001      	beq.n	e183a <strncmp+0x1c>
   e1836:	2b00      	cmp	r3, #0
   e1838:	d1f5      	bne.n	e1826 <strncmp+0x8>
   e183a:	1a98      	subs	r0, r3, r2
   e183c:	bd10      	pop	{r4, pc}
   e183e:	4610      	mov	r0, r2
   e1840:	e7fc      	b.n	e183c <strncmp+0x1e>

000e1842 <strncpy>:
   e1842:	b510      	push	{r4, lr}
   e1844:	3901      	subs	r1, #1
   e1846:	4603      	mov	r3, r0
   e1848:	b132      	cbz	r2, e1858 <strncpy+0x16>
   e184a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e184e:	f803 4b01 	strb.w	r4, [r3], #1
   e1852:	3a01      	subs	r2, #1
   e1854:	2c00      	cmp	r4, #0
   e1856:	d1f7      	bne.n	e1848 <strncpy+0x6>
   e1858:	441a      	add	r2, r3
   e185a:	2100      	movs	r1, #0
   e185c:	4293      	cmp	r3, r2
   e185e:	d100      	bne.n	e1862 <strncpy+0x20>
   e1860:	bd10      	pop	{r4, pc}
   e1862:	f803 1b01 	strb.w	r1, [r3], #1
   e1866:	e7f9      	b.n	e185c <strncpy+0x1a>

000e1868 <strrchr>:
   e1868:	b538      	push	{r3, r4, r5, lr}
   e186a:	4603      	mov	r3, r0
   e186c:	460c      	mov	r4, r1
   e186e:	b969      	cbnz	r1, e188c <strrchr+0x24>
   e1870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e1874:	f7ff bf85 	b.w	e1782 <strchr>
   e1878:	1c43      	adds	r3, r0, #1
   e187a:	4605      	mov	r5, r0
   e187c:	4621      	mov	r1, r4
   e187e:	4618      	mov	r0, r3
   e1880:	f7ff ff7f 	bl	e1782 <strchr>
   e1884:	2800      	cmp	r0, #0
   e1886:	d1f7      	bne.n	e1878 <strrchr+0x10>
   e1888:	4628      	mov	r0, r5
   e188a:	bd38      	pop	{r3, r4, r5, pc}
   e188c:	2500      	movs	r5, #0
   e188e:	e7f5      	b.n	e187c <strrchr+0x14>

000e1890 <sulp>:
   e1890:	b570      	push	{r4, r5, r6, lr}
   e1892:	4604      	mov	r4, r0
   e1894:	460d      	mov	r5, r1
   e1896:	ec45 4b10 	vmov	d0, r4, r5
   e189a:	4616      	mov	r6, r2
   e189c:	f001 feb8 	bl	e3610 <__ulp>
   e18a0:	ec51 0b10 	vmov	r0, r1, d0
   e18a4:	b17e      	cbz	r6, e18c6 <sulp+0x36>
   e18a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e18aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e18ae:	2b00      	cmp	r3, #0
   e18b0:	dd09      	ble.n	e18c6 <sulp+0x36>
   e18b2:	051b      	lsls	r3, r3, #20
   e18b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e18b8:	2400      	movs	r4, #0
   e18ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e18be:	4622      	mov	r2, r4
   e18c0:	462b      	mov	r3, r5
   e18c2:	f7ff fb4d 	bl	e0f60 <__aeabi_dmul>
   e18c6:	bd70      	pop	{r4, r5, r6, pc}

000e18c8 <_strtod_l>:
   e18c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e18cc:	b0a3      	sub	sp, #140	; 0x8c
   e18ce:	461f      	mov	r7, r3
   e18d0:	2300      	movs	r3, #0
   e18d2:	931e      	str	r3, [sp, #120]	; 0x78
   e18d4:	4ba4      	ldr	r3, [pc, #656]	; (e1b68 <_strtod_l+0x2a0>)
   e18d6:	9219      	str	r2, [sp, #100]	; 0x64
   e18d8:	681b      	ldr	r3, [r3, #0]
   e18da:	9307      	str	r3, [sp, #28]
   e18dc:	4604      	mov	r4, r0
   e18de:	4618      	mov	r0, r3
   e18e0:	4688      	mov	r8, r1
   e18e2:	f7ff ff94 	bl	e180e <strlen>
   e18e6:	f04f 0a00 	mov.w	sl, #0
   e18ea:	4605      	mov	r5, r0
   e18ec:	f04f 0b00 	mov.w	fp, #0
   e18f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e18f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e18f6:	781a      	ldrb	r2, [r3, #0]
   e18f8:	2a2b      	cmp	r2, #43	; 0x2b
   e18fa:	d04c      	beq.n	e1996 <_strtod_l+0xce>
   e18fc:	d839      	bhi.n	e1972 <_strtod_l+0xaa>
   e18fe:	2a0d      	cmp	r2, #13
   e1900:	d832      	bhi.n	e1968 <_strtod_l+0xa0>
   e1902:	2a08      	cmp	r2, #8
   e1904:	d832      	bhi.n	e196c <_strtod_l+0xa4>
   e1906:	2a00      	cmp	r2, #0
   e1908:	d03c      	beq.n	e1984 <_strtod_l+0xbc>
   e190a:	2300      	movs	r3, #0
   e190c:	930e      	str	r3, [sp, #56]	; 0x38
   e190e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   e1910:	7833      	ldrb	r3, [r6, #0]
   e1912:	2b30      	cmp	r3, #48	; 0x30
   e1914:	f040 80b4 	bne.w	e1a80 <_strtod_l+0x1b8>
   e1918:	7873      	ldrb	r3, [r6, #1]
   e191a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e191e:	2b58      	cmp	r3, #88	; 0x58
   e1920:	d16c      	bne.n	e19fc <_strtod_l+0x134>
   e1922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e1924:	9301      	str	r3, [sp, #4]
   e1926:	ab1e      	add	r3, sp, #120	; 0x78
   e1928:	9702      	str	r7, [sp, #8]
   e192a:	9300      	str	r3, [sp, #0]
   e192c:	4a8f      	ldr	r2, [pc, #572]	; (e1b6c <_strtod_l+0x2a4>)
   e192e:	ab1f      	add	r3, sp, #124	; 0x7c
   e1930:	a91d      	add	r1, sp, #116	; 0x74
   e1932:	4620      	mov	r0, r4
   e1934:	f001 f840 	bl	e29b8 <__gethex>
   e1938:	f010 0707 	ands.w	r7, r0, #7
   e193c:	4605      	mov	r5, r0
   e193e:	d005      	beq.n	e194c <_strtod_l+0x84>
   e1940:	2f06      	cmp	r7, #6
   e1942:	d12a      	bne.n	e199a <_strtod_l+0xd2>
   e1944:	3601      	adds	r6, #1
   e1946:	2300      	movs	r3, #0
   e1948:	961d      	str	r6, [sp, #116]	; 0x74
   e194a:	930e      	str	r3, [sp, #56]	; 0x38
   e194c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e194e:	2b00      	cmp	r3, #0
   e1950:	f040 8596 	bne.w	e2480 <_strtod_l+0xbb8>
   e1954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e1956:	b1db      	cbz	r3, e1990 <_strtod_l+0xc8>
   e1958:	4652      	mov	r2, sl
   e195a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e195e:	ec43 2b10 	vmov	d0, r2, r3
   e1962:	b023      	add	sp, #140	; 0x8c
   e1964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1968:	2a20      	cmp	r2, #32
   e196a:	d1ce      	bne.n	e190a <_strtod_l+0x42>
   e196c:	3301      	adds	r3, #1
   e196e:	931d      	str	r3, [sp, #116]	; 0x74
   e1970:	e7c0      	b.n	e18f4 <_strtod_l+0x2c>
   e1972:	2a2d      	cmp	r2, #45	; 0x2d
   e1974:	d1c9      	bne.n	e190a <_strtod_l+0x42>
   e1976:	2201      	movs	r2, #1
   e1978:	920e      	str	r2, [sp, #56]	; 0x38
   e197a:	1c5a      	adds	r2, r3, #1
   e197c:	921d      	str	r2, [sp, #116]	; 0x74
   e197e:	785b      	ldrb	r3, [r3, #1]
   e1980:	2b00      	cmp	r3, #0
   e1982:	d1c4      	bne.n	e190e <_strtod_l+0x46>
   e1984:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e1986:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e198a:	2b00      	cmp	r3, #0
   e198c:	f040 8576 	bne.w	e247c <_strtod_l+0xbb4>
   e1990:	4652      	mov	r2, sl
   e1992:	465b      	mov	r3, fp
   e1994:	e7e3      	b.n	e195e <_strtod_l+0x96>
   e1996:	2200      	movs	r2, #0
   e1998:	e7ee      	b.n	e1978 <_strtod_l+0xb0>
   e199a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e199c:	b13a      	cbz	r2, e19ae <_strtod_l+0xe6>
   e199e:	2135      	movs	r1, #53	; 0x35
   e19a0:	a820      	add	r0, sp, #128	; 0x80
   e19a2:	f001 ff34 	bl	e380e <__copybits>
   e19a6:	991e      	ldr	r1, [sp, #120]	; 0x78
   e19a8:	4620      	mov	r0, r4
   e19aa:	f001 fb69 	bl	e3080 <_Bfree>
   e19ae:	3f01      	subs	r7, #1
   e19b0:	2f05      	cmp	r7, #5
   e19b2:	d807      	bhi.n	e19c4 <_strtod_l+0xfc>
   e19b4:	e8df f007 	tbb	[pc, r7]
   e19b8:	1d180b0e 	.word	0x1d180b0e
   e19bc:	030e      	.short	0x030e
   e19be:	f04f 0b00 	mov.w	fp, #0
   e19c2:	46da      	mov	sl, fp
   e19c4:	0728      	lsls	r0, r5, #28
   e19c6:	d5c1      	bpl.n	e194c <_strtod_l+0x84>
   e19c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e19cc:	e7be      	b.n	e194c <_strtod_l+0x84>
   e19ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   e19d2:	e7f7      	b.n	e19c4 <_strtod_l+0xfc>
   e19d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   e19d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   e19da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e19de:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e19e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e19e6:	e7ed      	b.n	e19c4 <_strtod_l+0xfc>
   e19e8:	f8df b184 	ldr.w	fp, [pc, #388]	; e1b70 <_strtod_l+0x2a8>
   e19ec:	f04f 0a00 	mov.w	sl, #0
   e19f0:	e7e8      	b.n	e19c4 <_strtod_l+0xfc>
   e19f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e19f6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e19fa:	e7e3      	b.n	e19c4 <_strtod_l+0xfc>
   e19fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e19fe:	1c5a      	adds	r2, r3, #1
   e1a00:	921d      	str	r2, [sp, #116]	; 0x74
   e1a02:	785b      	ldrb	r3, [r3, #1]
   e1a04:	2b30      	cmp	r3, #48	; 0x30
   e1a06:	d0f9      	beq.n	e19fc <_strtod_l+0x134>
   e1a08:	2b00      	cmp	r3, #0
   e1a0a:	d09f      	beq.n	e194c <_strtod_l+0x84>
   e1a0c:	2301      	movs	r3, #1
   e1a0e:	f04f 0900 	mov.w	r9, #0
   e1a12:	9304      	str	r3, [sp, #16]
   e1a14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1a16:	930a      	str	r3, [sp, #40]	; 0x28
   e1a18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   e1a1c:	464f      	mov	r7, r9
   e1a1e:	220a      	movs	r2, #10
   e1a20:	981d      	ldr	r0, [sp, #116]	; 0x74
   e1a22:	7806      	ldrb	r6, [r0, #0]
   e1a24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e1a28:	b2d9      	uxtb	r1, r3
   e1a2a:	2909      	cmp	r1, #9
   e1a2c:	d92a      	bls.n	e1a84 <_strtod_l+0x1bc>
   e1a2e:	9907      	ldr	r1, [sp, #28]
   e1a30:	462a      	mov	r2, r5
   e1a32:	f7ff fef4 	bl	e181e <strncmp>
   e1a36:	b398      	cbz	r0, e1aa0 <_strtod_l+0x1d8>
   e1a38:	2000      	movs	r0, #0
   e1a3a:	4633      	mov	r3, r6
   e1a3c:	463d      	mov	r5, r7
   e1a3e:	9007      	str	r0, [sp, #28]
   e1a40:	4602      	mov	r2, r0
   e1a42:	2b65      	cmp	r3, #101	; 0x65
   e1a44:	d001      	beq.n	e1a4a <_strtod_l+0x182>
   e1a46:	2b45      	cmp	r3, #69	; 0x45
   e1a48:	d118      	bne.n	e1a7c <_strtod_l+0x1b4>
   e1a4a:	b91d      	cbnz	r5, e1a54 <_strtod_l+0x18c>
   e1a4c:	9b04      	ldr	r3, [sp, #16]
   e1a4e:	4303      	orrs	r3, r0
   e1a50:	d098      	beq.n	e1984 <_strtod_l+0xbc>
   e1a52:	2500      	movs	r5, #0
   e1a54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   e1a58:	f108 0301 	add.w	r3, r8, #1
   e1a5c:	931d      	str	r3, [sp, #116]	; 0x74
   e1a5e:	f898 3001 	ldrb.w	r3, [r8, #1]
   e1a62:	2b2b      	cmp	r3, #43	; 0x2b
   e1a64:	d075      	beq.n	e1b52 <_strtod_l+0x28a>
   e1a66:	2b2d      	cmp	r3, #45	; 0x2d
   e1a68:	d07b      	beq.n	e1b62 <_strtod_l+0x29a>
   e1a6a:	f04f 0c00 	mov.w	ip, #0
   e1a6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e1a72:	2909      	cmp	r1, #9
   e1a74:	f240 8082 	bls.w	e1b7c <_strtod_l+0x2b4>
   e1a78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e1a7c:	2600      	movs	r6, #0
   e1a7e:	e09d      	b.n	e1bbc <_strtod_l+0x2f4>
   e1a80:	2300      	movs	r3, #0
   e1a82:	e7c4      	b.n	e1a0e <_strtod_l+0x146>
   e1a84:	2f08      	cmp	r7, #8
   e1a86:	bfd8      	it	le
   e1a88:	9909      	ldrle	r1, [sp, #36]	; 0x24
   e1a8a:	f100 0001 	add.w	r0, r0, #1
   e1a8e:	bfda      	itte	le
   e1a90:	fb02 3301 	mlale	r3, r2, r1, r3
   e1a94:	9309      	strle	r3, [sp, #36]	; 0x24
   e1a96:	fb02 3909 	mlagt	r9, r2, r9, r3
   e1a9a:	3701      	adds	r7, #1
   e1a9c:	901d      	str	r0, [sp, #116]	; 0x74
   e1a9e:	e7bf      	b.n	e1a20 <_strtod_l+0x158>
   e1aa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1aa2:	195a      	adds	r2, r3, r5
   e1aa4:	921d      	str	r2, [sp, #116]	; 0x74
   e1aa6:	5d5b      	ldrb	r3, [r3, r5]
   e1aa8:	2f00      	cmp	r7, #0
   e1aaa:	d037      	beq.n	e1b1c <_strtod_l+0x254>
   e1aac:	9007      	str	r0, [sp, #28]
   e1aae:	463d      	mov	r5, r7
   e1ab0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   e1ab4:	2a09      	cmp	r2, #9
   e1ab6:	d912      	bls.n	e1ade <_strtod_l+0x216>
   e1ab8:	2201      	movs	r2, #1
   e1aba:	e7c2      	b.n	e1a42 <_strtod_l+0x17a>
   e1abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1abe:	1c5a      	adds	r2, r3, #1
   e1ac0:	921d      	str	r2, [sp, #116]	; 0x74
   e1ac2:	785b      	ldrb	r3, [r3, #1]
   e1ac4:	3001      	adds	r0, #1
   e1ac6:	2b30      	cmp	r3, #48	; 0x30
   e1ac8:	d0f8      	beq.n	e1abc <_strtod_l+0x1f4>
   e1aca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e1ace:	2a08      	cmp	r2, #8
   e1ad0:	f200 84db 	bhi.w	e248a <_strtod_l+0xbc2>
   e1ad4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   e1ad6:	9007      	str	r0, [sp, #28]
   e1ad8:	2000      	movs	r0, #0
   e1ada:	920a      	str	r2, [sp, #40]	; 0x28
   e1adc:	4605      	mov	r5, r0
   e1ade:	3b30      	subs	r3, #48	; 0x30
   e1ae0:	f100 0201 	add.w	r2, r0, #1
   e1ae4:	d014      	beq.n	e1b10 <_strtod_l+0x248>
   e1ae6:	9907      	ldr	r1, [sp, #28]
   e1ae8:	4411      	add	r1, r2
   e1aea:	9107      	str	r1, [sp, #28]
   e1aec:	462a      	mov	r2, r5
   e1aee:	eb00 0e05 	add.w	lr, r0, r5
   e1af2:	210a      	movs	r1, #10
   e1af4:	4572      	cmp	r2, lr
   e1af6:	d113      	bne.n	e1b20 <_strtod_l+0x258>
   e1af8:	182a      	adds	r2, r5, r0
   e1afa:	2a08      	cmp	r2, #8
   e1afc:	f105 0501 	add.w	r5, r5, #1
   e1b00:	4405      	add	r5, r0
   e1b02:	dc1c      	bgt.n	e1b3e <_strtod_l+0x276>
   e1b04:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1b06:	220a      	movs	r2, #10
   e1b08:	fb02 3301 	mla	r3, r2, r1, r3
   e1b0c:	9309      	str	r3, [sp, #36]	; 0x24
   e1b0e:	2200      	movs	r2, #0
   e1b10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1b12:	1c59      	adds	r1, r3, #1
   e1b14:	911d      	str	r1, [sp, #116]	; 0x74
   e1b16:	785b      	ldrb	r3, [r3, #1]
   e1b18:	4610      	mov	r0, r2
   e1b1a:	e7c9      	b.n	e1ab0 <_strtod_l+0x1e8>
   e1b1c:	4638      	mov	r0, r7
   e1b1e:	e7d2      	b.n	e1ac6 <_strtod_l+0x1fe>
   e1b20:	2a08      	cmp	r2, #8
   e1b22:	dc04      	bgt.n	e1b2e <_strtod_l+0x266>
   e1b24:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e1b26:	434e      	muls	r6, r1
   e1b28:	9609      	str	r6, [sp, #36]	; 0x24
   e1b2a:	3201      	adds	r2, #1
   e1b2c:	e7e2      	b.n	e1af4 <_strtod_l+0x22c>
   e1b2e:	f102 0c01 	add.w	ip, r2, #1
   e1b32:	f1bc 0f10 	cmp.w	ip, #16
   e1b36:	bfd8      	it	le
   e1b38:	fb01 f909 	mulle.w	r9, r1, r9
   e1b3c:	e7f5      	b.n	e1b2a <_strtod_l+0x262>
   e1b3e:	2d10      	cmp	r5, #16
   e1b40:	bfdc      	itt	le
   e1b42:	220a      	movle	r2, #10
   e1b44:	fb02 3909 	mlale	r9, r2, r9, r3
   e1b48:	e7e1      	b.n	e1b0e <_strtod_l+0x246>
   e1b4a:	2300      	movs	r3, #0
   e1b4c:	9307      	str	r3, [sp, #28]
   e1b4e:	2201      	movs	r2, #1
   e1b50:	e77c      	b.n	e1a4c <_strtod_l+0x184>
   e1b52:	f04f 0c00 	mov.w	ip, #0
   e1b56:	f108 0302 	add.w	r3, r8, #2
   e1b5a:	931d      	str	r3, [sp, #116]	; 0x74
   e1b5c:	f898 3002 	ldrb.w	r3, [r8, #2]
   e1b60:	e785      	b.n	e1a6e <_strtod_l+0x1a6>
   e1b62:	f04f 0c01 	mov.w	ip, #1
   e1b66:	e7f6      	b.n	e1b56 <_strtod_l+0x28e>
   e1b68:	000e4cdc 	.word	0x000e4cdc
   e1b6c:	000e4b88 	.word	0x000e4b88
   e1b70:	7ff00000 	.word	0x7ff00000
   e1b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1b76:	1c59      	adds	r1, r3, #1
   e1b78:	911d      	str	r1, [sp, #116]	; 0x74
   e1b7a:	785b      	ldrb	r3, [r3, #1]
   e1b7c:	2b30      	cmp	r3, #48	; 0x30
   e1b7e:	d0f9      	beq.n	e1b74 <_strtod_l+0x2ac>
   e1b80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   e1b84:	2908      	cmp	r1, #8
   e1b86:	f63f af79 	bhi.w	e1a7c <_strtod_l+0x1b4>
   e1b8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e1b8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1b90:	9308      	str	r3, [sp, #32]
   e1b92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1b94:	1c59      	adds	r1, r3, #1
   e1b96:	911d      	str	r1, [sp, #116]	; 0x74
   e1b98:	785b      	ldrb	r3, [r3, #1]
   e1b9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e1b9e:	2e09      	cmp	r6, #9
   e1ba0:	d937      	bls.n	e1c12 <_strtod_l+0x34a>
   e1ba2:	9e08      	ldr	r6, [sp, #32]
   e1ba4:	1b89      	subs	r1, r1, r6
   e1ba6:	2908      	cmp	r1, #8
   e1ba8:	f644 661f 	movw	r6, #19999	; 0x4e1f
   e1bac:	dc02      	bgt.n	e1bb4 <_strtod_l+0x2ec>
   e1bae:	4576      	cmp	r6, lr
   e1bb0:	bfa8      	it	ge
   e1bb2:	4676      	movge	r6, lr
   e1bb4:	f1bc 0f00 	cmp.w	ip, #0
   e1bb8:	d000      	beq.n	e1bbc <_strtod_l+0x2f4>
   e1bba:	4276      	negs	r6, r6
   e1bbc:	2d00      	cmp	r5, #0
   e1bbe:	d14f      	bne.n	e1c60 <_strtod_l+0x398>
   e1bc0:	9904      	ldr	r1, [sp, #16]
   e1bc2:	4301      	orrs	r1, r0
   e1bc4:	f47f aec2 	bne.w	e194c <_strtod_l+0x84>
   e1bc8:	2a00      	cmp	r2, #0
   e1bca:	f47f aedb 	bne.w	e1984 <_strtod_l+0xbc>
   e1bce:	2b69      	cmp	r3, #105	; 0x69
   e1bd0:	d027      	beq.n	e1c22 <_strtod_l+0x35a>
   e1bd2:	dc24      	bgt.n	e1c1e <_strtod_l+0x356>
   e1bd4:	2b49      	cmp	r3, #73	; 0x49
   e1bd6:	d024      	beq.n	e1c22 <_strtod_l+0x35a>
   e1bd8:	2b4e      	cmp	r3, #78	; 0x4e
   e1bda:	f47f aed3 	bne.w	e1984 <_strtod_l+0xbc>
   e1bde:	499e      	ldr	r1, [pc, #632]	; (e1e58 <_strtod_l+0x590>)
   e1be0:	a81d      	add	r0, sp, #116	; 0x74
   e1be2:	f001 f92f 	bl	e2e44 <__match>
   e1be6:	2800      	cmp	r0, #0
   e1be8:	f43f aecc 	beq.w	e1984 <_strtod_l+0xbc>
   e1bec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1bee:	781b      	ldrb	r3, [r3, #0]
   e1bf0:	2b28      	cmp	r3, #40	; 0x28
   e1bf2:	d12d      	bne.n	e1c50 <_strtod_l+0x388>
   e1bf4:	4999      	ldr	r1, [pc, #612]	; (e1e5c <_strtod_l+0x594>)
   e1bf6:	aa20      	add	r2, sp, #128	; 0x80
   e1bf8:	a81d      	add	r0, sp, #116	; 0x74
   e1bfa:	f001 f937 	bl	e2e6c <__hexnan>
   e1bfe:	2805      	cmp	r0, #5
   e1c00:	d126      	bne.n	e1c50 <_strtod_l+0x388>
   e1c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
   e1c04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   e1c08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e1c0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e1c10:	e69c      	b.n	e194c <_strtod_l+0x84>
   e1c12:	210a      	movs	r1, #10
   e1c14:	fb01 3e0e 	mla	lr, r1, lr, r3
   e1c18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e1c1c:	e7b9      	b.n	e1b92 <_strtod_l+0x2ca>
   e1c1e:	2b6e      	cmp	r3, #110	; 0x6e
   e1c20:	e7db      	b.n	e1bda <_strtod_l+0x312>
   e1c22:	498f      	ldr	r1, [pc, #572]	; (e1e60 <_strtod_l+0x598>)
   e1c24:	a81d      	add	r0, sp, #116	; 0x74
   e1c26:	f001 f90d 	bl	e2e44 <__match>
   e1c2a:	2800      	cmp	r0, #0
   e1c2c:	f43f aeaa 	beq.w	e1984 <_strtod_l+0xbc>
   e1c30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1c32:	498c      	ldr	r1, [pc, #560]	; (e1e64 <_strtod_l+0x59c>)
   e1c34:	3b01      	subs	r3, #1
   e1c36:	a81d      	add	r0, sp, #116	; 0x74
   e1c38:	931d      	str	r3, [sp, #116]	; 0x74
   e1c3a:	f001 f903 	bl	e2e44 <__match>
   e1c3e:	b910      	cbnz	r0, e1c46 <_strtod_l+0x37e>
   e1c40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1c42:	3301      	adds	r3, #1
   e1c44:	931d      	str	r3, [sp, #116]	; 0x74
   e1c46:	f8df b22c 	ldr.w	fp, [pc, #556]	; e1e74 <_strtod_l+0x5ac>
   e1c4a:	f04f 0a00 	mov.w	sl, #0
   e1c4e:	e67d      	b.n	e194c <_strtod_l+0x84>
   e1c50:	4885      	ldr	r0, [pc, #532]	; (e1e68 <_strtod_l+0x5a0>)
   e1c52:	f7fe ffc1 	bl	e0bd8 <nan>
   e1c56:	ed8d 0b04 	vstr	d0, [sp, #16]
   e1c5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e1c5e:	e675      	b.n	e194c <_strtod_l+0x84>
   e1c60:	9b07      	ldr	r3, [sp, #28]
   e1c62:	9809      	ldr	r0, [sp, #36]	; 0x24
   e1c64:	1af3      	subs	r3, r6, r3
   e1c66:	2f00      	cmp	r7, #0
   e1c68:	bf08      	it	eq
   e1c6a:	462f      	moveq	r7, r5
   e1c6c:	2d10      	cmp	r5, #16
   e1c6e:	9308      	str	r3, [sp, #32]
   e1c70:	46a8      	mov	r8, r5
   e1c72:	bfa8      	it	ge
   e1c74:	f04f 0810 	movge.w	r8, #16
   e1c78:	f7ff f8f8 	bl	e0e6c <__aeabi_ui2d>
   e1c7c:	2d09      	cmp	r5, #9
   e1c7e:	4682      	mov	sl, r0
   e1c80:	468b      	mov	fp, r1
   e1c82:	dd13      	ble.n	e1cac <_strtod_l+0x3e4>
   e1c84:	4b79      	ldr	r3, [pc, #484]	; (e1e6c <_strtod_l+0x5a4>)
   e1c86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   e1c8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e1c8e:	f7ff f967 	bl	e0f60 <__aeabi_dmul>
   e1c92:	4682      	mov	sl, r0
   e1c94:	4648      	mov	r0, r9
   e1c96:	468b      	mov	fp, r1
   e1c98:	f7ff f8e8 	bl	e0e6c <__aeabi_ui2d>
   e1c9c:	4602      	mov	r2, r0
   e1c9e:	460b      	mov	r3, r1
   e1ca0:	4650      	mov	r0, sl
   e1ca2:	4659      	mov	r1, fp
   e1ca4:	f7fe ffa6 	bl	e0bf4 <__adddf3>
   e1ca8:	4682      	mov	sl, r0
   e1caa:	468b      	mov	fp, r1
   e1cac:	2d0f      	cmp	r5, #15
   e1cae:	dc38      	bgt.n	e1d22 <_strtod_l+0x45a>
   e1cb0:	9b08      	ldr	r3, [sp, #32]
   e1cb2:	2b00      	cmp	r3, #0
   e1cb4:	f43f ae4a 	beq.w	e194c <_strtod_l+0x84>
   e1cb8:	dd24      	ble.n	e1d04 <_strtod_l+0x43c>
   e1cba:	2b16      	cmp	r3, #22
   e1cbc:	dc0b      	bgt.n	e1cd6 <_strtod_l+0x40e>
   e1cbe:	4d6b      	ldr	r5, [pc, #428]	; (e1e6c <_strtod_l+0x5a4>)
   e1cc0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   e1cc4:	e9d5 0100 	ldrd	r0, r1, [r5]
   e1cc8:	4652      	mov	r2, sl
   e1cca:	465b      	mov	r3, fp
   e1ccc:	f7ff f948 	bl	e0f60 <__aeabi_dmul>
   e1cd0:	4682      	mov	sl, r0
   e1cd2:	468b      	mov	fp, r1
   e1cd4:	e63a      	b.n	e194c <_strtod_l+0x84>
   e1cd6:	9a08      	ldr	r2, [sp, #32]
   e1cd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e1cdc:	4293      	cmp	r3, r2
   e1cde:	db20      	blt.n	e1d22 <_strtod_l+0x45a>
   e1ce0:	4c62      	ldr	r4, [pc, #392]	; (e1e6c <_strtod_l+0x5a4>)
   e1ce2:	f1c5 050f 	rsb	r5, r5, #15
   e1ce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e1cea:	4652      	mov	r2, sl
   e1cec:	465b      	mov	r3, fp
   e1cee:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1cf2:	f7ff f935 	bl	e0f60 <__aeabi_dmul>
   e1cf6:	9b08      	ldr	r3, [sp, #32]
   e1cf8:	1b5d      	subs	r5, r3, r5
   e1cfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e1cfe:	e9d4 2300 	ldrd	r2, r3, [r4]
   e1d02:	e7e3      	b.n	e1ccc <_strtod_l+0x404>
   e1d04:	9b08      	ldr	r3, [sp, #32]
   e1d06:	3316      	adds	r3, #22
   e1d08:	db0b      	blt.n	e1d22 <_strtod_l+0x45a>
   e1d0a:	9b07      	ldr	r3, [sp, #28]
   e1d0c:	4a57      	ldr	r2, [pc, #348]	; (e1e6c <_strtod_l+0x5a4>)
   e1d0e:	1b9e      	subs	r6, r3, r6
   e1d10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   e1d14:	e9d6 2300 	ldrd	r2, r3, [r6]
   e1d18:	4650      	mov	r0, sl
   e1d1a:	4659      	mov	r1, fp
   e1d1c:	f7ff fa4a 	bl	e11b4 <__aeabi_ddiv>
   e1d20:	e7d6      	b.n	e1cd0 <_strtod_l+0x408>
   e1d22:	9b08      	ldr	r3, [sp, #32]
   e1d24:	eba5 0808 	sub.w	r8, r5, r8
   e1d28:	4498      	add	r8, r3
   e1d2a:	f1b8 0f00 	cmp.w	r8, #0
   e1d2e:	dd71      	ble.n	e1e14 <_strtod_l+0x54c>
   e1d30:	f018 030f 	ands.w	r3, r8, #15
   e1d34:	d00a      	beq.n	e1d4c <_strtod_l+0x484>
   e1d36:	494d      	ldr	r1, [pc, #308]	; (e1e6c <_strtod_l+0x5a4>)
   e1d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   e1d3c:	4652      	mov	r2, sl
   e1d3e:	465b      	mov	r3, fp
   e1d40:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1d44:	f7ff f90c 	bl	e0f60 <__aeabi_dmul>
   e1d48:	4682      	mov	sl, r0
   e1d4a:	468b      	mov	fp, r1
   e1d4c:	f038 080f 	bics.w	r8, r8, #15
   e1d50:	d04d      	beq.n	e1dee <_strtod_l+0x526>
   e1d52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   e1d56:	dd22      	ble.n	e1d9e <_strtod_l+0x4d6>
   e1d58:	2500      	movs	r5, #0
   e1d5a:	462e      	mov	r6, r5
   e1d5c:	9509      	str	r5, [sp, #36]	; 0x24
   e1d5e:	9507      	str	r5, [sp, #28]
   e1d60:	2322      	movs	r3, #34	; 0x22
   e1d62:	f8df b110 	ldr.w	fp, [pc, #272]	; e1e74 <_strtod_l+0x5ac>
   e1d66:	6023      	str	r3, [r4, #0]
   e1d68:	f04f 0a00 	mov.w	sl, #0
   e1d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1d6e:	2b00      	cmp	r3, #0
   e1d70:	f43f adec 	beq.w	e194c <_strtod_l+0x84>
   e1d74:	991e      	ldr	r1, [sp, #120]	; 0x78
   e1d76:	4620      	mov	r0, r4
   e1d78:	f001 f982 	bl	e3080 <_Bfree>
   e1d7c:	9907      	ldr	r1, [sp, #28]
   e1d7e:	4620      	mov	r0, r4
   e1d80:	f001 f97e 	bl	e3080 <_Bfree>
   e1d84:	4631      	mov	r1, r6
   e1d86:	4620      	mov	r0, r4
   e1d88:	f001 f97a 	bl	e3080 <_Bfree>
   e1d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1d8e:	4620      	mov	r0, r4
   e1d90:	f001 f976 	bl	e3080 <_Bfree>
   e1d94:	4629      	mov	r1, r5
   e1d96:	4620      	mov	r0, r4
   e1d98:	f001 f972 	bl	e3080 <_Bfree>
   e1d9c:	e5d6      	b.n	e194c <_strtod_l+0x84>
   e1d9e:	2300      	movs	r3, #0
   e1da0:	ea4f 1828 	mov.w	r8, r8, asr #4
   e1da4:	4650      	mov	r0, sl
   e1da6:	4659      	mov	r1, fp
   e1da8:	4699      	mov	r9, r3
   e1daa:	f1b8 0f01 	cmp.w	r8, #1
   e1dae:	dc21      	bgt.n	e1df4 <_strtod_l+0x52c>
   e1db0:	b10b      	cbz	r3, e1db6 <_strtod_l+0x4ee>
   e1db2:	4682      	mov	sl, r0
   e1db4:	468b      	mov	fp, r1
   e1db6:	4b2e      	ldr	r3, [pc, #184]	; (e1e70 <_strtod_l+0x5a8>)
   e1db8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e1dbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   e1dc0:	4652      	mov	r2, sl
   e1dc2:	465b      	mov	r3, fp
   e1dc4:	e9d9 0100 	ldrd	r0, r1, [r9]
   e1dc8:	f7ff f8ca 	bl	e0f60 <__aeabi_dmul>
   e1dcc:	4b29      	ldr	r3, [pc, #164]	; (e1e74 <_strtod_l+0x5ac>)
   e1dce:	460a      	mov	r2, r1
   e1dd0:	400b      	ands	r3, r1
   e1dd2:	4929      	ldr	r1, [pc, #164]	; (e1e78 <_strtod_l+0x5b0>)
   e1dd4:	428b      	cmp	r3, r1
   e1dd6:	4682      	mov	sl, r0
   e1dd8:	d8be      	bhi.n	e1d58 <_strtod_l+0x490>
   e1dda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e1dde:	428b      	cmp	r3, r1
   e1de0:	bf86      	itte	hi
   e1de2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; e1e7c <_strtod_l+0x5b4>
   e1de6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   e1dea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e1dee:	2300      	movs	r3, #0
   e1df0:	9304      	str	r3, [sp, #16]
   e1df2:	e081      	b.n	e1ef8 <_strtod_l+0x630>
   e1df4:	f018 0f01 	tst.w	r8, #1
   e1df8:	d007      	beq.n	e1e0a <_strtod_l+0x542>
   e1dfa:	4b1d      	ldr	r3, [pc, #116]	; (e1e70 <_strtod_l+0x5a8>)
   e1dfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   e1e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1e04:	f7ff f8ac 	bl	e0f60 <__aeabi_dmul>
   e1e08:	2301      	movs	r3, #1
   e1e0a:	f109 0901 	add.w	r9, r9, #1
   e1e0e:	ea4f 0868 	mov.w	r8, r8, asr #1
   e1e12:	e7ca      	b.n	e1daa <_strtod_l+0x4e2>
   e1e14:	d0eb      	beq.n	e1dee <_strtod_l+0x526>
   e1e16:	f1c8 0800 	rsb	r8, r8, #0
   e1e1a:	f018 020f 	ands.w	r2, r8, #15
   e1e1e:	d00a      	beq.n	e1e36 <_strtod_l+0x56e>
   e1e20:	4b12      	ldr	r3, [pc, #72]	; (e1e6c <_strtod_l+0x5a4>)
   e1e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e1e26:	4650      	mov	r0, sl
   e1e28:	4659      	mov	r1, fp
   e1e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1e2e:	f7ff f9c1 	bl	e11b4 <__aeabi_ddiv>
   e1e32:	4682      	mov	sl, r0
   e1e34:	468b      	mov	fp, r1
   e1e36:	ea5f 1828 	movs.w	r8, r8, asr #4
   e1e3a:	d0d8      	beq.n	e1dee <_strtod_l+0x526>
   e1e3c:	f1b8 0f1f 	cmp.w	r8, #31
   e1e40:	dd1e      	ble.n	e1e80 <_strtod_l+0x5b8>
   e1e42:	2500      	movs	r5, #0
   e1e44:	462e      	mov	r6, r5
   e1e46:	9509      	str	r5, [sp, #36]	; 0x24
   e1e48:	9507      	str	r5, [sp, #28]
   e1e4a:	2322      	movs	r3, #34	; 0x22
   e1e4c:	f04f 0a00 	mov.w	sl, #0
   e1e50:	f04f 0b00 	mov.w	fp, #0
   e1e54:	6023      	str	r3, [r4, #0]
   e1e56:	e789      	b.n	e1d6c <_strtod_l+0x4a4>
   e1e58:	000e4b83 	.word	0x000e4b83
   e1e5c:	000e4b9c 	.word	0x000e4b9c
   e1e60:	000e4b7a 	.word	0x000e4b7a
   e1e64:	000e4b7d 	.word	0x000e4b7d
   e1e68:	000e4537 	.word	0x000e4537
   e1e6c:	000e4d18 	.word	0x000e4d18
   e1e70:	000e4cf0 	.word	0x000e4cf0
   e1e74:	7ff00000 	.word	0x7ff00000
   e1e78:	7ca00000 	.word	0x7ca00000
   e1e7c:	7fefffff 	.word	0x7fefffff
   e1e80:	f018 0310 	ands.w	r3, r8, #16
   e1e84:	bf18      	it	ne
   e1e86:	236a      	movne	r3, #106	; 0x6a
   e1e88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; e2240 <_strtod_l+0x978>
   e1e8c:	9304      	str	r3, [sp, #16]
   e1e8e:	4650      	mov	r0, sl
   e1e90:	4659      	mov	r1, fp
   e1e92:	2300      	movs	r3, #0
   e1e94:	f018 0f01 	tst.w	r8, #1
   e1e98:	d004      	beq.n	e1ea4 <_strtod_l+0x5dc>
   e1e9a:	e9d9 2300 	ldrd	r2, r3, [r9]
   e1e9e:	f7ff f85f 	bl	e0f60 <__aeabi_dmul>
   e1ea2:	2301      	movs	r3, #1
   e1ea4:	ea5f 0868 	movs.w	r8, r8, asr #1
   e1ea8:	f109 0908 	add.w	r9, r9, #8
   e1eac:	d1f2      	bne.n	e1e94 <_strtod_l+0x5cc>
   e1eae:	b10b      	cbz	r3, e1eb4 <_strtod_l+0x5ec>
   e1eb0:	4682      	mov	sl, r0
   e1eb2:	468b      	mov	fp, r1
   e1eb4:	9b04      	ldr	r3, [sp, #16]
   e1eb6:	b1bb      	cbz	r3, e1ee8 <_strtod_l+0x620>
   e1eb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e1ebc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e1ec0:	2b00      	cmp	r3, #0
   e1ec2:	4659      	mov	r1, fp
   e1ec4:	dd10      	ble.n	e1ee8 <_strtod_l+0x620>
   e1ec6:	2b1f      	cmp	r3, #31
   e1ec8:	f340 8128 	ble.w	e211c <_strtod_l+0x854>
   e1ecc:	2b34      	cmp	r3, #52	; 0x34
   e1ece:	bfde      	ittt	le
   e1ed0:	3b20      	suble	r3, #32
   e1ed2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   e1ed6:	fa02 f303 	lslle.w	r3, r2, r3
   e1eda:	f04f 0a00 	mov.w	sl, #0
   e1ede:	bfcc      	ite	gt
   e1ee0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e1ee4:	ea03 0b01 	andle.w	fp, r3, r1
   e1ee8:	2200      	movs	r2, #0
   e1eea:	2300      	movs	r3, #0
   e1eec:	4650      	mov	r0, sl
   e1eee:	4659      	mov	r1, fp
   e1ef0:	f7ff fa9e 	bl	e1430 <__aeabi_dcmpeq>
   e1ef4:	2800      	cmp	r0, #0
   e1ef6:	d1a4      	bne.n	e1e42 <_strtod_l+0x57a>
   e1ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1efa:	9300      	str	r3, [sp, #0]
   e1efc:	990a      	ldr	r1, [sp, #40]	; 0x28
   e1efe:	462b      	mov	r3, r5
   e1f00:	463a      	mov	r2, r7
   e1f02:	4620      	mov	r0, r4
   e1f04:	f001 f911 	bl	e312a <__s2b>
   e1f08:	9009      	str	r0, [sp, #36]	; 0x24
   e1f0a:	2800      	cmp	r0, #0
   e1f0c:	f43f af24 	beq.w	e1d58 <_strtod_l+0x490>
   e1f10:	9b07      	ldr	r3, [sp, #28]
   e1f12:	1b9e      	subs	r6, r3, r6
   e1f14:	9b08      	ldr	r3, [sp, #32]
   e1f16:	2b00      	cmp	r3, #0
   e1f18:	bfb4      	ite	lt
   e1f1a:	4633      	movlt	r3, r6
   e1f1c:	2300      	movge	r3, #0
   e1f1e:	9310      	str	r3, [sp, #64]	; 0x40
   e1f20:	9b08      	ldr	r3, [sp, #32]
   e1f22:	2500      	movs	r5, #0
   e1f24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   e1f28:	9318      	str	r3, [sp, #96]	; 0x60
   e1f2a:	462e      	mov	r6, r5
   e1f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1f2e:	4620      	mov	r0, r4
   e1f30:	6859      	ldr	r1, [r3, #4]
   e1f32:	f001 f871 	bl	e3018 <_Balloc>
   e1f36:	9007      	str	r0, [sp, #28]
   e1f38:	2800      	cmp	r0, #0
   e1f3a:	f43f af11 	beq.w	e1d60 <_strtod_l+0x498>
   e1f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1f40:	691a      	ldr	r2, [r3, #16]
   e1f42:	3202      	adds	r2, #2
   e1f44:	f103 010c 	add.w	r1, r3, #12
   e1f48:	0092      	lsls	r2, r2, #2
   e1f4a:	300c      	adds	r0, #12
   e1f4c:	f7ff fbac 	bl	e16a8 <memcpy>
   e1f50:	ec4b ab10 	vmov	d0, sl, fp
   e1f54:	aa20      	add	r2, sp, #128	; 0x80
   e1f56:	a91f      	add	r1, sp, #124	; 0x7c
   e1f58:	4620      	mov	r0, r4
   e1f5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   e1f5e:	f001 fbd3 	bl	e3708 <__d2b>
   e1f62:	901e      	str	r0, [sp, #120]	; 0x78
   e1f64:	2800      	cmp	r0, #0
   e1f66:	f43f aefb 	beq.w	e1d60 <_strtod_l+0x498>
   e1f6a:	2101      	movs	r1, #1
   e1f6c:	4620      	mov	r0, r4
   e1f6e:	f001 f96a 	bl	e3246 <__i2b>
   e1f72:	4606      	mov	r6, r0
   e1f74:	2800      	cmp	r0, #0
   e1f76:	f43f aef3 	beq.w	e1d60 <_strtod_l+0x498>
   e1f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   e1f7c:	9904      	ldr	r1, [sp, #16]
   e1f7e:	2b00      	cmp	r3, #0
   e1f80:	bfab      	itete	ge
   e1f82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   e1f84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   e1f86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   e1f88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   e1f8c:	bfac      	ite	ge
   e1f8e:	eb03 0902 	addge.w	r9, r3, r2
   e1f92:	1ad7      	sublt	r7, r2, r3
   e1f94:	9a20      	ldr	r2, [sp, #128]	; 0x80
   e1f96:	eba3 0801 	sub.w	r8, r3, r1
   e1f9a:	4490      	add	r8, r2
   e1f9c:	4ba3      	ldr	r3, [pc, #652]	; (e222c <_strtod_l+0x964>)
   e1f9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   e1fa2:	4598      	cmp	r8, r3
   e1fa4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   e1fa8:	f280 80cc 	bge.w	e2144 <_strtod_l+0x87c>
   e1fac:	eba3 0308 	sub.w	r3, r3, r8
   e1fb0:	2b1f      	cmp	r3, #31
   e1fb2:	eba2 0203 	sub.w	r2, r2, r3
   e1fb6:	f04f 0101 	mov.w	r1, #1
   e1fba:	f300 80b6 	bgt.w	e212a <_strtod_l+0x862>
   e1fbe:	fa01 f303 	lsl.w	r3, r1, r3
   e1fc2:	9311      	str	r3, [sp, #68]	; 0x44
   e1fc4:	2300      	movs	r3, #0
   e1fc6:	930c      	str	r3, [sp, #48]	; 0x30
   e1fc8:	eb09 0802 	add.w	r8, r9, r2
   e1fcc:	9b04      	ldr	r3, [sp, #16]
   e1fce:	45c1      	cmp	r9, r8
   e1fd0:	4417      	add	r7, r2
   e1fd2:	441f      	add	r7, r3
   e1fd4:	464b      	mov	r3, r9
   e1fd6:	bfa8      	it	ge
   e1fd8:	4643      	movge	r3, r8
   e1fda:	42bb      	cmp	r3, r7
   e1fdc:	bfa8      	it	ge
   e1fde:	463b      	movge	r3, r7
   e1fe0:	2b00      	cmp	r3, #0
   e1fe2:	bfc2      	ittt	gt
   e1fe4:	eba8 0803 	subgt.w	r8, r8, r3
   e1fe8:	1aff      	subgt	r7, r7, r3
   e1fea:	eba9 0903 	subgt.w	r9, r9, r3
   e1fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e1ff0:	2b00      	cmp	r3, #0
   e1ff2:	dd17      	ble.n	e2024 <_strtod_l+0x75c>
   e1ff4:	4631      	mov	r1, r6
   e1ff6:	461a      	mov	r2, r3
   e1ff8:	4620      	mov	r0, r4
   e1ffa:	f001 f9c9 	bl	e3390 <__pow5mult>
   e1ffe:	4606      	mov	r6, r0
   e2000:	2800      	cmp	r0, #0
   e2002:	f43f aead 	beq.w	e1d60 <_strtod_l+0x498>
   e2006:	4601      	mov	r1, r0
   e2008:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e200a:	4620      	mov	r0, r4
   e200c:	f001 f924 	bl	e3258 <__multiply>
   e2010:	900f      	str	r0, [sp, #60]	; 0x3c
   e2012:	2800      	cmp	r0, #0
   e2014:	f43f aea4 	beq.w	e1d60 <_strtod_l+0x498>
   e2018:	991e      	ldr	r1, [sp, #120]	; 0x78
   e201a:	4620      	mov	r0, r4
   e201c:	f001 f830 	bl	e3080 <_Bfree>
   e2020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e2022:	931e      	str	r3, [sp, #120]	; 0x78
   e2024:	f1b8 0f00 	cmp.w	r8, #0
   e2028:	f300 8091 	bgt.w	e214e <_strtod_l+0x886>
   e202c:	9b08      	ldr	r3, [sp, #32]
   e202e:	2b00      	cmp	r3, #0
   e2030:	dd08      	ble.n	e2044 <_strtod_l+0x77c>
   e2032:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e2034:	9907      	ldr	r1, [sp, #28]
   e2036:	4620      	mov	r0, r4
   e2038:	f001 f9aa 	bl	e3390 <__pow5mult>
   e203c:	9007      	str	r0, [sp, #28]
   e203e:	2800      	cmp	r0, #0
   e2040:	f43f ae8e 	beq.w	e1d60 <_strtod_l+0x498>
   e2044:	2f00      	cmp	r7, #0
   e2046:	dd08      	ble.n	e205a <_strtod_l+0x792>
   e2048:	9907      	ldr	r1, [sp, #28]
   e204a:	463a      	mov	r2, r7
   e204c:	4620      	mov	r0, r4
   e204e:	f001 f9ed 	bl	e342c <__lshift>
   e2052:	9007      	str	r0, [sp, #28]
   e2054:	2800      	cmp	r0, #0
   e2056:	f43f ae83 	beq.w	e1d60 <_strtod_l+0x498>
   e205a:	f1b9 0f00 	cmp.w	r9, #0
   e205e:	dd08      	ble.n	e2072 <_strtod_l+0x7aa>
   e2060:	4631      	mov	r1, r6
   e2062:	464a      	mov	r2, r9
   e2064:	4620      	mov	r0, r4
   e2066:	f001 f9e1 	bl	e342c <__lshift>
   e206a:	4606      	mov	r6, r0
   e206c:	2800      	cmp	r0, #0
   e206e:	f43f ae77 	beq.w	e1d60 <_strtod_l+0x498>
   e2072:	9a07      	ldr	r2, [sp, #28]
   e2074:	991e      	ldr	r1, [sp, #120]	; 0x78
   e2076:	4620      	mov	r0, r4
   e2078:	f001 fa53 	bl	e3522 <__mdiff>
   e207c:	4605      	mov	r5, r0
   e207e:	2800      	cmp	r0, #0
   e2080:	f43f ae6e 	beq.w	e1d60 <_strtod_l+0x498>
   e2084:	68c3      	ldr	r3, [r0, #12]
   e2086:	930f      	str	r3, [sp, #60]	; 0x3c
   e2088:	2300      	movs	r3, #0
   e208a:	60c3      	str	r3, [r0, #12]
   e208c:	4631      	mov	r1, r6
   e208e:	f001 fa2c 	bl	e34ea <__mcmp>
   e2092:	2800      	cmp	r0, #0
   e2094:	da65      	bge.n	e2162 <_strtod_l+0x89a>
   e2096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e2098:	ea53 030a 	orrs.w	r3, r3, sl
   e209c:	f040 8087 	bne.w	e21ae <_strtod_l+0x8e6>
   e20a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e20a4:	2b00      	cmp	r3, #0
   e20a6:	f040 8082 	bne.w	e21ae <_strtod_l+0x8e6>
   e20aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e20ae:	0d1b      	lsrs	r3, r3, #20
   e20b0:	051b      	lsls	r3, r3, #20
   e20b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e20b6:	d97a      	bls.n	e21ae <_strtod_l+0x8e6>
   e20b8:	696b      	ldr	r3, [r5, #20]
   e20ba:	b913      	cbnz	r3, e20c2 <_strtod_l+0x7fa>
   e20bc:	692b      	ldr	r3, [r5, #16]
   e20be:	2b01      	cmp	r3, #1
   e20c0:	dd75      	ble.n	e21ae <_strtod_l+0x8e6>
   e20c2:	4629      	mov	r1, r5
   e20c4:	2201      	movs	r2, #1
   e20c6:	4620      	mov	r0, r4
   e20c8:	f001 f9b0 	bl	e342c <__lshift>
   e20cc:	4631      	mov	r1, r6
   e20ce:	4605      	mov	r5, r0
   e20d0:	f001 fa0b 	bl	e34ea <__mcmp>
   e20d4:	2800      	cmp	r0, #0
   e20d6:	dd6a      	ble.n	e21ae <_strtod_l+0x8e6>
   e20d8:	9904      	ldr	r1, [sp, #16]
   e20da:	4a55      	ldr	r2, [pc, #340]	; (e2230 <_strtod_l+0x968>)
   e20dc:	465b      	mov	r3, fp
   e20de:	2900      	cmp	r1, #0
   e20e0:	f000 8085 	beq.w	e21ee <_strtod_l+0x926>
   e20e4:	ea02 010b 	and.w	r1, r2, fp
   e20e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   e20ec:	dc7f      	bgt.n	e21ee <_strtod_l+0x926>
   e20ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   e20f2:	f77f aeaa 	ble.w	e1e4a <_strtod_l+0x582>
   e20f6:	4a4f      	ldr	r2, [pc, #316]	; (e2234 <_strtod_l+0x96c>)
   e20f8:	2300      	movs	r3, #0
   e20fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   e20fe:	4650      	mov	r0, sl
   e2100:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   e2104:	4659      	mov	r1, fp
   e2106:	f7fe ff2b 	bl	e0f60 <__aeabi_dmul>
   e210a:	460b      	mov	r3, r1
   e210c:	4303      	orrs	r3, r0
   e210e:	bf08      	it	eq
   e2110:	2322      	moveq	r3, #34	; 0x22
   e2112:	4682      	mov	sl, r0
   e2114:	468b      	mov	fp, r1
   e2116:	bf08      	it	eq
   e2118:	6023      	streq	r3, [r4, #0]
   e211a:	e62b      	b.n	e1d74 <_strtod_l+0x4ac>
   e211c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e2120:	fa02 f303 	lsl.w	r3, r2, r3
   e2124:	ea03 0a0a 	and.w	sl, r3, sl
   e2128:	e6de      	b.n	e1ee8 <_strtod_l+0x620>
   e212a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   e212e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   e2132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   e2136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   e213a:	fa01 f308 	lsl.w	r3, r1, r8
   e213e:	930c      	str	r3, [sp, #48]	; 0x30
   e2140:	9111      	str	r1, [sp, #68]	; 0x44
   e2142:	e741      	b.n	e1fc8 <_strtod_l+0x700>
   e2144:	2300      	movs	r3, #0
   e2146:	930c      	str	r3, [sp, #48]	; 0x30
   e2148:	2301      	movs	r3, #1
   e214a:	9311      	str	r3, [sp, #68]	; 0x44
   e214c:	e73c      	b.n	e1fc8 <_strtod_l+0x700>
   e214e:	991e      	ldr	r1, [sp, #120]	; 0x78
   e2150:	4642      	mov	r2, r8
   e2152:	4620      	mov	r0, r4
   e2154:	f001 f96a 	bl	e342c <__lshift>
   e2158:	901e      	str	r0, [sp, #120]	; 0x78
   e215a:	2800      	cmp	r0, #0
   e215c:	f47f af66 	bne.w	e202c <_strtod_l+0x764>
   e2160:	e5fe      	b.n	e1d60 <_strtod_l+0x498>
   e2162:	465f      	mov	r7, fp
   e2164:	d16e      	bne.n	e2244 <_strtod_l+0x97c>
   e2166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e2168:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e216c:	b342      	cbz	r2, e21c0 <_strtod_l+0x8f8>
   e216e:	4a32      	ldr	r2, [pc, #200]	; (e2238 <_strtod_l+0x970>)
   e2170:	4293      	cmp	r3, r2
   e2172:	d128      	bne.n	e21c6 <_strtod_l+0x8fe>
   e2174:	9b04      	ldr	r3, [sp, #16]
   e2176:	4650      	mov	r0, sl
   e2178:	b1eb      	cbz	r3, e21b6 <_strtod_l+0x8ee>
   e217a:	4a2d      	ldr	r2, [pc, #180]	; (e2230 <_strtod_l+0x968>)
   e217c:	403a      	ands	r2, r7
   e217e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   e2182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   e2186:	d819      	bhi.n	e21bc <_strtod_l+0x8f4>
   e2188:	0d12      	lsrs	r2, r2, #20
   e218a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   e218e:	fa01 f303 	lsl.w	r3, r1, r3
   e2192:	4298      	cmp	r0, r3
   e2194:	d117      	bne.n	e21c6 <_strtod_l+0x8fe>
   e2196:	4b29      	ldr	r3, [pc, #164]	; (e223c <_strtod_l+0x974>)
   e2198:	429f      	cmp	r7, r3
   e219a:	d102      	bne.n	e21a2 <_strtod_l+0x8da>
   e219c:	3001      	adds	r0, #1
   e219e:	f43f addf 	beq.w	e1d60 <_strtod_l+0x498>
   e21a2:	4b23      	ldr	r3, [pc, #140]	; (e2230 <_strtod_l+0x968>)
   e21a4:	403b      	ands	r3, r7
   e21a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e21aa:	f04f 0a00 	mov.w	sl, #0
   e21ae:	9b04      	ldr	r3, [sp, #16]
   e21b0:	2b00      	cmp	r3, #0
   e21b2:	d1a0      	bne.n	e20f6 <_strtod_l+0x82e>
   e21b4:	e5de      	b.n	e1d74 <_strtod_l+0x4ac>
   e21b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e21ba:	e7ea      	b.n	e2192 <_strtod_l+0x8ca>
   e21bc:	460b      	mov	r3, r1
   e21be:	e7e8      	b.n	e2192 <_strtod_l+0x8ca>
   e21c0:	ea53 030a 	orrs.w	r3, r3, sl
   e21c4:	d088      	beq.n	e20d8 <_strtod_l+0x810>
   e21c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e21c8:	b1db      	cbz	r3, e2202 <_strtod_l+0x93a>
   e21ca:	423b      	tst	r3, r7
   e21cc:	d0ef      	beq.n	e21ae <_strtod_l+0x8e6>
   e21ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e21d0:	9a04      	ldr	r2, [sp, #16]
   e21d2:	4650      	mov	r0, sl
   e21d4:	4659      	mov	r1, fp
   e21d6:	b1c3      	cbz	r3, e220a <_strtod_l+0x942>
   e21d8:	f7ff fb5a 	bl	e1890 <sulp>
   e21dc:	4602      	mov	r2, r0
   e21de:	460b      	mov	r3, r1
   e21e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e21e4:	f7fe fd06 	bl	e0bf4 <__adddf3>
   e21e8:	4682      	mov	sl, r0
   e21ea:	468b      	mov	fp, r1
   e21ec:	e7df      	b.n	e21ae <_strtod_l+0x8e6>
   e21ee:	4013      	ands	r3, r2
   e21f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e21f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e21f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e21fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e2200:	e7d5      	b.n	e21ae <_strtod_l+0x8e6>
   e2202:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e2204:	ea13 0f0a 	tst.w	r3, sl
   e2208:	e7e0      	b.n	e21cc <_strtod_l+0x904>
   e220a:	f7ff fb41 	bl	e1890 <sulp>
   e220e:	4602      	mov	r2, r0
   e2210:	460b      	mov	r3, r1
   e2212:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e2216:	f7fe fceb 	bl	e0bf0 <__aeabi_dsub>
   e221a:	2200      	movs	r2, #0
   e221c:	2300      	movs	r3, #0
   e221e:	4682      	mov	sl, r0
   e2220:	468b      	mov	fp, r1
   e2222:	f7ff f905 	bl	e1430 <__aeabi_dcmpeq>
   e2226:	2800      	cmp	r0, #0
   e2228:	d0c1      	beq.n	e21ae <_strtod_l+0x8e6>
   e222a:	e60e      	b.n	e1e4a <_strtod_l+0x582>
   e222c:	fffffc02 	.word	0xfffffc02
   e2230:	7ff00000 	.word	0x7ff00000
   e2234:	39500000 	.word	0x39500000
   e2238:	000fffff 	.word	0x000fffff
   e223c:	7fefffff 	.word	0x7fefffff
   e2240:	000e4bb0 	.word	0x000e4bb0
   e2244:	4631      	mov	r1, r6
   e2246:	4628      	mov	r0, r5
   e2248:	f001 faae 	bl	e37a8 <__ratio>
   e224c:	ec59 8b10 	vmov	r8, r9, d0
   e2250:	ee10 0a10 	vmov	r0, s0
   e2254:	2200      	movs	r2, #0
   e2256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e225a:	4649      	mov	r1, r9
   e225c:	f7ff f8fc 	bl	e1458 <__aeabi_dcmple>
   e2260:	2800      	cmp	r0, #0
   e2262:	d07c      	beq.n	e235e <_strtod_l+0xa96>
   e2264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e2266:	2b00      	cmp	r3, #0
   e2268:	d04c      	beq.n	e2304 <_strtod_l+0xa3c>
   e226a:	4b95      	ldr	r3, [pc, #596]	; (e24c0 <_strtod_l+0xbf8>)
   e226c:	2200      	movs	r2, #0
   e226e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e2272:	f8df 924c 	ldr.w	r9, [pc, #588]	; e24c0 <_strtod_l+0xbf8>
   e2276:	f04f 0800 	mov.w	r8, #0
   e227a:	4b92      	ldr	r3, [pc, #584]	; (e24c4 <_strtod_l+0xbfc>)
   e227c:	403b      	ands	r3, r7
   e227e:	9311      	str	r3, [sp, #68]	; 0x44
   e2280:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e2282:	4b91      	ldr	r3, [pc, #580]	; (e24c8 <_strtod_l+0xc00>)
   e2284:	429a      	cmp	r2, r3
   e2286:	f040 80b2 	bne.w	e23ee <_strtod_l+0xb26>
   e228a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e228e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e2292:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   e2296:	ec4b ab10 	vmov	d0, sl, fp
   e229a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   e229e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e22a2:	f001 f9b5 	bl	e3610 <__ulp>
   e22a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e22aa:	ec53 2b10 	vmov	r2, r3, d0
   e22ae:	f7fe fe57 	bl	e0f60 <__aeabi_dmul>
   e22b2:	4652      	mov	r2, sl
   e22b4:	465b      	mov	r3, fp
   e22b6:	f7fe fc9d 	bl	e0bf4 <__adddf3>
   e22ba:	460b      	mov	r3, r1
   e22bc:	4981      	ldr	r1, [pc, #516]	; (e24c4 <_strtod_l+0xbfc>)
   e22be:	4a83      	ldr	r2, [pc, #524]	; (e24cc <_strtod_l+0xc04>)
   e22c0:	4019      	ands	r1, r3
   e22c2:	4291      	cmp	r1, r2
   e22c4:	4682      	mov	sl, r0
   e22c6:	d95e      	bls.n	e2386 <_strtod_l+0xabe>
   e22c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e22ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   e22ce:	4293      	cmp	r3, r2
   e22d0:	d103      	bne.n	e22da <_strtod_l+0xa12>
   e22d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e22d4:	3301      	adds	r3, #1
   e22d6:	f43f ad43 	beq.w	e1d60 <_strtod_l+0x498>
   e22da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; e24d8 <_strtod_l+0xc10>
   e22de:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e22e2:	991e      	ldr	r1, [sp, #120]	; 0x78
   e22e4:	4620      	mov	r0, r4
   e22e6:	f000 fecb 	bl	e3080 <_Bfree>
   e22ea:	9907      	ldr	r1, [sp, #28]
   e22ec:	4620      	mov	r0, r4
   e22ee:	f000 fec7 	bl	e3080 <_Bfree>
   e22f2:	4631      	mov	r1, r6
   e22f4:	4620      	mov	r0, r4
   e22f6:	f000 fec3 	bl	e3080 <_Bfree>
   e22fa:	4629      	mov	r1, r5
   e22fc:	4620      	mov	r0, r4
   e22fe:	f000 febf 	bl	e3080 <_Bfree>
   e2302:	e613      	b.n	e1f2c <_strtod_l+0x664>
   e2304:	f1ba 0f00 	cmp.w	sl, #0
   e2308:	d11b      	bne.n	e2342 <_strtod_l+0xa7a>
   e230a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e230e:	b9f3      	cbnz	r3, e234e <_strtod_l+0xa86>
   e2310:	4b6b      	ldr	r3, [pc, #428]	; (e24c0 <_strtod_l+0xbf8>)
   e2312:	2200      	movs	r2, #0
   e2314:	4640      	mov	r0, r8
   e2316:	4649      	mov	r1, r9
   e2318:	f7ff f894 	bl	e1444 <__aeabi_dcmplt>
   e231c:	b9d0      	cbnz	r0, e2354 <_strtod_l+0xa8c>
   e231e:	4640      	mov	r0, r8
   e2320:	4649      	mov	r1, r9
   e2322:	4b6b      	ldr	r3, [pc, #428]	; (e24d0 <_strtod_l+0xc08>)
   e2324:	2200      	movs	r2, #0
   e2326:	f7fe fe1b 	bl	e0f60 <__aeabi_dmul>
   e232a:	4680      	mov	r8, r0
   e232c:	4689      	mov	r9, r1
   e232e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e2332:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   e2336:	931b      	str	r3, [sp, #108]	; 0x6c
   e2338:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   e233c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e2340:	e79b      	b.n	e227a <_strtod_l+0x9b2>
   e2342:	f1ba 0f01 	cmp.w	sl, #1
   e2346:	d102      	bne.n	e234e <_strtod_l+0xa86>
   e2348:	2f00      	cmp	r7, #0
   e234a:	f43f ad7e 	beq.w	e1e4a <_strtod_l+0x582>
   e234e:	4b61      	ldr	r3, [pc, #388]	; (e24d4 <_strtod_l+0xc0c>)
   e2350:	2200      	movs	r2, #0
   e2352:	e78c      	b.n	e226e <_strtod_l+0x9a6>
   e2354:	f8df 9178 	ldr.w	r9, [pc, #376]	; e24d0 <_strtod_l+0xc08>
   e2358:	f04f 0800 	mov.w	r8, #0
   e235c:	e7e7      	b.n	e232e <_strtod_l+0xa66>
   e235e:	4b5c      	ldr	r3, [pc, #368]	; (e24d0 <_strtod_l+0xc08>)
   e2360:	4640      	mov	r0, r8
   e2362:	4649      	mov	r1, r9
   e2364:	2200      	movs	r2, #0
   e2366:	f7fe fdfb 	bl	e0f60 <__aeabi_dmul>
   e236a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e236c:	4680      	mov	r8, r0
   e236e:	4689      	mov	r9, r1
   e2370:	b933      	cbnz	r3, e2380 <_strtod_l+0xab8>
   e2372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2376:	9012      	str	r0, [sp, #72]	; 0x48
   e2378:	9313      	str	r3, [sp, #76]	; 0x4c
   e237a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e237e:	e7dd      	b.n	e233c <_strtod_l+0xa74>
   e2380:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   e2384:	e7f9      	b.n	e237a <_strtod_l+0xab2>
   e2386:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   e238a:	9b04      	ldr	r3, [sp, #16]
   e238c:	2b00      	cmp	r3, #0
   e238e:	d1a8      	bne.n	e22e2 <_strtod_l+0xa1a>
   e2390:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2394:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e2396:	0d1b      	lsrs	r3, r3, #20
   e2398:	051b      	lsls	r3, r3, #20
   e239a:	429a      	cmp	r2, r3
   e239c:	d1a1      	bne.n	e22e2 <_strtod_l+0xa1a>
   e239e:	4640      	mov	r0, r8
   e23a0:	4649      	mov	r1, r9
   e23a2:	f001 fabf 	bl	e3924 <__aeabi_d2lz>
   e23a6:	f7fe fdad 	bl	e0f04 <__aeabi_l2d>
   e23aa:	4602      	mov	r2, r0
   e23ac:	460b      	mov	r3, r1
   e23ae:	4640      	mov	r0, r8
   e23b0:	4649      	mov	r1, r9
   e23b2:	f7fe fc1d 	bl	e0bf0 <__aeabi_dsub>
   e23b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e23b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e23bc:	ea43 030a 	orr.w	r3, r3, sl
   e23c0:	4313      	orrs	r3, r2
   e23c2:	4680      	mov	r8, r0
   e23c4:	4689      	mov	r9, r1
   e23c6:	d053      	beq.n	e2470 <_strtod_l+0xba8>
   e23c8:	a335      	add	r3, pc, #212	; (adr r3, e24a0 <_strtod_l+0xbd8>)
   e23ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   e23ce:	f7ff f839 	bl	e1444 <__aeabi_dcmplt>
   e23d2:	2800      	cmp	r0, #0
   e23d4:	f47f acce 	bne.w	e1d74 <_strtod_l+0x4ac>
   e23d8:	a333      	add	r3, pc, #204	; (adr r3, e24a8 <_strtod_l+0xbe0>)
   e23da:	e9d3 2300 	ldrd	r2, r3, [r3]
   e23de:	4640      	mov	r0, r8
   e23e0:	4649      	mov	r1, r9
   e23e2:	f7ff f84d 	bl	e1480 <__aeabi_dcmpgt>
   e23e6:	2800      	cmp	r0, #0
   e23e8:	f43f af7b 	beq.w	e22e2 <_strtod_l+0xa1a>
   e23ec:	e4c2      	b.n	e1d74 <_strtod_l+0x4ac>
   e23ee:	9b04      	ldr	r3, [sp, #16]
   e23f0:	b333      	cbz	r3, e2440 <_strtod_l+0xb78>
   e23f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e23f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e23f8:	d822      	bhi.n	e2440 <_strtod_l+0xb78>
   e23fa:	a32d      	add	r3, pc, #180	; (adr r3, e24b0 <_strtod_l+0xbe8>)
   e23fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2400:	4640      	mov	r0, r8
   e2402:	4649      	mov	r1, r9
   e2404:	f7ff f828 	bl	e1458 <__aeabi_dcmple>
   e2408:	b1a0      	cbz	r0, e2434 <_strtod_l+0xb6c>
   e240a:	4649      	mov	r1, r9
   e240c:	4640      	mov	r0, r8
   e240e:	f7ff f87f 	bl	e1510 <__aeabi_d2uiz>
   e2412:	2801      	cmp	r0, #1
   e2414:	bf38      	it	cc
   e2416:	2001      	movcc	r0, #1
   e2418:	f7fe fd28 	bl	e0e6c <__aeabi_ui2d>
   e241c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e241e:	4680      	mov	r8, r0
   e2420:	4689      	mov	r9, r1
   e2422:	bb13      	cbnz	r3, e246a <_strtod_l+0xba2>
   e2424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2428:	9014      	str	r0, [sp, #80]	; 0x50
   e242a:	9315      	str	r3, [sp, #84]	; 0x54
   e242c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   e2430:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e2434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e2436:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e2438:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   e243c:	1a9b      	subs	r3, r3, r2
   e243e:	930d      	str	r3, [sp, #52]	; 0x34
   e2440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e2444:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   e2448:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e244c:	f001 f8e0 	bl	e3610 <__ulp>
   e2450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e2454:	ec53 2b10 	vmov	r2, r3, d0
   e2458:	f7fe fd82 	bl	e0f60 <__aeabi_dmul>
   e245c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e2460:	f7fe fbc8 	bl	e0bf4 <__adddf3>
   e2464:	4682      	mov	sl, r0
   e2466:	468b      	mov	fp, r1
   e2468:	e78f      	b.n	e238a <_strtod_l+0xac2>
   e246a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   e246e:	e7dd      	b.n	e242c <_strtod_l+0xb64>
   e2470:	a311      	add	r3, pc, #68	; (adr r3, e24b8 <_strtod_l+0xbf0>)
   e2472:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2476:	f7fe ffe5 	bl	e1444 <__aeabi_dcmplt>
   e247a:	e7b4      	b.n	e23e6 <_strtod_l+0xb1e>
   e247c:	2300      	movs	r3, #0
   e247e:	930e      	str	r3, [sp, #56]	; 0x38
   e2480:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e2482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e2484:	6013      	str	r3, [r2, #0]
   e2486:	f7ff ba65 	b.w	e1954 <_strtod_l+0x8c>
   e248a:	2b65      	cmp	r3, #101	; 0x65
   e248c:	f43f ab5d 	beq.w	e1b4a <_strtod_l+0x282>
   e2490:	2b45      	cmp	r3, #69	; 0x45
   e2492:	f43f ab5a 	beq.w	e1b4a <_strtod_l+0x282>
   e2496:	2201      	movs	r2, #1
   e2498:	f7ff bb92 	b.w	e1bc0 <_strtod_l+0x2f8>
   e249c:	f3af 8000 	nop.w
   e24a0:	94a03595 	.word	0x94a03595
   e24a4:	3fdfffff 	.word	0x3fdfffff
   e24a8:	35afe535 	.word	0x35afe535
   e24ac:	3fe00000 	.word	0x3fe00000
   e24b0:	ffc00000 	.word	0xffc00000
   e24b4:	41dfffff 	.word	0x41dfffff
   e24b8:	94a03595 	.word	0x94a03595
   e24bc:	3fcfffff 	.word	0x3fcfffff
   e24c0:	3ff00000 	.word	0x3ff00000
   e24c4:	7ff00000 	.word	0x7ff00000
   e24c8:	7fe00000 	.word	0x7fe00000
   e24cc:	7c9fffff 	.word	0x7c9fffff
   e24d0:	3fe00000 	.word	0x3fe00000
   e24d4:	bff00000 	.word	0xbff00000
   e24d8:	7fefffff 	.word	0x7fefffff

000e24dc <strtod>:
   e24dc:	460a      	mov	r2, r1
   e24de:	4601      	mov	r1, r0
   e24e0:	4802      	ldr	r0, [pc, #8]	; (e24ec <strtod+0x10>)
   e24e2:	4b03      	ldr	r3, [pc, #12]	; (e24f0 <strtod+0x14>)
   e24e4:	6800      	ldr	r0, [r0, #0]
   e24e6:	f7ff b9ef 	b.w	e18c8 <_strtod_l>
   e24ea:	bf00      	nop
   e24ec:	2003e1d0 	.word	0x2003e1d0
   e24f0:	2003e23c 	.word	0x2003e23c

000e24f4 <strtof>:
   e24f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   e24f8:	4e26      	ldr	r6, [pc, #152]	; (e2594 <strtof+0xa0>)
   e24fa:	4b27      	ldr	r3, [pc, #156]	; (e2598 <strtof+0xa4>)
   e24fc:	460a      	mov	r2, r1
   e24fe:	ed2d 8b02 	vpush	{d8}
   e2502:	4601      	mov	r1, r0
   e2504:	6830      	ldr	r0, [r6, #0]
   e2506:	f7ff f9df 	bl	e18c8 <_strtod_l>
   e250a:	ec55 4b10 	vmov	r4, r5, d0
   e250e:	ee10 2a10 	vmov	r2, s0
   e2512:	ee10 0a10 	vmov	r0, s0
   e2516:	462b      	mov	r3, r5
   e2518:	4629      	mov	r1, r5
   e251a:	f7fe ffbb 	bl	e1494 <__aeabi_dcmpun>
   e251e:	b190      	cbz	r0, e2546 <strtof+0x52>
   e2520:	2d00      	cmp	r5, #0
   e2522:	481e      	ldr	r0, [pc, #120]	; (e259c <strtof+0xa8>)
   e2524:	da09      	bge.n	e253a <strtof+0x46>
   e2526:	f001 f9e9 	bl	e38fc <nanf>
   e252a:	eeb1 8a40 	vneg.f32	s16, s0
   e252e:	eeb0 0a48 	vmov.f32	s0, s16
   e2532:	ecbd 8b02 	vpop	{d8}
   e2536:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   e253a:	ecbd 8b02 	vpop	{d8}
   e253e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   e2542:	f001 b9db 	b.w	e38fc <nanf>
   e2546:	4620      	mov	r0, r4
   e2548:	4629      	mov	r1, r5
   e254a:	f7ff f801 	bl	e1550 <__aeabi_d2f>
   e254e:	ee08 0a10 	vmov	s16, r0
   e2552:	eddf 7a13 	vldr	s15, [pc, #76]	; e25a0 <strtof+0xac>
   e2556:	eeb0 7ac8 	vabs.f32	s14, s16
   e255a:	eeb4 7a67 	vcmp.f32	s14, s15
   e255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e2562:	dde4      	ble.n	e252e <strtof+0x3a>
   e2564:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   e2568:	4b0e      	ldr	r3, [pc, #56]	; (e25a4 <strtof+0xb0>)
   e256a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e256e:	4620      	mov	r0, r4
   e2570:	4649      	mov	r1, r9
   e2572:	f7fe ff8f 	bl	e1494 <__aeabi_dcmpun>
   e2576:	b940      	cbnz	r0, e258a <strtof+0x96>
   e2578:	4b0a      	ldr	r3, [pc, #40]	; (e25a4 <strtof+0xb0>)
   e257a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e257e:	4620      	mov	r0, r4
   e2580:	4649      	mov	r1, r9
   e2582:	f7fe ff69 	bl	e1458 <__aeabi_dcmple>
   e2586:	2800      	cmp	r0, #0
   e2588:	d0d1      	beq.n	e252e <strtof+0x3a>
   e258a:	6833      	ldr	r3, [r6, #0]
   e258c:	2222      	movs	r2, #34	; 0x22
   e258e:	601a      	str	r2, [r3, #0]
   e2590:	e7cd      	b.n	e252e <strtof+0x3a>
   e2592:	bf00      	nop
   e2594:	2003e1d0 	.word	0x2003e1d0
   e2598:	2003e23c 	.word	0x2003e23c
   e259c:	000e4537 	.word	0x000e4537
   e25a0:	7f7fffff 	.word	0x7f7fffff
   e25a4:	7fefffff 	.word	0x7fefffff

000e25a8 <__strtok_r>:
   e25a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   e25aa:	b908      	cbnz	r0, e25b0 <__strtok_r+0x8>
   e25ac:	6810      	ldr	r0, [r2, #0]
   e25ae:	b188      	cbz	r0, e25d4 <__strtok_r+0x2c>
   e25b0:	4604      	mov	r4, r0
   e25b2:	4620      	mov	r0, r4
   e25b4:	f814 5b01 	ldrb.w	r5, [r4], #1
   e25b8:	460f      	mov	r7, r1
   e25ba:	f817 6b01 	ldrb.w	r6, [r7], #1
   e25be:	b91e      	cbnz	r6, e25c8 <__strtok_r+0x20>
   e25c0:	b965      	cbnz	r5, e25dc <__strtok_r+0x34>
   e25c2:	6015      	str	r5, [r2, #0]
   e25c4:	4628      	mov	r0, r5
   e25c6:	e005      	b.n	e25d4 <__strtok_r+0x2c>
   e25c8:	42b5      	cmp	r5, r6
   e25ca:	d1f6      	bne.n	e25ba <__strtok_r+0x12>
   e25cc:	2b00      	cmp	r3, #0
   e25ce:	d1f0      	bne.n	e25b2 <__strtok_r+0xa>
   e25d0:	6014      	str	r4, [r2, #0]
   e25d2:	7003      	strb	r3, [r0, #0]
   e25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e25d6:	461c      	mov	r4, r3
   e25d8:	e00c      	b.n	e25f4 <__strtok_r+0x4c>
   e25da:	b915      	cbnz	r5, e25e2 <__strtok_r+0x3a>
   e25dc:	f814 3b01 	ldrb.w	r3, [r4], #1
   e25e0:	460e      	mov	r6, r1
   e25e2:	f816 5b01 	ldrb.w	r5, [r6], #1
   e25e6:	42ab      	cmp	r3, r5
   e25e8:	d1f7      	bne.n	e25da <__strtok_r+0x32>
   e25ea:	2b00      	cmp	r3, #0
   e25ec:	d0f3      	beq.n	e25d6 <__strtok_r+0x2e>
   e25ee:	2300      	movs	r3, #0
   e25f0:	f804 3c01 	strb.w	r3, [r4, #-1]
   e25f4:	6014      	str	r4, [r2, #0]
   e25f6:	e7ed      	b.n	e25d4 <__strtok_r+0x2c>

000e25f8 <strtok_r>:
   e25f8:	2301      	movs	r3, #1
   e25fa:	f7ff bfd5 	b.w	e25a8 <__strtok_r>
	...

000e2600 <_strtol_l.isra.0>:
   e2600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e2604:	4e3a      	ldr	r6, [pc, #232]	; (e26f0 <_strtol_l.isra.0+0xf0>)
   e2606:	4686      	mov	lr, r0
   e2608:	468c      	mov	ip, r1
   e260a:	4660      	mov	r0, ip
   e260c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e2610:	5da5      	ldrb	r5, [r4, r6]
   e2612:	f015 0508 	ands.w	r5, r5, #8
   e2616:	d1f8      	bne.n	e260a <_strtol_l.isra.0+0xa>
   e2618:	2c2d      	cmp	r4, #45	; 0x2d
   e261a:	d133      	bne.n	e2684 <_strtol_l.isra.0+0x84>
   e261c:	f89c 4000 	ldrb.w	r4, [ip]
   e2620:	f04f 0801 	mov.w	r8, #1
   e2624:	f100 0c02 	add.w	ip, r0, #2
   e2628:	2b00      	cmp	r3, #0
   e262a:	d05c      	beq.n	e26e6 <_strtol_l.isra.0+0xe6>
   e262c:	2b10      	cmp	r3, #16
   e262e:	d10c      	bne.n	e264a <_strtol_l.isra.0+0x4a>
   e2630:	2c30      	cmp	r4, #48	; 0x30
   e2632:	d10a      	bne.n	e264a <_strtol_l.isra.0+0x4a>
   e2634:	f89c 0000 	ldrb.w	r0, [ip]
   e2638:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e263c:	2858      	cmp	r0, #88	; 0x58
   e263e:	d14d      	bne.n	e26dc <_strtol_l.isra.0+0xdc>
   e2640:	f89c 4001 	ldrb.w	r4, [ip, #1]
   e2644:	2310      	movs	r3, #16
   e2646:	f10c 0c02 	add.w	ip, ip, #2
   e264a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   e264e:	3f01      	subs	r7, #1
   e2650:	2600      	movs	r6, #0
   e2652:	fbb7 f9f3 	udiv	r9, r7, r3
   e2656:	4630      	mov	r0, r6
   e2658:	fb03 7a19 	mls	sl, r3, r9, r7
   e265c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   e2660:	2d09      	cmp	r5, #9
   e2662:	d818      	bhi.n	e2696 <_strtol_l.isra.0+0x96>
   e2664:	462c      	mov	r4, r5
   e2666:	42a3      	cmp	r3, r4
   e2668:	dd24      	ble.n	e26b4 <_strtol_l.isra.0+0xb4>
   e266a:	1c75      	adds	r5, r6, #1
   e266c:	d007      	beq.n	e267e <_strtol_l.isra.0+0x7e>
   e266e:	4581      	cmp	r9, r0
   e2670:	d31d      	bcc.n	e26ae <_strtol_l.isra.0+0xae>
   e2672:	d101      	bne.n	e2678 <_strtol_l.isra.0+0x78>
   e2674:	45a2      	cmp	sl, r4
   e2676:	db1a      	blt.n	e26ae <_strtol_l.isra.0+0xae>
   e2678:	fb00 4003 	mla	r0, r0, r3, r4
   e267c:	2601      	movs	r6, #1
   e267e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e2682:	e7eb      	b.n	e265c <_strtol_l.isra.0+0x5c>
   e2684:	2c2b      	cmp	r4, #43	; 0x2b
   e2686:	bf08      	it	eq
   e2688:	f89c 4000 	ldrbeq.w	r4, [ip]
   e268c:	46a8      	mov	r8, r5
   e268e:	bf08      	it	eq
   e2690:	f100 0c02 	addeq.w	ip, r0, #2
   e2694:	e7c8      	b.n	e2628 <_strtol_l.isra.0+0x28>
   e2696:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   e269a:	2d19      	cmp	r5, #25
   e269c:	d801      	bhi.n	e26a2 <_strtol_l.isra.0+0xa2>
   e269e:	3c37      	subs	r4, #55	; 0x37
   e26a0:	e7e1      	b.n	e2666 <_strtol_l.isra.0+0x66>
   e26a2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   e26a6:	2d19      	cmp	r5, #25
   e26a8:	d804      	bhi.n	e26b4 <_strtol_l.isra.0+0xb4>
   e26aa:	3c57      	subs	r4, #87	; 0x57
   e26ac:	e7db      	b.n	e2666 <_strtol_l.isra.0+0x66>
   e26ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   e26b2:	e7e4      	b.n	e267e <_strtol_l.isra.0+0x7e>
   e26b4:	1c73      	adds	r3, r6, #1
   e26b6:	d106      	bne.n	e26c6 <_strtol_l.isra.0+0xc6>
   e26b8:	2322      	movs	r3, #34	; 0x22
   e26ba:	f8ce 3000 	str.w	r3, [lr]
   e26be:	4638      	mov	r0, r7
   e26c0:	b942      	cbnz	r2, e26d4 <_strtol_l.isra.0+0xd4>
   e26c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e26c6:	f1b8 0f00 	cmp.w	r8, #0
   e26ca:	d000      	beq.n	e26ce <_strtol_l.isra.0+0xce>
   e26cc:	4240      	negs	r0, r0
   e26ce:	2a00      	cmp	r2, #0
   e26d0:	d0f7      	beq.n	e26c2 <_strtol_l.isra.0+0xc2>
   e26d2:	b10e      	cbz	r6, e26d8 <_strtol_l.isra.0+0xd8>
   e26d4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   e26d8:	6011      	str	r1, [r2, #0]
   e26da:	e7f2      	b.n	e26c2 <_strtol_l.isra.0+0xc2>
   e26dc:	2430      	movs	r4, #48	; 0x30
   e26de:	2b00      	cmp	r3, #0
   e26e0:	d1b3      	bne.n	e264a <_strtol_l.isra.0+0x4a>
   e26e2:	2308      	movs	r3, #8
   e26e4:	e7b1      	b.n	e264a <_strtol_l.isra.0+0x4a>
   e26e6:	2c30      	cmp	r4, #48	; 0x30
   e26e8:	d0a4      	beq.n	e2634 <_strtol_l.isra.0+0x34>
   e26ea:	230a      	movs	r3, #10
   e26ec:	e7ad      	b.n	e264a <_strtol_l.isra.0+0x4a>
   e26ee:	bf00      	nop
   e26f0:	000e4bd9 	.word	0x000e4bd9

000e26f4 <strtol>:
   e26f4:	4613      	mov	r3, r2
   e26f6:	460a      	mov	r2, r1
   e26f8:	4601      	mov	r1, r0
   e26fa:	4802      	ldr	r0, [pc, #8]	; (e2704 <strtol+0x10>)
   e26fc:	6800      	ldr	r0, [r0, #0]
   e26fe:	f7ff bf7f 	b.w	e2600 <_strtol_l.isra.0>
   e2702:	bf00      	nop
   e2704:	2003e1d0 	.word	0x2003e1d0

000e2708 <close>:
   e2708:	4b02      	ldr	r3, [pc, #8]	; (e2714 <close+0xc>)
   e270a:	4601      	mov	r1, r0
   e270c:	6818      	ldr	r0, [r3, #0]
   e270e:	f000 b8c9 	b.w	e28a4 <_close_r>
   e2712:	bf00      	nop
   e2714:	2003e1d0 	.word	0x2003e1d0

000e2718 <fstat>:
   e2718:	4b02      	ldr	r3, [pc, #8]	; (e2724 <fstat+0xc>)
   e271a:	460a      	mov	r2, r1
   e271c:	4601      	mov	r1, r0
   e271e:	6818      	ldr	r0, [r3, #0]
   e2720:	f000 b8d0 	b.w	e28c4 <_fstat_r>
   e2724:	2003e1d0 	.word	0x2003e1d0

000e2728 <lseek>:
   e2728:	4613      	mov	r3, r2
   e272a:	460a      	mov	r2, r1
   e272c:	4601      	mov	r1, r0
   e272e:	4802      	ldr	r0, [pc, #8]	; (e2738 <lseek+0x10>)
   e2730:	6800      	ldr	r0, [r0, #0]
   e2732:	f000 bc4d 	b.w	e2fd0 <_lseek_r>
   e2736:	bf00      	nop
   e2738:	2003e1d0 	.word	0x2003e1d0

000e273c <open>:
   e273c:	b40e      	push	{r1, r2, r3}
   e273e:	b503      	push	{r0, r1, lr}
   e2740:	ab03      	add	r3, sp, #12
   e2742:	4601      	mov	r1, r0
   e2744:	4806      	ldr	r0, [pc, #24]	; (e2760 <open+0x24>)
   e2746:	f853 2b04 	ldr.w	r2, [r3], #4
   e274a:	9301      	str	r3, [sp, #4]
   e274c:	6800      	ldr	r0, [r0, #0]
   e274e:	9b04      	ldr	r3, [sp, #16]
   e2750:	f001 f8b0 	bl	e38b4 <_open_r>
   e2754:	b002      	add	sp, #8
   e2756:	f85d eb04 	ldr.w	lr, [sp], #4
   e275a:	b003      	add	sp, #12
   e275c:	4770      	bx	lr
   e275e:	bf00      	nop
   e2760:	2003e1d0 	.word	0x2003e1d0

000e2764 <read>:
   e2764:	4613      	mov	r3, r2
   e2766:	460a      	mov	r2, r1
   e2768:	4601      	mov	r1, r0
   e276a:	4802      	ldr	r0, [pc, #8]	; (e2774 <read+0x10>)
   e276c:	6800      	ldr	r0, [r0, #0]
   e276e:	f001 b8b3 	b.w	e38d8 <_read_r>
   e2772:	bf00      	nop
   e2774:	2003e1d0 	.word	0x2003e1d0

000e2778 <unlink>:
   e2778:	4b02      	ldr	r3, [pc, #8]	; (e2784 <unlink+0xc>)
   e277a:	4601      	mov	r1, r0
   e277c:	6818      	ldr	r0, [r3, #0]
   e277e:	f000 b80d 	b.w	e279c <_unlink_r>
   e2782:	bf00      	nop
   e2784:	2003e1d0 	.word	0x2003e1d0

000e2788 <write>:
   e2788:	4613      	mov	r3, r2
   e278a:	460a      	mov	r2, r1
   e278c:	4601      	mov	r1, r0
   e278e:	4802      	ldr	r0, [pc, #8]	; (e2798 <write+0x10>)
   e2790:	6800      	ldr	r0, [r0, #0]
   e2792:	f000 b813 	b.w	e27bc <_write_r>
   e2796:	bf00      	nop
   e2798:	2003e1d0 	.word	0x2003e1d0

000e279c <_unlink_r>:
   e279c:	b538      	push	{r3, r4, r5, lr}
   e279e:	4d06      	ldr	r5, [pc, #24]	; (e27b8 <_unlink_r+0x1c>)
   e27a0:	2300      	movs	r3, #0
   e27a2:	4604      	mov	r4, r0
   e27a4:	4608      	mov	r0, r1
   e27a6:	602b      	str	r3, [r5, #0]
   e27a8:	f7fa fa8e 	bl	dccc8 <_unlink>
   e27ac:	1c43      	adds	r3, r0, #1
   e27ae:	d102      	bne.n	e27b6 <_unlink_r+0x1a>
   e27b0:	682b      	ldr	r3, [r5, #0]
   e27b2:	b103      	cbz	r3, e27b6 <_unlink_r+0x1a>
   e27b4:	6023      	str	r3, [r4, #0]
   e27b6:	bd38      	pop	{r3, r4, r5, pc}
   e27b8:	2003e7ec 	.word	0x2003e7ec

000e27bc <_write_r>:
   e27bc:	b538      	push	{r3, r4, r5, lr}
   e27be:	4d07      	ldr	r5, [pc, #28]	; (e27dc <_write_r+0x20>)
   e27c0:	4604      	mov	r4, r0
   e27c2:	4608      	mov	r0, r1
   e27c4:	4611      	mov	r1, r2
   e27c6:	2200      	movs	r2, #0
   e27c8:	602a      	str	r2, [r5, #0]
   e27ca:	461a      	mov	r2, r3
   e27cc:	f7fa fa44 	bl	dcc58 <_write>
   e27d0:	1c43      	adds	r3, r0, #1
   e27d2:	d102      	bne.n	e27da <_write_r+0x1e>
   e27d4:	682b      	ldr	r3, [r5, #0]
   e27d6:	b103      	cbz	r3, e27da <_write_r+0x1e>
   e27d8:	6023      	str	r3, [r4, #0]
   e27da:	bd38      	pop	{r3, r4, r5, pc}
   e27dc:	2003e7ec 	.word	0x2003e7ec

000e27e0 <__register_exitproc>:
   e27e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e27e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; e28a0 <__register_exitproc+0xc0>
   e27e8:	4606      	mov	r6, r0
   e27ea:	f8d8 0000 	ldr.w	r0, [r8]
   e27ee:	461f      	mov	r7, r3
   e27f0:	460d      	mov	r5, r1
   e27f2:	4691      	mov	r9, r2
   e27f4:	f000 fbe8 	bl	e2fc8 <__retarget_lock_acquire_recursive>
   e27f8:	4b25      	ldr	r3, [pc, #148]	; (e2890 <__register_exitproc+0xb0>)
   e27fa:	681c      	ldr	r4, [r3, #0]
   e27fc:	b934      	cbnz	r4, e280c <__register_exitproc+0x2c>
   e27fe:	4c25      	ldr	r4, [pc, #148]	; (e2894 <__register_exitproc+0xb4>)
   e2800:	601c      	str	r4, [r3, #0]
   e2802:	4b25      	ldr	r3, [pc, #148]	; (e2898 <__register_exitproc+0xb8>)
   e2804:	b113      	cbz	r3, e280c <__register_exitproc+0x2c>
   e2806:	681b      	ldr	r3, [r3, #0]
   e2808:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   e280c:	6863      	ldr	r3, [r4, #4]
   e280e:	2b1f      	cmp	r3, #31
   e2810:	dd07      	ble.n	e2822 <__register_exitproc+0x42>
   e2812:	f8d8 0000 	ldr.w	r0, [r8]
   e2816:	f000 fbd9 	bl	e2fcc <__retarget_lock_release_recursive>
   e281a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e2822:	b34e      	cbz	r6, e2878 <__register_exitproc+0x98>
   e2824:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   e2828:	b988      	cbnz	r0, e284e <__register_exitproc+0x6e>
   e282a:	4b1c      	ldr	r3, [pc, #112]	; (e289c <__register_exitproc+0xbc>)
   e282c:	b923      	cbnz	r3, e2838 <__register_exitproc+0x58>
   e282e:	f8d8 0000 	ldr.w	r0, [r8]
   e2832:	f000 fbca 	bl	e2fca <__retarget_lock_release>
   e2836:	e7f0      	b.n	e281a <__register_exitproc+0x3a>
   e2838:	f44f 7084 	mov.w	r0, #264	; 0x108
   e283c:	f7fa fc5c 	bl	dd0f8 <malloc>
   e2840:	2800      	cmp	r0, #0
   e2842:	d0f4      	beq.n	e282e <__register_exitproc+0x4e>
   e2844:	2300      	movs	r3, #0
   e2846:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   e284a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   e284e:	6863      	ldr	r3, [r4, #4]
   e2850:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   e2854:	2201      	movs	r2, #1
   e2856:	409a      	lsls	r2, r3
   e2858:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   e285c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   e2860:	4313      	orrs	r3, r2
   e2862:	2e02      	cmp	r6, #2
   e2864:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   e2868:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   e286c:	bf02      	ittt	eq
   e286e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   e2872:	431a      	orreq	r2, r3
   e2874:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   e2878:	6863      	ldr	r3, [r4, #4]
   e287a:	f8d8 0000 	ldr.w	r0, [r8]
   e287e:	1c5a      	adds	r2, r3, #1
   e2880:	3302      	adds	r3, #2
   e2882:	6062      	str	r2, [r4, #4]
   e2884:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   e2888:	f000 fba0 	bl	e2fcc <__retarget_lock_release_recursive>
   e288c:	2000      	movs	r0, #0
   e288e:	e7c6      	b.n	e281e <__register_exitproc+0x3e>
   e2890:	2003e7dc 	.word	0x2003e7dc
   e2894:	2003e750 	.word	0x2003e750
   e2898:	00000000 	.word	0x00000000
   e289c:	000dd0f9 	.word	0x000dd0f9
   e28a0:	2003e234 	.word	0x2003e234

000e28a4 <_close_r>:
   e28a4:	b538      	push	{r3, r4, r5, lr}
   e28a6:	4d06      	ldr	r5, [pc, #24]	; (e28c0 <_close_r+0x1c>)
   e28a8:	2300      	movs	r3, #0
   e28aa:	4604      	mov	r4, r0
   e28ac:	4608      	mov	r0, r1
   e28ae:	602b      	str	r3, [r5, #0]
   e28b0:	f7fa f9e2 	bl	dcc78 <_close>
   e28b4:	1c43      	adds	r3, r0, #1
   e28b6:	d102      	bne.n	e28be <_close_r+0x1a>
   e28b8:	682b      	ldr	r3, [r5, #0]
   e28ba:	b103      	cbz	r3, e28be <_close_r+0x1a>
   e28bc:	6023      	str	r3, [r4, #0]
   e28be:	bd38      	pop	{r3, r4, r5, pc}
   e28c0:	2003e7ec 	.word	0x2003e7ec

000e28c4 <_fstat_r>:
   e28c4:	b538      	push	{r3, r4, r5, lr}
   e28c6:	4d07      	ldr	r5, [pc, #28]	; (e28e4 <_fstat_r+0x20>)
   e28c8:	2300      	movs	r3, #0
   e28ca:	4604      	mov	r4, r0
   e28cc:	4608      	mov	r0, r1
   e28ce:	4611      	mov	r1, r2
   e28d0:	602b      	str	r3, [r5, #0]
   e28d2:	f7fa f9d9 	bl	dcc88 <_fstat>
   e28d6:	1c43      	adds	r3, r0, #1
   e28d8:	d102      	bne.n	e28e0 <_fstat_r+0x1c>
   e28da:	682b      	ldr	r3, [r5, #0]
   e28dc:	b103      	cbz	r3, e28e0 <_fstat_r+0x1c>
   e28de:	6023      	str	r3, [r4, #0]
   e28e0:	bd38      	pop	{r3, r4, r5, pc}
   e28e2:	bf00      	nop
   e28e4:	2003e7ec 	.word	0x2003e7ec

000e28e8 <rshift>:
   e28e8:	6903      	ldr	r3, [r0, #16]
   e28ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   e28ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e28f2:	ea4f 1261 	mov.w	r2, r1, asr #5
   e28f6:	f100 0414 	add.w	r4, r0, #20
   e28fa:	dd45      	ble.n	e2988 <rshift+0xa0>
   e28fc:	f011 011f 	ands.w	r1, r1, #31
   e2900:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   e2904:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e2908:	d10c      	bne.n	e2924 <rshift+0x3c>
   e290a:	f100 0710 	add.w	r7, r0, #16
   e290e:	4629      	mov	r1, r5
   e2910:	42b1      	cmp	r1, r6
   e2912:	d334      	bcc.n	e297e <rshift+0x96>
   e2914:	1a9b      	subs	r3, r3, r2
   e2916:	009b      	lsls	r3, r3, #2
   e2918:	1eea      	subs	r2, r5, #3
   e291a:	4296      	cmp	r6, r2
   e291c:	bf38      	it	cc
   e291e:	2300      	movcc	r3, #0
   e2920:	4423      	add	r3, r4
   e2922:	e015      	b.n	e2950 <rshift+0x68>
   e2924:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   e2928:	f1c1 0820 	rsb	r8, r1, #32
   e292c:	40cf      	lsrs	r7, r1
   e292e:	f105 0e04 	add.w	lr, r5, #4
   e2932:	46a1      	mov	r9, r4
   e2934:	4576      	cmp	r6, lr
   e2936:	46f4      	mov	ip, lr
   e2938:	d815      	bhi.n	e2966 <rshift+0x7e>
   e293a:	1a9b      	subs	r3, r3, r2
   e293c:	009a      	lsls	r2, r3, #2
   e293e:	3a04      	subs	r2, #4
   e2940:	3501      	adds	r5, #1
   e2942:	42ae      	cmp	r6, r5
   e2944:	bf38      	it	cc
   e2946:	2200      	movcc	r2, #0
   e2948:	18a3      	adds	r3, r4, r2
   e294a:	50a7      	str	r7, [r4, r2]
   e294c:	b107      	cbz	r7, e2950 <rshift+0x68>
   e294e:	3304      	adds	r3, #4
   e2950:	1b1a      	subs	r2, r3, r4
   e2952:	42a3      	cmp	r3, r4
   e2954:	ea4f 02a2 	mov.w	r2, r2, asr #2
   e2958:	bf08      	it	eq
   e295a:	2300      	moveq	r3, #0
   e295c:	6102      	str	r2, [r0, #16]
   e295e:	bf08      	it	eq
   e2960:	6143      	streq	r3, [r0, #20]
   e2962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e2966:	f8dc c000 	ldr.w	ip, [ip]
   e296a:	fa0c fc08 	lsl.w	ip, ip, r8
   e296e:	ea4c 0707 	orr.w	r7, ip, r7
   e2972:	f849 7b04 	str.w	r7, [r9], #4
   e2976:	f85e 7b04 	ldr.w	r7, [lr], #4
   e297a:	40cf      	lsrs	r7, r1
   e297c:	e7da      	b.n	e2934 <rshift+0x4c>
   e297e:	f851 cb04 	ldr.w	ip, [r1], #4
   e2982:	f847 cf04 	str.w	ip, [r7, #4]!
   e2986:	e7c3      	b.n	e2910 <rshift+0x28>
   e2988:	4623      	mov	r3, r4
   e298a:	e7e1      	b.n	e2950 <rshift+0x68>

000e298c <__hexdig_fun>:
   e298c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e2990:	2b09      	cmp	r3, #9
   e2992:	d802      	bhi.n	e299a <__hexdig_fun+0xe>
   e2994:	3820      	subs	r0, #32
   e2996:	b2c0      	uxtb	r0, r0
   e2998:	4770      	bx	lr
   e299a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e299e:	2b05      	cmp	r3, #5
   e29a0:	d801      	bhi.n	e29a6 <__hexdig_fun+0x1a>
   e29a2:	3847      	subs	r0, #71	; 0x47
   e29a4:	e7f7      	b.n	e2996 <__hexdig_fun+0xa>
   e29a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e29aa:	2b05      	cmp	r3, #5
   e29ac:	d801      	bhi.n	e29b2 <__hexdig_fun+0x26>
   e29ae:	3827      	subs	r0, #39	; 0x27
   e29b0:	e7f1      	b.n	e2996 <__hexdig_fun+0xa>
   e29b2:	2000      	movs	r0, #0
   e29b4:	4770      	bx	lr
	...

000e29b8 <__gethex>:
   e29b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e29bc:	ed2d 8b02 	vpush	{d8}
   e29c0:	b089      	sub	sp, #36	; 0x24
   e29c2:	ee08 0a10 	vmov	s16, r0
   e29c6:	9304      	str	r3, [sp, #16]
   e29c8:	4bbc      	ldr	r3, [pc, #752]	; (e2cbc <__gethex+0x304>)
   e29ca:	681b      	ldr	r3, [r3, #0]
   e29cc:	9301      	str	r3, [sp, #4]
   e29ce:	4618      	mov	r0, r3
   e29d0:	468b      	mov	fp, r1
   e29d2:	4690      	mov	r8, r2
   e29d4:	f7fe ff1b 	bl	e180e <strlen>
   e29d8:	9b01      	ldr	r3, [sp, #4]
   e29da:	f8db 2000 	ldr.w	r2, [fp]
   e29de:	4403      	add	r3, r0
   e29e0:	4682      	mov	sl, r0
   e29e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e29e6:	9305      	str	r3, [sp, #20]
   e29e8:	1c93      	adds	r3, r2, #2
   e29ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   e29ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   e29f2:	32fe      	adds	r2, #254	; 0xfe
   e29f4:	18d1      	adds	r1, r2, r3
   e29f6:	461f      	mov	r7, r3
   e29f8:	f813 0b01 	ldrb.w	r0, [r3], #1
   e29fc:	9100      	str	r1, [sp, #0]
   e29fe:	2830      	cmp	r0, #48	; 0x30
   e2a00:	d0f8      	beq.n	e29f4 <__gethex+0x3c>
   e2a02:	f7ff ffc3 	bl	e298c <__hexdig_fun>
   e2a06:	4604      	mov	r4, r0
   e2a08:	2800      	cmp	r0, #0
   e2a0a:	d13a      	bne.n	e2a82 <__gethex+0xca>
   e2a0c:	9901      	ldr	r1, [sp, #4]
   e2a0e:	4652      	mov	r2, sl
   e2a10:	4638      	mov	r0, r7
   e2a12:	f7fe ff04 	bl	e181e <strncmp>
   e2a16:	4605      	mov	r5, r0
   e2a18:	2800      	cmp	r0, #0
   e2a1a:	d168      	bne.n	e2aee <__gethex+0x136>
   e2a1c:	f817 000a 	ldrb.w	r0, [r7, sl]
   e2a20:	eb07 060a 	add.w	r6, r7, sl
   e2a24:	f7ff ffb2 	bl	e298c <__hexdig_fun>
   e2a28:	2800      	cmp	r0, #0
   e2a2a:	d062      	beq.n	e2af2 <__gethex+0x13a>
   e2a2c:	4633      	mov	r3, r6
   e2a2e:	7818      	ldrb	r0, [r3, #0]
   e2a30:	2830      	cmp	r0, #48	; 0x30
   e2a32:	461f      	mov	r7, r3
   e2a34:	f103 0301 	add.w	r3, r3, #1
   e2a38:	d0f9      	beq.n	e2a2e <__gethex+0x76>
   e2a3a:	f7ff ffa7 	bl	e298c <__hexdig_fun>
   e2a3e:	2301      	movs	r3, #1
   e2a40:	fab0 f480 	clz	r4, r0
   e2a44:	0964      	lsrs	r4, r4, #5
   e2a46:	4635      	mov	r5, r6
   e2a48:	9300      	str	r3, [sp, #0]
   e2a4a:	463a      	mov	r2, r7
   e2a4c:	4616      	mov	r6, r2
   e2a4e:	3201      	adds	r2, #1
   e2a50:	7830      	ldrb	r0, [r6, #0]
   e2a52:	f7ff ff9b 	bl	e298c <__hexdig_fun>
   e2a56:	2800      	cmp	r0, #0
   e2a58:	d1f8      	bne.n	e2a4c <__gethex+0x94>
   e2a5a:	9901      	ldr	r1, [sp, #4]
   e2a5c:	4652      	mov	r2, sl
   e2a5e:	4630      	mov	r0, r6
   e2a60:	f7fe fedd 	bl	e181e <strncmp>
   e2a64:	b980      	cbnz	r0, e2a88 <__gethex+0xd0>
   e2a66:	b94d      	cbnz	r5, e2a7c <__gethex+0xc4>
   e2a68:	eb06 050a 	add.w	r5, r6, sl
   e2a6c:	462a      	mov	r2, r5
   e2a6e:	4616      	mov	r6, r2
   e2a70:	3201      	adds	r2, #1
   e2a72:	7830      	ldrb	r0, [r6, #0]
   e2a74:	f7ff ff8a 	bl	e298c <__hexdig_fun>
   e2a78:	2800      	cmp	r0, #0
   e2a7a:	d1f8      	bne.n	e2a6e <__gethex+0xb6>
   e2a7c:	1bad      	subs	r5, r5, r6
   e2a7e:	00ad      	lsls	r5, r5, #2
   e2a80:	e004      	b.n	e2a8c <__gethex+0xd4>
   e2a82:	2400      	movs	r4, #0
   e2a84:	4625      	mov	r5, r4
   e2a86:	e7e0      	b.n	e2a4a <__gethex+0x92>
   e2a88:	2d00      	cmp	r5, #0
   e2a8a:	d1f7      	bne.n	e2a7c <__gethex+0xc4>
   e2a8c:	7833      	ldrb	r3, [r6, #0]
   e2a8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e2a92:	2b50      	cmp	r3, #80	; 0x50
   e2a94:	d13b      	bne.n	e2b0e <__gethex+0x156>
   e2a96:	7873      	ldrb	r3, [r6, #1]
   e2a98:	2b2b      	cmp	r3, #43	; 0x2b
   e2a9a:	d02c      	beq.n	e2af6 <__gethex+0x13e>
   e2a9c:	2b2d      	cmp	r3, #45	; 0x2d
   e2a9e:	d02e      	beq.n	e2afe <__gethex+0x146>
   e2aa0:	1c71      	adds	r1, r6, #1
   e2aa2:	f04f 0900 	mov.w	r9, #0
   e2aa6:	7808      	ldrb	r0, [r1, #0]
   e2aa8:	f7ff ff70 	bl	e298c <__hexdig_fun>
   e2aac:	1e43      	subs	r3, r0, #1
   e2aae:	b2db      	uxtb	r3, r3
   e2ab0:	2b18      	cmp	r3, #24
   e2ab2:	d82c      	bhi.n	e2b0e <__gethex+0x156>
   e2ab4:	f1a0 0210 	sub.w	r2, r0, #16
   e2ab8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e2abc:	f7ff ff66 	bl	e298c <__hexdig_fun>
   e2ac0:	1e43      	subs	r3, r0, #1
   e2ac2:	b2db      	uxtb	r3, r3
   e2ac4:	2b18      	cmp	r3, #24
   e2ac6:	d91d      	bls.n	e2b04 <__gethex+0x14c>
   e2ac8:	f1b9 0f00 	cmp.w	r9, #0
   e2acc:	d000      	beq.n	e2ad0 <__gethex+0x118>
   e2ace:	4252      	negs	r2, r2
   e2ad0:	4415      	add	r5, r2
   e2ad2:	f8cb 1000 	str.w	r1, [fp]
   e2ad6:	b1e4      	cbz	r4, e2b12 <__gethex+0x15a>
   e2ad8:	9b00      	ldr	r3, [sp, #0]
   e2ada:	2b00      	cmp	r3, #0
   e2adc:	bf14      	ite	ne
   e2ade:	2700      	movne	r7, #0
   e2ae0:	2706      	moveq	r7, #6
   e2ae2:	4638      	mov	r0, r7
   e2ae4:	b009      	add	sp, #36	; 0x24
   e2ae6:	ecbd 8b02 	vpop	{d8}
   e2aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2aee:	463e      	mov	r6, r7
   e2af0:	4625      	mov	r5, r4
   e2af2:	2401      	movs	r4, #1
   e2af4:	e7ca      	b.n	e2a8c <__gethex+0xd4>
   e2af6:	f04f 0900 	mov.w	r9, #0
   e2afa:	1cb1      	adds	r1, r6, #2
   e2afc:	e7d3      	b.n	e2aa6 <__gethex+0xee>
   e2afe:	f04f 0901 	mov.w	r9, #1
   e2b02:	e7fa      	b.n	e2afa <__gethex+0x142>
   e2b04:	230a      	movs	r3, #10
   e2b06:	fb03 0202 	mla	r2, r3, r2, r0
   e2b0a:	3a10      	subs	r2, #16
   e2b0c:	e7d4      	b.n	e2ab8 <__gethex+0x100>
   e2b0e:	4631      	mov	r1, r6
   e2b10:	e7df      	b.n	e2ad2 <__gethex+0x11a>
   e2b12:	1bf3      	subs	r3, r6, r7
   e2b14:	3b01      	subs	r3, #1
   e2b16:	4621      	mov	r1, r4
   e2b18:	2b07      	cmp	r3, #7
   e2b1a:	dc52      	bgt.n	e2bc2 <__gethex+0x20a>
   e2b1c:	ee18 0a10 	vmov	r0, s16
   e2b20:	f000 fa7a 	bl	e3018 <_Balloc>
   e2b24:	f04f 0b00 	mov.w	fp, #0
   e2b28:	f100 0914 	add.w	r9, r0, #20
   e2b2c:	f1ca 0301 	rsb	r3, sl, #1
   e2b30:	4604      	mov	r4, r0
   e2b32:	f8cd 9008 	str.w	r9, [sp, #8]
   e2b36:	f8cd b000 	str.w	fp, [sp]
   e2b3a:	9306      	str	r3, [sp, #24]
   e2b3c:	42b7      	cmp	r7, r6
   e2b3e:	d343      	bcc.n	e2bc8 <__gethex+0x210>
   e2b40:	9802      	ldr	r0, [sp, #8]
   e2b42:	9b00      	ldr	r3, [sp, #0]
   e2b44:	f840 3b04 	str.w	r3, [r0], #4
   e2b48:	eba0 0009 	sub.w	r0, r0, r9
   e2b4c:	1080      	asrs	r0, r0, #2
   e2b4e:	0146      	lsls	r6, r0, #5
   e2b50:	6120      	str	r0, [r4, #16]
   e2b52:	4618      	mov	r0, r3
   e2b54:	f000 fb27 	bl	e31a6 <__hi0bits>
   e2b58:	1a30      	subs	r0, r6, r0
   e2b5a:	f8d8 6000 	ldr.w	r6, [r8]
   e2b5e:	42b0      	cmp	r0, r6
   e2b60:	dd66      	ble.n	e2c30 <__gethex+0x278>
   e2b62:	1b87      	subs	r7, r0, r6
   e2b64:	4639      	mov	r1, r7
   e2b66:	4620      	mov	r0, r4
   e2b68:	f000 fe74 	bl	e3854 <__any_on>
   e2b6c:	4682      	mov	sl, r0
   e2b6e:	b1a8      	cbz	r0, e2b9c <__gethex+0x1e4>
   e2b70:	1e7b      	subs	r3, r7, #1
   e2b72:	1159      	asrs	r1, r3, #5
   e2b74:	f003 021f 	and.w	r2, r3, #31
   e2b78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   e2b7c:	f04f 0a01 	mov.w	sl, #1
   e2b80:	fa0a f202 	lsl.w	r2, sl, r2
   e2b84:	420a      	tst	r2, r1
   e2b86:	d009      	beq.n	e2b9c <__gethex+0x1e4>
   e2b88:	4553      	cmp	r3, sl
   e2b8a:	dd05      	ble.n	e2b98 <__gethex+0x1e0>
   e2b8c:	1eb9      	subs	r1, r7, #2
   e2b8e:	4620      	mov	r0, r4
   e2b90:	f000 fe60 	bl	e3854 <__any_on>
   e2b94:	2800      	cmp	r0, #0
   e2b96:	d148      	bne.n	e2c2a <__gethex+0x272>
   e2b98:	f04f 0a02 	mov.w	sl, #2
   e2b9c:	4639      	mov	r1, r7
   e2b9e:	4620      	mov	r0, r4
   e2ba0:	f7ff fea2 	bl	e28e8 <rshift>
   e2ba4:	443d      	add	r5, r7
   e2ba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e2baa:	42ab      	cmp	r3, r5
   e2bac:	da4f      	bge.n	e2c4e <__gethex+0x296>
   e2bae:	ee18 0a10 	vmov	r0, s16
   e2bb2:	4621      	mov	r1, r4
   e2bb4:	f000 fa64 	bl	e3080 <_Bfree>
   e2bb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e2bba:	2300      	movs	r3, #0
   e2bbc:	6013      	str	r3, [r2, #0]
   e2bbe:	27a3      	movs	r7, #163	; 0xa3
   e2bc0:	e78f      	b.n	e2ae2 <__gethex+0x12a>
   e2bc2:	3101      	adds	r1, #1
   e2bc4:	105b      	asrs	r3, r3, #1
   e2bc6:	e7a7      	b.n	e2b18 <__gethex+0x160>
   e2bc8:	1e73      	subs	r3, r6, #1
   e2bca:	9a05      	ldr	r2, [sp, #20]
   e2bcc:	9303      	str	r3, [sp, #12]
   e2bce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e2bd2:	4293      	cmp	r3, r2
   e2bd4:	d019      	beq.n	e2c0a <__gethex+0x252>
   e2bd6:	f1bb 0f20 	cmp.w	fp, #32
   e2bda:	d107      	bne.n	e2bec <__gethex+0x234>
   e2bdc:	9b02      	ldr	r3, [sp, #8]
   e2bde:	9a00      	ldr	r2, [sp, #0]
   e2be0:	f843 2b04 	str.w	r2, [r3], #4
   e2be4:	9302      	str	r3, [sp, #8]
   e2be6:	2300      	movs	r3, #0
   e2be8:	9300      	str	r3, [sp, #0]
   e2bea:	469b      	mov	fp, r3
   e2bec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e2bf0:	f7ff fecc 	bl	e298c <__hexdig_fun>
   e2bf4:	9b00      	ldr	r3, [sp, #0]
   e2bf6:	f000 000f 	and.w	r0, r0, #15
   e2bfa:	fa00 f00b 	lsl.w	r0, r0, fp
   e2bfe:	4303      	orrs	r3, r0
   e2c00:	9300      	str	r3, [sp, #0]
   e2c02:	f10b 0b04 	add.w	fp, fp, #4
   e2c06:	9b03      	ldr	r3, [sp, #12]
   e2c08:	e00d      	b.n	e2c26 <__gethex+0x26e>
   e2c0a:	9b03      	ldr	r3, [sp, #12]
   e2c0c:	9a06      	ldr	r2, [sp, #24]
   e2c0e:	4413      	add	r3, r2
   e2c10:	42bb      	cmp	r3, r7
   e2c12:	d3e0      	bcc.n	e2bd6 <__gethex+0x21e>
   e2c14:	4618      	mov	r0, r3
   e2c16:	9901      	ldr	r1, [sp, #4]
   e2c18:	9307      	str	r3, [sp, #28]
   e2c1a:	4652      	mov	r2, sl
   e2c1c:	f7fe fdff 	bl	e181e <strncmp>
   e2c20:	9b07      	ldr	r3, [sp, #28]
   e2c22:	2800      	cmp	r0, #0
   e2c24:	d1d7      	bne.n	e2bd6 <__gethex+0x21e>
   e2c26:	461e      	mov	r6, r3
   e2c28:	e788      	b.n	e2b3c <__gethex+0x184>
   e2c2a:	f04f 0a03 	mov.w	sl, #3
   e2c2e:	e7b5      	b.n	e2b9c <__gethex+0x1e4>
   e2c30:	da0a      	bge.n	e2c48 <__gethex+0x290>
   e2c32:	1a37      	subs	r7, r6, r0
   e2c34:	4621      	mov	r1, r4
   e2c36:	ee18 0a10 	vmov	r0, s16
   e2c3a:	463a      	mov	r2, r7
   e2c3c:	f000 fbf6 	bl	e342c <__lshift>
   e2c40:	1bed      	subs	r5, r5, r7
   e2c42:	4604      	mov	r4, r0
   e2c44:	f100 0914 	add.w	r9, r0, #20
   e2c48:	f04f 0a00 	mov.w	sl, #0
   e2c4c:	e7ab      	b.n	e2ba6 <__gethex+0x1ee>
   e2c4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e2c52:	42a8      	cmp	r0, r5
   e2c54:	dd6d      	ble.n	e2d32 <__gethex+0x37a>
   e2c56:	1b45      	subs	r5, r0, r5
   e2c58:	42ae      	cmp	r6, r5
   e2c5a:	dc31      	bgt.n	e2cc0 <__gethex+0x308>
   e2c5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2c60:	2b02      	cmp	r3, #2
   e2c62:	d023      	beq.n	e2cac <__gethex+0x2f4>
   e2c64:	2b03      	cmp	r3, #3
   e2c66:	d025      	beq.n	e2cb4 <__gethex+0x2fc>
   e2c68:	2b01      	cmp	r3, #1
   e2c6a:	d115      	bne.n	e2c98 <__gethex+0x2e0>
   e2c6c:	42ae      	cmp	r6, r5
   e2c6e:	d113      	bne.n	e2c98 <__gethex+0x2e0>
   e2c70:	2e01      	cmp	r6, #1
   e2c72:	d10b      	bne.n	e2c8c <__gethex+0x2d4>
   e2c74:	9a04      	ldr	r2, [sp, #16]
   e2c76:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e2c7a:	6013      	str	r3, [r2, #0]
   e2c7c:	2301      	movs	r3, #1
   e2c7e:	6123      	str	r3, [r4, #16]
   e2c80:	f8c9 3000 	str.w	r3, [r9]
   e2c84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2c86:	2762      	movs	r7, #98	; 0x62
   e2c88:	601c      	str	r4, [r3, #0]
   e2c8a:	e72a      	b.n	e2ae2 <__gethex+0x12a>
   e2c8c:	1e71      	subs	r1, r6, #1
   e2c8e:	4620      	mov	r0, r4
   e2c90:	f000 fde0 	bl	e3854 <__any_on>
   e2c94:	2800      	cmp	r0, #0
   e2c96:	d1ed      	bne.n	e2c74 <__gethex+0x2bc>
   e2c98:	ee18 0a10 	vmov	r0, s16
   e2c9c:	4621      	mov	r1, r4
   e2c9e:	f000 f9ef 	bl	e3080 <_Bfree>
   e2ca2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e2ca4:	2300      	movs	r3, #0
   e2ca6:	6013      	str	r3, [r2, #0]
   e2ca8:	2750      	movs	r7, #80	; 0x50
   e2caa:	e71a      	b.n	e2ae2 <__gethex+0x12a>
   e2cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2cae:	2b00      	cmp	r3, #0
   e2cb0:	d1f2      	bne.n	e2c98 <__gethex+0x2e0>
   e2cb2:	e7df      	b.n	e2c74 <__gethex+0x2bc>
   e2cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2cb6:	2b00      	cmp	r3, #0
   e2cb8:	d1dc      	bne.n	e2c74 <__gethex+0x2bc>
   e2cba:	e7ed      	b.n	e2c98 <__gethex+0x2e0>
   e2cbc:	000e4cdc 	.word	0x000e4cdc
   e2cc0:	1e6f      	subs	r7, r5, #1
   e2cc2:	f1ba 0f00 	cmp.w	sl, #0
   e2cc6:	d131      	bne.n	e2d2c <__gethex+0x374>
   e2cc8:	b127      	cbz	r7, e2cd4 <__gethex+0x31c>
   e2cca:	4639      	mov	r1, r7
   e2ccc:	4620      	mov	r0, r4
   e2cce:	f000 fdc1 	bl	e3854 <__any_on>
   e2cd2:	4682      	mov	sl, r0
   e2cd4:	117b      	asrs	r3, r7, #5
   e2cd6:	2101      	movs	r1, #1
   e2cd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   e2cdc:	f007 071f 	and.w	r7, r7, #31
   e2ce0:	fa01 f707 	lsl.w	r7, r1, r7
   e2ce4:	421f      	tst	r7, r3
   e2ce6:	4629      	mov	r1, r5
   e2ce8:	4620      	mov	r0, r4
   e2cea:	bf18      	it	ne
   e2cec:	f04a 0a02 	orrne.w	sl, sl, #2
   e2cf0:	1b76      	subs	r6, r6, r5
   e2cf2:	f7ff fdf9 	bl	e28e8 <rshift>
   e2cf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   e2cfa:	2702      	movs	r7, #2
   e2cfc:	f1ba 0f00 	cmp.w	sl, #0
   e2d00:	d048      	beq.n	e2d94 <__gethex+0x3dc>
   e2d02:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2d06:	2b02      	cmp	r3, #2
   e2d08:	d015      	beq.n	e2d36 <__gethex+0x37e>
   e2d0a:	2b03      	cmp	r3, #3
   e2d0c:	d017      	beq.n	e2d3e <__gethex+0x386>
   e2d0e:	2b01      	cmp	r3, #1
   e2d10:	d109      	bne.n	e2d26 <__gethex+0x36e>
   e2d12:	f01a 0f02 	tst.w	sl, #2
   e2d16:	d006      	beq.n	e2d26 <__gethex+0x36e>
   e2d18:	f8d9 0000 	ldr.w	r0, [r9]
   e2d1c:	ea4a 0a00 	orr.w	sl, sl, r0
   e2d20:	f01a 0f01 	tst.w	sl, #1
   e2d24:	d10e      	bne.n	e2d44 <__gethex+0x38c>
   e2d26:	f047 0710 	orr.w	r7, r7, #16
   e2d2a:	e033      	b.n	e2d94 <__gethex+0x3dc>
   e2d2c:	f04f 0a01 	mov.w	sl, #1
   e2d30:	e7d0      	b.n	e2cd4 <__gethex+0x31c>
   e2d32:	2701      	movs	r7, #1
   e2d34:	e7e2      	b.n	e2cfc <__gethex+0x344>
   e2d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2d38:	f1c3 0301 	rsb	r3, r3, #1
   e2d3c:	9315      	str	r3, [sp, #84]	; 0x54
   e2d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2d40:	2b00      	cmp	r3, #0
   e2d42:	d0f0      	beq.n	e2d26 <__gethex+0x36e>
   e2d44:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e2d48:	f104 0314 	add.w	r3, r4, #20
   e2d4c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   e2d50:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   e2d54:	f04f 0c00 	mov.w	ip, #0
   e2d58:	4618      	mov	r0, r3
   e2d5a:	f853 2b04 	ldr.w	r2, [r3], #4
   e2d5e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   e2d62:	d01c      	beq.n	e2d9e <__gethex+0x3e6>
   e2d64:	3201      	adds	r2, #1
   e2d66:	6002      	str	r2, [r0, #0]
   e2d68:	2f02      	cmp	r7, #2
   e2d6a:	f104 0314 	add.w	r3, r4, #20
   e2d6e:	d13a      	bne.n	e2de6 <__gethex+0x42e>
   e2d70:	f8d8 2000 	ldr.w	r2, [r8]
   e2d74:	3a01      	subs	r2, #1
   e2d76:	42b2      	cmp	r2, r6
   e2d78:	d10a      	bne.n	e2d90 <__gethex+0x3d8>
   e2d7a:	1171      	asrs	r1, r6, #5
   e2d7c:	2201      	movs	r2, #1
   e2d7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e2d82:	f006 061f 	and.w	r6, r6, #31
   e2d86:	fa02 f606 	lsl.w	r6, r2, r6
   e2d8a:	421e      	tst	r6, r3
   e2d8c:	bf18      	it	ne
   e2d8e:	4617      	movne	r7, r2
   e2d90:	f047 0720 	orr.w	r7, r7, #32
   e2d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2d96:	601c      	str	r4, [r3, #0]
   e2d98:	9b04      	ldr	r3, [sp, #16]
   e2d9a:	601d      	str	r5, [r3, #0]
   e2d9c:	e6a1      	b.n	e2ae2 <__gethex+0x12a>
   e2d9e:	4299      	cmp	r1, r3
   e2da0:	f843 cc04 	str.w	ip, [r3, #-4]
   e2da4:	d8d8      	bhi.n	e2d58 <__gethex+0x3a0>
   e2da6:	68a3      	ldr	r3, [r4, #8]
   e2da8:	4599      	cmp	r9, r3
   e2daa:	db14      	blt.n	e2dd6 <__gethex+0x41e>
   e2dac:	6861      	ldr	r1, [r4, #4]
   e2dae:	ee18 0a10 	vmov	r0, s16
   e2db2:	3101      	adds	r1, #1
   e2db4:	f000 f930 	bl	e3018 <_Balloc>
   e2db8:	6922      	ldr	r2, [r4, #16]
   e2dba:	3202      	adds	r2, #2
   e2dbc:	f104 010c 	add.w	r1, r4, #12
   e2dc0:	4682      	mov	sl, r0
   e2dc2:	0092      	lsls	r2, r2, #2
   e2dc4:	300c      	adds	r0, #12
   e2dc6:	f7fe fc6f 	bl	e16a8 <memcpy>
   e2dca:	4621      	mov	r1, r4
   e2dcc:	ee18 0a10 	vmov	r0, s16
   e2dd0:	f000 f956 	bl	e3080 <_Bfree>
   e2dd4:	4654      	mov	r4, sl
   e2dd6:	6923      	ldr	r3, [r4, #16]
   e2dd8:	1c5a      	adds	r2, r3, #1
   e2dda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   e2dde:	6122      	str	r2, [r4, #16]
   e2de0:	2201      	movs	r2, #1
   e2de2:	615a      	str	r2, [r3, #20]
   e2de4:	e7c0      	b.n	e2d68 <__gethex+0x3b0>
   e2de6:	6922      	ldr	r2, [r4, #16]
   e2de8:	454a      	cmp	r2, r9
   e2dea:	dd0b      	ble.n	e2e04 <__gethex+0x44c>
   e2dec:	2101      	movs	r1, #1
   e2dee:	4620      	mov	r0, r4
   e2df0:	f7ff fd7a 	bl	e28e8 <rshift>
   e2df4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e2df8:	3501      	adds	r5, #1
   e2dfa:	42ab      	cmp	r3, r5
   e2dfc:	f6ff aed7 	blt.w	e2bae <__gethex+0x1f6>
   e2e00:	2701      	movs	r7, #1
   e2e02:	e7c5      	b.n	e2d90 <__gethex+0x3d8>
   e2e04:	f016 061f 	ands.w	r6, r6, #31
   e2e08:	d0fa      	beq.n	e2e00 <__gethex+0x448>
   e2e0a:	449b      	add	fp, r3
   e2e0c:	f1c6 0620 	rsb	r6, r6, #32
   e2e10:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   e2e14:	f000 f9c7 	bl	e31a6 <__hi0bits>
   e2e18:	42b0      	cmp	r0, r6
   e2e1a:	dbe7      	blt.n	e2dec <__gethex+0x434>
   e2e1c:	e7f0      	b.n	e2e00 <__gethex+0x448>
   e2e1e:	bf00      	nop

000e2e20 <L_shift>:
   e2e20:	f1c2 0208 	rsb	r2, r2, #8
   e2e24:	0092      	lsls	r2, r2, #2
   e2e26:	b570      	push	{r4, r5, r6, lr}
   e2e28:	f1c2 0620 	rsb	r6, r2, #32
   e2e2c:	6843      	ldr	r3, [r0, #4]
   e2e2e:	6804      	ldr	r4, [r0, #0]
   e2e30:	fa03 f506 	lsl.w	r5, r3, r6
   e2e34:	432c      	orrs	r4, r5
   e2e36:	40d3      	lsrs	r3, r2
   e2e38:	6004      	str	r4, [r0, #0]
   e2e3a:	f840 3f04 	str.w	r3, [r0, #4]!
   e2e3e:	4288      	cmp	r0, r1
   e2e40:	d3f4      	bcc.n	e2e2c <L_shift+0xc>
   e2e42:	bd70      	pop	{r4, r5, r6, pc}

000e2e44 <__match>:
   e2e44:	b530      	push	{r4, r5, lr}
   e2e46:	6803      	ldr	r3, [r0, #0]
   e2e48:	3301      	adds	r3, #1
   e2e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   e2e4e:	b914      	cbnz	r4, e2e56 <__match+0x12>
   e2e50:	6003      	str	r3, [r0, #0]
   e2e52:	2001      	movs	r0, #1
   e2e54:	bd30      	pop	{r4, r5, pc}
   e2e56:	f813 2b01 	ldrb.w	r2, [r3], #1
   e2e5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e2e5e:	2d19      	cmp	r5, #25
   e2e60:	bf98      	it	ls
   e2e62:	3220      	addls	r2, #32
   e2e64:	42a2      	cmp	r2, r4
   e2e66:	d0f0      	beq.n	e2e4a <__match+0x6>
   e2e68:	2000      	movs	r0, #0
   e2e6a:	e7f3      	b.n	e2e54 <__match+0x10>

000e2e6c <__hexnan>:
   e2e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2e70:	680b      	ldr	r3, [r1, #0]
   e2e72:	6801      	ldr	r1, [r0, #0]
   e2e74:	115e      	asrs	r6, r3, #5
   e2e76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e2e7a:	f013 031f 	ands.w	r3, r3, #31
   e2e7e:	b087      	sub	sp, #28
   e2e80:	bf18      	it	ne
   e2e82:	3604      	addne	r6, #4
   e2e84:	2500      	movs	r5, #0
   e2e86:	1f37      	subs	r7, r6, #4
   e2e88:	4682      	mov	sl, r0
   e2e8a:	4690      	mov	r8, r2
   e2e8c:	9301      	str	r3, [sp, #4]
   e2e8e:	f846 5c04 	str.w	r5, [r6, #-4]
   e2e92:	46b9      	mov	r9, r7
   e2e94:	463c      	mov	r4, r7
   e2e96:	9502      	str	r5, [sp, #8]
   e2e98:	46ab      	mov	fp, r5
   e2e9a:	784a      	ldrb	r2, [r1, #1]
   e2e9c:	1c4b      	adds	r3, r1, #1
   e2e9e:	9303      	str	r3, [sp, #12]
   e2ea0:	b342      	cbz	r2, e2ef4 <__hexnan+0x88>
   e2ea2:	4610      	mov	r0, r2
   e2ea4:	9105      	str	r1, [sp, #20]
   e2ea6:	9204      	str	r2, [sp, #16]
   e2ea8:	f7ff fd70 	bl	e298c <__hexdig_fun>
   e2eac:	2800      	cmp	r0, #0
   e2eae:	d14f      	bne.n	e2f50 <__hexnan+0xe4>
   e2eb0:	9a04      	ldr	r2, [sp, #16]
   e2eb2:	9905      	ldr	r1, [sp, #20]
   e2eb4:	2a20      	cmp	r2, #32
   e2eb6:	d818      	bhi.n	e2eea <__hexnan+0x7e>
   e2eb8:	9b02      	ldr	r3, [sp, #8]
   e2eba:	459b      	cmp	fp, r3
   e2ebc:	dd13      	ble.n	e2ee6 <__hexnan+0x7a>
   e2ebe:	454c      	cmp	r4, r9
   e2ec0:	d206      	bcs.n	e2ed0 <__hexnan+0x64>
   e2ec2:	2d07      	cmp	r5, #7
   e2ec4:	dc04      	bgt.n	e2ed0 <__hexnan+0x64>
   e2ec6:	462a      	mov	r2, r5
   e2ec8:	4649      	mov	r1, r9
   e2eca:	4620      	mov	r0, r4
   e2ecc:	f7ff ffa8 	bl	e2e20 <L_shift>
   e2ed0:	4544      	cmp	r4, r8
   e2ed2:	d950      	bls.n	e2f76 <__hexnan+0x10a>
   e2ed4:	2300      	movs	r3, #0
   e2ed6:	f1a4 0904 	sub.w	r9, r4, #4
   e2eda:	f844 3c04 	str.w	r3, [r4, #-4]
   e2ede:	f8cd b008 	str.w	fp, [sp, #8]
   e2ee2:	464c      	mov	r4, r9
   e2ee4:	461d      	mov	r5, r3
   e2ee6:	9903      	ldr	r1, [sp, #12]
   e2ee8:	e7d7      	b.n	e2e9a <__hexnan+0x2e>
   e2eea:	2a29      	cmp	r2, #41	; 0x29
   e2eec:	d156      	bne.n	e2f9c <__hexnan+0x130>
   e2eee:	3102      	adds	r1, #2
   e2ef0:	f8ca 1000 	str.w	r1, [sl]
   e2ef4:	f1bb 0f00 	cmp.w	fp, #0
   e2ef8:	d050      	beq.n	e2f9c <__hexnan+0x130>
   e2efa:	454c      	cmp	r4, r9
   e2efc:	d206      	bcs.n	e2f0c <__hexnan+0xa0>
   e2efe:	2d07      	cmp	r5, #7
   e2f00:	dc04      	bgt.n	e2f0c <__hexnan+0xa0>
   e2f02:	462a      	mov	r2, r5
   e2f04:	4649      	mov	r1, r9
   e2f06:	4620      	mov	r0, r4
   e2f08:	f7ff ff8a 	bl	e2e20 <L_shift>
   e2f0c:	4544      	cmp	r4, r8
   e2f0e:	d934      	bls.n	e2f7a <__hexnan+0x10e>
   e2f10:	f1a8 0204 	sub.w	r2, r8, #4
   e2f14:	4623      	mov	r3, r4
   e2f16:	f853 1b04 	ldr.w	r1, [r3], #4
   e2f1a:	f842 1f04 	str.w	r1, [r2, #4]!
   e2f1e:	429f      	cmp	r7, r3
   e2f20:	d2f9      	bcs.n	e2f16 <__hexnan+0xaa>
   e2f22:	1b3b      	subs	r3, r7, r4
   e2f24:	f023 0303 	bic.w	r3, r3, #3
   e2f28:	3304      	adds	r3, #4
   e2f2a:	3401      	adds	r4, #1
   e2f2c:	3e03      	subs	r6, #3
   e2f2e:	42b4      	cmp	r4, r6
   e2f30:	bf88      	it	hi
   e2f32:	2304      	movhi	r3, #4
   e2f34:	4443      	add	r3, r8
   e2f36:	2200      	movs	r2, #0
   e2f38:	f843 2b04 	str.w	r2, [r3], #4
   e2f3c:	429f      	cmp	r7, r3
   e2f3e:	d2fb      	bcs.n	e2f38 <__hexnan+0xcc>
   e2f40:	683b      	ldr	r3, [r7, #0]
   e2f42:	b91b      	cbnz	r3, e2f4c <__hexnan+0xe0>
   e2f44:	4547      	cmp	r7, r8
   e2f46:	d127      	bne.n	e2f98 <__hexnan+0x12c>
   e2f48:	2301      	movs	r3, #1
   e2f4a:	603b      	str	r3, [r7, #0]
   e2f4c:	2005      	movs	r0, #5
   e2f4e:	e026      	b.n	e2f9e <__hexnan+0x132>
   e2f50:	3501      	adds	r5, #1
   e2f52:	2d08      	cmp	r5, #8
   e2f54:	f10b 0b01 	add.w	fp, fp, #1
   e2f58:	dd06      	ble.n	e2f68 <__hexnan+0xfc>
   e2f5a:	4544      	cmp	r4, r8
   e2f5c:	d9c3      	bls.n	e2ee6 <__hexnan+0x7a>
   e2f5e:	2300      	movs	r3, #0
   e2f60:	f844 3c04 	str.w	r3, [r4, #-4]
   e2f64:	2501      	movs	r5, #1
   e2f66:	3c04      	subs	r4, #4
   e2f68:	6822      	ldr	r2, [r4, #0]
   e2f6a:	f000 000f 	and.w	r0, r0, #15
   e2f6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   e2f72:	6022      	str	r2, [r4, #0]
   e2f74:	e7b7      	b.n	e2ee6 <__hexnan+0x7a>
   e2f76:	2508      	movs	r5, #8
   e2f78:	e7b5      	b.n	e2ee6 <__hexnan+0x7a>
   e2f7a:	9b01      	ldr	r3, [sp, #4]
   e2f7c:	2b00      	cmp	r3, #0
   e2f7e:	d0df      	beq.n	e2f40 <__hexnan+0xd4>
   e2f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e2f84:	f1c3 0320 	rsb	r3, r3, #32
   e2f88:	fa22 f303 	lsr.w	r3, r2, r3
   e2f8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e2f90:	401a      	ands	r2, r3
   e2f92:	f846 2c04 	str.w	r2, [r6, #-4]
   e2f96:	e7d3      	b.n	e2f40 <__hexnan+0xd4>
   e2f98:	3f04      	subs	r7, #4
   e2f9a:	e7d1      	b.n	e2f40 <__hexnan+0xd4>
   e2f9c:	2004      	movs	r0, #4
   e2f9e:	b007      	add	sp, #28
   e2fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e2fa4 <_link_r>:
   e2fa4:	b538      	push	{r3, r4, r5, lr}
   e2fa6:	4d07      	ldr	r5, [pc, #28]	; (e2fc4 <_link_r+0x20>)
   e2fa8:	2300      	movs	r3, #0
   e2faa:	4604      	mov	r4, r0
   e2fac:	4608      	mov	r0, r1
   e2fae:	4611      	mov	r1, r2
   e2fb0:	602b      	str	r3, [r5, #0]
   e2fb2:	f7f9 fe91 	bl	dccd8 <_link>
   e2fb6:	1c43      	adds	r3, r0, #1
   e2fb8:	d102      	bne.n	e2fc0 <_link_r+0x1c>
   e2fba:	682b      	ldr	r3, [r5, #0]
   e2fbc:	b103      	cbz	r3, e2fc0 <_link_r+0x1c>
   e2fbe:	6023      	str	r3, [r4, #0]
   e2fc0:	bd38      	pop	{r3, r4, r5, pc}
   e2fc2:	bf00      	nop
   e2fc4:	2003e7ec 	.word	0x2003e7ec

000e2fc8 <__retarget_lock_acquire_recursive>:
   e2fc8:	4770      	bx	lr

000e2fca <__retarget_lock_release>:
   e2fca:	4770      	bx	lr

000e2fcc <__retarget_lock_release_recursive>:
   e2fcc:	4770      	bx	lr
	...

000e2fd0 <_lseek_r>:
   e2fd0:	b538      	push	{r3, r4, r5, lr}
   e2fd2:	4d07      	ldr	r5, [pc, #28]	; (e2ff0 <_lseek_r+0x20>)
   e2fd4:	4604      	mov	r4, r0
   e2fd6:	4608      	mov	r0, r1
   e2fd8:	4611      	mov	r1, r2
   e2fda:	2200      	movs	r2, #0
   e2fdc:	602a      	str	r2, [r5, #0]
   e2fde:	461a      	mov	r2, r3
   e2fe0:	f7f9 fe5a 	bl	dcc98 <_lseek>
   e2fe4:	1c43      	adds	r3, r0, #1
   e2fe6:	d102      	bne.n	e2fee <_lseek_r+0x1e>
   e2fe8:	682b      	ldr	r3, [r5, #0]
   e2fea:	b103      	cbz	r3, e2fee <_lseek_r+0x1e>
   e2fec:	6023      	str	r3, [r4, #0]
   e2fee:	bd38      	pop	{r3, r4, r5, pc}
   e2ff0:	2003e7ec 	.word	0x2003e7ec

000e2ff4 <__ascii_mbtowc>:
   e2ff4:	b082      	sub	sp, #8
   e2ff6:	b901      	cbnz	r1, e2ffa <__ascii_mbtowc+0x6>
   e2ff8:	a901      	add	r1, sp, #4
   e2ffa:	b142      	cbz	r2, e300e <__ascii_mbtowc+0x1a>
   e2ffc:	b14b      	cbz	r3, e3012 <__ascii_mbtowc+0x1e>
   e2ffe:	7813      	ldrb	r3, [r2, #0]
   e3000:	600b      	str	r3, [r1, #0]
   e3002:	7812      	ldrb	r2, [r2, #0]
   e3004:	1e10      	subs	r0, r2, #0
   e3006:	bf18      	it	ne
   e3008:	2001      	movne	r0, #1
   e300a:	b002      	add	sp, #8
   e300c:	4770      	bx	lr
   e300e:	4610      	mov	r0, r2
   e3010:	e7fb      	b.n	e300a <__ascii_mbtowc+0x16>
   e3012:	f06f 0001 	mvn.w	r0, #1
   e3016:	e7f8      	b.n	e300a <__ascii_mbtowc+0x16>

000e3018 <_Balloc>:
   e3018:	b570      	push	{r4, r5, r6, lr}
   e301a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e301c:	4604      	mov	r4, r0
   e301e:	460d      	mov	r5, r1
   e3020:	b93e      	cbnz	r6, e3032 <_Balloc+0x1a>
   e3022:	2010      	movs	r0, #16
   e3024:	f7fa f868 	bl	dd0f8 <malloc>
   e3028:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e302c:	6260      	str	r0, [r4, #36]	; 0x24
   e302e:	6006      	str	r6, [r0, #0]
   e3030:	60c6      	str	r6, [r0, #12]
   e3032:	6a66      	ldr	r6, [r4, #36]	; 0x24
   e3034:	68f3      	ldr	r3, [r6, #12]
   e3036:	b183      	cbz	r3, e305a <_Balloc+0x42>
   e3038:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e303a:	68db      	ldr	r3, [r3, #12]
   e303c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   e3040:	b9b8      	cbnz	r0, e3072 <_Balloc+0x5a>
   e3042:	2101      	movs	r1, #1
   e3044:	fa01 f605 	lsl.w	r6, r1, r5
   e3048:	1d72      	adds	r2, r6, #5
   e304a:	0092      	lsls	r2, r2, #2
   e304c:	4620      	mov	r0, r4
   e304e:	f000 fc22 	bl	e3896 <_calloc_r>
   e3052:	b160      	cbz	r0, e306e <_Balloc+0x56>
   e3054:	e9c0 5601 	strd	r5, r6, [r0, #4]
   e3058:	e00e      	b.n	e3078 <_Balloc+0x60>
   e305a:	2221      	movs	r2, #33	; 0x21
   e305c:	2104      	movs	r1, #4
   e305e:	4620      	mov	r0, r4
   e3060:	f000 fc19 	bl	e3896 <_calloc_r>
   e3064:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3066:	60f0      	str	r0, [r6, #12]
   e3068:	68db      	ldr	r3, [r3, #12]
   e306a:	2b00      	cmp	r3, #0
   e306c:	d1e4      	bne.n	e3038 <_Balloc+0x20>
   e306e:	2000      	movs	r0, #0
   e3070:	bd70      	pop	{r4, r5, r6, pc}
   e3072:	6802      	ldr	r2, [r0, #0]
   e3074:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   e3078:	2300      	movs	r3, #0
   e307a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   e307e:	e7f7      	b.n	e3070 <_Balloc+0x58>

000e3080 <_Bfree>:
   e3080:	b570      	push	{r4, r5, r6, lr}
   e3082:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e3084:	4605      	mov	r5, r0
   e3086:	460c      	mov	r4, r1
   e3088:	b93e      	cbnz	r6, e309a <_Bfree+0x1a>
   e308a:	2010      	movs	r0, #16
   e308c:	f7fa f834 	bl	dd0f8 <malloc>
   e3090:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e3094:	6268      	str	r0, [r5, #36]	; 0x24
   e3096:	6006      	str	r6, [r0, #0]
   e3098:	60c6      	str	r6, [r0, #12]
   e309a:	b13c      	cbz	r4, e30ac <_Bfree+0x2c>
   e309c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   e309e:	6862      	ldr	r2, [r4, #4]
   e30a0:	68db      	ldr	r3, [r3, #12]
   e30a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e30a6:	6021      	str	r1, [r4, #0]
   e30a8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   e30ac:	bd70      	pop	{r4, r5, r6, pc}

000e30ae <__multadd>:
   e30ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e30b2:	690e      	ldr	r6, [r1, #16]
   e30b4:	4607      	mov	r7, r0
   e30b6:	4698      	mov	r8, r3
   e30b8:	460c      	mov	r4, r1
   e30ba:	f101 0014 	add.w	r0, r1, #20
   e30be:	2300      	movs	r3, #0
   e30c0:	6805      	ldr	r5, [r0, #0]
   e30c2:	b2a9      	uxth	r1, r5
   e30c4:	fb02 8101 	mla	r1, r2, r1, r8
   e30c8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   e30cc:	0c2d      	lsrs	r5, r5, #16
   e30ce:	fb02 c505 	mla	r5, r2, r5, ip
   e30d2:	b289      	uxth	r1, r1
   e30d4:	3301      	adds	r3, #1
   e30d6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   e30da:	429e      	cmp	r6, r3
   e30dc:	f840 1b04 	str.w	r1, [r0], #4
   e30e0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   e30e4:	dcec      	bgt.n	e30c0 <__multadd+0x12>
   e30e6:	f1b8 0f00 	cmp.w	r8, #0
   e30ea:	d01b      	beq.n	e3124 <__multadd+0x76>
   e30ec:	68a3      	ldr	r3, [r4, #8]
   e30ee:	42b3      	cmp	r3, r6
   e30f0:	dc12      	bgt.n	e3118 <__multadd+0x6a>
   e30f2:	6861      	ldr	r1, [r4, #4]
   e30f4:	4638      	mov	r0, r7
   e30f6:	3101      	adds	r1, #1
   e30f8:	f7ff ff8e 	bl	e3018 <_Balloc>
   e30fc:	6922      	ldr	r2, [r4, #16]
   e30fe:	3202      	adds	r2, #2
   e3100:	f104 010c 	add.w	r1, r4, #12
   e3104:	4605      	mov	r5, r0
   e3106:	0092      	lsls	r2, r2, #2
   e3108:	300c      	adds	r0, #12
   e310a:	f7fe facd 	bl	e16a8 <memcpy>
   e310e:	4621      	mov	r1, r4
   e3110:	4638      	mov	r0, r7
   e3112:	f7ff ffb5 	bl	e3080 <_Bfree>
   e3116:	462c      	mov	r4, r5
   e3118:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   e311c:	3601      	adds	r6, #1
   e311e:	f8c3 8014 	str.w	r8, [r3, #20]
   e3122:	6126      	str	r6, [r4, #16]
   e3124:	4620      	mov	r0, r4
   e3126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e312a <__s2b>:
   e312a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e312e:	460c      	mov	r4, r1
   e3130:	4615      	mov	r5, r2
   e3132:	461f      	mov	r7, r3
   e3134:	2209      	movs	r2, #9
   e3136:	3308      	adds	r3, #8
   e3138:	4606      	mov	r6, r0
   e313a:	fb93 f3f2 	sdiv	r3, r3, r2
   e313e:	2100      	movs	r1, #0
   e3140:	2201      	movs	r2, #1
   e3142:	429a      	cmp	r2, r3
   e3144:	db20      	blt.n	e3188 <__s2b+0x5e>
   e3146:	4630      	mov	r0, r6
   e3148:	f7ff ff66 	bl	e3018 <_Balloc>
   e314c:	9b08      	ldr	r3, [sp, #32]
   e314e:	6143      	str	r3, [r0, #20]
   e3150:	2d09      	cmp	r5, #9
   e3152:	f04f 0301 	mov.w	r3, #1
   e3156:	6103      	str	r3, [r0, #16]
   e3158:	dd19      	ble.n	e318e <__s2b+0x64>
   e315a:	f104 0909 	add.w	r9, r4, #9
   e315e:	46c8      	mov	r8, r9
   e3160:	442c      	add	r4, r5
   e3162:	f818 3b01 	ldrb.w	r3, [r8], #1
   e3166:	4601      	mov	r1, r0
   e3168:	3b30      	subs	r3, #48	; 0x30
   e316a:	220a      	movs	r2, #10
   e316c:	4630      	mov	r0, r6
   e316e:	f7ff ff9e 	bl	e30ae <__multadd>
   e3172:	45a0      	cmp	r8, r4
   e3174:	d1f5      	bne.n	e3162 <__s2b+0x38>
   e3176:	f1a5 0408 	sub.w	r4, r5, #8
   e317a:	444c      	add	r4, r9
   e317c:	1b2d      	subs	r5, r5, r4
   e317e:	1963      	adds	r3, r4, r5
   e3180:	42bb      	cmp	r3, r7
   e3182:	db07      	blt.n	e3194 <__s2b+0x6a>
   e3184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e3188:	0052      	lsls	r2, r2, #1
   e318a:	3101      	adds	r1, #1
   e318c:	e7d9      	b.n	e3142 <__s2b+0x18>
   e318e:	340a      	adds	r4, #10
   e3190:	2509      	movs	r5, #9
   e3192:	e7f3      	b.n	e317c <__s2b+0x52>
   e3194:	f814 3b01 	ldrb.w	r3, [r4], #1
   e3198:	4601      	mov	r1, r0
   e319a:	3b30      	subs	r3, #48	; 0x30
   e319c:	220a      	movs	r2, #10
   e319e:	4630      	mov	r0, r6
   e31a0:	f7ff ff85 	bl	e30ae <__multadd>
   e31a4:	e7eb      	b.n	e317e <__s2b+0x54>

000e31a6 <__hi0bits>:
   e31a6:	0c03      	lsrs	r3, r0, #16
   e31a8:	041b      	lsls	r3, r3, #16
   e31aa:	b9d3      	cbnz	r3, e31e2 <__hi0bits+0x3c>
   e31ac:	0400      	lsls	r0, r0, #16
   e31ae:	2310      	movs	r3, #16
   e31b0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e31b4:	bf04      	itt	eq
   e31b6:	0200      	lsleq	r0, r0, #8
   e31b8:	3308      	addeq	r3, #8
   e31ba:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e31be:	bf04      	itt	eq
   e31c0:	0100      	lsleq	r0, r0, #4
   e31c2:	3304      	addeq	r3, #4
   e31c4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e31c8:	bf04      	itt	eq
   e31ca:	0080      	lsleq	r0, r0, #2
   e31cc:	3302      	addeq	r3, #2
   e31ce:	2800      	cmp	r0, #0
   e31d0:	db05      	blt.n	e31de <__hi0bits+0x38>
   e31d2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   e31d6:	f103 0301 	add.w	r3, r3, #1
   e31da:	bf08      	it	eq
   e31dc:	2320      	moveq	r3, #32
   e31de:	4618      	mov	r0, r3
   e31e0:	4770      	bx	lr
   e31e2:	2300      	movs	r3, #0
   e31e4:	e7e4      	b.n	e31b0 <__hi0bits+0xa>

000e31e6 <__lo0bits>:
   e31e6:	6803      	ldr	r3, [r0, #0]
   e31e8:	f013 0207 	ands.w	r2, r3, #7
   e31ec:	4601      	mov	r1, r0
   e31ee:	d00b      	beq.n	e3208 <__lo0bits+0x22>
   e31f0:	07da      	lsls	r2, r3, #31
   e31f2:	d424      	bmi.n	e323e <__lo0bits+0x58>
   e31f4:	0798      	lsls	r0, r3, #30
   e31f6:	bf49      	itett	mi
   e31f8:	085b      	lsrmi	r3, r3, #1
   e31fa:	089b      	lsrpl	r3, r3, #2
   e31fc:	2001      	movmi	r0, #1
   e31fe:	600b      	strmi	r3, [r1, #0]
   e3200:	bf5c      	itt	pl
   e3202:	600b      	strpl	r3, [r1, #0]
   e3204:	2002      	movpl	r0, #2
   e3206:	4770      	bx	lr
   e3208:	b298      	uxth	r0, r3
   e320a:	b9b0      	cbnz	r0, e323a <__lo0bits+0x54>
   e320c:	0c1b      	lsrs	r3, r3, #16
   e320e:	2010      	movs	r0, #16
   e3210:	f013 0fff 	tst.w	r3, #255	; 0xff
   e3214:	bf04      	itt	eq
   e3216:	0a1b      	lsreq	r3, r3, #8
   e3218:	3008      	addeq	r0, #8
   e321a:	071a      	lsls	r2, r3, #28
   e321c:	bf04      	itt	eq
   e321e:	091b      	lsreq	r3, r3, #4
   e3220:	3004      	addeq	r0, #4
   e3222:	079a      	lsls	r2, r3, #30
   e3224:	bf04      	itt	eq
   e3226:	089b      	lsreq	r3, r3, #2
   e3228:	3002      	addeq	r0, #2
   e322a:	07da      	lsls	r2, r3, #31
   e322c:	d403      	bmi.n	e3236 <__lo0bits+0x50>
   e322e:	085b      	lsrs	r3, r3, #1
   e3230:	f100 0001 	add.w	r0, r0, #1
   e3234:	d005      	beq.n	e3242 <__lo0bits+0x5c>
   e3236:	600b      	str	r3, [r1, #0]
   e3238:	4770      	bx	lr
   e323a:	4610      	mov	r0, r2
   e323c:	e7e8      	b.n	e3210 <__lo0bits+0x2a>
   e323e:	2000      	movs	r0, #0
   e3240:	4770      	bx	lr
   e3242:	2020      	movs	r0, #32
   e3244:	4770      	bx	lr

000e3246 <__i2b>:
   e3246:	b510      	push	{r4, lr}
   e3248:	460c      	mov	r4, r1
   e324a:	2101      	movs	r1, #1
   e324c:	f7ff fee4 	bl	e3018 <_Balloc>
   e3250:	2201      	movs	r2, #1
   e3252:	6144      	str	r4, [r0, #20]
   e3254:	6102      	str	r2, [r0, #16]
   e3256:	bd10      	pop	{r4, pc}

000e3258 <__multiply>:
   e3258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e325c:	4615      	mov	r5, r2
   e325e:	690a      	ldr	r2, [r1, #16]
   e3260:	692b      	ldr	r3, [r5, #16]
   e3262:	429a      	cmp	r2, r3
   e3264:	bfb8      	it	lt
   e3266:	460b      	movlt	r3, r1
   e3268:	460c      	mov	r4, r1
   e326a:	bfbc      	itt	lt
   e326c:	462c      	movlt	r4, r5
   e326e:	461d      	movlt	r5, r3
   e3270:	6927      	ldr	r7, [r4, #16]
   e3272:	f8d5 9010 	ldr.w	r9, [r5, #16]
   e3276:	68a3      	ldr	r3, [r4, #8]
   e3278:	6861      	ldr	r1, [r4, #4]
   e327a:	eb07 0609 	add.w	r6, r7, r9
   e327e:	42b3      	cmp	r3, r6
   e3280:	bfb8      	it	lt
   e3282:	3101      	addlt	r1, #1
   e3284:	b085      	sub	sp, #20
   e3286:	f7ff fec7 	bl	e3018 <_Balloc>
   e328a:	f100 0114 	add.w	r1, r0, #20
   e328e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   e3292:	460b      	mov	r3, r1
   e3294:	2200      	movs	r2, #0
   e3296:	4543      	cmp	r3, r8
   e3298:	d31d      	bcc.n	e32d6 <__multiply+0x7e>
   e329a:	f104 0314 	add.w	r3, r4, #20
   e329e:	f105 0214 	add.w	r2, r5, #20
   e32a2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   e32a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e32aa:	9302      	str	r3, [sp, #8]
   e32ac:	1b3b      	subs	r3, r7, r4
   e32ae:	3b15      	subs	r3, #21
   e32b0:	f023 0303 	bic.w	r3, r3, #3
   e32b4:	3304      	adds	r3, #4
   e32b6:	f104 0515 	add.w	r5, r4, #21
   e32ba:	42af      	cmp	r7, r5
   e32bc:	bf38      	it	cc
   e32be:	2304      	movcc	r3, #4
   e32c0:	9301      	str	r3, [sp, #4]
   e32c2:	9b02      	ldr	r3, [sp, #8]
   e32c4:	9203      	str	r2, [sp, #12]
   e32c6:	4293      	cmp	r3, r2
   e32c8:	d808      	bhi.n	e32dc <__multiply+0x84>
   e32ca:	2e00      	cmp	r6, #0
   e32cc:	dc5a      	bgt.n	e3384 <__multiply+0x12c>
   e32ce:	6106      	str	r6, [r0, #16]
   e32d0:	b005      	add	sp, #20
   e32d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e32d6:	f843 2b04 	str.w	r2, [r3], #4
   e32da:	e7dc      	b.n	e3296 <__multiply+0x3e>
   e32dc:	f8b2 a000 	ldrh.w	sl, [r2]
   e32e0:	f1ba 0f00 	cmp.w	sl, #0
   e32e4:	d024      	beq.n	e3330 <__multiply+0xd8>
   e32e6:	f104 0e14 	add.w	lr, r4, #20
   e32ea:	4689      	mov	r9, r1
   e32ec:	f04f 0c00 	mov.w	ip, #0
   e32f0:	f85e 5b04 	ldr.w	r5, [lr], #4
   e32f4:	f8d9 b000 	ldr.w	fp, [r9]
   e32f8:	b2ab      	uxth	r3, r5
   e32fa:	fa1f fb8b 	uxth.w	fp, fp
   e32fe:	fb0a b303 	mla	r3, sl, r3, fp
   e3302:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   e3306:	f8d9 5000 	ldr.w	r5, [r9]
   e330a:	4463      	add	r3, ip
   e330c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e3310:	fb0a c50b 	mla	r5, sl, fp, ip
   e3314:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   e3318:	b29b      	uxth	r3, r3
   e331a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   e331e:	4577      	cmp	r7, lr
   e3320:	f849 3b04 	str.w	r3, [r9], #4
   e3324:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e3328:	d8e2      	bhi.n	e32f0 <__multiply+0x98>
   e332a:	9b01      	ldr	r3, [sp, #4]
   e332c:	f841 c003 	str.w	ip, [r1, r3]
   e3330:	9b03      	ldr	r3, [sp, #12]
   e3332:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   e3336:	3204      	adds	r2, #4
   e3338:	f1b9 0f00 	cmp.w	r9, #0
   e333c:	d020      	beq.n	e3380 <__multiply+0x128>
   e333e:	680b      	ldr	r3, [r1, #0]
   e3340:	f104 0c14 	add.w	ip, r4, #20
   e3344:	468e      	mov	lr, r1
   e3346:	f04f 0a00 	mov.w	sl, #0
   e334a:	f8bc 5000 	ldrh.w	r5, [ip]
   e334e:	f8be b002 	ldrh.w	fp, [lr, #2]
   e3352:	fb09 b505 	mla	r5, r9, r5, fp
   e3356:	44aa      	add	sl, r5
   e3358:	b29b      	uxth	r3, r3
   e335a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   e335e:	f84e 3b04 	str.w	r3, [lr], #4
   e3362:	f85c 3b04 	ldr.w	r3, [ip], #4
   e3366:	f8be 5000 	ldrh.w	r5, [lr]
   e336a:	0c1b      	lsrs	r3, r3, #16
   e336c:	fb09 5303 	mla	r3, r9, r3, r5
   e3370:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   e3374:	4567      	cmp	r7, ip
   e3376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   e337a:	d8e6      	bhi.n	e334a <__multiply+0xf2>
   e337c:	9d01      	ldr	r5, [sp, #4]
   e337e:	514b      	str	r3, [r1, r5]
   e3380:	3104      	adds	r1, #4
   e3382:	e79e      	b.n	e32c2 <__multiply+0x6a>
   e3384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   e3388:	2b00      	cmp	r3, #0
   e338a:	d1a0      	bne.n	e32ce <__multiply+0x76>
   e338c:	3e01      	subs	r6, #1
   e338e:	e79c      	b.n	e32ca <__multiply+0x72>

000e3390 <__pow5mult>:
   e3390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3394:	4615      	mov	r5, r2
   e3396:	f012 0203 	ands.w	r2, r2, #3
   e339a:	4606      	mov	r6, r0
   e339c:	460f      	mov	r7, r1
   e339e:	d007      	beq.n	e33b0 <__pow5mult+0x20>
   e33a0:	4c21      	ldr	r4, [pc, #132]	; (e3428 <__pow5mult+0x98>)
   e33a2:	3a01      	subs	r2, #1
   e33a4:	2300      	movs	r3, #0
   e33a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e33aa:	f7ff fe80 	bl	e30ae <__multadd>
   e33ae:	4607      	mov	r7, r0
   e33b0:	10ad      	asrs	r5, r5, #2
   e33b2:	d035      	beq.n	e3420 <__pow5mult+0x90>
   e33b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e33b6:	b93c      	cbnz	r4, e33c8 <__pow5mult+0x38>
   e33b8:	2010      	movs	r0, #16
   e33ba:	f7f9 fe9d 	bl	dd0f8 <malloc>
   e33be:	e9c0 4401 	strd	r4, r4, [r0, #4]
   e33c2:	6270      	str	r0, [r6, #36]	; 0x24
   e33c4:	6004      	str	r4, [r0, #0]
   e33c6:	60c4      	str	r4, [r0, #12]
   e33c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e33cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e33d0:	b94c      	cbnz	r4, e33e6 <__pow5mult+0x56>
   e33d2:	f240 2171 	movw	r1, #625	; 0x271
   e33d6:	4630      	mov	r0, r6
   e33d8:	f7ff ff35 	bl	e3246 <__i2b>
   e33dc:	2300      	movs	r3, #0
   e33de:	f8c8 0008 	str.w	r0, [r8, #8]
   e33e2:	4604      	mov	r4, r0
   e33e4:	6003      	str	r3, [r0, #0]
   e33e6:	f04f 0900 	mov.w	r9, #0
   e33ea:	07eb      	lsls	r3, r5, #31
   e33ec:	d50a      	bpl.n	e3404 <__pow5mult+0x74>
   e33ee:	4639      	mov	r1, r7
   e33f0:	4622      	mov	r2, r4
   e33f2:	4630      	mov	r0, r6
   e33f4:	f7ff ff30 	bl	e3258 <__multiply>
   e33f8:	4639      	mov	r1, r7
   e33fa:	4680      	mov	r8, r0
   e33fc:	4630      	mov	r0, r6
   e33fe:	f7ff fe3f 	bl	e3080 <_Bfree>
   e3402:	4647      	mov	r7, r8
   e3404:	106d      	asrs	r5, r5, #1
   e3406:	d00b      	beq.n	e3420 <__pow5mult+0x90>
   e3408:	6820      	ldr	r0, [r4, #0]
   e340a:	b938      	cbnz	r0, e341c <__pow5mult+0x8c>
   e340c:	4622      	mov	r2, r4
   e340e:	4621      	mov	r1, r4
   e3410:	4630      	mov	r0, r6
   e3412:	f7ff ff21 	bl	e3258 <__multiply>
   e3416:	6020      	str	r0, [r4, #0]
   e3418:	f8c0 9000 	str.w	r9, [r0]
   e341c:	4604      	mov	r4, r0
   e341e:	e7e4      	b.n	e33ea <__pow5mult+0x5a>
   e3420:	4638      	mov	r0, r7
   e3422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e3426:	bf00      	nop
   e3428:	000e4de0 	.word	0x000e4de0

000e342c <__lshift>:
   e342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3430:	460c      	mov	r4, r1
   e3432:	6849      	ldr	r1, [r1, #4]
   e3434:	6923      	ldr	r3, [r4, #16]
   e3436:	eb03 1862 	add.w	r8, r3, r2, asr #5
   e343a:	68a3      	ldr	r3, [r4, #8]
   e343c:	4607      	mov	r7, r0
   e343e:	4691      	mov	r9, r2
   e3440:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e3444:	f108 0601 	add.w	r6, r8, #1
   e3448:	42b3      	cmp	r3, r6
   e344a:	db3f      	blt.n	e34cc <__lshift+0xa0>
   e344c:	4638      	mov	r0, r7
   e344e:	f7ff fde3 	bl	e3018 <_Balloc>
   e3452:	2300      	movs	r3, #0
   e3454:	4605      	mov	r5, r0
   e3456:	f100 0114 	add.w	r1, r0, #20
   e345a:	f100 0210 	add.w	r2, r0, #16
   e345e:	4618      	mov	r0, r3
   e3460:	4553      	cmp	r3, sl
   e3462:	db36      	blt.n	e34d2 <__lshift+0xa6>
   e3464:	6920      	ldr	r0, [r4, #16]
   e3466:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   e346a:	f104 0314 	add.w	r3, r4, #20
   e346e:	f019 091f 	ands.w	r9, r9, #31
   e3472:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   e3476:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   e347a:	d02e      	beq.n	e34da <__lshift+0xae>
   e347c:	f1c9 0e20 	rsb	lr, r9, #32
   e3480:	468a      	mov	sl, r1
   e3482:	2200      	movs	r2, #0
   e3484:	6818      	ldr	r0, [r3, #0]
   e3486:	fa00 f009 	lsl.w	r0, r0, r9
   e348a:	4302      	orrs	r2, r0
   e348c:	f84a 2b04 	str.w	r2, [sl], #4
   e3490:	f853 2b04 	ldr.w	r2, [r3], #4
   e3494:	459c      	cmp	ip, r3
   e3496:	fa22 f20e 	lsr.w	r2, r2, lr
   e349a:	d8f3      	bhi.n	e3484 <__lshift+0x58>
   e349c:	ebac 0304 	sub.w	r3, ip, r4
   e34a0:	3b15      	subs	r3, #21
   e34a2:	f023 0303 	bic.w	r3, r3, #3
   e34a6:	3304      	adds	r3, #4
   e34a8:	f104 0015 	add.w	r0, r4, #21
   e34ac:	4560      	cmp	r0, ip
   e34ae:	bf88      	it	hi
   e34b0:	2304      	movhi	r3, #4
   e34b2:	50ca      	str	r2, [r1, r3]
   e34b4:	b10a      	cbz	r2, e34ba <__lshift+0x8e>
   e34b6:	f108 0602 	add.w	r6, r8, #2
   e34ba:	3e01      	subs	r6, #1
   e34bc:	4638      	mov	r0, r7
   e34be:	612e      	str	r6, [r5, #16]
   e34c0:	4621      	mov	r1, r4
   e34c2:	f7ff fddd 	bl	e3080 <_Bfree>
   e34c6:	4628      	mov	r0, r5
   e34c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e34cc:	3101      	adds	r1, #1
   e34ce:	005b      	lsls	r3, r3, #1
   e34d0:	e7ba      	b.n	e3448 <__lshift+0x1c>
   e34d2:	f842 0f04 	str.w	r0, [r2, #4]!
   e34d6:	3301      	adds	r3, #1
   e34d8:	e7c2      	b.n	e3460 <__lshift+0x34>
   e34da:	3904      	subs	r1, #4
   e34dc:	f853 2b04 	ldr.w	r2, [r3], #4
   e34e0:	f841 2f04 	str.w	r2, [r1, #4]!
   e34e4:	459c      	cmp	ip, r3
   e34e6:	d8f9      	bhi.n	e34dc <__lshift+0xb0>
   e34e8:	e7e7      	b.n	e34ba <__lshift+0x8e>

000e34ea <__mcmp>:
   e34ea:	b530      	push	{r4, r5, lr}
   e34ec:	6902      	ldr	r2, [r0, #16]
   e34ee:	690c      	ldr	r4, [r1, #16]
   e34f0:	1b12      	subs	r2, r2, r4
   e34f2:	d10e      	bne.n	e3512 <__mcmp+0x28>
   e34f4:	f100 0314 	add.w	r3, r0, #20
   e34f8:	3114      	adds	r1, #20
   e34fa:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   e34fe:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   e3502:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   e3506:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   e350a:	42a5      	cmp	r5, r4
   e350c:	d003      	beq.n	e3516 <__mcmp+0x2c>
   e350e:	d305      	bcc.n	e351c <__mcmp+0x32>
   e3510:	2201      	movs	r2, #1
   e3512:	4610      	mov	r0, r2
   e3514:	bd30      	pop	{r4, r5, pc}
   e3516:	4283      	cmp	r3, r0
   e3518:	d3f3      	bcc.n	e3502 <__mcmp+0x18>
   e351a:	e7fa      	b.n	e3512 <__mcmp+0x28>
   e351c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e3520:	e7f7      	b.n	e3512 <__mcmp+0x28>

000e3522 <__mdiff>:
   e3522:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3526:	460c      	mov	r4, r1
   e3528:	4606      	mov	r6, r0
   e352a:	4611      	mov	r1, r2
   e352c:	4620      	mov	r0, r4
   e352e:	4617      	mov	r7, r2
   e3530:	f7ff ffdb 	bl	e34ea <__mcmp>
   e3534:	1e05      	subs	r5, r0, #0
   e3536:	d108      	bne.n	e354a <__mdiff+0x28>
   e3538:	4629      	mov	r1, r5
   e353a:	4630      	mov	r0, r6
   e353c:	f7ff fd6c 	bl	e3018 <_Balloc>
   e3540:	2301      	movs	r3, #1
   e3542:	e9c0 3504 	strd	r3, r5, [r0, #16]
   e3546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e354a:	bfa4      	itt	ge
   e354c:	463b      	movge	r3, r7
   e354e:	4627      	movge	r7, r4
   e3550:	4630      	mov	r0, r6
   e3552:	6879      	ldr	r1, [r7, #4]
   e3554:	bfa6      	itte	ge
   e3556:	461c      	movge	r4, r3
   e3558:	2500      	movge	r5, #0
   e355a:	2501      	movlt	r5, #1
   e355c:	f7ff fd5c 	bl	e3018 <_Balloc>
   e3560:	693e      	ldr	r6, [r7, #16]
   e3562:	60c5      	str	r5, [r0, #12]
   e3564:	6925      	ldr	r5, [r4, #16]
   e3566:	f107 0114 	add.w	r1, r7, #20
   e356a:	f104 0914 	add.w	r9, r4, #20
   e356e:	f100 0e14 	add.w	lr, r0, #20
   e3572:	f107 0210 	add.w	r2, r7, #16
   e3576:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   e357a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   e357e:	46f2      	mov	sl, lr
   e3580:	2700      	movs	r7, #0
   e3582:	f859 3b04 	ldr.w	r3, [r9], #4
   e3586:	f852 bf04 	ldr.w	fp, [r2, #4]!
   e358a:	fa1f f883 	uxth.w	r8, r3
   e358e:	fa17 f78b 	uxtah	r7, r7, fp
   e3592:	0c1b      	lsrs	r3, r3, #16
   e3594:	eba7 0808 	sub.w	r8, r7, r8
   e3598:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   e359c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   e35a0:	fa1f f888 	uxth.w	r8, r8
   e35a4:	141f      	asrs	r7, r3, #16
   e35a6:	454d      	cmp	r5, r9
   e35a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   e35ac:	f84a 3b04 	str.w	r3, [sl], #4
   e35b0:	d8e7      	bhi.n	e3582 <__mdiff+0x60>
   e35b2:	1b2b      	subs	r3, r5, r4
   e35b4:	3b15      	subs	r3, #21
   e35b6:	f023 0303 	bic.w	r3, r3, #3
   e35ba:	3304      	adds	r3, #4
   e35bc:	3415      	adds	r4, #21
   e35be:	42a5      	cmp	r5, r4
   e35c0:	bf38      	it	cc
   e35c2:	2304      	movcc	r3, #4
   e35c4:	4419      	add	r1, r3
   e35c6:	4473      	add	r3, lr
   e35c8:	469e      	mov	lr, r3
   e35ca:	460d      	mov	r5, r1
   e35cc:	4565      	cmp	r5, ip
   e35ce:	d30e      	bcc.n	e35ee <__mdiff+0xcc>
   e35d0:	f10c 0203 	add.w	r2, ip, #3
   e35d4:	1a52      	subs	r2, r2, r1
   e35d6:	f022 0203 	bic.w	r2, r2, #3
   e35da:	3903      	subs	r1, #3
   e35dc:	458c      	cmp	ip, r1
   e35de:	bf38      	it	cc
   e35e0:	2200      	movcc	r2, #0
   e35e2:	441a      	add	r2, r3
   e35e4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   e35e8:	b17b      	cbz	r3, e360a <__mdiff+0xe8>
   e35ea:	6106      	str	r6, [r0, #16]
   e35ec:	e7ab      	b.n	e3546 <__mdiff+0x24>
   e35ee:	f855 8b04 	ldr.w	r8, [r5], #4
   e35f2:	fa17 f488 	uxtah	r4, r7, r8
   e35f6:	1422      	asrs	r2, r4, #16
   e35f8:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   e35fc:	b2a4      	uxth	r4, r4
   e35fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   e3602:	f84e 4b04 	str.w	r4, [lr], #4
   e3606:	1417      	asrs	r7, r2, #16
   e3608:	e7e0      	b.n	e35cc <__mdiff+0xaa>
   e360a:	3e01      	subs	r6, #1
   e360c:	e7ea      	b.n	e35e4 <__mdiff+0xc2>
	...

000e3610 <__ulp>:
   e3610:	b082      	sub	sp, #8
   e3612:	ed8d 0b00 	vstr	d0, [sp]
   e3616:	9b01      	ldr	r3, [sp, #4]
   e3618:	4912      	ldr	r1, [pc, #72]	; (e3664 <__ulp+0x54>)
   e361a:	4019      	ands	r1, r3
   e361c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   e3620:	2900      	cmp	r1, #0
   e3622:	dd05      	ble.n	e3630 <__ulp+0x20>
   e3624:	2200      	movs	r2, #0
   e3626:	460b      	mov	r3, r1
   e3628:	ec43 2b10 	vmov	d0, r2, r3
   e362c:	b002      	add	sp, #8
   e362e:	4770      	bx	lr
   e3630:	4249      	negs	r1, r1
   e3632:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   e3636:	ea4f 5021 	mov.w	r0, r1, asr #20
   e363a:	f04f 0200 	mov.w	r2, #0
   e363e:	f04f 0300 	mov.w	r3, #0
   e3642:	da04      	bge.n	e364e <__ulp+0x3e>
   e3644:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   e3648:	fa41 f300 	asr.w	r3, r1, r0
   e364c:	e7ec      	b.n	e3628 <__ulp+0x18>
   e364e:	f1a0 0114 	sub.w	r1, r0, #20
   e3652:	291e      	cmp	r1, #30
   e3654:	bfda      	itte	le
   e3656:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   e365a:	fa20 f101 	lsrle.w	r1, r0, r1
   e365e:	2101      	movgt	r1, #1
   e3660:	460a      	mov	r2, r1
   e3662:	e7e1      	b.n	e3628 <__ulp+0x18>
   e3664:	7ff00000 	.word	0x7ff00000

000e3668 <__b2d>:
   e3668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e366a:	6905      	ldr	r5, [r0, #16]
   e366c:	f100 0714 	add.w	r7, r0, #20
   e3670:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   e3674:	1f2e      	subs	r6, r5, #4
   e3676:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e367a:	4620      	mov	r0, r4
   e367c:	f7ff fd93 	bl	e31a6 <__hi0bits>
   e3680:	f1c0 0320 	rsb	r3, r0, #32
   e3684:	280a      	cmp	r0, #10
   e3686:	f8df c07c 	ldr.w	ip, [pc, #124]	; e3704 <__b2d+0x9c>
   e368a:	600b      	str	r3, [r1, #0]
   e368c:	dc14      	bgt.n	e36b8 <__b2d+0x50>
   e368e:	f1c0 0e0b 	rsb	lr, r0, #11
   e3692:	fa24 f10e 	lsr.w	r1, r4, lr
   e3696:	42b7      	cmp	r7, r6
   e3698:	ea41 030c 	orr.w	r3, r1, ip
   e369c:	bf34      	ite	cc
   e369e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e36a2:	2100      	movcs	r1, #0
   e36a4:	3015      	adds	r0, #21
   e36a6:	fa04 f000 	lsl.w	r0, r4, r0
   e36aa:	fa21 f10e 	lsr.w	r1, r1, lr
   e36ae:	ea40 0201 	orr.w	r2, r0, r1
   e36b2:	ec43 2b10 	vmov	d0, r2, r3
   e36b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e36b8:	42b7      	cmp	r7, r6
   e36ba:	bf3a      	itte	cc
   e36bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e36c0:	f1a5 0608 	subcc.w	r6, r5, #8
   e36c4:	2100      	movcs	r1, #0
   e36c6:	380b      	subs	r0, #11
   e36c8:	d017      	beq.n	e36fa <__b2d+0x92>
   e36ca:	f1c0 0c20 	rsb	ip, r0, #32
   e36ce:	fa04 f500 	lsl.w	r5, r4, r0
   e36d2:	42be      	cmp	r6, r7
   e36d4:	fa21 f40c 	lsr.w	r4, r1, ip
   e36d8:	ea45 0504 	orr.w	r5, r5, r4
   e36dc:	bf8c      	ite	hi
   e36de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   e36e2:	2400      	movls	r4, #0
   e36e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   e36e8:	fa01 f000 	lsl.w	r0, r1, r0
   e36ec:	fa24 f40c 	lsr.w	r4, r4, ip
   e36f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e36f4:	ea40 0204 	orr.w	r2, r0, r4
   e36f8:	e7db      	b.n	e36b2 <__b2d+0x4a>
   e36fa:	ea44 030c 	orr.w	r3, r4, ip
   e36fe:	460a      	mov	r2, r1
   e3700:	e7d7      	b.n	e36b2 <__b2d+0x4a>
   e3702:	bf00      	nop
   e3704:	3ff00000 	.word	0x3ff00000

000e3708 <__d2b>:
   e3708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e370c:	4689      	mov	r9, r1
   e370e:	2101      	movs	r1, #1
   e3710:	ec57 6b10 	vmov	r6, r7, d0
   e3714:	4690      	mov	r8, r2
   e3716:	f7ff fc7f 	bl	e3018 <_Balloc>
   e371a:	f3c7 550a 	ubfx	r5, r7, #20, #11
   e371e:	4604      	mov	r4, r0
   e3720:	f3c7 0313 	ubfx	r3, r7, #0, #20
   e3724:	bb35      	cbnz	r5, e3774 <__d2b+0x6c>
   e3726:	2e00      	cmp	r6, #0
   e3728:	9301      	str	r3, [sp, #4]
   e372a:	d028      	beq.n	e377e <__d2b+0x76>
   e372c:	4668      	mov	r0, sp
   e372e:	9600      	str	r6, [sp, #0]
   e3730:	f7ff fd59 	bl	e31e6 <__lo0bits>
   e3734:	9900      	ldr	r1, [sp, #0]
   e3736:	b300      	cbz	r0, e377a <__d2b+0x72>
   e3738:	9a01      	ldr	r2, [sp, #4]
   e373a:	f1c0 0320 	rsb	r3, r0, #32
   e373e:	fa02 f303 	lsl.w	r3, r2, r3
   e3742:	430b      	orrs	r3, r1
   e3744:	40c2      	lsrs	r2, r0
   e3746:	6163      	str	r3, [r4, #20]
   e3748:	9201      	str	r2, [sp, #4]
   e374a:	9b01      	ldr	r3, [sp, #4]
   e374c:	61a3      	str	r3, [r4, #24]
   e374e:	2b00      	cmp	r3, #0
   e3750:	bf14      	ite	ne
   e3752:	2202      	movne	r2, #2
   e3754:	2201      	moveq	r2, #1
   e3756:	6122      	str	r2, [r4, #16]
   e3758:	b1d5      	cbz	r5, e3790 <__d2b+0x88>
   e375a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   e375e:	4405      	add	r5, r0
   e3760:	f8c9 5000 	str.w	r5, [r9]
   e3764:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e3768:	f8c8 0000 	str.w	r0, [r8]
   e376c:	4620      	mov	r0, r4
   e376e:	b003      	add	sp, #12
   e3770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e3774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e3778:	e7d5      	b.n	e3726 <__d2b+0x1e>
   e377a:	6161      	str	r1, [r4, #20]
   e377c:	e7e5      	b.n	e374a <__d2b+0x42>
   e377e:	a801      	add	r0, sp, #4
   e3780:	f7ff fd31 	bl	e31e6 <__lo0bits>
   e3784:	9b01      	ldr	r3, [sp, #4]
   e3786:	6163      	str	r3, [r4, #20]
   e3788:	2201      	movs	r2, #1
   e378a:	6122      	str	r2, [r4, #16]
   e378c:	3020      	adds	r0, #32
   e378e:	e7e3      	b.n	e3758 <__d2b+0x50>
   e3790:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   e3794:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e3798:	f8c9 0000 	str.w	r0, [r9]
   e379c:	6918      	ldr	r0, [r3, #16]
   e379e:	f7ff fd02 	bl	e31a6 <__hi0bits>
   e37a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   e37a6:	e7df      	b.n	e3768 <__d2b+0x60>

000e37a8 <__ratio>:
   e37a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e37ac:	4688      	mov	r8, r1
   e37ae:	4669      	mov	r1, sp
   e37b0:	4681      	mov	r9, r0
   e37b2:	f7ff ff59 	bl	e3668 <__b2d>
   e37b6:	a901      	add	r1, sp, #4
   e37b8:	4640      	mov	r0, r8
   e37ba:	ec55 4b10 	vmov	r4, r5, d0
   e37be:	f7ff ff53 	bl	e3668 <__b2d>
   e37c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e37c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e37ca:	eba3 0c02 	sub.w	ip, r3, r2
   e37ce:	e9dd 3200 	ldrd	r3, r2, [sp]
   e37d2:	1a9b      	subs	r3, r3, r2
   e37d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   e37d8:	ec51 0b10 	vmov	r0, r1, d0
   e37dc:	2b00      	cmp	r3, #0
   e37de:	bfd6      	itet	le
   e37e0:	460a      	movle	r2, r1
   e37e2:	462a      	movgt	r2, r5
   e37e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   e37e8:	468b      	mov	fp, r1
   e37ea:	462f      	mov	r7, r5
   e37ec:	bfd4      	ite	le
   e37ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   e37f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   e37f6:	4620      	mov	r0, r4
   e37f8:	ee10 2a10 	vmov	r2, s0
   e37fc:	465b      	mov	r3, fp
   e37fe:	4639      	mov	r1, r7
   e3800:	f7fd fcd8 	bl	e11b4 <__aeabi_ddiv>
   e3804:	ec41 0b10 	vmov	d0, r0, r1
   e3808:	b003      	add	sp, #12
   e380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e380e <__copybits>:
   e380e:	3901      	subs	r1, #1
   e3810:	b570      	push	{r4, r5, r6, lr}
   e3812:	1149      	asrs	r1, r1, #5
   e3814:	6914      	ldr	r4, [r2, #16]
   e3816:	3101      	adds	r1, #1
   e3818:	f102 0314 	add.w	r3, r2, #20
   e381c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e3820:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e3824:	1f05      	subs	r5, r0, #4
   e3826:	42a3      	cmp	r3, r4
   e3828:	d30c      	bcc.n	e3844 <__copybits+0x36>
   e382a:	1aa3      	subs	r3, r4, r2
   e382c:	3b11      	subs	r3, #17
   e382e:	f023 0303 	bic.w	r3, r3, #3
   e3832:	3211      	adds	r2, #17
   e3834:	42a2      	cmp	r2, r4
   e3836:	bf88      	it	hi
   e3838:	2300      	movhi	r3, #0
   e383a:	4418      	add	r0, r3
   e383c:	2300      	movs	r3, #0
   e383e:	4288      	cmp	r0, r1
   e3840:	d305      	bcc.n	e384e <__copybits+0x40>
   e3842:	bd70      	pop	{r4, r5, r6, pc}
   e3844:	f853 6b04 	ldr.w	r6, [r3], #4
   e3848:	f845 6f04 	str.w	r6, [r5, #4]!
   e384c:	e7eb      	b.n	e3826 <__copybits+0x18>
   e384e:	f840 3b04 	str.w	r3, [r0], #4
   e3852:	e7f4      	b.n	e383e <__copybits+0x30>

000e3854 <__any_on>:
   e3854:	f100 0214 	add.w	r2, r0, #20
   e3858:	6900      	ldr	r0, [r0, #16]
   e385a:	114b      	asrs	r3, r1, #5
   e385c:	4298      	cmp	r0, r3
   e385e:	b510      	push	{r4, lr}
   e3860:	db11      	blt.n	e3886 <__any_on+0x32>
   e3862:	dd0a      	ble.n	e387a <__any_on+0x26>
   e3864:	f011 011f 	ands.w	r1, r1, #31
   e3868:	d007      	beq.n	e387a <__any_on+0x26>
   e386a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e386e:	fa24 f001 	lsr.w	r0, r4, r1
   e3872:	fa00 f101 	lsl.w	r1, r0, r1
   e3876:	428c      	cmp	r4, r1
   e3878:	d10b      	bne.n	e3892 <__any_on+0x3e>
   e387a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e387e:	4293      	cmp	r3, r2
   e3880:	d803      	bhi.n	e388a <__any_on+0x36>
   e3882:	2000      	movs	r0, #0
   e3884:	bd10      	pop	{r4, pc}
   e3886:	4603      	mov	r3, r0
   e3888:	e7f7      	b.n	e387a <__any_on+0x26>
   e388a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e388e:	2900      	cmp	r1, #0
   e3890:	d0f5      	beq.n	e387e <__any_on+0x2a>
   e3892:	2001      	movs	r0, #1
   e3894:	e7f6      	b.n	e3884 <__any_on+0x30>

000e3896 <_calloc_r>:
   e3896:	b513      	push	{r0, r1, r4, lr}
   e3898:	434a      	muls	r2, r1
   e389a:	4611      	mov	r1, r2
   e389c:	9201      	str	r2, [sp, #4]
   e389e:	f7f9 fc6b 	bl	dd178 <_malloc_r>
   e38a2:	4604      	mov	r4, r0
   e38a4:	b118      	cbz	r0, e38ae <_calloc_r+0x18>
   e38a6:	9a01      	ldr	r2, [sp, #4]
   e38a8:	2100      	movs	r1, #0
   e38aa:	f7fd ff25 	bl	e16f8 <memset>
   e38ae:	4620      	mov	r0, r4
   e38b0:	b002      	add	sp, #8
   e38b2:	bd10      	pop	{r4, pc}

000e38b4 <_open_r>:
   e38b4:	b538      	push	{r3, r4, r5, lr}
   e38b6:	4d07      	ldr	r5, [pc, #28]	; (e38d4 <_open_r+0x20>)
   e38b8:	4604      	mov	r4, r0
   e38ba:	4608      	mov	r0, r1
   e38bc:	4611      	mov	r1, r2
   e38be:	2200      	movs	r2, #0
   e38c0:	602a      	str	r2, [r5, #0]
   e38c2:	461a      	mov	r2, r3
   e38c4:	f7f9 f9c0 	bl	dcc48 <_open>
   e38c8:	1c43      	adds	r3, r0, #1
   e38ca:	d102      	bne.n	e38d2 <_open_r+0x1e>
   e38cc:	682b      	ldr	r3, [r5, #0]
   e38ce:	b103      	cbz	r3, e38d2 <_open_r+0x1e>
   e38d0:	6023      	str	r3, [r4, #0]
   e38d2:	bd38      	pop	{r3, r4, r5, pc}
   e38d4:	2003e7ec 	.word	0x2003e7ec

000e38d8 <_read_r>:
   e38d8:	b538      	push	{r3, r4, r5, lr}
   e38da:	4d07      	ldr	r5, [pc, #28]	; (e38f8 <_read_r+0x20>)
   e38dc:	4604      	mov	r4, r0
   e38de:	4608      	mov	r0, r1
   e38e0:	4611      	mov	r1, r2
   e38e2:	2200      	movs	r2, #0
   e38e4:	602a      	str	r2, [r5, #0]
   e38e6:	461a      	mov	r2, r3
   e38e8:	f7f9 f9be 	bl	dcc68 <_read>
   e38ec:	1c43      	adds	r3, r0, #1
   e38ee:	d102      	bne.n	e38f6 <_read_r+0x1e>
   e38f0:	682b      	ldr	r3, [r5, #0]
   e38f2:	b103      	cbz	r3, e38f6 <_read_r+0x1e>
   e38f4:	6023      	str	r3, [r4, #0]
   e38f6:	bd38      	pop	{r3, r4, r5, pc}
   e38f8:	2003e7ec 	.word	0x2003e7ec

000e38fc <nanf>:
   e38fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; e3904 <nanf+0x8>
   e3900:	4770      	bx	lr
   e3902:	bf00      	nop
   e3904:	7fc00000 	.word	0x7fc00000

000e3908 <__ascii_wctomb>:
   e3908:	b149      	cbz	r1, e391e <__ascii_wctomb+0x16>
   e390a:	2aff      	cmp	r2, #255	; 0xff
   e390c:	bf85      	ittet	hi
   e390e:	238a      	movhi	r3, #138	; 0x8a
   e3910:	6003      	strhi	r3, [r0, #0]
   e3912:	700a      	strbls	r2, [r1, #0]
   e3914:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   e3918:	bf98      	it	ls
   e391a:	2001      	movls	r0, #1
   e391c:	4770      	bx	lr
   e391e:	4608      	mov	r0, r1
   e3920:	4770      	bx	lr
	...

000e3924 <__aeabi_d2lz>:
   e3924:	b538      	push	{r3, r4, r5, lr}
   e3926:	2200      	movs	r2, #0
   e3928:	2300      	movs	r3, #0
   e392a:	4604      	mov	r4, r0
   e392c:	460d      	mov	r5, r1
   e392e:	f7fd fd89 	bl	e1444 <__aeabi_dcmplt>
   e3932:	b928      	cbnz	r0, e3940 <__aeabi_d2lz+0x1c>
   e3934:	4620      	mov	r0, r4
   e3936:	4629      	mov	r1, r5
   e3938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e393c:	f7fd be58 	b.w	e15f0 <__aeabi_d2ulz>
   e3940:	4620      	mov	r0, r4
   e3942:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   e3946:	f7fd fe53 	bl	e15f0 <__aeabi_d2ulz>
   e394a:	4240      	negs	r0, r0
   e394c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e3950:	bd38      	pop	{r3, r4, r5, pc}
   e3952:	bf00      	nop

000e3954 <dynalib_user>:
   e3954:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   e3964:	0000 0000                                   ....

000e3968 <_ZTVN5spark10LogHandlerE>:
	...
   e3978:	40a9 000d 40cd 000d                         .@...@..

000e3980 <_ZTVN5spark16SerialLogHandlerE>:
	...
   e3988:	4101 000d 4135 000d f3a5 000d 40cf 000d     .A..5A.......@..

000e3998 <_ZTV8MB85RC64>:
	...
   e39a0:	40d9 000d 40ed 000d 8501 000d 8597 000d     .@...@..........
   e39b0:	8619 000d 6e49 7469 6c61 7a69 6e69 2067     ....Initalizing 
   e39c0:	6874 2065 6970 4d6e 646f 7365 0000          the pinModes..

000e39ce <BUTTON_PIN>:
   e39ce:	0004                                        ..

000e39d0 <SOIL_MOISTURE_PIN>:
   e39d0:	0013                                        ..

000e39d2 <SOIL_POWER_PIN>:
   e39d2:	0011                                        ..

000e39d4 <SOIL_TEMP_PIN>:
   e39d4:	0012                                        ..

000e39d6 <TMP36_SENSE_PIN>:
   e39d6:	000f 414e 2500 3a69 3030 2500 7369 6365     ..NA.%i:00.%isec
   e39e6:	2500 2e32 6631 2520 0025 6559 0073 6f4e     .%2.1f %%.Yes.No
   e39f6:	5500 6b6e 6f6e 6e77 4e00 746f 4320 6168     .Unknown.Not Cha
   e3a06:	6772 6e69 0067 6843 7261 6567 0064 6944     rging.Charged.Di
   e3a16:	6373 6168 6772 6e69 0067 6146 6c75 0074     scharging.Fault.
   e3a26:	6944 6f63 6e6e 6365 6574 0064 6e49 7469     Diconnected.Init
   e3a36:	6169 696c 697a 676e 5020 7261 6974 6c63     ializing Particl
   e3a46:	2065 7566 636e 6974 6e6f 2073 6e61 2064     e functions and 
   e3a56:	6176 6972 6261 656c 0073 6e49 6574 6e72     variables.Intern
   e3a66:	6c61 5420 6d65 0070 6157 656b 5420 6d69     al Temp.Wake Tim
   e3a76:	0065 6c53 6565 2070 6954 656d 5300 656c     e.Sleep Time.Sle
   e3a86:	7065 4520 616e 6c62 6465 5200 6c65 6165     ep Enabled.Relea
   e3a96:	6573 5300 6769 616e 006c 7473 7461 4f65     se.Signal.stateO
   e3aa6:	4366 6768 4200 7461 6574 7972 6f43 746e     fChg.BatteryCont
   e3ab6:	7865 0074 6f53 6c69 6f4d 7369 7574 6572     ext.SoilMoisture
   e3ac6:	5300 696f 206c 6554 706d 5700 7461 7265     .Soil Temp.Water
   e3ad6:	6e69 5067 7463 5700 7461 7265 6e69 4467     ingPct.WateringD
   e3ae6:	7275 7461 6f69 006e 6e45 6261 656c 5320     uration.Enable S
   e3af6:	656c 7065 5300 7465 5720 7461 7265 5420     leep.Set Water T
   e3b06:	7268 7365 6f68 646c 5300 7465 4820 6165     hreshold.Set Hea
   e3b16:	2074 6854 6572 6873 6c6f 0064 6553 2074     t Threshold.Set 
   e3b26:	6157 6574 2072 7544 6172 6974 6e6f 7400     Water Duration.t
   e3b36:	7572 0065 6166 736c 0065 6e45 6261 656c     rue.false.Enable
   e3b46:	7320 656c 7065 6920 2073 7325 4d00 646f      sleep is %s.Mod
   e3b56:	0065 6157 6574 6972 676e 6620 6e75 7463     e.Watering funct
   e3b66:	6f69 206e 6964 6173 6c62 6465 5300 7379     ion disabled.Sys
   e3b76:	6574 006d 6548 7461 7720 7461 7265 6e69     tem.Heat waterin
   e3b86:	2067 7566 636e 6974 6e6f 6420 7369 6261     g function disab
   e3b96:	656c 0064 6548 7461 6200 0073 6d73 7300     led.Heat.bs.sm.s
   e3ba6:	0074 7377 5700 6b6f 2065 6e6f 6220 7475     t.ws.Woke on but
   e3bb6:	6f74 206e 7270 7365 0073 7542 7474 6e6f     ton press.Button
   e3bc6:	7020 6572 7373 2d20 7320 656c 7065 6520      press - sleep e
   e3bd6:	616e 6c62 2065 7369 2520 0073 6553 646e     nable is %s.Send
   e3be6:	6e69 2067 6577 6862 6f6f 206b 6f74 7320     ing webhook to s
   e3bf6:	6174 7472 7720 7461 7265 6e69 0067 227b     tart watering.{"
   e3c06:	7564 6172 6974 6e6f 3a22 6925 007d 6152     duration":%i}.Ra
   e3c16:	6863 6f69 572d 7461 7265 6147 6472 6e65     chio-WaterGarden
   e3c26:	7600 6365 6f74 3a72 5f3a 5f4d 6572 6c61     .vector::_M_real
   e3c36:	6f6c 5f63 6e69 6573 7472 4500 5453 4535     loc_insert.EST5E
   e3c46:	5444 4d2c 2e33 2e32 2f30 3230 303a 3a30     DT,M3.2.0/02:00:
   e3c56:	3030 4d2c 3131 312e 302e 302f 3a32 3030     00,M11.1.0/02:00
   e3c66:	303a 0030 752f 7273 652f 6576 746e 2e73     :00./usr/events.
   e3c76:	7874 0074 6865 6600 6c75 006c 3530 303a     txt.eh.full.05:0
   e3c86:	3a30 3030 3200 3a31 3935 353a 0039 6f4c     0:00.21:59:59.Lo
   e3c96:	6461 6e69 2067 7953 7473 6d65 4420 6665     ading System Def
   e3ca6:	7561 746c 0073 6f4c 6461 6e69 2067 7973     aults.Loading sy
   e3cb6:	7473 6d65 6420 6665 7561 746c 0073 7973     stem defaults.sy
   e3cc6:	5373 6174 7375 6f20 6a62 6365 2074 7473     sStaus object st
   e3cd6:	726f 6465 6120 646e 6820 7361 2068 7075     ored and hash up
   e3ce6:	6164 6574 0064 7563 7272 6e65 2074 626f     dated.current ob
   e3cf6:	656a 7463 7320 6f74 6572 2064 6e61 2064     ject stored and 
   e3d06:	6168 6873 7520 6470 7461 6465 4600 4152     hash updated.FRA
   e3d16:	204d 6e69 7469 6169 696c 657a 2c64 6c20     M initialized, l
   e3d26:	616f 6964 676e 6f20 6a62 6365 7374 0000     oading objects..
	...

000e3d38 <_ZL17FRAMversionNumber>:
   e3d38:	0001 0000 6f4e 656e 5700 4669 0069 5347     ....None.WiFi.GS
   e3d48:	004d 4d55 5354 4300 4d44 0041 544c 0045     M.UMTS.CDMA.LTE.
   e3d58:	4549 4545 3038 3132 3435 4c00 4554 435f     IEEE802154.LTE_C
   e3d68:	5441 4d5f 0031 544c 5f45 4143 5f54 424e     AT_M1.LTE_CAT_NB
   e3d78:	0031 6f56 203a 3425 322e 2066 566d 2020     1.Vo: %4.2f mV  
   e3d88:	7452 203d 3425 322e 2066 566d 2020 2054     Rt= %4.2f mV  T 
   e3d98:	203d 3425 322e 0066 7325 5320 253a 2e32     = %4.2f.%s S:%2.
   e3da8:	6630 2525 202c 3a51 3225 302e 2566 2025     0f%%, Q:%2.0f%% 
   e3db8:	2500 2e34 6632 4320 4900 746e 7265 616e     .%4.2f C.Interna
   e3dc8:	206c 6554 706d 7265 7461 7275 2065 7369     l Temperature is
   e3dd8:	2520 0073 6f53 6c69 5420 6d65 6570 6172      %s.Soil Tempera
   e3de8:	7574 6572 6920 2073 7325 2500 2e34 6632     ture is %s.%4.2f
   e3df8:	2525 5300 696f 206c 6f4d 7369 7574 6572     %%.Soil Moisture
   e3e08:	6920 2073 7325 0000 39f7 000e 3d3c 000e      is %s...9..<=..
   e3e18:	3d41 000e 3d46 000e 3d4a 000e 3d4f 000e     A=..F=..J=..O=..
   e3e28:	3d54 000e 3d58 000e 3d63 000e 3d6e 000e     T=..X=..c=..n=..
   e3e38:	6166 6c69 6465 7420 206f 6572 6461 7220     failed to read r
   e3e48:	6765 6441 7264 253d 3230 2078 6f63 6e75     egAddr=%02x coun
   e3e58:	3d74 7525 6600 6961 656c 2064 6f74 7220     t=%u.failed to r
   e3e68:	6165 2064 6572 4167 6464 3d72 3025 7832     ead regAddr=%02x
   e3e78:	7320 6174 3d74 6425 4600 554f 2054 6964      stat=%d.FOUT di
   e3e88:	2064 6f6e 2074 6f67 4820 4749 0048 6f6e     d not go HIGH.no
   e3e98:	2074 6564 6574 7463 6465 6600 6961 656c     t detected.faile
   e3ea8:	2064 6f74 7720 6972 6574 7220 6765 6441     d to write regAd
   e3eb8:	7264 253d 3230 2078 7473 7461 253d 0064     dr=%02x stat=%d.
   e3ec8:	6573 5774 5444 2520 0064 6177 6374 6468     setWDT %d.watchd
   e3ed8:	676f 6320 656c 7261 6465 6220 6552 7573     og cleared bResu
   e3ee8:	746c 253d 0064 6177 6374 6468 676f 7320     lt=%d.watchdog s
   e3ef8:	7465 6620 756f 5372 6365 3d73 6425 6220     et fourSecs=%d b
   e3f08:	6552 7573 746c 253d 0064 6572 6573 4374     Result=%d.resetC
   e3f18:	6e6f 6966 2867 7830 3025 6c38 2978 5700     onfig(0x%08lx).W
   e3f28:	5441 4843 4f44 0047 4544 5045 505f 574f     ATCHDOG.DEEP_POW
   e3f38:	5245 445f 574f 004e 4f43 4e55 4454 574f     ER_DOWN.COUNTDOW
   e3f48:	5f4e 4954 454d 0052 4c41 5241 004d 6166     N_TIMER.ALARM.fa
   e3f58:	6c69 7275 2065 6e69 7520 6470 7461 5765     ilure in updateW
   e3f68:	6b61 5265 6165 6f73 206e 6425 7700 6b61     akeReason %d.wak
   e3f78:	2065 6572 7361 6e6f 3d20 2520 0073 3025     e reason = %s.%0
   e3f88:	6434 252d 3230 2d64 3025 6432 2520 3230     4d-%02d-%02d %02
   e3f98:	3a64 3025 6432 253a 3230 0064 6567 5274     d:%02d:%02d.getR
   e3fa8:	6374 7341 6d54 2520 0073 6573 2074 7973     tcAsTm %s.set sy
   e3fb8:	7473 6d65 6320 6f6c 6b63 6620 6f72 206d     stem clock from 
   e3fc8:	5452 2043 7325 6600 6961 656c 2064 6f74     RTC %s.failed to
   e3fd8:	6420 7465 6365 2074 4241 3831 3530 7300      detect AB1805.s
   e3fe8:	7465 7452 4163 5473 206d 7325 6600 6961     etRtcAsTm %s.fai
   e3ff8:	756c 6572 6920 206e 6573 5274 6374 7246     lure in setRtcFr
   e4008:	6d6f 6d54 2520 0064 6573 2074 5452 2043     omTm %d.set RTC 
   e4018:	7266 6d6f 6320 6f6c 6475 2520 0073 7061     from cloud %s.ap
   e4028:	2e70 6261 3831 3530 0000 0000               p.ab1805....

000e4034 <_ZTV6AB1805>:
	...
   e403c:	5f91 000d 5f93 000d 64ff 000d 6585 000d     ._..._...d...e..
   e404c:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   e405c:	5268 004b                                   hRK.

000e4060 <_ZTV19BackgroundPublishRK>:
	...
   e4068:	6aa1 000d 6abd 000d                         .j...j..

000e4070 <_ZTV10JsonBuffer>:
	...
   e4078:	6d79 000d 6d95 000d                         ym...m..

000e4080 <_ZTV10JsonParser>:
	...
   e4088:	6da9 000d 6dcd 000d 6425 253a 3a64 6425     .m...m..%d:%d:%d
   e4098:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   e40a8:	3935 4d00 6425 252e 2e64 6425 2c00 0000     59.M%d.%d.%d.,..

000e40b8 <_ZTV9LocalTime>:
	...
   e40c0:	6e61 000d 6e79 000d                         an..yn..

000e40c8 <_ZTV12LocalTimeHMS>:
	...
   e40d0:	6e01 000d 6e13 000d                         .n...n..

000e40d8 <_ZTV15LocalTimeChange>:
	...
   e40e0:	6e03 000d 6e21 000d                         .n..!n..

000e40e8 <_ZTV22LocalTimePosixTimezone>:
	...
   e40f0:	6e31 000d 6e4d 000d 7277 7469 4465 7461     1n..Mn..writeDat
   e4100:	2061 6166 6c69 6465 6420 7275 6e69 2067     a failed during 
   e4110:	7265 7361 2065 7266 6d61 6441 7264 253d     erase framAddr=%
   e4120:	0075 0000                                   u...

000e4124 <_ZTV6MB85RC>:
	...
   e412c:	8451 000d 8453 000d 8501 000d 8597 000d     Q...S...........
   e413c:	8619 000d 6966 656c 754e 3d6d 6425 7320     ....fileNum=%d s
   e414c:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   e415c:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   e416c:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   e417c:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   e418c:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   e419c:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   e41ac:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   e41bc:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   e41cc:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   e41dc:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   e41ec:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   e41fc:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   e420c:	4e65 6d75 253d 0064 6572 6573 2074 726f     eNum=%d.reset or
   e421c:	6420 7369 6f63 6e6e 6365 2074 7665 6e65      disconnect even
   e422c:	2c74 7320 7661 2065 6966 656c 2073 6f74     t, save files to
   e423c:	7120 6575 6575 7200 6d61 6400 7369 6163      queue.ram.disca
   e424c:	6472 6e69 2067 6f63 7272 7075 6574 2064     rding corrupted 
   e425c:	6966 656c 2520 0064 7570 6c62 7369 6968     file %d.publishi
   e426c:	676e 2520 2073 7665 6e65 3d74 7325 6420     ng %s event=%s d
   e427c:	7461 3d61 7325 6400 7369 6163 6472 6465     ata=%s.discarded
   e428c:	6520 6576 746e 2520 0064 5953 5453 4d45      event %d.SYSTEM
   e429c:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   e42ac:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   e42bc:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   e42cc:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   e42dc:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   e42ec:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   e42fc:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   e430c:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   e431c:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   e432c:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   e433c:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   e434c:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   e435c:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   e436c:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   e437c:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   e438c:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   e439c:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   e43ac:	7061 2e70 7570 7162 0000 0000               app.pubq....

000e43b8 <_ZTV17PublishQueuePosix>:
	...
   e43c0:	8ec5 000d 919d 000d 91c1 000d 3025 6438     ............%08d
   e43d0:	2f00 7200 6d65 766f 6465 2520 0073 7325     ./.removed %s.%s
   e43e0:	6520 6978 7473 2073 6e61 2064 7369 6120      exists and is a
   e43f0:	6420 7269 6365 6f74 7972 6600 6c69 2065      directory.file 
   e4400:	6e69 7420 6568 7720 7961 202c 6564 656c     in the way, dele
   e4410:	6974 676e 2520 0073 7473 7461 6620 6c69     ting %s.stat fil
   e4420:	6465 6520 7272 6f6e 253d 0064 7263 6165     ed errno=%d.crea
   e4430:	6574 2064 6964 2072 7325 6d00 646b 7269     ted dir %s.mkdir
   e4440:	6620 6961 656c 2064 7265 6e72 3d6f 6425      failed errno=%d
   e4450:	7500 636e 6e6f 6966 7567 6572 2064 6964     .unconfigured di
   e4460:	5072 7461 0068 6373 6e61 696e 676e 2520     rPath.scanning %
   e4470:	2073 6977 6874 7020 7461 6574 6e72 2520     s with pattern %
   e4480:	0073 6461 6964 676e 7420 206f 7571 7565     s.adding to queu
   e4490:	2065 6425 2520 0073 6567 4674 6c69 4665     e %d %s.getFileF
   e44a0:	6f72 516d 6575 6575 7220 7465 7275 656e     romQueue returne
   e44b0:	2064 6425 6100 7070 732e 7165 6966 656c     d %d.app.seqfile
   e44c0:	0000 0000                                   ....

000e44c4 <_ZTV14SequentialFile>:
	...
   e44cc:	951d 000d 9549 000d 91d5 000d 742e 706d     ....I........tmp
   e44dc:	7300 656c 7065 6548 706c 7265 6100 7070     .sleepHelper.app
   e44ec:	732e 656c 7065 2f00 7375 2f72 6c73 6565     .sleep./usr/slee
   e44fc:	5370 7465 6974 676e 2e73 736a 6e6f 2f00     pSettings.json./
   e450c:	7375 2f72 6c73 6565 4470 7461 2e61 6164     usr/sleepData.da
   e451c:	0074 7645 6e65 4874 7369 6f74 7972 3a3a     t.EventHistory::
   e452c:	6461 4564 6576 746e 0d00 000a 6944 6373     addEvent....Disc
   e453c:	6e6f 656e 7463 6e69 2067 6563 6c6c 6c75     onnecting cellul
   e454c:	7261 7300 6174 6574 6148 646e 656c 5372     ar.stateHandlerS
   e455c:	6174 7472 7200 6e75 696e 676e 6920 206e     tart.running in 
   e456c:	6f6e 6320 6e6f 656e 7463 6f69 206e 6f6d     no connection mo
   e457c:	6564 6300 6e6f 656e 7463 6465 7420 206f     de.connected to 
   e458c:	656e 7774 726f 206b 6e69 2520 756c 6d20     network in %lu m
   e459c:	0073 6974 656d 2064 756f 2074 6f63 6e6e     s.timed out conn
   e45ac:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e45bc:	6974 656d 2064 756f 2074 6572 6f63 6e6e     timed out reconn
   e45cc:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e45dc:	7473 7461 4865 6e61 6c64 7265 6c53 6565     stateHandlerSlee
   e45ec:	0070 6c73 6565 6970 676e 6620 726f 2520     p.sleeping for %
   e45fc:	2064 6573 2063 6461 756a 7473 656d 746e     d sec adjustment
   e460c:	734d 253d 0064 6570 6972 646f 7420 6f6f     Ms=%d.period too
   e461c:	7320 6f68 7472 7420 206f 6c73 6565 2070      short to sleep 
   e462c:	6425 7200 6d65 766f 6e69 2067 7469 6d65     %d.removing item
   e463c:	6620 6f72 206d 7570 6c62 7369 4468 7461      from publishDat
   e464c:	0061 6f63 6e6e 6365 6574 2064 6f74 6320     a.connected to c
   e465c:	6f6c 6475 6920 206e 6c25 2075 736d 7100     loud in %lu ms.q
   e466c:	6975 6b63 7000 6275 696c 6873 6e69 2067     uick.publishing 
   e467c:	616e 656d 253d 2073 6c66 6761 3d73 7830     name=%s flags=0x
   e468c:	7825 7700 0072 7474 0063 7272 7300 636f     %x.wr.ttc.rr.soc
   e469c:	6e00 206f 5452 2043 6974 656d 202c 6f64     .no RTC time, do
   e46ac:	6e69 2067 7566 6c6c 7720 6b61 0065 6974     ing full wake.ti
   e46bc:	656d 7420 206f 6f64 6620 6c75 206c 6177     me to do full wa
   e46cc:	656b 6400 6e6f 2065 6977 6874 6e20 206f     ke.done with no 
   e46dc:	6f63 6e6e 6365 6974 6e6f 6d20 646f 2c65     connection mode,
   e46ec:	7020 6572 6170 6972 676e 7420 206f 6c73      preparing to sl
   e46fc:	6565 0070 6c73 6565 2070 7963 6c63 2065     eep.sleep cycle 
   e470c:	7369 7320 6f68 7472 202c 7375 6e69 2067     is short, using 
   e471c:	6563 6c6c 6c75 7261 7320 6174 646e 7962     cellular standby
   e472c:	6400 7369 6f63 6e6e 6365 6974 676e 6620     .disconnecting f
   e473c:	6f72 206d 6c63 756f 0064 0000               rom cloud...

000e4748 <_ZTV16JsonParserStaticILj622ELj50EE>:
	...
   e4750:	9955 000d 9969 000d                         U...i...

000e4758 <_ZTVN11SleepHelper12SettingsFileE>:
	...
   e4760:	9b75 000d 9bbd 000d                         u.......

000e4768 <_ZTVN11SleepHelper14PersistentDataE>:
	...
   e4770:	b221 000d 9d33 000d 9d7d 000d 997f 000d     !...3...}.......
   e4780:	99e3 000d 99c1 000d 9a5f 000d 9b39 000d     ........_...9...
   e4790:	9b61 000d                                   a...

000e4794 <_ZTV11SleepHelper>:
	...
   e479c:	c3b9 000d c5ad 000d                         ........

000e47a4 <_ZTVN11SleepHelper18PersistentDataBaseE>:
	...
   e47ac:	9879 000d 9d0b 000d 9875 000d 9877 000d     y.......u...w...
   e47bc:	99e3 000d 99c1 000d                         ........

000e47c4 <_ZTVN11SleepHelper18PersistentDataFileE>:
	...
   e47cc:	b221 000d 9d33 000d 9d7d 000d 997f 000d     !...3...}.......
   e47dc:	99e3 000d 99c1 000d 9a5f 000d               ........_...

000e47e8 <_ZTVN5spark13CellularClassE>:
	...
   e47f0:	d29f 000d d295 000d d28b 000d d241 000d     ............A...
   e4800:	d27f 000d d273 000d f6fd 000d f705 000d     ....s...........
   e4810:	d267 000d d25f 000d d255 000d d24b 000d     g..._...U...K...
   e4820:	f735 000d                                   5...

000e4824 <_ZTV14CellularSignal>:
	...
   e482c:	d34d 000d d375 000d d34f 000d d385 000d     M...u...O.......
   e483c:	d3b9 000d d3e5 000d d419 000d d469 000d     ............i...
   e484c:	d353 000d d36f 000d fffc ffff 0000 0000     S...o...........
   e485c:	d48f 000d                                   ....

000e4860 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e4868:	d4af 000d d4b5 000d d4f3 000d d4c3 000d     ................
   e4878:	d4b1 000d                                   ....

000e487c <_ZTVN5spark13EthernetClassE>:
	...
   e4884:	dac7 000d dabd 000d dab3 000d daa9 000d     ................
   e4894:	da9d 000d da91 000d f6fd 000d f705 000d     ................
   e48a4:	da85 000d da7d 000d da73 000d da69 000d     ....}...s...i...
   e48b4:	f735 000d                                   5...

000e48b8 <_ZTV7TwoWire>:
	...
   e48c0:	dc6b 000d dcb5 000d dc8d 000d dc6d 000d     k...........m...
   e48d0:	dc95 000d dc9d 000d dca5 000d dcad 000d     ................

000e48e0 <_ZTV9IPAddress>:
	...
   e48e8:	ddc1 000d ddb1 000d ddb3 000d 2e30 0030     ............0.0.
   e48f8:	2e25 6c2a 0066 6725 6e00 6c75 006c 2575     %.*lf.%g.null.u%
   e4908:	3430 0078                                   04x.

000e490c <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e4914:	dec1 000d ded7 000d deed 000d dee5 000d     ................
   e4924:	dec5 000d                                   ....

000e4928 <_ZTVN5spark16JSONBufferWriterE>:
	...
   e4930:	dec3 000d dec9 000d df15 000d df3b 000d     ............;...
   e4940:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   e4950:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   e4960:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   e4970:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   e4980:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   e4990:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   e49a0:	6564 6400 7465 6961 006c 0000               de.detail...

000e49ac <_ZTVN5spark16JSONStreamWriterE>:
	...
   e49b4:	e7e5 000d e80b 000d e7c9 000d df71 000d     ............q...

000e49c4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   e49cc:	ebc1 000d ebd9 000d f3a5 000d 40cf 000d     .............@..

000e49dc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e49e4:	ebed 000d ec01 000d f549 000d e7d1 000d     ........I.......

000e49f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e49fc:	e7e3 000d e819 000d f2e1 000d e7d3 000d     ................

000e4a0c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e4a14:	e7e1 000d e827 000d eb09 000d e845 000d     ....'.......E...

000e4a24 <_ZTVN5spark12NetworkClassE>:
	...
   e4a2c:	f6bd 000d f6c7 000d f6d1 000d f6db 000d     ................
   e4a3c:	f6e5 000d f6f1 000d f6fd 000d f705 000d     ................
   e4a4c:	f70d 000d f719 000d f721 000d f72b 000d     ........!...+...
   e4a5c:	f735 000d 6977 6972 676e 5300 7379 6574     5...wiring.Syste
   e4a6c:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   e4a7c:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   e4a8c:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   e4a9c:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e4aac:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e4ab8 <_ZTV11USARTSerial>:
	...
   e4ac0:	01a9 000e 0217 000e 01ef 000e f97b 000d     ............{...
   e4ad0:	01bf 000e 01db 000e 01cd 000e 01e9 000e     ................
   e4ae0:	01ab 000e 01b1 000e                         ........

000e4ae8 <_ZTV9USBSerial>:
	...
   e4af0:	02b7 000e 031f 000e 02f5 000e f97b 000d     ............{...
   e4b00:	02e7 000e 02b9 000e 02c9 000e 0319 000e     ................
   e4b10:	02d9 000e 02b1 000e                         ........

000e4b18 <_ZSt7nothrow>:
   e4b18:	0000 0000 6f6c 6667 2500 332e 2073 2e25     ....logf.%.3s %.
   e4b28:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   e4b38:	2e25 6432 2520 0a64                          %.2d %d..

000e4b41 <day_name.6145>:
   e4b41:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e4b51:	6972 6153                                    riSat

000e4b56 <mon_name.6146>:
   e4b56:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e4b66:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e4b76:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000e4b88 <fpi.7566>:
   e4b88:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e4b98:	0000 0000                                   ....

000e4b9c <fpinan.7602>:
   e4b9c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e4bac:	0000 0000                                   ....

000e4bb0 <tinytens>:
   e4bb0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e4bc0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e4bd0:	6f43 64ac 0628 1168                         Co.d(.h.

000e4bd8 <_ctype_>:
   e4bd8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e4be8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e4bf8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e4c08:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e4c18:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e4c28:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e4c38:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e4c48:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e4c58:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e4cdc <_C_numeric_locale>:
   e4cdc:	4a8c 000e 4537 000e e238 2003 4f50 4953     .J..7E..8.. POSI
   e4cec:	0058 0000                                   X...

000e4cf0 <__mprec_bigtens>:
   e4cf0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e4d00:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e4d10:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e4d18 <__mprec_tens>:
   e4d18:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e4d28:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e4d38:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e4d48:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e4d58:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e4d68:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e4d78:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e4d88:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e4d98:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e4da8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e4db8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e4dc8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e4dd8:	9db4 79d9 7843 44ea                         ...yCx.D

000e4de0 <p05.7490>:
   e4de0:	0005 0000 0019 0000 007d 0000               ........}...

000e4dec <link_const_variable_data_end>:
   e4dec:	000d4299 	.word	0x000d4299
   e4df0:	000d48e5 	.word	0x000d48e5
   e4df4:	000d5681 	.word	0x000d5681
   e4df8:	000d5991 	.word	0x000d5991
   e4dfc:	000d5f85 	.word	0x000d5f85
   e4e00:	000d6981 	.word	0x000d6981
   e4e04:	000d918d 	.word	0x000d918d
   e4e08:	000d9865 	.word	0x000d9865
   e4e0c:	000dc345 	.word	0x000dc345
   e4e10:	000dd231 	.word	0x000dd231
   e4e14:	000dd31d 	.word	0x000dd31d
   e4e18:	000ddad1 	.word	0x000ddad1
   e4e1c:	000df395 	.word	0x000df395
   e4e20:	000df809 	.word	0x000df809
   e4e24:	000dfa89 	.word	0x000dfa89
   e4e28:	000dff09 	.word	0x000dff09
   e4e2c:	000e0195 	.word	0x000e0195
