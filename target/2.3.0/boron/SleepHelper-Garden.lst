
/Users/chipmc/Documents/Maker/Particle/Projects/SleepHelper-Garden/target/2.3.0/boron/SleepHelper-Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010dc0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e4de0  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000288  2003e128  000e4de4  0002e128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000440  2003e3b0  2003e3b0  0003e3b0  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000e506c  000e506c  0003506c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000e5098  000e5098  00035098  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   003315a2  00000000  00000000  0003509c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000291ad  00000000  00000000  0036663e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0006e984  00000000  00000000  0038f7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00004520  00000000  00000000  003fe16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000113f0  00000000  00000000  0040268f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004c50f  00000000  00000000  00413a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000755d1  00000000  00000000  0045ff8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018ecd9  00000000  00000000  004d555f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dac0  00000000  00000000  00664238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00d fb19 	bl	e1668 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00d fb3b 	bl	e16b8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e128 	.word	0x2003e128
   d404c:	000e4de4 	.word	0x000e4de4
   d4050:	2003e3b0 	.word	0x2003e3b0
   d4054:	2003e3b0 	.word	0x2003e3b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f00c f9f7 	bl	e0454 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000e4d9c 	.word	0x000e4d9c
   d4080:	000e4de0 	.word	0x000e4de0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b860 	b.w	d4148 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f87f 	bl	d418c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f00c b997 	b.w	e03c4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f009 b80f 	b.w	dd0b8 <malloc>

000d409a <_Znaj>:
   d409a:	f009 b80d 	b.w	dd0b8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f009 b813 	b.w	dd0c8 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f009 b811 	b.w	dd0c8 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f008 fea2 	bl	dcdf8 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000dca29 	.word	0x000dca29

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d8:	b510      	push	{r4, lr}
   d40da:	4b03      	ldr	r3, [pc, #12]	; (d40e8 <_ZN8MB85RC64D1Ev+0x10>)
   d40dc:	6003      	str	r3, [r0, #0]
   d40de:	4604      	mov	r4, r0
   d40e0:	f004 f996 	bl	d8410 <_ZN6MB85RCD1Ev>
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	000e3960 	.word	0x000e3960

000d40ec <_ZN8MB85RC64D0Ev>:
   d40ec:	b510      	push	{r4, lr}
   d40ee:	4604      	mov	r4, r0
   d40f0:	f7ff fff2 	bl	d40d8 <_ZN8MB85RC64D1Ev>
   d40f4:	4620      	mov	r0, r4
   d40f6:	2110      	movs	r1, #16
   d40f8:	f00c fb02 	bl	e0700 <_ZdlPvj>
   d40fc:	4620      	mov	r0, r4
   d40fe:	bd10      	pop	{r4, pc}

000d4100 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4100:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4102:	b510      	push	{r4, lr}
   d4104:	4604      	mov	r4, r0
   d4106:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4108:	f00a fc7e 	bl	dea08 <_ZN5spark10LogManager8instanceEv>
   d410c:	4621      	mov	r1, r4
   d410e:	f00a fe40 	bl	ded92 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4112:	f00c f90f 	bl	e0334 <_Z16_fetch_usbserialv>
   d4116:	f00c f901 	bl	e031c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d411a:	4620      	mov	r0, r4
   d411c:	4b04      	ldr	r3, [pc, #16]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411e:	f840 3b04 	str.w	r3, [r0], #4
   d4122:	f00a fd23 	bl	deb6c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}
   d412a:	bf00      	nop
   d412c:	000e3948 	.word	0x000e3948
   d4130:	000e3930 	.word	0x000e3930

000d4134 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4134:	b510      	push	{r4, lr}
   d4136:	4604      	mov	r4, r0
    }
   d4138:	f7ff ffe2 	bl	d4100 <_ZN5spark16SerialLogHandlerD1Ev>
   d413c:	4620      	mov	r0, r4
   d413e:	2124      	movs	r1, #36	; 0x24
   d4140:	f00c fade 	bl	e0700 <_ZdlPvj>
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}

000d4148 <setup>:
// Support for Particle Products (changes coming in 4.x - https://docs.particle.io/cards/firmware/macros/product_id/)
PRODUCT_ID(PLATFORM_ID);                            // Device needs to be added to product ahead of time.  Remove once we go to deviceOS@4.x
PRODUCT_VERSION(0);
char currentPointRelease[6] ="0.01";

void setup() {
   d4148:	b510      	push	{r4, lr}
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h

    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h

    {                                               // Initialize AB1805 Watchdog and RTC                                 
        ab1805.setup();
   d414a:	4c0f      	ldr	r4, [pc, #60]	; (d4188 <setup+0x40>)
    initializePinModes();                           // Sets the pinModes
   d414c:	f000 f93e 	bl	d43cc <_Z18initializePinModesv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d4150:	f001 fccc 	bl	d5aec <_Z18storageObjectStartv>
    particleInitialize();                           // Sets up all the Particle functions and variables defined in particle_fn.h
   d4154:	f000 f9a2 	bl	d449c <_Z18particleInitializev>
        ab1805.setup();
   d4158:	4620      	mov	r0, r4
   d415a:	2101      	movs	r1, #1
   d415c:	f002 fac0 	bl	d66e0 <_ZN6AB18055setupEb>

        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d4160:	2100      	movs	r1, #0
   d4162:	4620      	mov	r0, r4
   d4164:	f002 f89e 	bl	d62a4 <_ZN6AB180511resetConfigEm>

        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d4168:	217c      	movs	r1, #124	; 0x7c
   d416a:	4620      	mov	r0, r4
   d416c:	f002 f816 	bl	d619c <_ZN6AB18056setWDTEi>
    }

	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   d4170:	f004 fbc8 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d4174:	f004 fde0 	bl	d8d38 <_ZN17PublishQueuePosix5setupEv>

    sleepHelperConfig();                            // This is the function call to configure the sleep helper parameters in sleep_helper_config.h
   d4178:	f001 fa86 	bl	d5688 <_Z17sleepHelperConfigv>

    SleepHelper::instance().setup();                // This puts these parameters into action
   d417c:	f006 f964 	bl	da448 <_ZN11SleepHelper8instanceEv>
}
   d4180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SleepHelper::instance().setup();                // This puts these parameters into action
   d4184:	f007 b8d8 	b.w	db338 <_ZN11SleepHelper5setupEv>
   d4188:	2003e3bc 	.word	0x2003e3bc

000d418c <loop>:

void loop() {
   d418c:	b508      	push	{r3, lr}
    SleepHelper::instance().loop();                 // Monitor and manage the sleep helper workflow
   d418e:	f006 f95b 	bl	da448 <_ZN11SleepHelper8instanceEv>
   d4192:	f008 fba3 	bl	dc8dc <_ZN11SleepHelper4loopEv>

    ab1805.loop();                                  // Monitor the real time clock and watchdog
   d4196:	4805      	ldr	r0, [pc, #20]	; (d41ac <loop+0x20>)
   d4198:	f002 fb82 	bl	d68a0 <_ZN6AB18054loopEv>
    
    PublishQueuePosix::instance().loop();           // Monitor and manage the publish queue
   d419c:	f004 fbb2 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d41a0:	f004 faa2 	bl	d86e8 <_ZN17PublishQueuePosix4loopEv>

    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
}
   d41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d41a8:	f001 bbf2 	b.w	d5990 <_Z17storageObjectLoopv>
   d41ac:	2003e3bc 	.word	0x2003e3bc

000d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d41b2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d41b6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41b8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d41ba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d41be:	42ae      	cmp	r6, r5
   d41c0:	d004      	beq.n	d41cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d41c2:	4628      	mov	r0, r5
   d41c4:	f00b fc50 	bl	dfa68 <_ZN6StringD1Ev>
   d41c8:	3514      	adds	r5, #20
   d41ca:	e7f8      	b.n	d41be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d41cc:	6820      	ldr	r0, [r4, #0]
   d41ce:	f008 ff7b 	bl	dd0c8 <free>
    AllocatorT::free(data_);
}
   d41d2:	4620      	mov	r0, r4
   d41d4:	bd70      	pop	{r4, r5, r6, pc}

000d41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d41d6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d41da:	4604      	mov	r4, r0
   d41dc:	460d      	mov	r5, r1
   d41de:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d41e0:	d916      	bls.n	d4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d41e2:	4290      	cmp	r0, r2
   d41e4:	d215      	bcs.n	d4212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d41e6:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d41ea:	1a75      	subs	r5, r6, r1
   d41ec:	f1a1 0714 	sub.w	r7, r1, #20
   d41f0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d41f2:	42b7      	cmp	r7, r6
   d41f4:	d01c      	beq.n	d4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d41f6:	b12c      	cbz	r4, d4204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d41f8:	4631      	mov	r1, r6
   d41fa:	4620      	mov	r0, r4
   d41fc:	f00b fcb0 	bl	dfb60 <_ZN6StringC1EOS_>
   d4200:	7c33      	ldrb	r3, [r6, #16]
   d4202:	7423      	strb	r3, [r4, #16]
   d4204:	4630      	mov	r0, r6
   d4206:	f00b fc2f 	bl	dfa68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d420a:	3e14      	subs	r6, #20
   d420c:	3c14      	subs	r4, #20
   d420e:	e7f0      	b.n	d41f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4210:	d00e      	beq.n	d4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4212:	42b5      	cmp	r5, r6
   d4214:	d00c      	beq.n	d4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4216:	b12c      	cbz	r4, d4224 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4218:	4629      	mov	r1, r5
   d421a:	4620      	mov	r0, r4
   d421c:	f00b fca0 	bl	dfb60 <_ZN6StringC1EOS_>
   d4220:	7c2b      	ldrb	r3, [r5, #16]
   d4222:	7423      	strb	r3, [r4, #16]
   d4224:	4628      	mov	r0, r5
   d4226:	f00b fc1f 	bl	dfa68 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d422a:	3514      	adds	r5, #20
   d422c:	3414      	adds	r4, #20
   d422e:	e7f0      	b.n	d4212 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4236:	2300      	movs	r3, #0
   d4238:	e9c0 3300 	strd	r3, r3, [r0]
   d423c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d423e:	684f      	ldr	r7, [r1, #4]
   d4240:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4242:	4604      	mov	r4, r0
   d4244:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4246:	dd23      	ble.n	d4290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4248:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d424c:	fb08 f007 	mul.w	r0, r8, r7
   d4250:	f008 ff32 	bl	dd0b8 <malloc>
            if (!d) {
   d4254:	4605      	mov	r5, r0
   d4256:	b1d8      	cbz	r0, d4290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4258:	e9d4 1200 	ldrd	r1, r2, [r4]
   d425c:	fb08 1202 	mla	r2, r8, r2, r1
   d4260:	f7ff ffb9 	bl	d41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4264:	6820      	ldr	r0, [r4, #0]
   d4266:	f008 ff2f 	bl	dd0c8 <free>
        data_ = d;
   d426a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d426c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d426e:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4272:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4276:	45b8      	cmp	r8, r7
   d4278:	d008      	beq.n	d428c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d427a:	4639      	mov	r1, r7
   d427c:	4628      	mov	r0, r5
   d427e:	f00b fc89 	bl	dfb94 <_ZN6StringC1ERKS_>
   d4282:	7c3b      	ldrb	r3, [r7, #16]
   d4284:	742b      	strb	r3, [r5, #16]
   d4286:	3714      	adds	r7, #20
   d4288:	3514      	adds	r5, #20
   d428a:	e7f4      	b.n	d4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d428c:	6873      	ldr	r3, [r6, #4]
   d428e:	6063      	str	r3, [r4, #4]
}
   d4290:	4620      	mov	r0, r4
   d4292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4298 <_GLOBAL__sub_I_logHandler>:
}
   d4298:	b5f0      	push	{r4, r5, r6, r7, lr}
   d429a:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   d429c:	2400      	movs	r4, #0
   d429e:	e9cd 4400 	strd	r4, r4, [sp]
   d42a2:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d42a4:	f00c f846 	bl	e0334 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d42a8:	4d33      	ldr	r5, [pc, #204]	; (d4378 <_GLOBAL__sub_I_logHandler+0xe0>)
   d42aa:	4606      	mov	r6, r0
   d42ac:	4669      	mov	r1, sp
   d42ae:	a803      	add	r0, sp, #12
   d42b0:	f7ff ffbf 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42b4:	462f      	mov	r7, r5
        stream_(&stream) {
   d42b6:	a903      	add	r1, sp, #12
   d42b8:	a806      	add	r0, sp, #24
   d42ba:	f7ff ffba 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d42be:	4b2f      	ldr	r3, [pc, #188]	; (d437c <_GLOBAL__sub_I_logHandler+0xe4>)
   d42c0:	f847 3b04 	str.w	r3, [r7], #4
   d42c4:	a906      	add	r1, sp, #24
   d42c6:	a809      	add	r0, sp, #36	; 0x24
   d42c8:	f7ff ffb3 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42cc:	aa09      	add	r2, sp, #36	; 0x24
   d42ce:	211e      	movs	r1, #30
   d42d0:	4638      	mov	r0, r7
   d42d2:	f00a feb8 	bl	df046 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d42d6:	a809      	add	r0, sp, #36	; 0x24
   d42d8:	f7ff ff6a 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d42dc:	a806      	add	r0, sp, #24
   d42de:	f7ff ff67 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d42e2:	4b27      	ldr	r3, [pc, #156]	; (d4380 <_GLOBAL__sub_I_logHandler+0xe8>)
   d42e4:	602b      	str	r3, [r5, #0]
   d42e6:	622e      	str	r6, [r5, #32]
   d42e8:	a803      	add	r0, sp, #12
   d42ea:	f7ff ff61 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d42ee:	4b25      	ldr	r3, [pc, #148]	; (d4384 <_GLOBAL__sub_I_logHandler+0xec>)
   d42f0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d42f2:	f00c f81f 	bl	e0334 <_Z16_fetch_usbserialv>
   d42f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42fa:	f00c f80b 	bl	e0314 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d42fe:	f00a fb83 	bl	dea08 <_ZN5spark10LogManager8instanceEv>
   d4302:	4629      	mov	r1, r5
   d4304:	f00a fe31 	bl	def6a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);       //  Limit logging to information on program flow               
   d4308:	4668      	mov	r0, sp
   d430a:	f7ff ff51 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
SYSTEM_THREAD(ENABLED);
   d430e:	4621      	mov	r1, r4
   d4310:	2001      	movs	r0, #1
   d4312:	f008 fddb 	bl	dcecc <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4316:	4b1c      	ldr	r3, [pc, #112]	; (d4388 <_GLOBAL__sub_I_logHandler+0xf0>)
    SleepResult() {}
   d4318:	4a1c      	ldr	r2, [pc, #112]	; (d438c <_GLOBAL__sub_I_logHandler+0xf4>)
              error_(SYSTEM_ERROR_NONE) {
   d431a:	601c      	str	r4, [r3, #0]
   d431c:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d431e:	719c      	strb	r4, [r3, #6]
   d4320:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4322:	2002      	movs	r0, #2
   d4324:	f008 fdba 	bl	dce9c <set_system_mode>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d4328:	2101      	movs	r1, #1
   d432a:	2004      	movs	r0, #4
   d432c:	f008 fb5c 	bl	dc9e8 <HAL_Feature_Set>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d4330:	f00c f99e 	bl	e0670 <_Z19__fetch_global_Wirev>
   d4334:	2269      	movs	r2, #105	; 0x69
   d4336:	4601      	mov	r1, r0
   d4338:	4815      	ldr	r0, [pc, #84]	; (d4390 <_GLOBAL__sub_I_logHandler+0xf8>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d433a:	4d16      	ldr	r5, [pc, #88]	; (d4394 <_GLOBAL__sub_I_logHandler+0xfc>)
   d433c:	f001 fe3e 	bl	d5fbc <_ZN6AB1805C1ER7TwoWireh>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d4340:	f00c f996 	bl	e0670 <_Z19__fetch_global_Wirev>
   d4344:	4623      	mov	r3, r4
   d4346:	4601      	mov	r1, r0
   d4348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d434c:	4628      	mov	r0, r5
   d434e:	f004 f86b 	bl	d8428 <_ZN6MB85RCC1ER7TwoWireji>
   d4352:	4b11      	ldr	r3, [pc, #68]	; (d4398 <_GLOBAL__sub_I_logHandler+0x100>)
   d4354:	602b      	str	r3, [r5, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4356:	f00c f8af 	bl	e04b8 <spark_protocol_instance>
   d435a:	4623      	mov	r3, r4
   d435c:	4622      	mov	r2, r4
   d435e:	210d      	movs	r1, #13
   d4360:	f00c f8b2 	bl	e04c8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4364:	f00c f8a8 	bl	e04b8 <spark_protocol_instance>
   d4368:	4623      	mov	r3, r4
   d436a:	4622      	mov	r2, r4
   d436c:	4621      	mov	r1, r4
   d436e:	f00c f8b3 	bl	e04d8 <spark_protocol_set_product_firmware_version>
}
   d4372:	b00d      	add	sp, #52	; 0x34
   d4374:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4376:	bf00      	nop
   d4378:	2003e3ec 	.word	0x2003e3ec
   d437c:	000e3930 	.word	0x000e3930
   d4380:	000e497c 	.word	0x000e497c
   d4384:	000e3948 	.word	0x000e3948
   d4388:	2003e3b0 	.word	0x2003e3b0
   d438c:	ffff0000 	.word	0xffff0000
   d4390:	2003e3bc 	.word	0x2003e3bc
   d4394:	2003e3dc 	.word	0x2003e3dc
   d4398:	000e3960 	.word	0x000e3960

000d439c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d439c:	b40e      	push	{r1, r2, r3}
   d439e:	b510      	push	{r4, lr}
   d43a0:	b08d      	sub	sp, #52	; 0x34
   d43a2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d43a4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d43a6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d43aa:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d43ac:	2300      	movs	r3, #0
   d43ae:	2020      	movs	r0, #32
   d43b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d43b4:	e9cd 4200 	strd	r4, r2, [sp]
   d43b8:	201e      	movs	r0, #30
   d43ba:	aa04      	add	r2, sp, #16
   d43bc:	f008 fd3c 	bl	dce38 <log_message_v>
}
   d43c0:	b00d      	add	sp, #52	; 0x34
   d43c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d43c6:	b003      	add	sp, #12
   d43c8:	4770      	bx	lr
	...

000d43cc <_Z18initializePinModesv>:

const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d43cc:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d43ce:	490f      	ldr	r1, [pc, #60]	; (d440c <_Z18initializePinModesv+0x40>)
   d43d0:	480f      	ldr	r0, [pc, #60]	; (d4410 <_Z18initializePinModesv+0x44>)
   d43d2:	f7ff ffe3 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(SOIL_MOISTURE_PIN,INPUT);
   d43d6:	2100      	movs	r1, #0
   d43d8:	2013      	movs	r0, #19
   d43da:	f00c f8c3 	bl	e0564 <pinMode>
    pinMode(SOIL_TEMP_PIN,INPUT);
   d43de:	2100      	movs	r1, #0
   d43e0:	2012      	movs	r0, #18
   d43e2:	f00c f8bf 	bl	e0564 <pinMode>
    pinMode(SOIL_POWER_PIN,OUTPUT);
   d43e6:	2101      	movs	r1, #1
   d43e8:	2011      	movs	r0, #17
   d43ea:	f00c f8bb 	bl	e0564 <pinMode>
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d43ee:	2102      	movs	r1, #2
   d43f0:	2004      	movs	r0, #4
   d43f2:	f00c f8b7 	bl	e0564 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d43f6:	2100      	movs	r1, #0
   d43f8:	2008      	movs	r0, #8
   d43fa:	f00c f8b3 	bl	e0564 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d43fe:	2101      	movs	r1, #1
   d4400:	2007      	movs	r0, #7
   d4402:	f00c f8af 	bl	e0564 <pinMode>
    return true;
}
   d4406:	2001      	movs	r0, #1
   d4408:	bd08      	pop	{r3, pc}
   d440a:	bf00      	nop
   d440c:	000e3974 	.word	0x000e3974
   d4410:	2003e560 	.word	0x2003e560

000d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4414:	2300      	movs	r3, #0
   d4416:	2204      	movs	r2, #4
   d4418:	f008 bd9e 	b.w	dcf58 <spark_variable>

000d441c <_Z20makeUpStringMessagesv>:
  * 
  * @details Looks at all the system setting values and creates the appropriate strings.  Note that this 
  * is a little inefficient but it cleans up a fair bit of code.
  * 
  */
void makeUpStringMessages() {
   d441c:	b513      	push	{r0, r1, r4, lr}

  if (sysStatus.wakeTime == 0 && sysStatus.sleepTime == 24) {                         // Special case for 24 hour operations
   d441e:	4c16      	ldr	r4, [pc, #88]	; (d4478 <_Z20makeUpStringMessagesv+0x5c>)
   d4420:	8963      	ldrh	r3, [r4, #10]
   d4422:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4426:	d119      	bne.n	d445c <_Z20makeUpStringMessagesv+0x40>
    snprintf(wakeTimeStr, sizeof(wakeTimeStr), "NA");
   d4428:	4914      	ldr	r1, [pc, #80]	; (d447c <_Z20makeUpStringMessagesv+0x60>)
   d442a:	4815      	ldr	r0, [pc, #84]	; (d4480 <_Z20makeUpStringMessagesv+0x64>)
   d442c:	f00d f9aa 	bl	e1784 <strcpy>
    snprintf(sleepTimeStr, sizeof(sleepTimeStr), "NA");
   d4430:	4912      	ldr	r1, [pc, #72]	; (d447c <_Z20makeUpStringMessagesv+0x60>)
   d4432:	4814      	ldr	r0, [pc, #80]	; (d4484 <_Z20makeUpStringMessagesv+0x68>)
   d4434:	f00d f9a6 	bl	e1784 <strcpy>
    snprintf(wakeTimeStr, sizeof(wakeTimeStr), "%i:00", sysStatus.wakeTime);           // Open and Close Times
    snprintf(sleepTimeStr, sizeof(sleepTimeStr), "%i:00", sysStatus.sleepTime);
  }

  // Watering Strings
  snprintf(wateringDurationStr,sizeof(wateringDurationStr),"%isec",sysStatus.wateringDuration);
   d4438:	6923      	ldr	r3, [r4, #16]
   d443a:	4a13      	ldr	r2, [pc, #76]	; (d4488 <_Z20makeUpStringMessagesv+0x6c>)
   d443c:	4813      	ldr	r0, [pc, #76]	; (d448c <_Z20makeUpStringMessagesv+0x70>)
   d443e:	2110      	movs	r1, #16
   d4440:	f008 fe62 	bl	dd108 <snprintf>
  snprintf(wateringThresholdPctStr,sizeof(wateringThresholdPctStr),"%2.1f %%",sysStatus.wateringThresholdPct);
   d4444:	68e0      	ldr	r0, [r4, #12]
   d4446:	f00c fd13 	bl	e0e70 <__aeabi_f2d>
   d444a:	4a11      	ldr	r2, [pc, #68]	; (d4490 <_Z20makeUpStringMessagesv+0x74>)
   d444c:	e9cd 0100 	strd	r0, r1, [sp]
   d4450:	2108      	movs	r1, #8
   d4452:	4810      	ldr	r0, [pc, #64]	; (d4494 <_Z20makeUpStringMessagesv+0x78>)
   d4454:	f008 fe58 	bl	dd108 <snprintf>

  return;
   d4458:	b002      	add	sp, #8
   d445a:	bd10      	pop	{r4, pc}
    snprintf(wakeTimeStr, sizeof(wakeTimeStr), "%i:00", sysStatus.wakeTime);           // Open and Close Times
   d445c:	7aa3      	ldrb	r3, [r4, #10]
   d445e:	4a0e      	ldr	r2, [pc, #56]	; (d4498 <_Z20makeUpStringMessagesv+0x7c>)
   d4460:	4807      	ldr	r0, [pc, #28]	; (d4480 <_Z20makeUpStringMessagesv+0x64>)
   d4462:	2108      	movs	r1, #8
   d4464:	f008 fe50 	bl	dd108 <snprintf>
    snprintf(sleepTimeStr, sizeof(sleepTimeStr), "%i:00", sysStatus.sleepTime);
   d4468:	7ae3      	ldrb	r3, [r4, #11]
   d446a:	4a0b      	ldr	r2, [pc, #44]	; (d4498 <_Z20makeUpStringMessagesv+0x7c>)
   d446c:	4805      	ldr	r0, [pc, #20]	; (d4484 <_Z20makeUpStringMessagesv+0x68>)
   d446e:	2108      	movs	r1, #8
   d4470:	f008 fe4a 	bl	dd108 <snprintf>
   d4474:	e7e0      	b.n	d4438 <_Z20makeUpStringMessagesv+0x1c>
   d4476:	bf00      	nop
   d4478:	2003e458 	.word	0x2003e458
   d447c:	000e3998 	.word	0x000e3998
   d4480:	2003e136 	.word	0x2003e136
   d4484:	2003e12e 	.word	0x2003e12e
   d4488:	000e39a1 	.word	0x000e39a1
   d448c:	2003e13e 	.word	0x2003e13e
   d4490:	000e39a7 	.word	0x000e39a7
   d4494:	2003e14e 	.word	0x2003e14e
   d4498:	000e399b 	.word	0x000e399b

000d449c <_Z18particleInitializev>:
void particleInitialize() {
   d449c:	b510      	push	{r4, lr}
   d449e:	b088      	sub	sp, #32
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d44a0:	4b39      	ldr	r3, [pc, #228]	; (d4588 <_Z18particleInitializev+0xec>)
   d44a2:	9300      	str	r3, [sp, #0]
   d44a4:	4b39      	ldr	r3, [pc, #228]	; (d458c <_Z18particleInitializev+0xf0>)
   d44a6:	9301      	str	r3, [sp, #4]
   d44a8:	4b39      	ldr	r3, [pc, #228]	; (d4590 <_Z18particleInitializev+0xf4>)
   d44aa:	9302      	str	r3, [sp, #8]
   d44ac:	4b39      	ldr	r3, [pc, #228]	; (d4594 <_Z18particleInitializev+0xf8>)
   d44ae:	9303      	str	r3, [sp, #12]
   d44b0:	4b39      	ldr	r3, [pc, #228]	; (d4598 <_Z18particleInitializev+0xfc>)
   d44b2:	9304      	str	r3, [sp, #16]
   d44b4:	4b39      	ldr	r3, [pc, #228]	; (d459c <_Z18particleInitializev+0x100>)
   d44b6:	9305      	str	r3, [sp, #20]
   d44b8:	2400      	movs	r4, #0
   d44ba:	4b39      	ldr	r3, [pc, #228]	; (d45a0 <_Z18particleInitializev+0x104>)
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d44bc:	4939      	ldr	r1, [pc, #228]	; (d45a4 <_Z18particleInitializev+0x108>)
   d44be:	483a      	ldr	r0, [pc, #232]	; (d45a8 <_Z18particleInitializev+0x10c>)
  const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d44c0:	9306      	str	r3, [sp, #24]
   d44c2:	9407      	str	r4, [sp, #28]
  Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   d44c4:	f7ff ff6a 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        return _variable(varKey, var, STRING);
   d44c8:	4938      	ldr	r1, [pc, #224]	; (d45ac <_Z18particleInitializev+0x110>)
   d44ca:	4839      	ldr	r0, [pc, #228]	; (d45b0 <_Z18particleInitializev+0x114>)
   d44cc:	f7ff ffa2 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d44d0:	4938      	ldr	r1, [pc, #224]	; (d45b4 <_Z18particleInitializev+0x118>)
   d44d2:	4839      	ldr	r0, [pc, #228]	; (d45b8 <_Z18particleInitializev+0x11c>)
   d44d4:	f7ff ff9e 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d44d8:	4938      	ldr	r1, [pc, #224]	; (d45bc <_Z18particleInitializev+0x120>)
   d44da:	4839      	ldr	r0, [pc, #228]	; (d45c0 <_Z18particleInitializev+0x124>)
   d44dc:	f7ff ff9a 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("Sleep Enabled",(sysStatus.enableSleep) ? "Yes" : "No");
   d44e0:	4b38      	ldr	r3, [pc, #224]	; (d45c4 <_Z18particleInitializev+0x128>)
   d44e2:	4a39      	ldr	r2, [pc, #228]	; (d45c8 <_Z18particleInitializev+0x12c>)
   d44e4:	7a59      	ldrb	r1, [r3, #9]
   d44e6:	4b39      	ldr	r3, [pc, #228]	; (d45cc <_Z18particleInitializev+0x130>)
   d44e8:	4839      	ldr	r0, [pc, #228]	; (d45d0 <_Z18particleInitializev+0x134>)
   d44ea:	42a1      	cmp	r1, r4
   d44ec:	bf14      	ite	ne
   d44ee:	4611      	movne	r1, r2
   d44f0:	4619      	moveq	r1, r3
   d44f2:	f7ff ff8f 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d44f6:	4937      	ldr	r1, [pc, #220]	; (d45d4 <_Z18particleInitializev+0x138>)
   d44f8:	4837      	ldr	r0, [pc, #220]	; (d45d8 <_Z18particleInitializev+0x13c>)
   d44fa:	f7ff ff8b 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d44fe:	4937      	ldr	r1, [pc, #220]	; (d45dc <_Z18particleInitializev+0x140>)
   d4500:	4837      	ldr	r0, [pc, #220]	; (d45e0 <_Z18particleInitializev+0x144>)
   d4502:	f7ff ff87 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4506:	4623      	mov	r3, r4
   d4508:	4936      	ldr	r1, [pc, #216]	; (d45e4 <_Z18particleInitializev+0x148>)
   d450a:	4837      	ldr	r0, [pc, #220]	; (d45e8 <_Z18particleInitializev+0x14c>)
   d450c:	2202      	movs	r2, #2
   d450e:	f008 fd23 	bl	dcf58 <spark_variable>
  Particle.variable("BatteryContext",batteryContext[current.batteryState]);
   d4512:	4b36      	ldr	r3, [pc, #216]	; (d45ec <_Z18particleInitializev+0x150>)
        return _variable(varKey, var, STRING);
   d4514:	4836      	ldr	r0, [pc, #216]	; (d45f0 <_Z18particleInitializev+0x154>)
   d4516:	7b1b      	ldrb	r3, [r3, #12]
   d4518:	aa08      	add	r2, sp, #32
   d451a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d451e:	f853 1c20 	ldr.w	r1, [r3, #-32]
   d4522:	f7ff ff77 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4526:	4933      	ldr	r1, [pc, #204]	; (d45f4 <_Z18particleInitializev+0x158>)
   d4528:	4833      	ldr	r0, [pc, #204]	; (d45f8 <_Z18particleInitializev+0x15c>)
   d452a:	f7ff ff73 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d452e:	4933      	ldr	r1, [pc, #204]	; (d45fc <_Z18particleInitializev+0x160>)
   d4530:	4833      	ldr	r0, [pc, #204]	; (d4600 <_Z18particleInitializev+0x164>)
   d4532:	f7ff ff6f 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4536:	4933      	ldr	r1, [pc, #204]	; (d4604 <_Z18particleInitializev+0x168>)
   d4538:	4833      	ldr	r0, [pc, #204]	; (d4608 <_Z18particleInitializev+0x16c>)
   d453a:	f7ff ff6b 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d453e:	4933      	ldr	r1, [pc, #204]	; (d460c <_Z18particleInitializev+0x170>)
   d4540:	4833      	ldr	r0, [pc, #204]	; (d4610 <_Z18particleInitializev+0x174>)
   d4542:	f7ff ff67 	bl	d4414 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4546:	4a33      	ldr	r2, [pc, #204]	; (d4614 <_Z18particleInitializev+0x178>)
   d4548:	4933      	ldr	r1, [pc, #204]	; (d4618 <_Z18particleInitializev+0x17c>)
   d454a:	4834      	ldr	r0, [pc, #208]	; (d461c <_Z18particleInitializev+0x180>)
   d454c:	f008 ffea 	bl	dd524 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4550:	4a33      	ldr	r2, [pc, #204]	; (d4620 <_Z18particleInitializev+0x184>)
   d4552:	4934      	ldr	r1, [pc, #208]	; (d4624 <_Z18particleInitializev+0x188>)
   d4554:	4831      	ldr	r0, [pc, #196]	; (d461c <_Z18particleInitializev+0x180>)
   d4556:	f008 ffe5 	bl	dd524 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d455a:	4a33      	ldr	r2, [pc, #204]	; (d4628 <_Z18particleInitializev+0x18c>)
   d455c:	4933      	ldr	r1, [pc, #204]	; (d462c <_Z18particleInitializev+0x190>)
   d455e:	482f      	ldr	r0, [pc, #188]	; (d461c <_Z18particleInitializev+0x180>)
   d4560:	f008 ffe0 	bl	dd524 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4564:	4a32      	ldr	r2, [pc, #200]	; (d4630 <_Z18particleInitializev+0x194>)
   d4566:	4933      	ldr	r1, [pc, #204]	; (d4634 <_Z18particleInitializev+0x198>)
   d4568:	482c      	ldr	r0, [pc, #176]	; (d461c <_Z18particleInitializev+0x180>)
   d456a:	f008 ffdb 	bl	dd524 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d456e:	4a32      	ldr	r2, [pc, #200]	; (d4638 <_Z18particleInitializev+0x19c>)
   d4570:	4932      	ldr	r1, [pc, #200]	; (d463c <_Z18particleInitializev+0x1a0>)
   d4572:	482a      	ldr	r0, [pc, #168]	; (d461c <_Z18particleInitializev+0x180>)
   d4574:	f008 ffd6 	bl	dd524 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  takeMeasurements();                               // Initialize sensor values
   d4578:	f001 fc54 	bl	d5e24 <_Z16takeMeasurementsv>
}
   d457c:	b008      	add	sp, #32
   d457e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  makeUpStringMessages();                           // Initialize the string messages needed for the Particle Variables
   d4582:	f7ff bf4b 	b.w	d441c <_Z20makeUpStringMessagesv>
   d4586:	bf00      	nop
   d4588:	000e39b7 	.word	0x000e39b7
   d458c:	000e39bf 	.word	0x000e39bf
   d4590:	000e39c3 	.word	0x000e39c3
   d4594:	000e39cc 	.word	0x000e39cc
   d4598:	000e39d4 	.word	0x000e39d4
   d459c:	000e39e0 	.word	0x000e39e0
   d45a0:	000e39e6 	.word	0x000e39e6
   d45a4:	000e39f2 	.word	0x000e39f2
   d45a8:	2003e560 	.word	0x2003e560
   d45ac:	2003e156 	.word	0x2003e156
   d45b0:	000e3a20 	.word	0x000e3a20
   d45b4:	2003e136 	.word	0x2003e136
   d45b8:	000e3aaa 	.word	0x000e3aaa
   d45bc:	2003e12e 	.word	0x2003e12e
   d45c0:	000e3ab8 	.word	0x000e3ab8
   d45c4:	2003e458 	.word	0x2003e458
   d45c8:	000e39b0 	.word	0x000e39b0
   d45cc:	000e39b4 	.word	0x000e39b4
   d45d0:	000e3a2e 	.word	0x000e3a2e
   d45d4:	2003e128 	.word	0x2003e128
   d45d8:	000e3a3c 	.word	0x000e3a3c
   d45dc:	2003e166 	.word	0x2003e166
   d45e0:	000e3a44 	.word	0x000e3a44
   d45e4:	2003e430 	.word	0x2003e430
   d45e8:	000e3a4b 	.word	0x000e3a4b
   d45ec:	2003e428 	.word	0x2003e428
   d45f0:	000e3a56 	.word	0x000e3a56
   d45f4:	2003e1a6 	.word	0x2003e1a6
   d45f8:	000e3a65 	.word	0x000e3a65
   d45fc:	2003e1b6 	.word	0x2003e1b6
   d4600:	000e3a72 	.word	0x000e3a72
   d4604:	2003e14e 	.word	0x2003e14e
   d4608:	000e3a7c 	.word	0x000e3a7c
   d460c:	2003e13e 	.word	0x2003e13e
   d4610:	000e3a88 	.word	0x000e3a88
   d4614:	000e3a99 	.word	0x000e3a99
   d4618:	000d4745 	.word	0x000d4745
   d461c:	000dd4f9 	.word	0x000dd4f9
   d4620:	000e3aa6 	.word	0x000e3aa6
   d4624:	000d466d 	.word	0x000d466d
   d4628:	000e3ab4 	.word	0x000e3ab4
   d462c:	000d46d9 	.word	0x000d46d9
   d4630:	000e3ac3 	.word	0x000e3ac3
   d4634:	000d47dd 	.word	0x000d47dd
   d4638:	000e3ad5 	.word	0x000e3ad5
   d463c:	000d4865 	.word	0x000d4865

000d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4640:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4642:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4644:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4646:	b17c      	cbz	r4, d4668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4648:	6863      	ldr	r3, [r4, #4]
   d464a:	3b01      	subs	r3, #1
   d464c:	6063      	str	r3, [r4, #4]
   d464e:	b95b      	cbnz	r3, d4668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4650:	6823      	ldr	r3, [r4, #0]
   d4652:	4620      	mov	r0, r4
   d4654:	689b      	ldr	r3, [r3, #8]
   d4656:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4658:	68a3      	ldr	r3, [r4, #8]
   d465a:	3b01      	subs	r3, #1
   d465c:	60a3      	str	r3, [r4, #8]
   d465e:	b91b      	cbnz	r3, d4668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4660:	6823      	ldr	r3, [r4, #0]
   d4662:	4620      	mov	r0, r4
   d4664:	68db      	ldr	r3, [r3, #12]
   d4666:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4668:	4628      	mov	r0, r5
   d466a:	bd38      	pop	{r3, r4, r5, pc}

000d466c <_Z11setWakeTime6String>:
{
   d466c:	b500      	push	{lr}
   d466e:	b097      	sub	sp, #92	; 0x5c
  int tempTime = strtol(command,&pEND,10);                             // Looks for the first integer and interprets it
   d4670:	6800      	ldr	r0, [r0, #0]
   d4672:	220a      	movs	r2, #10
   d4674:	a903      	add	r1, sp, #12
   d4676:	f00e f81d 	bl	e26b4 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   d467a:	2817      	cmp	r0, #23
   d467c:	d81d      	bhi.n	d46ba <_Z11setWakeTime6String+0x4e>
  sysStatus.wakeTime = tempTime;
   d467e:	4b11      	ldr	r3, [pc, #68]	; (d46c4 <_Z11setWakeTime6String+0x58>)
  snprintf(data, sizeof(data), "Wake time set to %i",sysStatus.wakeTime);
   d4680:	4a11      	ldr	r2, [pc, #68]	; (d46c8 <_Z11setWakeTime6String+0x5c>)
  sysStatus.wakeTime = tempTime;
   d4682:	7298      	strb	r0, [r3, #10]
  snprintf(data, sizeof(data), "Wake time set to %i",sysStatus.wakeTime);
   d4684:	2140      	movs	r1, #64	; 0x40
   d4686:	4603      	mov	r3, r0
   d4688:	a806      	add	r0, sp, #24
   d468a:	f008 fd3d 	bl	dd108 <snprintf>
  Log.info(data);
   d468e:	480f      	ldr	r0, [pc, #60]	; (d46cc <_Z11setWakeTime6String+0x60>)
   d4690:	a906      	add	r1, sp, #24
   d4692:	f7ff fe83 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4696:	f008 fc7f 	bl	dcf98 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d469a:	b160      	cbz	r0, d46b6 <_Z11setWakeTime6String+0x4a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d469c:	4b0c      	ldr	r3, [pc, #48]	; (d46d0 <_Z11setWakeTime6String+0x64>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d469e:	490d      	ldr	r1, [pc, #52]	; (d46d4 <_Z11setWakeTime6String+0x68>)
   d46a0:	781b      	ldrb	r3, [r3, #0]
   d46a2:	f88d 3000 	strb.w	r3, [sp]
   d46a6:	a804      	add	r0, sp, #16
   d46a8:	233c      	movs	r3, #60	; 0x3c
   d46aa:	aa06      	add	r2, sp, #24
   d46ac:	f009 f846 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46b0:	a805      	add	r0, sp, #20
   d46b2:	f7ff ffc5 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d46b6:	2001      	movs	r0, #1
   d46b8:	e000      	b.n	d46bc <_Z11setWakeTime6String+0x50>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                     // Make sure it falls in a valid range or send a "fail" result
   d46ba:	2000      	movs	r0, #0
}
   d46bc:	b017      	add	sp, #92	; 0x5c
   d46be:	f85d fb04 	ldr.w	pc, [sp], #4
   d46c2:	bf00      	nop
   d46c4:	2003e458 	.word	0x2003e458
   d46c8:	000e3ae6 	.word	0x000e3ae6
   d46cc:	2003e560 	.word	0x2003e560
   d46d0:	2003e410 	.word	0x2003e410
   d46d4:	000e3aaf 	.word	0x000e3aaf

000d46d8 <_Z12setSleepTime6String>:
{
   d46d8:	b500      	push	{lr}
   d46da:	b097      	sub	sp, #92	; 0x5c
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d46dc:	6800      	ldr	r0, [r0, #0]
   d46de:	220a      	movs	r2, #10
   d46e0:	a903      	add	r1, sp, #12
   d46e2:	f00d ffe7 	bl	e26b4 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d46e6:	2818      	cmp	r0, #24
   d46e8:	d81d      	bhi.n	d4726 <_Z12setSleepTime6String+0x4e>
  sysStatus.sleepTime = tempTime;
   d46ea:	4b11      	ldr	r3, [pc, #68]	; (d4730 <_Z12setSleepTime6String+0x58>)
  snprintf(data, sizeof(data), "Sleep time set to %i",sysStatus.sleepTime);
   d46ec:	4a11      	ldr	r2, [pc, #68]	; (d4734 <_Z12setSleepTime6String+0x5c>)
  sysStatus.sleepTime = tempTime;
   d46ee:	72d8      	strb	r0, [r3, #11]
  snprintf(data, sizeof(data), "Sleep time set to %i",sysStatus.sleepTime);
   d46f0:	2140      	movs	r1, #64	; 0x40
   d46f2:	4603      	mov	r3, r0
   d46f4:	a806      	add	r0, sp, #24
   d46f6:	f008 fd07 	bl	dd108 <snprintf>
  Log.info(data);
   d46fa:	480f      	ldr	r0, [pc, #60]	; (d4738 <_Z12setSleepTime6String+0x60>)
   d46fc:	a906      	add	r1, sp, #24
   d46fe:	f7ff fe4d 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4702:	f008 fc49 	bl	dcf98 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4706:	b160      	cbz	r0, d4722 <_Z12setSleepTime6String+0x4a>
   d4708:	4b0c      	ldr	r3, [pc, #48]	; (d473c <_Z12setSleepTime6String+0x64>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d470a:	490d      	ldr	r1, [pc, #52]	; (d4740 <_Z12setSleepTime6String+0x68>)
   d470c:	781b      	ldrb	r3, [r3, #0]
   d470e:	f88d 3000 	strb.w	r3, [sp]
   d4712:	a804      	add	r0, sp, #16
   d4714:	233c      	movs	r3, #60	; 0x3c
   d4716:	aa06      	add	r2, sp, #24
   d4718:	f009 f810 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d471c:	a805      	add	r0, sp, #20
   d471e:	f7ff ff8f 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4722:	2001      	movs	r0, #1
   d4724:	e000      	b.n	d4728 <_Z12setSleepTime6String+0x50>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4726:	2000      	movs	r0, #0
}
   d4728:	b017      	add	sp, #92	; 0x5c
   d472a:	f85d fb04 	ldr.w	pc, [sp], #4
   d472e:	bf00      	nop
   d4730:	2003e458 	.word	0x2003e458
   d4734:	000e3afa 	.word	0x000e3afa
   d4738:	2003e560 	.word	0x2003e560
   d473c:	2003e410 	.word	0x2003e410
   d4740:	000e3aaf 	.word	0x000e3aaf

000d4744 <_Z14setEnableSleep6String>:
{
   d4744:	b510      	push	{r4, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4746:	491c      	ldr	r1, [pc, #112]	; (d47b8 <_Z14setEnableSleep6String+0x74>)
   d4748:	b094      	sub	sp, #80	; 0x50
   d474a:	4604      	mov	r4, r0
   d474c:	f00b fab2 	bl	dfcb4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4750:	b348      	cbz	r0, d47a6 <_Z14setEnableSleep6String+0x62>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4752:	4919      	ldr	r1, [pc, #100]	; (d47b8 <_Z14setEnableSleep6String+0x74>)
   d4754:	4620      	mov	r0, r4
   d4756:	f00b faad 	bl	dfcb4 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d475a:	4b18      	ldr	r3, [pc, #96]	; (d47bc <_Z14setEnableSleep6String+0x78>)
   d475c:	2800      	cmp	r0, #0
   d475e:	bf14      	ite	ne
   d4760:	2201      	movne	r2, #1
   d4762:	2200      	moveq	r2, #0
   d4764:	725a      	strb	r2, [r3, #9]
  snprintf(data, sizeof(data), "Enable sleep is %s", (sysStatus.enableSleep) ? "true" : "false");
   d4766:	4a16      	ldr	r2, [pc, #88]	; (d47c0 <_Z14setEnableSleep6String+0x7c>)
   d4768:	4b16      	ldr	r3, [pc, #88]	; (d47c4 <_Z14setEnableSleep6String+0x80>)
   d476a:	f04f 0140 	mov.w	r1, #64	; 0x40
   d476e:	bf18      	it	ne
   d4770:	4613      	movne	r3, r2
   d4772:	a804      	add	r0, sp, #16
   d4774:	4a14      	ldr	r2, [pc, #80]	; (d47c8 <_Z14setEnableSleep6String+0x84>)
   d4776:	f008 fcc7 	bl	dd108 <snprintf>
  Log.info(data);
   d477a:	4814      	ldr	r0, [pc, #80]	; (d47cc <_Z14setEnableSleep6String+0x88>)
   d477c:	a904      	add	r1, sp, #16
   d477e:	f7ff fe0d 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4782:	f008 fc09 	bl	dcf98 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4786:	b160      	cbz	r0, d47a2 <_Z14setEnableSleep6String+0x5e>
   d4788:	4b11      	ldr	r3, [pc, #68]	; (d47d0 <_Z14setEnableSleep6String+0x8c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d478a:	4912      	ldr	r1, [pc, #72]	; (d47d4 <_Z14setEnableSleep6String+0x90>)
   d478c:	781b      	ldrb	r3, [r3, #0]
   d478e:	f88d 3000 	strb.w	r3, [sp]
   d4792:	a802      	add	r0, sp, #8
   d4794:	233c      	movs	r3, #60	; 0x3c
   d4796:	aa04      	add	r2, sp, #16
   d4798:	f008 ffd0 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d479c:	a803      	add	r0, sp, #12
   d479e:	f7ff ff4f 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d47a2:	2001      	movs	r0, #1
   d47a4:	e005      	b.n	d47b2 <_Z14setEnableSleep6String+0x6e>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d47a6:	490c      	ldr	r1, [pc, #48]	; (d47d8 <_Z14setEnableSleep6String+0x94>)
   d47a8:	4620      	mov	r0, r4
   d47aa:	f00b fa83 	bl	dfcb4 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d47ae:	2800      	cmp	r0, #0
   d47b0:	d1cf      	bne.n	d4752 <_Z14setEnableSleep6String+0xe>
}
   d47b2:	b014      	add	sp, #80	; 0x50
   d47b4:	bd10      	pop	{r4, pc}
   d47b6:	bf00      	nop
   d47b8:	000e3d2c 	.word	0x000e3d2c
   d47bc:	2003e458 	.word	0x2003e458
   d47c0:	000e3b0f 	.word	0x000e3b0f
   d47c4:	000e3b14 	.word	0x000e3b14
   d47c8:	000e3b1a 	.word	0x000e3b1a
   d47cc:	2003e560 	.word	0x2003e560
   d47d0:	2003e410 	.word	0x2003e410
   d47d4:	000e3b2d 	.word	0x000e3b2d
   d47d8:	000e48aa 	.word	0x000e48aa

000d47dc <_Z17setWaterThreshold6String>:
{
   d47dc:	b510      	push	{r4, lr}
   d47de:	b086      	sub	sp, #24
  float tempThreshold = strtof(command,&pEND);                         // Looks for the first float and interprets it
   d47e0:	6800      	ldr	r0, [r0, #0]
   d47e2:	a903      	add	r1, sp, #12
   d47e4:	f00d fe66 	bl	e24b4 <strtof>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d47e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d47ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47f0:	d426      	bmi.n	d4840 <_Z17setWaterThreshold6String+0x64>
   d47f2:	eddf 7a15 	vldr	s15, [pc, #84]	; d4848 <_Z17setWaterThreshold6String+0x6c>
   d47f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d47fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47fe:	dc1f      	bgt.n	d4840 <_Z17setWaterThreshold6String+0x64>
  sysStatus.wateringThresholdPct = tempThreshold;                      // debounce is how long we must space events to prevent overcounting
   d4800:	4c12      	ldr	r4, [pc, #72]	; (d484c <_Z17setWaterThreshold6String+0x70>)
   d4802:	ed84 0a03 	vstr	s0, [r4, #12]
  makeUpStringMessages();
   d4806:	f7ff fe09 	bl	d441c <_Z20makeUpStringMessagesv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d480a:	f008 fbc5 	bl	dcf98 <spark_cloud_flag_connected>
  if (Particle.connected()) {                                         // Publish result if feeling verbose
   d480e:	b1a8      	cbz	r0, d483c <_Z17setWaterThreshold6String+0x60>
    if (sysStatus.wateringThresholdPct == 0) Particle.publish("System","Watering function disabled",PRIVATE);
   d4810:	edd4 7a03 	vldr	s15, [r4, #12]
   d4814:	4b0e      	ldr	r3, [pc, #56]	; (d4850 <_Z17setWaterThreshold6String+0x74>)
   d4816:	eef5 7a40 	vcmp.f32	s15, #0.0
   d481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d481e:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4820:	f88d 3000 	strb.w	r3, [sp]
   d4824:	a804      	add	r0, sp, #16
   d4826:	bf07      	ittee	eq
   d4828:	4a0a      	ldreq	r2, [pc, #40]	; (d4854 <_Z17setWaterThreshold6String+0x78>)
   d482a:	490b      	ldreq	r1, [pc, #44]	; (d4858 <_Z17setWaterThreshold6String+0x7c>)
   d482c:	4a0b      	ldrne	r2, [pc, #44]	; (d485c <_Z17setWaterThreshold6String+0x80>)
   d482e:	490c      	ldrne	r1, [pc, #48]	; (d4860 <_Z17setWaterThreshold6String+0x84>)
   d4830:	233c      	movs	r3, #60	; 0x3c
   d4832:	f008 ff83 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4836:	a805      	add	r0, sp, #20
   d4838:	f7ff ff02 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;                                                            // Returns 1 to let the user know if was reset
   d483c:	2001      	movs	r0, #1
   d483e:	e000      	b.n	d4842 <_Z17setWaterThreshold6String+0x66>
  if ((tempThreshold < 0.0) | (tempThreshold > 100.0)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4840:	2000      	movs	r0, #0
}
   d4842:	b006      	add	sp, #24
   d4844:	bd10      	pop	{r4, pc}
   d4846:	bf00      	nop
   d4848:	42c80000 	.word	0x42c80000
   d484c:	2003e458 	.word	0x2003e458
   d4850:	2003e410 	.word	0x2003e410
   d4854:	000e3b32 	.word	0x000e3b32
   d4858:	000e3b4d 	.word	0x000e3b4d
   d485c:	2003e14e 	.word	0x2003e14e
   d4860:	000e3acb 	.word	0x000e3acb

000d4864 <_Z16setWaterDuration6String>:
{
   d4864:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  float tempValue = strtol(command,&pEND,10);                          // Looks for the first float and interprets it
   d4866:	220a      	movs	r2, #10
   d4868:	6800      	ldr	r0, [r0, #0]
   d486a:	a903      	add	r1, sp, #12
   d486c:	f00d ff22 	bl	e26b4 <strtol>
   d4870:	ee07 0a90 	vmov	s15, r0
   d4874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if ((tempValue < 0) | (tempValue > 1000)) return 0;                  // Make sure it falls in a valid range or send a "fail" result
   d4878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d487c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4880:	d41f      	bmi.n	d48c2 <_Z16setWaterDuration6String+0x5e>
   d4882:	ed9f 7a12 	vldr	s14, [pc, #72]	; d48cc <_Z16setWaterDuration6String+0x68>
   d4886:	eef4 7ac7 	vcmpe.f32	s15, s14
   d488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d488e:	dc18      	bgt.n	d48c2 <_Z16setWaterDuration6String+0x5e>
  sysStatus.wateringDuration = tempValue;                              // debounce is how long we must space events to prevent overcounting
   d4890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4894:	4b0e      	ldr	r3, [pc, #56]	; (d48d0 <_Z16setWaterDuration6String+0x6c>)
   d4896:	edc3 7a04 	vstr	s15, [r3, #16]
  makeUpStringMessages();
   d489a:	f7ff fdbf 	bl	d441c <_Z20makeUpStringMessagesv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d489e:	f008 fb7b 	bl	dcf98 <spark_cloud_flag_connected>
  if (Particle.connected()) {                                     // Publish result if feeling verbose
   d48a2:	b160      	cbz	r0, d48be <_Z16setWaterDuration6String+0x5a>
   d48a4:	4b0b      	ldr	r3, [pc, #44]	; (d48d4 <_Z16setWaterDuration6String+0x70>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d48a6:	4a0c      	ldr	r2, [pc, #48]	; (d48d8 <_Z16setWaterDuration6String+0x74>)
   d48a8:	781b      	ldrb	r3, [r3, #0]
   d48aa:	f88d 3000 	strb.w	r3, [sp]
   d48ae:	a804      	add	r0, sp, #16
   d48b0:	490a      	ldr	r1, [pc, #40]	; (d48dc <_Z16setWaterDuration6String+0x78>)
   d48b2:	233c      	movs	r3, #60	; 0x3c
   d48b4:	f008 ff42 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d48b8:	a805      	add	r0, sp, #20
   d48ba:	f7ff fec1 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;                                                            // Returns 1 to let the user know if was reset
   d48be:	2001      	movs	r0, #1
   d48c0:	e000      	b.n	d48c4 <_Z16setWaterDuration6String+0x60>
  if ((tempValue < 0) | (tempValue > 1000)) return 0;                  // Make sure it falls in a valid range or send a "fail" result
   d48c2:	2000      	movs	r0, #0
}
   d48c4:	b007      	add	sp, #28
   d48c6:	f85d fb04 	ldr.w	pc, [sp], #4
   d48ca:	bf00      	nop
   d48cc:	447a0000 	.word	0x447a0000
   d48d0:	2003e458 	.word	0x2003e458
   d48d4:	2003e410 	.word	0x2003e410
   d48d8:	2003e13e 	.word	0x2003e13e
   d48dc:	000e3a90 	.word	0x000e3a90

000d48e0 <_GLOBAL__sub_I_wateringThresholdPctStr>:
        val_(val) {
   d48e0:	4b01      	ldr	r3, [pc, #4]	; (d48e8 <_GLOBAL__sub_I_wateringThresholdPctStr+0x8>)
   d48e2:	2201      	movs	r2, #1
   d48e4:	701a      	strb	r2, [r3, #0]
   d48e6:	4770      	bx	lr
   d48e8:	2003e410 	.word	0x2003e410

000d48ec <_ZNSt17_Function_handlerIFbmEZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E9_M_invokeERKSt9_Any_dataOm>:
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
	{ return __r; }
   d48ec:	6800      	ldr	r0, [r0, #0]
     * so, however only do so if you use a sleep mode that will completely power down the modem. Otherwise, it's 
     * possible that then modem will never be fully reset.
     */
    SleepHelper &withMaximumTimeToConnect(std::chrono::milliseconds timeMs) { 
        return withMaximumTimeToConnectFunction([timeMs](system_tick_t ms) {
            return (ms >= timeMs.count());
   d48ee:	680a      	ldr	r2, [r1, #0]
   d48f0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d48f4:	2300      	movs	r3, #0
   d48f6:	4282      	cmp	r2, r0
   d48f8:	418b      	sbcs	r3, r1
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d48fa:	bfac      	ite	ge
   d48fc:	2001      	movge	r0, #1
   d48fe:	2000      	movlt	r0, #0
   d4900:	4770      	bx	lr

000d4902 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4902:	2a02      	cmp	r2, #2
   d4904:	d006      	beq.n	d4914 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
   d4906:	2a03      	cmp	r2, #3
   d4908:	d002      	beq.n	d4910 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
   d490a:	2a01      	cmp	r2, #1
   d490c:	d100      	bne.n	d4910 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d490e:	6001      	str	r1, [r0, #0]
	}
   d4910:	2000      	movs	r0, #0
   d4912:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4914:	680b      	ldr	r3, [r1, #0]
   d4916:	6003      	str	r3, [r0, #0]
	}
   d4918:	e7fa      	b.n	d4910 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlRK17SystemSleepResultE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>

000d491a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d491a:	2a02      	cmp	r2, #2
   d491c:	d006      	beq.n	d492c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x12>
   d491e:	2a03      	cmp	r2, #3
   d4920:	d002      	beq.n	d4928 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
   d4922:	2a01      	cmp	r2, #1
   d4924:	d100      	bne.n	d4928 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4926:	6001      	str	r1, [r0, #0]
	}
   d4928:	2000      	movs	r0, #0
   d492a:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d492c:	680b      	ldr	r3, [r1, #0]
   d492e:	6003      	str	r3, [r0, #0]
	}
   d4930:	e7fa      	b.n	d4928 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>

000d4932 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4932:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4934:	bf08      	it	eq
   d4936:	6001      	streq	r1, [r0, #0]
	}
   d4938:	2000      	movs	r0, #0
   d493a:	4770      	bx	lr

000d493c <_ZNSt14_Function_base13_Base_managerIZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES3_EUlRN5spark10JSONWriterEE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d493c:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d493e:	bf08      	it	eq
   d4940:	6001      	streq	r1, [r0, #0]
	}
   d4942:	2000      	movs	r0, #0
   d4944:	4770      	bx	lr

000d4946 <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRN11SleepHelper16AppCallbackStateEE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d4946:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4948:	bf08      	it	eq
   d494a:	6001      	streq	r1, [r0, #0]
	}
   d494c:	2000      	movs	r0, #0
   d494e:	4770      	bx	lr

000d4950 <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEE0_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4950:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4952:	bf08      	it	eq
   d4954:	6001      	streq	r1, [r0, #0]
	}
   d4956:	2000      	movs	r0, #0
   d4958:	4770      	bx	lr

000d495a <_ZNSt14_Function_base13_Base_managerIZ17sleepHelperConfigvEUlRN11SleepHelper16AppCallbackStateEmE1_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d495a:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d495c:	bf08      	it	eq
   d495e:	6001      	streq	r1, [r0, #0]
	}
   d4960:	2000      	movs	r0, #0
   d4962:	4770      	bx	lr

000d4964 <_ZNSt17_Function_handlerIFbbEZN11SleepHelper14withAB1805_WDTER6AB1805EUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4964:	b508      	push	{r3, lr}
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d4966:	2100      	movs	r1, #0
   d4968:	6800      	ldr	r0, [r0, #0]
   d496a:	f001 fc17 	bl	d619c <_ZN6AB18056setWDTEi>
      }
   d496e:	2001      	movs	r0, #1
   d4970:	bd08      	pop	{r3, pc}

000d4972 <_ZNSt17_Function_handlerIFbRK17SystemSleepResultEZN11SleepHelper14withAB1805_WDTER6AB1805EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4972:	b508      	push	{r3, lr}
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4978:	6800      	ldr	r0, [r0, #0]
   d497a:	f001 fc0f 	bl	d619c <_ZN6AB18056setWDTEi>
      }
   d497e:	2001      	movs	r0, #1
   d4980:	bd08      	pop	{r3, pc}

000d4982 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4982:	b510      	push	{r4, lr}
        });

        withSleepReadyFunction([maxTimeToPublish](AppCallbackState &state, system_tick_t ms) {
            bool canSleep = false;

            if (state.callbackState == AppCallbackState::CALLBACK_STATE_START) { 
   d4984:	680b      	ldr	r3, [r1, #0]
   d4986:	3301      	adds	r3, #1
   d4988:	460c      	mov	r4, r1
   d498a:	d10a      	bne.n	d49a2 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x20>
                // On first call to sleep ready, resume publishing
                PublishQueuePosix::instance().setPausePublishing(false);
   d498c:	f003 ffba 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d4990:	2100      	movs	r1, #0
   d4992:	f004 f963 	bl	d8c5c <_ZN17PublishQueuePosix18setPausePublishingEb>
                state.callbackState = 1;
   d4996:	2301      	movs	r3, #1
   d4998:	6023      	str	r3, [r4, #0]
            bool canSleep = false;
   d499a:	2400      	movs	r4, #0
      }
   d499c:	f084 0001 	eor.w	r0, r4, #1
   d49a0:	bd10      	pop	{r4, pc}
   d49a2:	6803      	ldr	r3, [r0, #0]
   d49a4:	e9d3 0100 	ldrd	r0, r1, [r3]
            }
            else {
                if (maxTimeToPublish.count() != 0 && ms >= maxTimeToPublish.count()) {
   d49a8:	ea50 0301 	orrs.w	r3, r0, r1
   d49ac:	d009      	beq.n	d49c2 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x40>
   d49ae:	6812      	ldr	r2, [r2, #0]
   d49b0:	2300      	movs	r3, #0
   d49b2:	4282      	cmp	r2, r0
   d49b4:	418b      	sbcs	r3, r1
   d49b6:	db04      	blt.n	d49c2 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x40>
                    PublishQueuePosix::instance().setPausePublishing(true);
   d49b8:	f003 ffa4 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d49bc:	2101      	movs	r1, #1
   d49be:	f004 f94d 	bl	d8c5c <_ZN17PublishQueuePosix18setPausePublishingEb>
                }
                canSleep = PublishQueuePosix::instance().getCanSleep();
   d49c2:	f003 ff9f 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d49c6:	f890 40b3 	ldrb.w	r4, [r0, #179]	; 0xb3
                if (canSleep) {
   d49ca:	2c00      	cmp	r4, #0
   d49cc:	d0e6      	beq.n	d499c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x1a>
                    PublishQueuePosix::instance().setPausePublishing(true);
   d49ce:	f003 ff99 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d49d2:	2101      	movs	r1, #1
   d49d4:	f004 f942 	bl	d8c5c <_ZN17PublishQueuePosix18setPausePublishingEb>
                    PublishQueuePosix::instance().writeQueueToFiles();
   d49d8:	f003 ff94 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d49dc:	f003 fff0 	bl	d89c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d49e0:	e7dc      	b.n	d499c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlS2_mE0_E9_M_invokeERKSt9_Any_dataS2_Om+0x1a>
	...

000d49e4 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZ17sleepHelperConfigvEUlS2_mE1_E9_M_invokeERKSt9_Any_dataS2_Om>:
                Log.info("Button press - sleep enable is %s", (sysStatus.enableSleep) ? "true" : "false");
            }
            return true;
        })
        .withSleepReadyFunction([](SleepHelper::AppCallbackState &, system_tick_t) {
            if (sysStatus.enableSleep) return false;// Boolean set by Particle.function - If sleep is enabled return false
   d49e4:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZ17sleepHelperConfigvEUlS2_mE1_E9_M_invokeERKSt9_Any_dataS2_Om+0xc>)
   d49e6:	7a58      	ldrb	r0, [r3, #9]
   d49e8:	f080 0001 	eor.w	r0, r0, #1
   d49ec:	4770      	bx	lr
   d49ee:	bf00      	nop
   d49f0:	2003e458 	.word	0x2003e458

000d49f4 <_ZNSt17_Function_handlerIFbiEZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUliE_E9_M_invokeERKSt9_Any_dataOi>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d49f4:	b508      	push	{r3, lr}
            PublishQueuePosix::instance().setPausePublishing(true);
   d49f6:	f003 ff85 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
   d49fa:	2101      	movs	r1, #1
   d49fc:	f004 f92e 	bl	d8c5c <_ZN17PublishQueuePosix18setPausePublishingEb>
      }
   d4a00:	2001      	movs	r0, #1
   d4a02:	bd08      	pop	{r3, pc}

000d4a04 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   d4a04:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4a06:	b538      	push	{r3, r4, r5, lr}
   d4a08:	4604      	mov	r4, r0
	  switch (__op)
   d4a0a:	d007      	beq.n	d4a1c <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
   d4a0c:	2a03      	cmp	r2, #3
   d4a0e:	d010      	beq.n	d4a32 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   d4a10:	2a01      	cmp	r2, #1
   d4a12:	d101      	bne.n	d4a18 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4a14:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4a16:	6003      	str	r3, [r0, #0]
	}
   d4a18:	2000      	movs	r0, #0
   d4a1a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a1c:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4a1e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a20:	f7ff fb39 	bl	d4096 <_Znwj>
   d4a24:	b118      	cbz	r0, d4a2e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2a>
   d4a26:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4a2a:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   d4a2e:	6020      	str	r0, [r4, #0]
	}
   d4a30:	e7f2      	b.n	d4a18 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4a32:	6800      	ldr	r0, [r0, #0]
   d4a34:	2800      	cmp	r0, #0
   d4a36:	d0ef      	beq.n	d4a18 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
   d4a38:	2108      	movs	r1, #8
   d4a3a:	f00b fe61 	bl	e0700 <_ZdlPvj>
   d4a3e:	e7eb      	b.n	d4a18 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper24withMaximumTimeToConnectENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlmE_E10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000d4a40 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   d4a40:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4a42:	b538      	push	{r3, r4, r5, lr}
   d4a44:	4604      	mov	r4, r0
	  switch (__op)
   d4a46:	d007      	beq.n	d4a58 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   d4a48:	2a03      	cmp	r2, #3
   d4a4a:	d010      	beq.n	d4a6e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2e>
   d4a4c:	2a01      	cmp	r2, #1
   d4a4e:	d101      	bne.n	d4a54 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4a50:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4a52:	6003      	str	r3, [r0, #0]
	}
   d4a54:	2000      	movs	r0, #0
   d4a56:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a58:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4a5a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4a5c:	f7ff fb1b 	bl	d4096 <_Znwj>
   d4a60:	b118      	cbz	r0, d4a6a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
   d4a62:	e9d5 2300 	ldrd	r2, r3, [r5]
   d4a66:	e9c0 2300 	strd	r2, r3, [r0]
	  __dest._M_access<_Functor*>() =
   d4a6a:	6020      	str	r0, [r4, #0]
	}
   d4a6c:	e7f2      	b.n	d4a54 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4a6e:	6800      	ldr	r0, [r0, #0]
   d4a70:	2800      	cmp	r0, #0
   d4a72:	d0ef      	beq.n	d4a54 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
   d4a74:	2108      	movs	r1, #8
   d4a76:	f00b fe43 	bl	e0700 <_ZdlPvj>
   d4a7a:	e7eb      	b.n	d4a54 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEEUlRNS1_16AppCallbackStateEmE0_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>

000d4a7c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4a7c:	b510      	push	{r4, lr}
      if (_M_manager)
   d4a7e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4a80:	4604      	mov	r4, r0
      if (_M_manager)
   d4a82:	b113      	cbz	r3, d4a8a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a84:	2203      	movs	r2, #3
   d4a86:	4601      	mov	r1, r0
   d4a88:	4798      	blx	r3
    }
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	bd10      	pop	{r4, pc}

000d4a8e <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d4a8e:	b513      	push	{r0, r1, r4, lr}
   d4a90:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   d4a92:	4608      	mov	r0, r1
   d4a94:	9101      	str	r1, [sp, #4]
   d4a96:	f00c fe9a 	bl	e17ce <strlen>
   d4a9a:	9901      	ldr	r1, [sp, #4]
   d4a9c:	4602      	mov	r2, r0
   d4a9e:	4620      	mov	r0, r4
}
   d4aa0:	b002      	add	sp, #8
   d4aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   d4aa6:	f009 bde5 	b.w	de674 <_ZN5spark10JSONWriter4nameEPKcj>
	...

000d4aac <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4aac:	b538      	push	{r3, r4, r5, lr}
   d4aae:	460c      	mov	r4, r1
                    writer.name("t").value((int) Time.now());
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	4919      	ldr	r1, [pc, #100]	; (d4b18 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6c>)
   d4ab4:	f7ff ffeb 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
   d4ab8:	4605      	mov	r5, r0
   d4aba:	f00b fb3a 	bl	e0132 <_ZN9TimeClass3nowEv>
   d4abe:	4601      	mov	r1, r0
   d4ac0:	4628      	mov	r0, r5
                    writer.name("bs").value(current.batteryState);
   d4ac2:	4d16      	ldr	r5, [pc, #88]	; (d4b1c <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x70>)
                    writer.name("t").value((int) Time.now());
   d4ac4:	f009 fd18 	bl	de4f8 <_ZN5spark10JSONWriter5valueEi>
                    writer.name("bs").value(current.batteryState);
   d4ac8:	4915      	ldr	r1, [pc, #84]	; (d4b20 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x74>)
   d4aca:	4620      	mov	r0, r4
   d4acc:	f7ff ffdf 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
   d4ad0:	7b29      	ldrb	r1, [r5, #12]
   d4ad2:	f009 fd11 	bl	de4f8 <_ZN5spark10JSONWriter5valueEi>
                    writer.name("c").value(current.internalTempC);
   d4ad6:	4913      	ldr	r1, [pc, #76]	; (d4b24 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x78>)
   d4ad8:	4620      	mov	r0, r4
   d4ada:	f7ff ffd8 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
   d4ade:	ed95 0b00 	vldr	d0, [r5]
   d4ae2:	f009 fd4b 	bl	de57c <_ZN5spark10JSONWriter5valueEd>
                    writer.name("sm").value(current.soilMoisture);
   d4ae6:	4910      	ldr	r1, [pc, #64]	; (d4b28 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x7c>)
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff ffd0 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
   d4aee:	ed95 0b08 	vldr	d0, [r5, #32]
   d4af2:	f009 fd43 	bl	de57c <_ZN5spark10JSONWriter5valueEd>
                    writer.name("st").value(current.soilTempC);
   d4af6:	490d      	ldr	r1, [pc, #52]	; (d4b2c <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x80>)
   d4af8:	4620      	mov	r0, r4
   d4afa:	f7ff ffc8 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
   d4afe:	ed95 0b0a 	vldr	d0, [r5, #40]	; 0x28
   d4b02:	f009 fd3b 	bl	de57c <_ZN5spark10JSONWriter5valueEd>
                    writer.name("ws").value(current.wateringState);
   d4b06:	490a      	ldr	r1, [pc, #40]	; (d4b30 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterEEZZ17sleepHelperConfigvENKUlRN11SleepHelper16AppCallbackStateEE_clES6_EUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x84>)
   d4b08:	4620      	mov	r0, r4
   d4b0a:	f7ff ffc0 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
   d4b0e:	7e29      	ldrb	r1, [r5, #24]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4b14:	f009 bcf0 	b.w	de4f8 <_ZN5spark10JSONWriter5valueEi>
   d4b18:	000e44d0 	.word	0x000e44d0
   d4b1c:	2003e428 	.word	0x2003e428
   d4b20:	000e3b54 	.word	0x000e3b54
   d4b24:	000e39a5 	.word	0x000e39a5
   d4b28:	000e3b57 	.word	0x000e3b57
   d4b2c:	000e3b5a 	.word	0x000e3b5a
   d4b30:	000e3b5d 	.word	0x000e3b5d

000d4b34 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b34:	b570      	push	{r4, r5, r6, lr}
            sleepConfig.gpio(BUTTON_PIN, CHANGE);   // My debounce time constant prevents detecting FALLING
   d4b36:	4b21      	ldr	r3, [pc, #132]	; (d4bbc <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x88>)
   d4b38:	881e      	ldrh	r6, [r3, #0]
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
        if (valid_) {
   d4b3a:	7d0b      	ldrb	r3, [r1, #20]
   d4b3c:	460d      	mov	r5, r1
   d4b3e:	b18b      	cbz	r3, d4b64 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4b40:	680b      	ldr	r3, [r1, #0]
   d4b42:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4b44:	b31b      	cbz	r3, d4b8e <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x5a>
            if (start->type == type) {
   d4b46:	889a      	ldrh	r2, [r3, #4]
   d4b48:	2a01      	cmp	r2, #1
   d4b4a:	d006      	beq.n	d4b5a <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x26>
            start = start->next;
   d4b4c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4b4e:	e7f9      	b.n	d4b44 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4b50:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4b52:	b1e3      	cbz	r3, d4b8e <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x5a>
            if (start->type == type) {
   d4b54:	889a      	ldrh	r2, [r3, #4]
   d4b56:	2a01      	cmp	r2, #1
   d4b58:	d1fa      	bne.n	d4b50 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x1c>
                if (gpioWakeup->pin == pin) {
   d4b5a:	899a      	ldrh	r2, [r3, #12]
   d4b5c:	42b2      	cmp	r2, r6
   d4b5e:	d1f7      	bne.n	d4b50 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x1c>
                    gpioWakeup->mode = mode;
   d4b60:	2200      	movs	r2, #0
   d4b62:	739a      	strb	r2, [r3, #14]
            delay(2000);                            // This is a debugging line - to connect to USB serial for logging
   d4b64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4b68:	f008 fb2a 	bl	dd1c0 <delay>
            Log.info("Woke on button press");
   d4b6c:	4814      	ldr	r0, [pc, #80]	; (d4bc0 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x8c>)
   d4b6e:	4915      	ldr	r1, [pc, #84]	; (d4bc4 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x90>)
   d4b70:	f7ff fc14 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            if (!digitalRead(BUTTON_PIN)) {         // The BUTTON is active low - this is a button press
   d4b74:	4630      	mov	r0, r6
   d4b76:	f00b fd1f 	bl	e05b8 <digitalRead>
   d4b7a:	b930      	cbnz	r0, d4b8a <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x56>
                sysStatus.enableSleep = false;      // Pressing the button diables sleep - at least that is the intent
   d4b7c:	4b12      	ldr	r3, [pc, #72]	; (d4bc8 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x94>)
                Log.info("Button press - sleep enable is %s", (sysStatus.enableSleep) ? "true" : "false");
   d4b7e:	4a13      	ldr	r2, [pc, #76]	; (d4bcc <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x98>)
                sysStatus.enableSleep = false;      // Pressing the button diables sleep - at least that is the intent
   d4b80:	7258      	strb	r0, [r3, #9]
                Log.info("Button press - sleep enable is %s", (sysStatus.enableSleep) ? "true" : "false");
   d4b82:	4913      	ldr	r1, [pc, #76]	; (d4bd0 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x9c>)
   d4b84:	480e      	ldr	r0, [pc, #56]	; (d4bc0 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x8c>)
   d4b86:	f7ff fc09 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
      }
   d4b8a:	2001      	movs	r0, #1
   d4b8c:	bd70      	pop	{r4, r5, r6, pc}
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4b8e:	4911      	ldr	r1, [pc, #68]	; (d4bd4 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0xa0>)
   d4b90:	2010      	movs	r0, #16
   d4b92:	f00b fdeb 	bl	e076c <_ZnwjRKSt9nothrow_t>
   d4b96:	4604      	mov	r4, r0
   d4b98:	b170      	cbz	r0, d4bb8 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x84>
   d4b9a:	2210      	movs	r2, #16
   d4b9c:	2100      	movs	r1, #0
   d4b9e:	f00c fd8b 	bl	e16b8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4ba2:	4b0d      	ldr	r3, [pc, #52]	; (d4bd8 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0xa4>)
   d4ba4:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4ba6:	2301      	movs	r3, #1
   d4ba8:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4baa:	692b      	ldr	r3, [r5, #16]
   d4bac:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
   d4bae:	2300      	movs	r3, #0
            wakeupSource->pin = pin;
   d4bb0:	81a6      	strh	r6, [r4, #12]
            wakeupSource->mode = mode;
   d4bb2:	73a3      	strb	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4bb4:	612c      	str	r4, [r5, #16]
   d4bb6:	e7d5      	b.n	d4b64 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x30>
                valid_ = false;
   d4bb8:	7528      	strb	r0, [r5, #20]
                return *this;
   d4bba:	e7d3      	b.n	d4b64 <_ZNSt17_Function_handlerIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEZ17sleepHelperConfigvEUlS2_S5_E0_E9_M_invokeERKSt9_Any_dataS2_S5_+0x30>
   d4bbc:	000e398e 	.word	0x000e398e
   d4bc0:	2003e560 	.word	0x2003e560
   d4bc4:	000e3b60 	.word	0x000e3b60
   d4bc8:	2003e458 	.word	0x2003e458
   d4bcc:	000e3b14 	.word	0x000e3b14
   d4bd0:	000e3b75 	.word	0x000e3b75
   d4bd4:	000e4ac8 	.word	0x000e4ac8
   d4bd8:	00030010 	.word	0x00030010

000d4bdc <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d4bdc:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d4bde:	247f      	movs	r4, #127	; 0x7f
   d4be0:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d4be2:	2400      	movs	r4, #0
   d4be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d4be8:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d4bec:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d4bf0:	6849      	ldr	r1, [r1, #4]
   d4bf2:	4c03      	ldr	r4, [pc, #12]	; (d4c00 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d4bf4:	6852      	ldr	r2, [r2, #4]
   d4bf6:	61c4      	str	r4, [r0, #28]
   d4bf8:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d4bfc:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d4bfe:	bd10      	pop	{r4, pc}
   d4c00:	000e4084 	.word	0x000e4084

000d4c04 <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d4c04:	b510      	push	{r4, lr}
   d4c06:	4604      	mov	r4, r0
   d4c08:	3024      	adds	r0, #36	; 0x24
   d4c0a:	f002 f8d9 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
   d4c0e:	f104 001c 	add.w	r0, r4, #28
   d4c12:	f002 f8d5 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d4c16:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4c18:	b108      	cbz	r0, d4c1e <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4c1a:	f7ff fa40 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d4c1e:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d4c20:	b108      	cbz	r0, d4c26 <_ZN14LocalTimeRangeD1Ev+0x22>
   d4c22:	f7ff fa3c 	bl	d409e <_ZdlPv>
   d4c26:	4620      	mov	r0, r4
   d4c28:	bd10      	pop	{r4, pc}

000d4c2a <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c2a:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4c2c:	2300      	movs	r3, #0
   d4c2e:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4c30:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4c32:	4604      	mov	r4, r0
   d4c34:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4c36:	b12b      	cbz	r3, d4c44 <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c38:	2202      	movs	r2, #2
   d4c3a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c3c:	68eb      	ldr	r3, [r5, #12]
   d4c3e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c40:	68ab      	ldr	r3, [r5, #8]
   d4c42:	60a3      	str	r3, [r4, #8]
	}
    }
   d4c44:	4620      	mov	r0, r4
   d4c46:	bd38      	pop	{r3, r4, r5, pc}

000d4c48 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c48:	b510      	push	{r4, lr}
   d4c4a:	b09a      	sub	sp, #104	; 0x68
            if (Time.isValid()) {
   d4c4c:	f00b fa54 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   d4c50:	2800      	cmp	r0, #0
   d4c52:	d04d      	beq.n	d4cf0 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xa8>
                delay(2000);
   d4c54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4c58:	f008 fab2 	bl	dd1c0 <delay>
                takeMeasurements();                 // Collect data from the sensors
   d4c5c:	f001 f8e2 	bl	d5e24 <_Z16takeMeasurementsv>
                if (current.wateringState == 1) {
   d4c60:	4b25      	ldr	r3, [pc, #148]	; (d4cf8 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xb0>)
   d4c62:	7e1b      	ldrb	r3, [r3, #24]
   d4c64:	2b01      	cmp	r3, #1
   d4c66:	d126      	bne.n	d4cb6 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
                    Log.info("Sending webhook to start watering");
   d4c68:	4924      	ldr	r1, [pc, #144]	; (d4cfc <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xb4>)
   d4c6a:	4825      	ldr	r0, [pc, #148]	; (d4d00 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xb8>)
   d4c6c:	f7ff fb96 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
                    snprintf(data, sizeof(data), "{\"duration\":%i}",sysStatus.wateringDuration);
   d4c70:	4b24      	ldr	r3, [pc, #144]	; (d4d04 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xbc>)
   d4c72:	4a25      	ldr	r2, [pc, #148]	; (d4d08 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xc0>)
   d4c74:	691b      	ldr	r3, [r3, #16]
   d4c76:	2140      	movs	r1, #64	; 0x40
   d4c78:	a80a      	add	r0, sp, #40	; 0x28
   d4c7a:	f008 fa45 	bl	dd108 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4c7e:	4b23      	ldr	r3, [pc, #140]	; (d4d0c <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xc4>)
   d4c80:	4923      	ldr	r1, [pc, #140]	; (d4d10 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xc8>)
   d4c82:	781b      	ldrb	r3, [r3, #0]
   d4c84:	f88d 3000 	strb.w	r3, [sp]
   d4c88:	aa0a      	add	r2, sp, #40	; 0x28
   d4c8a:	233c      	movs	r3, #60	; 0x3c
   d4c8c:	a806      	add	r0, sp, #24
   d4c8e:	f008 fd55 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d4c92:	9c07      	ldr	r4, [sp, #28]
   d4c94:	b17c      	cbz	r4, d4cb6 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
      if (--_M_use_count == 0)
   d4c96:	6863      	ldr	r3, [r4, #4]
   d4c98:	3b01      	subs	r3, #1
   d4c9a:	6063      	str	r3, [r4, #4]
   d4c9c:	b95b      	cbnz	r3, d4cb6 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
          _M_dispose();
   d4c9e:	6823      	ldr	r3, [r4, #0]
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	689b      	ldr	r3, [r3, #8]
   d4ca4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ca6:	68a3      	ldr	r3, [r4, #8]
   d4ca8:	3b01      	subs	r3, #1
   d4caa:	60a3      	str	r3, [r4, #8]
   d4cac:	b91b      	cbnz	r3, d4cb6 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0x6e>
            _M_destroy();
   d4cae:	6823      	ldr	r3, [r4, #0]
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	68db      	ldr	r3, [r3, #12]
   d4cb4:	4798      	blx	r3
                SleepHelper::instance().addEvent([](JSONWriter &writer) {
   d4cb6:	f005 fbc7 	bl	da448 <_ZN11SleepHelper8instanceEv>
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4cba:	4b16      	ldr	r3, [pc, #88]	; (d4d14 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xcc>)
   d4cbc:	9305      	str	r3, [sp, #20]
   d4cbe:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   d4cc0:	4b15      	ldr	r3, [pc, #84]	; (d4d18 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEEZ17sleepHelperConfigvEUlS2_E_E9_M_invokeERKSt9_Any_dataS2_+0xd0>)
   d4cc2:	9304      	str	r3, [sp, #16]
        wakeEventFunctions.addEvent(callback);
   d4cc4:	a902      	add	r1, sp, #8
   d4cc6:	a806      	add	r0, sp, #24
   d4cc8:	f7ff ffaf 	bl	d4c2a <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
            eventHistory.addEvent(callback);
   d4ccc:	a906      	add	r1, sp, #24
   d4cce:	a80a      	add	r0, sp, #40	; 0x28
   d4cd0:	f7ff ffab 	bl	d4c2a <_ZNSt8functionIFvRN5spark10JSONWriterEEEC1ERKS4_>
   d4cd4:	a90a      	add	r1, sp, #40	; 0x28
   d4cd6:	f504 60ea 	add.w	r0, r4, #1872	; 0x750
   d4cda:	f005 fc1f 	bl	da51c <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>
    class function<_Res(_ArgTypes...)>
   d4cde:	a80a      	add	r0, sp, #40	; 0x28
   d4ce0:	f7ff fecc 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4ce4:	a806      	add	r0, sp, #24
   d4ce6:	f7ff fec9 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4cea:	a802      	add	r0, sp, #8
   d4cec:	f7ff fec6 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
      }
   d4cf0:	2000      	movs	r0, #0
   d4cf2:	b01a      	add	sp, #104	; 0x68
   d4cf4:	bd10      	pop	{r4, pc}
   d4cf6:	bf00      	nop
   d4cf8:	2003e428 	.word	0x2003e428
   d4cfc:	000e3b97 	.word	0x000e3b97
   d4d00:	2003e560 	.word	0x2003e560
   d4d04:	2003e458 	.word	0x2003e458
   d4d08:	000e3bb9 	.word	0x000e3bb9
   d4d0c:	2003e411 	.word	0x2003e411
   d4d10:	000e3bc9 	.word	0x000e3bc9
   d4d14:	000d4aad 	.word	0x000d4aad
   d4d18:	000d493d 	.word	0x000d493d

000d4d1c <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>:
    function<_Res(_ArgTypes...)>::
   d4d1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d1e:	2300      	movs	r3, #0
   d4d20:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d24:	4604      	mov	r4, r0
   d4d26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d28:	b12b      	cbz	r3, d4d36 <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d2a:	2202      	movs	r2, #2
   d4d2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d2e:	68eb      	ldr	r3, [r5, #12]
   d4d30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d32:	68ab      	ldr	r3, [r5, #8]
   d4d34:	60a3      	str	r3, [r4, #8]
    }
   d4d36:	4620      	mov	r0, r4
   d4d38:	bd38      	pop	{r3, r4, r5, pc}

000d4d3a <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d4d3a:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d3c:	2300      	movs	r3, #0
   d4d3e:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d40:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d42:	4604      	mov	r4, r0
   d4d44:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d46:	b12b      	cbz	r3, d4d54 <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d48:	2202      	movs	r2, #2
   d4d4a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d4c:	68eb      	ldr	r3, [r5, #12]
   d4d4e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d50:	68ab      	ldr	r3, [r5, #8]
   d4d52:	60a3      	str	r3, [r4, #8]
    }
   d4d54:	4620      	mov	r0, r4
   d4d56:	bd38      	pop	{r3, r4, r5, pc}

000d4d58 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d4d58:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d5a:	2300      	movs	r3, #0
   d4d5c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d5e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d60:	4604      	mov	r4, r0
   d4d62:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d64:	b12b      	cbz	r3, d4d72 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d66:	2202      	movs	r2, #2
   d4d68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d6a:	68eb      	ldr	r3, [r5, #12]
   d4d6c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d6e:	68ab      	ldr	r3, [r5, #8]
   d4d70:	60a3      	str	r3, [r4, #8]
    }
   d4d72:	4620      	mov	r0, r4
   d4d74:	bd38      	pop	{r3, r4, r5, pc}

000d4d76 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   d4d76:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d78:	2300      	movs	r3, #0
   d4d7a:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d7c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d7e:	4604      	mov	r4, r0
   d4d80:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d82:	b12b      	cbz	r3, d4d90 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d84:	2202      	movs	r2, #2
   d4d86:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d88:	68eb      	ldr	r3, [r5, #12]
   d4d8a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d8c:	68ab      	ldr	r3, [r5, #8]
   d4d8e:	60a3      	str	r3, [r4, #8]
    }
   d4d90:	4620      	mov	r0, r4
   d4d92:	bd38      	pop	{r3, r4, r5, pc}

000d4d94 <_ZNSt8functionIFbiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4d94:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d96:	2300      	movs	r3, #0
   d4d98:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d9a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d9c:	4604      	mov	r4, r0
   d4d9e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4da0:	b12b      	cbz	r3, d4dae <_ZNSt8functionIFbiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4da2:	2202      	movs	r2, #2
   d4da4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4da6:	68eb      	ldr	r3, [r5, #12]
   d4da8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4daa:	68ab      	ldr	r3, [r5, #8]
   d4dac:	60a3      	str	r3, [r4, #8]
    }
   d4dae:	4620      	mov	r0, r4
   d4db0:	bd38      	pop	{r3, r4, r5, pc}

000d4db2 <_ZNSt8functionIFbbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4db2:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4db4:	2300      	movs	r3, #0
   d4db6:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4db8:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4dba:	4604      	mov	r4, r0
   d4dbc:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4dbe:	b12b      	cbz	r3, d4dcc <_ZNSt8functionIFbbEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4dc0:	2202      	movs	r2, #2
   d4dc2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4dc4:	68eb      	ldr	r3, [r5, #12]
   d4dc6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dc8:	68ab      	ldr	r3, [r5, #8]
   d4dca:	60a3      	str	r3, [r4, #8]
    }
   d4dcc:	4620      	mov	r0, r4
   d4dce:	bd38      	pop	{r3, r4, r5, pc}

000d4dd0 <_ZNSt8functionIFbmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   d4dd0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4dd2:	2300      	movs	r3, #0
   d4dd4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4dd6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4dd8:	4604      	mov	r4, r0
   d4dda:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4ddc:	b12b      	cbz	r3, d4dea <_ZNSt8functionIFbmEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4dde:	2202      	movs	r2, #2
   d4de0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4de2:	68eb      	ldr	r3, [r5, #12]
   d4de4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4de6:	68ab      	ldr	r3, [r5, #8]
   d4de8:	60a3      	str	r3, [r4, #8]
    }
   d4dea:	4620      	mov	r0, r4
   d4dec:	bd38      	pop	{r3, r4, r5, pc}

000d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4dee:	b513      	push	{r0, r1, r4, lr}
   d4df0:	460b      	mov	r3, r1
   d4df2:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4df4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4df8:	466c      	mov	r4, sp
   d4dfa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4dfe:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e02:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e06:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4e0a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e0e:	b002      	add	sp, #8
   d4e10:	bd10      	pop	{r4, pc}

000d4e12 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4e12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e16:	4607      	mov	r7, r0
   d4e18:	4688      	mov	r8, r1
   d4e1a:	4616      	mov	r6, r2
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   d4e1c:	4615      	mov	r5, r2
   d4e1e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4e20:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4e24:	4544      	cmp	r4, r8
   d4e26:	d014      	beq.n	d4e52 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4e28:	b16d      	cbz	r5, d4e46 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d4e2a:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4e2e:	4629      	mov	r1, r5
   d4e30:	4620      	mov	r0, r4
   d4e32:	f7ff ffdc 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e36:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4e38:	68aa      	ldr	r2, [r5, #8]
   d4e3a:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e3c:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e3e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e40:	68ea      	ldr	r2, [r5, #12]
   d4e42:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e44:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4e46:	4620      	mov	r0, r4
   d4e48:	f7ff fe18 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4e4c:	3410      	adds	r4, #16
   d4e4e:	3510      	adds	r5, #16
   d4e50:	e7e8      	b.n	d4e24 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
   d4e52:	1be0      	subs	r0, r4, r7
    }
   d4e54:	4430      	add	r0, r6
   d4e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4e5a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4e5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e5e:	4607      	mov	r7, r0
   d4e60:	4688      	mov	r8, r1
   d4e62:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4e64:	4615      	mov	r5, r2
   d4e66:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4e68:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4e6c:	4544      	cmp	r4, r8
   d4e6e:	d014      	beq.n	d4e9a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d4e70:	b16d      	cbz	r5, d4e8e <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4e72:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4e76:	4629      	mov	r1, r5
   d4e78:	4620      	mov	r0, r4
   d4e7a:	f7ff ffb8 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e7e:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4e80:	68aa      	ldr	r2, [r5, #8]
   d4e82:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e84:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e86:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e88:	68ea      	ldr	r2, [r5, #12]
   d4e8a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e8c:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4e8e:	4620      	mov	r0, r4
   d4e90:	f7ff fdf4 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4e94:	3410      	adds	r4, #16
   d4e96:	3510      	adds	r5, #16
   d4e98:	e7e8      	b.n	d4e6c <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4e9a:	1be0      	subs	r0, r4, r7
    }
   d4e9c:	4430      	add	r0, r6
   d4e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4ea2 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4ea2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4ea6:	4607      	mov	r7, r0
   d4ea8:	4688      	mov	r8, r1
   d4eaa:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4eac:	4615      	mov	r5, r2
   d4eae:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4eb0:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4eb4:	4544      	cmp	r4, r8
   d4eb6:	d014      	beq.n	d4ee2 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d4eb8:	b16d      	cbz	r5, d4ed6 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4eba:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4ebe:	4629      	mov	r1, r5
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	f7ff ff94 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ec6:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4ec8:	68aa      	ldr	r2, [r5, #8]
   d4eca:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ecc:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ece:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ed0:	68ea      	ldr	r2, [r5, #12]
   d4ed2:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ed4:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	f7ff fdd0 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4edc:	3410      	adds	r4, #16
   d4ede:	3510      	adds	r5, #16
   d4ee0:	e7e8      	b.n	d4eb4 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4ee2:	1be0      	subs	r0, r4, r7
    }
   d4ee4:	4430      	add	r0, r6
   d4ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4eea <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4eea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4eee:	4607      	mov	r7, r0
   d4ef0:	4688      	mov	r8, r1
   d4ef2:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4ef4:	4615      	mov	r5, r2
   d4ef6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4ef8:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4efc:	4544      	cmp	r4, r8
   d4efe:	d014      	beq.n	d4f2a <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d4f00:	b16d      	cbz	r5, d4f1e <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d4f02:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f06:	4629      	mov	r1, r5
   d4f08:	4620      	mov	r0, r4
   d4f0a:	f7ff ff70 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f0e:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f10:	68aa      	ldr	r2, [r5, #8]
   d4f12:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f14:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f16:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f18:	68ea      	ldr	r2, [r5, #12]
   d4f1a:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f1c:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4f1e:	4620      	mov	r0, r4
   d4f20:	f7ff fdac 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4f24:	3410      	adds	r4, #16
   d4f26:	3510      	adds	r5, #16
   d4f28:	e7e8      	b.n	d4efc <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d4f2a:	1be0      	subs	r0, r4, r7
    }
   d4f2c:	4430      	add	r0, r6
   d4f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f32 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4f32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f36:	4607      	mov	r7, r0
   d4f38:	4688      	mov	r8, r1
   d4f3a:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4f3c:	4615      	mov	r5, r2
   d4f3e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4f40:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4f44:	4544      	cmp	r4, r8
   d4f46:	d014      	beq.n	d4f72 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   d4f48:	b16d      	cbz	r5, d4f66 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   d4f4a:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f4e:	4629      	mov	r1, r5
   d4f50:	4620      	mov	r0, r4
   d4f52:	f7ff ff4c 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f56:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f58:	68aa      	ldr	r2, [r5, #8]
   d4f5a:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f5c:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f5e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f60:	68ea      	ldr	r2, [r5, #12]
   d4f62:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f64:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4f66:	4620      	mov	r0, r4
   d4f68:	f7ff fd88 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4f6c:	3410      	adds	r4, #16
   d4f6e:	3510      	adds	r5, #16
   d4f70:	e7e8      	b.n	d4f44 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   d4f72:	1be0      	subs	r0, r4, r7
    }
   d4f74:	4430      	add	r0, r6
   d4f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f7a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4f7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f7e:	4607      	mov	r7, r0
   d4f80:	4688      	mov	r8, r1
   d4f82:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4f84:	4615      	mov	r5, r2
   d4f86:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4f88:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4f8c:	4544      	cmp	r4, r8
   d4f8e:	d014      	beq.n	d4fba <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x40>
   d4f90:	b16d      	cbz	r5, d4fae <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x34>
   d4f92:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f96:	4629      	mov	r1, r5
   d4f98:	4620      	mov	r0, r4
   d4f9a:	f7ff ff28 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f9e:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4fa0:	68aa      	ldr	r2, [r5, #8]
   d4fa2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fa4:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fa6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4fa8:	68ea      	ldr	r2, [r5, #12]
   d4faa:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fac:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4fae:	4620      	mov	r0, r4
   d4fb0:	f7ff fd64 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4fb4:	3410      	adds	r4, #16
   d4fb6:	3510      	adds	r5, #16
   d4fb8:	e7e8      	b.n	d4f8c <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0+0x12>
      return __cur;
   d4fba:	1be0      	subs	r0, r4, r7
    }
   d4fbc:	4430      	add	r0, r6
   d4fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4fc2 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d4fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4fc6:	4607      	mov	r7, r0
   d4fc8:	4688      	mov	r8, r1
   d4fca:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   d4fcc:	4615      	mov	r5, r2
   d4fce:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d4fd0:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d4fd4:	4544      	cmp	r4, r8
   d4fd6:	d014      	beq.n	d5002 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0+0x40>
   d4fd8:	b16d      	cbz	r5, d4ff6 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0+0x34>
   d4fda:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   d4fde:	4629      	mov	r1, r5
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	f7ff ff04 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fe6:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4fe8:	68aa      	ldr	r2, [r5, #8]
   d4fea:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fec:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fee:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ff0:	68ea      	ldr	r2, [r5, #12]
   d4ff2:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ff4:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	f7ff fd40 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d4ffc:	3410      	adds	r4, #16
   d4ffe:	3510      	adds	r5, #16
   d5000:	e7e8      	b.n	d4fd4 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0+0x12>
      return __cur;
   d5002:	1be0      	subs	r0, r4, r7
    }
   d5004:	4430      	add	r0, r6
   d5006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d500c <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d500c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5010:	e9d0 7900 	ldrd	r7, r9, [r0]
   d5014:	4688      	mov	r8, r1

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d5016:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d501a:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d501c:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5020:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d5024:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5026:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d502a:	d102      	bne.n	d5032 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d502c:	481a      	ldr	r0, [pc, #104]	; (d5098 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x8c>)
   d502e:	f00b fba4 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d5032:	2c01      	cmp	r4, #1
   d5034:	4622      	mov	r2, r4
   d5036:	bf38      	it	cc
   d5038:	2201      	movcc	r2, #1
   d503a:	18a4      	adds	r4, r4, r2
   d503c:	eba8 0a07 	sub.w	sl, r8, r7

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5040:	d228      	bcs.n	d5094 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5042:	b14c      	cbz	r4, d5058 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x4c>
   d5044:	429c      	cmp	r4, r3
   d5046:	bf28      	it	cs
   d5048:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d504a:	0120      	lsls	r0, r4, #4
   d504c:	9101      	str	r1, [sp, #4]
   d504e:	f7ff f822 	bl	d4096 <_Znwj>
   d5052:	9901      	ldr	r1, [sp, #4]
   d5054:	4605      	mov	r5, r0
   d5056:	e000      	b.n	d505a <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x4e>
   d5058:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d505a:	eb15 000a 	adds.w	r0, r5, sl
   d505e:	d001      	beq.n	d5064 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x58>
   d5060:	f7ff fe5c 	bl	d4d1c <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   d5064:	4641      	mov	r1, r8
   d5066:	462a      	mov	r2, r5
   d5068:	4638      	mov	r0, r7
   d506a:	f7ff ffaa 	bl	d4fc2 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0>
   d506e:	4649      	mov	r1, r9
   d5070:	f100 0210 	add.w	r2, r0, #16
   d5074:	4640      	mov	r0, r8
   d5076:	f7ff ffa4 	bl	d4fc2 <_ZSt14__relocate_a_1IPSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEES9_SaIS8_EET0_T_SC_SB_RT1_.isra.0>
   d507a:	4680      	mov	r8, r0
	if (__p)
   d507c:	b117      	cbz	r7, d5084 <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x78>
	::operator delete(__p);
   d507e:	4638      	mov	r0, r7
   d5080:	f7ff f80d 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5084:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d5088:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d508c:	60b4      	str	r4, [r6, #8]
    }
   d508e:	b002      	add	sp, #8
   d5090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5094:	461c      	mov	r4, r3
   d5096:	e7d8      	b.n	d504a <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_+0x3e>
   d5098:	000e3bdc 	.word	0x000e3bdc

000d509c <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d509c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d50a0:	e9d0 7900 	ldrd	r7, r9, [r0]
   d50a4:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d50a6:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d50aa:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d50ac:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d50b0:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d50b4:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d50b6:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d50ba:	d102      	bne.n	d50c2 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d50bc:	481a      	ldr	r0, [pc, #104]	; (d5128 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d50be:	f00b fb5c 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d50c2:	2c01      	cmp	r4, #1
   d50c4:	4622      	mov	r2, r4
   d50c6:	bf38      	it	cc
   d50c8:	2201      	movcc	r2, #1
   d50ca:	18a4      	adds	r4, r4, r2
   d50cc:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d50d0:	d228      	bcs.n	d5124 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d50d2:	b14c      	cbz	r4, d50e8 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d50d4:	429c      	cmp	r4, r3
   d50d6:	bf28      	it	cs
   d50d8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d50da:	0120      	lsls	r0, r4, #4
   d50dc:	9101      	str	r1, [sp, #4]
   d50de:	f7fe ffda 	bl	d4096 <_Znwj>
   d50e2:	9901      	ldr	r1, [sp, #4]
   d50e4:	4605      	mov	r5, r0
   d50e6:	e000      	b.n	d50ea <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d50e8:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d50ea:	eb15 000a 	adds.w	r0, r5, sl
   d50ee:	d001      	beq.n	d50f4 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d50f0:	f7ff fe23 	bl	d4d3a <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
   d50f4:	4641      	mov	r1, r8
   d50f6:	462a      	mov	r2, r5
   d50f8:	4638      	mov	r0, r7
   d50fa:	f7ff fed2 	bl	d4ea2 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d50fe:	4649      	mov	r1, r9
   d5100:	f100 0210 	add.w	r2, r0, #16
   d5104:	4640      	mov	r0, r8
   d5106:	f7ff fecc 	bl	d4ea2 <_ZSt14__relocate_a_1IPSt8functionIFbRK17SystemSleepResultEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d510a:	4680      	mov	r8, r0
	if (__p)
   d510c:	b117      	cbz	r7, d5114 <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d510e:	4638      	mov	r0, r7
   d5110:	f7fe ffc5 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5114:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d5118:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d511c:	60b4      	str	r4, [r6, #8]
    }
   d511e:	b002      	add	sp, #8
   d5120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5124:	461c      	mov	r4, r3
   d5126:	e7d8      	b.n	d50da <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d5128:	000e3bdc 	.word	0x000e3bdc

000d512c <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d512c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5130:	e9d0 7900 	ldrd	r7, r9, [r0]
   d5134:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d5136:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d513a:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d513c:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5140:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d5144:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5146:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d514a:	d102      	bne.n	d5152 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d514c:	481a      	ldr	r0, [pc, #104]	; (d51b8 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d514e:	f00b fb14 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d5152:	2c01      	cmp	r4, #1
   d5154:	4622      	mov	r2, r4
   d5156:	bf38      	it	cc
   d5158:	2201      	movcc	r2, #1
   d515a:	18a4      	adds	r4, r4, r2
   d515c:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5160:	d228      	bcs.n	d51b4 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5162:	b14c      	cbz	r4, d5178 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d5164:	429c      	cmp	r4, r3
   d5166:	bf28      	it	cs
   d5168:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d516a:	0120      	lsls	r0, r4, #4
   d516c:	9101      	str	r1, [sp, #4]
   d516e:	f7fe ff92 	bl	d4096 <_Znwj>
   d5172:	9901      	ldr	r1, [sp, #4]
   d5174:	4605      	mov	r5, r0
   d5176:	e000      	b.n	d517a <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d5178:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d517a:	eb15 000a 	adds.w	r0, r5, sl
   d517e:	d001      	beq.n	d5184 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d5180:	f7ff fdea 	bl	d4d58 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
   d5184:	4641      	mov	r1, r8
   d5186:	462a      	mov	r2, r5
   d5188:	4638      	mov	r0, r7
   d518a:	f7ff fef6 	bl	d4f7a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d518e:	4649      	mov	r1, r9
   d5190:	f100 0210 	add.w	r2, r0, #16
   d5194:	4640      	mov	r0, r8
   d5196:	f7ff fef0 	bl	d4f7a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d519a:	4680      	mov	r8, r0
	if (__p)
   d519c:	b117      	cbz	r7, d51a4 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d519e:	4638      	mov	r0, r7
   d51a0:	f7fe ff7d 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d51a4:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d51a8:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d51ac:	60b4      	str	r4, [r6, #8]
    }
   d51ae:	b002      	add	sp, #8
   d51b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d51b4:	461c      	mov	r4, r3
   d51b6:	e7d8      	b.n	d516a <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d51b8:	000e3bdc 	.word	0x000e3bdc

000d51bc <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d51bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d51c0:	e9d0 7900 	ldrd	r7, r9, [r0]
   d51c4:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d51c6:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d51ca:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d51cc:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d51d0:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d51d4:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d51d6:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d51da:	d102      	bne.n	d51e2 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d51dc:	481a      	ldr	r0, [pc, #104]	; (d5248 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x8c>)
   d51de:	f00b facc 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d51e2:	2c01      	cmp	r4, #1
   d51e4:	4622      	mov	r2, r4
   d51e6:	bf38      	it	cc
   d51e8:	2201      	movcc	r2, #1
   d51ea:	18a4      	adds	r4, r4, r2
   d51ec:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d51f0:	d228      	bcs.n	d5244 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d51f2:	b14c      	cbz	r4, d5208 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4c>
   d51f4:	429c      	cmp	r4, r3
   d51f6:	bf28      	it	cs
   d51f8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d51fa:	0120      	lsls	r0, r4, #4
   d51fc:	9101      	str	r1, [sp, #4]
   d51fe:	f7fe ff4a 	bl	d4096 <_Znwj>
   d5202:	9901      	ldr	r1, [sp, #4]
   d5204:	4605      	mov	r5, r0
   d5206:	e000      	b.n	d520a <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x4e>
   d5208:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d520a:	eb15 000a 	adds.w	r0, r5, sl
   d520e:	d001      	beq.n	d5214 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x58>
   d5210:	f7ff fdb1 	bl	d4d76 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
   d5214:	4641      	mov	r1, r8
   d5216:	462a      	mov	r2, r5
   d5218:	4638      	mov	r0, r7
   d521a:	f7ff fe1e 	bl	d4e5a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d521e:	4649      	mov	r1, r9
   d5220:	f100 0210 	add.w	r2, r0, #16
   d5224:	4640      	mov	r0, r8
   d5226:	f7ff fe18 	bl	d4e5a <_ZSt14__relocate_a_1IPSt8functionIFbRN11SleepHelper16AppCallbackStateEmEES6_SaIS5_EET0_T_S9_S8_RT1_.isra.0>
   d522a:	4680      	mov	r8, r0
	if (__p)
   d522c:	b117      	cbz	r7, d5234 <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x78>
	::operator delete(__p);
   d522e:	4638      	mov	r0, r7
   d5230:	f7fe ff35 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5234:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d5238:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d523c:	60b4      	str	r4, [r6, #8]
    }
   d523e:	b002      	add	sp, #8
   d5240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5244:	461c      	mov	r4, r3
   d5246:	e7d8      	b.n	d51fa <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x3e>
   d5248:	000e3bdc 	.word	0x000e3bdc

000d524c <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d524c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5250:	e9d0 7900 	ldrd	r7, r9, [r0]
   d5254:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d5256:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d525a:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d525c:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5260:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d5264:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5266:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d526a:	d102      	bne.n	d5272 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d526c:	481a      	ldr	r0, [pc, #104]	; (d52d8 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d526e:	f00b fa84 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d5272:	2c01      	cmp	r4, #1
   d5274:	4622      	mov	r2, r4
   d5276:	bf38      	it	cc
   d5278:	2201      	movcc	r2, #1
   d527a:	18a4      	adds	r4, r4, r2
   d527c:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5280:	d228      	bcs.n	d52d4 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5282:	b14c      	cbz	r4, d5298 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d5284:	429c      	cmp	r4, r3
   d5286:	bf28      	it	cs
   d5288:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d528a:	0120      	lsls	r0, r4, #4
   d528c:	9101      	str	r1, [sp, #4]
   d528e:	f7fe ff02 	bl	d4096 <_Znwj>
   d5292:	9901      	ldr	r1, [sp, #4]
   d5294:	4605      	mov	r5, r0
   d5296:	e000      	b.n	d529a <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d5298:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d529a:	eb15 000a 	adds.w	r0, r5, sl
   d529e:	d001      	beq.n	d52a4 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d52a0:	f7ff fd78 	bl	d4d94 <_ZNSt8functionIFbiEEC1ERKS1_>
   d52a4:	4641      	mov	r1, r8
   d52a6:	462a      	mov	r2, r5
   d52a8:	4638      	mov	r0, r7
   d52aa:	f7ff fe42 	bl	d4f32 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d52ae:	4649      	mov	r1, r9
   d52b0:	f100 0210 	add.w	r2, r0, #16
   d52b4:	4640      	mov	r0, r8
   d52b6:	f7ff fe3c 	bl	d4f32 <_ZSt14__relocate_a_1IPSt8functionIFbiEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d52ba:	4680      	mov	r8, r0
	if (__p)
   d52bc:	b117      	cbz	r7, d52c4 <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d52be:	4638      	mov	r0, r7
   d52c0:	f7fe feed 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d52c4:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d52c8:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d52cc:	60b4      	str	r4, [r6, #8]
    }
   d52ce:	b002      	add	sp, #8
   d52d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d52d4:	461c      	mov	r4, r3
   d52d6:	e7d8      	b.n	d528a <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d52d8:	000e3bdc 	.word	0x000e3bdc

000d52dc <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d52dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d52e0:	e9d0 7900 	ldrd	r7, r9, [r0]
   d52e4:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d52e6:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d52ea:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d52ec:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d52f0:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d52f4:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d52f6:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d52fa:	d102      	bne.n	d5302 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d52fc:	481a      	ldr	r0, [pc, #104]	; (d5368 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d52fe:	f00b fa3c 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d5302:	2c01      	cmp	r4, #1
   d5304:	4622      	mov	r2, r4
   d5306:	bf38      	it	cc
   d5308:	2201      	movcc	r2, #1
   d530a:	18a4      	adds	r4, r4, r2
   d530c:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5310:	d228      	bcs.n	d5364 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5312:	b14c      	cbz	r4, d5328 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d5314:	429c      	cmp	r4, r3
   d5316:	bf28      	it	cs
   d5318:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d531a:	0120      	lsls	r0, r4, #4
   d531c:	9101      	str	r1, [sp, #4]
   d531e:	f7fe feba 	bl	d4096 <_Znwj>
   d5322:	9901      	ldr	r1, [sp, #4]
   d5324:	4605      	mov	r5, r0
   d5326:	e000      	b.n	d532a <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d5328:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d532a:	eb15 000a 	adds.w	r0, r5, sl
   d532e:	d001      	beq.n	d5334 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d5330:	f7ff fd3f 	bl	d4db2 <_ZNSt8functionIFbbEEC1ERKS1_>
   d5334:	4641      	mov	r1, r8
   d5336:	462a      	mov	r2, r5
   d5338:	4638      	mov	r0, r7
   d533a:	f7ff fdd6 	bl	d4eea <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d533e:	4649      	mov	r1, r9
   d5340:	f100 0210 	add.w	r2, r0, #16
   d5344:	4640      	mov	r0, r8
   d5346:	f7ff fdd0 	bl	d4eea <_ZSt14__relocate_a_1IPSt8functionIFbbEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d534a:	4680      	mov	r8, r0
	if (__p)
   d534c:	b117      	cbz	r7, d5354 <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d534e:	4638      	mov	r0, r7
   d5350:	f7fe fea5 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5354:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d5358:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d535c:	60b4      	str	r4, [r6, #8]
    }
   d535e:	b002      	add	sp, #8
   d5360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5364:	461c      	mov	r4, r3
   d5366:	e7d8      	b.n	d531a <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d5368:	000e3bdc 	.word	0x000e3bdc

000d536c <_ZN11SleepHelper14withAB1805_WDTER6AB1805>:
    SleepHelper &withAB1805_WDT(AB1805 &ab1805) {
   d536c:	b530      	push	{r4, r5, lr}
   d536e:	b089      	sub	sp, #36	; 0x24
   d5370:	4604      	mov	r4, r0
	    _M_invoker = &_My_handler::_M_invoke;
   d5372:	4b27      	ldr	r3, [pc, #156]	; (d5410 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xa4>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5374:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   d5376:	9303      	str	r3, [sp, #12]
   d5378:	460d      	mov	r5, r1
	    _M_manager = &_My_handler::_M_manager;
   d537a:	4b26      	ldr	r3, [pc, #152]	; (d5414 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xa8>)
   d537c:	9302      	str	r3, [sp, #8]
        wakeFunctions.add(fn); 
   d537e:	4669      	mov	r1, sp
   d5380:	a804      	add	r0, sp, #16
   d5382:	f7ff fcda 	bl	d4d3a <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d5386:	f8d4 0654 	ldr.w	r0, [r4, #1620]	; 0x654
   d538a:	f8d4 3658 	ldr.w	r3, [r4, #1624]	; 0x658
   d538e:	4298      	cmp	r0, r3
   d5390:	d02f      	beq.n	d53f2 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x86>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5392:	b110      	cbz	r0, d539a <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x2e>
   d5394:	a904      	add	r1, sp, #16
   d5396:	f7ff fcd0 	bl	d4d3a <_ZNSt8functionIFbRK17SystemSleepResultEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d539a:	f8d4 3654 	ldr.w	r3, [r4, #1620]	; 0x654
   d539e:	3310      	adds	r3, #16
   d53a0:	f8c4 3654 	str.w	r3, [r4, #1620]	; 0x654
    class function<_Res(_ArgTypes...)>
   d53a4:	a804      	add	r0, sp, #16
   d53a6:	f7ff fb69 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d53aa:	4668      	mov	r0, sp
   d53ac:	f7ff fb66 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d53b0:	4b19      	ldr	r3, [pc, #100]	; (d5418 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xac>)
   d53b2:	9303      	str	r3, [sp, #12]
        sleepOrResetFunctions.add(fn); 
   d53b4:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d53b6:	4b19      	ldr	r3, [pc, #100]	; (d541c <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0xb0>)
   d53b8:	9302      	str	r3, [sp, #8]
   d53ba:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d53bc:	9500      	str	r5, [sp, #0]
   d53be:	f7ff fcf8 	bl	d4db2 <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d53c2:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   d53c6:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   d53ca:	4298      	cmp	r0, r3
   d53cc:	d018      	beq.n	d5400 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x94>
   d53ce:	b110      	cbz	r0, d53d6 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x6a>
   d53d0:	a904      	add	r1, sp, #16
   d53d2:	f7ff fcee 	bl	d4db2 <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d53d6:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   d53da:	3310      	adds	r3, #16
   d53dc:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   d53e0:	a804      	add	r0, sp, #16
   d53e2:	f7ff fb4b 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d53e6:	4668      	mov	r0, sp
   d53e8:	f7ff fb48 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    }
   d53ec:	4620      	mov	r0, r4
   d53ee:	b009      	add	sp, #36	; 0x24
   d53f0:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d53f2:	4601      	mov	r1, r0
   d53f4:	aa04      	add	r2, sp, #16
   d53f6:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
   d53fa:	f7ff fe4f 	bl	d509c <_ZNSt6vectorISt8functionIFbRK17SystemSleepResultEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d53fe:	e7d1      	b.n	d53a4 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x38>
   d5400:	4601      	mov	r1, r0
   d5402:	aa04      	add	r2, sp, #16
   d5404:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   d5408:	f7ff ff68 	bl	d52dc <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d540c:	e7e8      	b.n	d53e0 <_ZN11SleepHelper14withAB1805_WDTER6AB1805+0x74>
   d540e:	bf00      	nop
   d5410:	000d4973 	.word	0x000d4973
   d5414:	000d4903 	.word	0x000d4903
   d5418:	000d4965 	.word	0x000d4965
   d541c:	000d491b 	.word	0x000d491b

000d5420 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d5420:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5424:	e9d0 7900 	ldrd	r7, r9, [r0]
   d5428:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   d542a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d542e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d5430:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   d5434:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d5438:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d543a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d543e:	d102      	bne.n	d5446 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d5440:	481a      	ldr	r0, [pc, #104]	; (d54ac <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   d5442:	f00b f99a 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d5446:	2c01      	cmp	r4, #1
   d5448:	4622      	mov	r2, r4
   d544a:	bf38      	it	cc
   d544c:	2201      	movcc	r2, #1
   d544e:	18a4      	adds	r4, r4, r2
   d5450:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5454:	d228      	bcs.n	d54a8 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5456:	b14c      	cbz	r4, d546c <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   d5458:	429c      	cmp	r4, r3
   d545a:	bf28      	it	cs
   d545c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d545e:	0120      	lsls	r0, r4, #4
   d5460:	9101      	str	r1, [sp, #4]
   d5462:	f7fe fe18 	bl	d4096 <_Znwj>
   d5466:	9901      	ldr	r1, [sp, #4]
   d5468:	4605      	mov	r5, r0
   d546a:	e000      	b.n	d546e <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   d546c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d546e:	eb15 000a 	adds.w	r0, r5, sl
   d5472:	d001      	beq.n	d5478 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   d5474:	f7ff fcac 	bl	d4dd0 <_ZNSt8functionIFbmEEC1ERKS1_>
   d5478:	4641      	mov	r1, r8
   d547a:	462a      	mov	r2, r5
   d547c:	4638      	mov	r0, r7
   d547e:	f7ff fcc8 	bl	d4e12 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d5482:	4649      	mov	r1, r9
   d5484:	f100 0210 	add.w	r2, r0, #16
   d5488:	4640      	mov	r0, r8
   d548a:	f7ff fcc2 	bl	d4e12 <_ZSt14__relocate_a_1IPSt8functionIFbmEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   d548e:	4680      	mov	r8, r0
	if (__p)
   d5490:	b117      	cbz	r7, d5498 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   d5492:	4638      	mov	r0, r7
   d5494:	f7fe fe03 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5498:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d549c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d54a0:	60b4      	str	r4, [r6, #8]
    }
   d54a2:	b002      	add	sp, #8
   d54a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d54a8:	461c      	mov	r4, r3
   d54aa:	e7d8      	b.n	d545e <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   d54ac:	000e3bdc 	.word	0x000e3bdc

000d54b0 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d54b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d54b4:	e9d0 8a00 	ldrd	r8, sl, [r0]
   d54b8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   d54ba:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d54be:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   d54c2:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   d54c6:	4607      	mov	r7, r0
   d54c8:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d54ca:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   d54ce:	d102      	bne.n	d54d6 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d54d0:	4825      	ldr	r0, [pc, #148]	; (d5568 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   d54d2:	f00b f952 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d54d6:	2c01      	cmp	r4, #1
   d54d8:	4622      	mov	r2, r4
   d54da:	bf38      	it	cc
   d54dc:	2201      	movcc	r2, #1
   d54de:	18a4      	adds	r4, r4, r2
   d54e0:	eba1 0608 	sub.w	r6, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d54e4:	d23d      	bcs.n	d5562 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d54e6:	b13c      	cbz	r4, d54f8 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   d54e8:	429c      	cmp	r4, r3
   d54ea:	bf28      	it	cs
   d54ec:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d54ee:	00e0      	lsls	r0, r4, #3
   d54f0:	f7fe fdd1 	bl	d4096 <_Znwj>
   d54f4:	4605      	mov	r5, r0
   d54f6:	e000      	b.n	d54fa <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   d54f8:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d54fa:	19ab      	adds	r3, r5, r6
   d54fc:	bf1c      	itt	ne
   d54fe:	e9db 0100 	ldrdne	r0, r1, [fp]
   d5502:	e9c3 0100 	strdne	r0, r1, [r3]
   d5506:	2300      	movs	r3, #0
      for (; __first != __last; ++__first, (void)++__cur)
   d5508:	eb08 0203 	add.w	r2, r8, r3
   d550c:	4591      	cmp	r9, r2
   d550e:	d00a      	beq.n	d5526 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
   d5510:	eb15 0c03 	adds.w	ip, r5, r3
   d5514:	bf18      	it	ne
   d5516:	e9d2 0100 	ldrdne	r0, r1, [r2]
   d551a:	f103 0308 	add.w	r3, r3, #8
   d551e:	bf18      	it	ne
   d5520:	e9cc 0100 	strdne	r0, r1, [ip]
   d5524:	e7f0      	b.n	d5508 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x58>
	      ++__new_finish;
   d5526:	3608      	adds	r6, #8
   d5528:	442e      	add	r6, r5
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   d552a:	4632      	mov	r2, r6
   d552c:	464b      	mov	r3, r9
      for (; __first != __last; ++__first, (void)++__cur)
   d552e:	4553      	cmp	r3, sl
   d5530:	f102 0208 	add.w	r2, r2, #8
   d5534:	d005      	beq.n	d5542 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x92>
   d5536:	e893 0003 	ldmia.w	r3, {r0, r1}
   d553a:	3308      	adds	r3, #8
   d553c:	e902 0003 	stmdb	r2, {r0, r1}
   d5540:	e7f5      	b.n	d552e <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
   d5542:	eba3 0309 	sub.w	r3, r3, r9
   d5546:	441e      	add	r6, r3
	if (__p)
   d5548:	f1b8 0f00 	cmp.w	r8, #0
   d554c:	d002      	beq.n	d5554 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
	::operator delete(__p);
   d554e:	4640      	mov	r0, r8
   d5550:	f7fe fda5 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d5554:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   d5558:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d555c:	60bc      	str	r4, [r7, #8]
    }
   d555e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5562:	461c      	mov	r4, r3
   d5564:	e7c3      	b.n	d54ee <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
   d5566:	bf00      	nop
   d5568:	000e3bdc 	.word	0x000e3bdc

000d556c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   d556c:	b510      	push	{r4, lr}
   d556e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d5570:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   d5574:	428c      	cmp	r4, r1
      vector<_Tp, _Alloc>::
   d5576:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d5578:	d008      	beq.n	d558c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d557a:	b11c      	cbz	r4, d5584 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x18>
   d557c:	e892 0003 	ldmia.w	r2, {r0, r1}
   d5580:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   d5584:	685a      	ldr	r2, [r3, #4]
   d5586:	3208      	adds	r2, #8
   d5588:	605a      	str	r2, [r3, #4]
      }
   d558a:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   d558c:	4621      	mov	r1, r4
   d558e:	f7ff ff8f 	bl	d54b0 <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
   d5592:	e7fa      	b.n	d558a <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x1e>

000d5594 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>:
    SleepHelper &withSleepReadyFunction(std::function<bool(AppCallbackState &, system_tick_t)> fn) {
   d5594:	b510      	push	{r4, lr}
   d5596:	4604      	mov	r4, r0
   d5598:	b086      	sub	sp, #24
        sleepReadyFunctions.add(fn); 
   d559a:	a802      	add	r0, sp, #8
   d559c:	f7ff fbeb 	bl	d4d76 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d55a0:	f8d4 06cc 	ldr.w	r0, [r4, #1740]	; 0x6cc
   d55a4:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
   d55a8:	4298      	cmp	r0, r3
   d55aa:	d018      	beq.n	d55de <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x4a>
   d55ac:	b110      	cbz	r0, d55b4 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x20>
   d55ae:	a902      	add	r1, sp, #8
   d55b0:	f7ff fbe1 	bl	d4d76 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEmEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d55b4:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
   d55b8:	3310      	adds	r3, #16
   d55ba:	f8c4 36cc 	str.w	r3, [r4, #1740]	; 0x6cc
    class AppCallbackState {
   d55be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d55c2:	2200      	movs	r2, #0
      { emplace_back(std::move(__x)); }
   d55c4:	4669      	mov	r1, sp
   d55c6:	f204 60d4 	addw	r0, r4, #1748	; 0x6d4
   d55ca:	e9cd 3200 	strd	r3, r2, [sp]
   d55ce:	f7ff ffcd 	bl	d556c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
   d55d2:	a802      	add	r0, sp, #8
   d55d4:	f7ff fa52 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    }
   d55d8:	4620      	mov	r0, r4
   d55da:	b006      	add	sp, #24
   d55dc:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   d55de:	4601      	mov	r1, r0
   d55e0:	aa02      	add	r2, sp, #8
   d55e2:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   d55e6:	f7ff fde9 	bl	d51bc <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEmEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d55ea:	e7e8      	b.n	d55be <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE+0x2a>

000d55ec <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>:
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   d55ec:	b570      	push	{r4, r5, r6, lr}
   d55ee:	b088      	sub	sp, #32
   d55f0:	4604      	mov	r4, r0
   d55f2:	461d      	mov	r5, r3
	    _M_invoker = &_My_handler::_M_invoke;
   d55f4:	4b1d      	ldr	r3, [pc, #116]	; (d566c <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x80>)
   d55f6:	9303      	str	r3, [sp, #12]
        wakeOrBootFunctions.add(fn); 
   d55f8:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d55fa:	4b1d      	ldr	r3, [pc, #116]	; (d5670 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x84>)
   d55fc:	9302      	str	r3, [sp, #8]
   d55fe:	a804      	add	r0, sp, #16
    SleepHelper &withPublishQueuePosixRK(std::chrono::milliseconds maxTimeToPublish = 0ms) {
   d5600:	4616      	mov	r6, r2
        wakeOrBootFunctions.add(fn); 
   d5602:	f7ff fbc7 	bl	d4d94 <_ZNSt8functionIFbiEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d5606:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
   d560a:	f8d4 36f4 	ldr.w	r3, [r4, #1780]	; 0x6f4
   d560e:	4298      	cmp	r0, r3
   d5610:	d025      	beq.n	d565e <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x72>
   d5612:	b110      	cbz	r0, d561a <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x2e>
   d5614:	a904      	add	r1, sp, #16
   d5616:	f7ff fbbd 	bl	d4d94 <_ZNSt8functionIFbiEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d561a:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   d561e:	3310      	adds	r3, #16
   d5620:	f8c4 36f0 	str.w	r3, [r4, #1776]	; 0x6f0
    class function<_Res(_ArgTypes...)>
   d5624:	a804      	add	r0, sp, #16
   d5626:	f7ff fa29 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d562a:	4668      	mov	r0, sp
   d562c:	f7ff fa26 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    _Function_base() : _M_manager(nullptr) { }
   d5630:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5632:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   d5634:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5636:	f7fe fd2e 	bl	d4096 <_Znwj>
   d563a:	b108      	cbz	r0, d5640 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x54>
   d563c:	e9c0 6500 	strd	r6, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d5640:	4b0c      	ldr	r3, [pc, #48]	; (d5674 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x88>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5642:	9004      	str	r0, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5644:	9307      	str	r3, [sp, #28]
                }
            }

            // This callback returns false when you can sleep, and true to stay awake, so reverse boolean
            return !canSleep;
        });
   d5646:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d5648:	4b0b      	ldr	r3, [pc, #44]	; (d5678 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x8c>)
   d564a:	9306      	str	r3, [sp, #24]
   d564c:	4620      	mov	r0, r4
   d564e:	f7ff ffa1 	bl	d5594 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
    class function<_Res(_ArgTypes...)>
   d5652:	a804      	add	r0, sp, #16
   d5654:	f7ff fa12 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>

        return *this;
    }
   d5658:	4620      	mov	r0, r4
   d565a:	b008      	add	sp, #32
   d565c:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   d565e:	4601      	mov	r1, r0
   d5660:	aa04      	add	r2, sp, #16
   d5662:	f204 60ec 	addw	r0, r4, #1772	; 0x6ec
   d5666:	f7ff fdf1 	bl	d524c <_ZNSt6vectorISt8functionIFbiEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d566a:	e7db      	b.n	d5624 <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE+0x38>
   d566c:	000d49f5 	.word	0x000d49f5
   d5670:	000d4933 	.word	0x000d4933
   d5674:	000d4983 	.word	0x000d4983
   d5678:	000d4a41 	.word	0x000d4a41

000d567c <_GLOBAL__sub_I_batteryContext>:
        val_(val) {
   d567c:	4b01      	ldr	r3, [pc, #4]	; (d5684 <_GLOBAL__sub_I_batteryContext+0x8>)
   d567e:	2201      	movs	r2, #1
   d5680:	701a      	strb	r2, [r3, #0]
        .withMinuteOfHour(60, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));

    // Data capture every 15 minutes during these same hours 
    SleepHelper::instance().getScheduleDataCapture()
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));
}
   d5682:	4770      	bx	lr
   d5684:	2003e411 	.word	0x2003e411

000d5688 <_Z17sleepHelperConfigv>:
void sleepHelperConfig() {
   d5688:	b530      	push	{r4, r5, lr}
   d568a:	b09f      	sub	sp, #124	; 0x7c
    SleepHelper::instance()
   d568c:	f004 fedc 	bl	da448 <_ZN11SleepHelper8instanceEv>
        minimumCellularOffTimeMs = timeMs.count();
   d5690:	4b87      	ldr	r3, [pc, #540]	; (d58b0 <_Z17sleepHelperConfigv+0x228>)
   d5692:	f8c0 37a0 	str.w	r3, [r0, #1952]	; 0x7a0
   d5696:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5698:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d569a:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   d569c:	9306      	str	r3, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d569e:	f7fe fcfa 	bl	d4096 <_Znwj>
   d56a2:	b118      	cbz	r0, d56ac <_Z17sleepHelperConfigv+0x24>
   d56a4:	4a83      	ldr	r2, [pc, #524]	; (d58b4 <_Z17sleepHelperConfigv+0x22c>)
   d56a6:	2300      	movs	r3, #0
   d56a8:	e9c0 2300 	strd	r2, r3, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d56ac:	4b82      	ldr	r3, [pc, #520]	; (d58b8 <_Z17sleepHelperConfigv+0x230>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ae:	9004      	str	r0, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d56b0:	9307      	str	r3, [sp, #28]
        maximumTimeToConnectFunctions.add(fn); 
   d56b2:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d56b4:	4b81      	ldr	r3, [pc, #516]	; (d58bc <_Z17sleepHelperConfigv+0x234>)
   d56b6:	9306      	str	r3, [sp, #24]
   d56b8:	a808      	add	r0, sp, #32
   d56ba:	f7ff fb89 	bl	d4dd0 <_ZNSt8functionIFbmEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d56be:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
   d56c2:	f8d4 370c 	ldr.w	r3, [r4, #1804]	; 0x70c
   d56c6:	4298      	cmp	r0, r3
   d56c8:	f000 80dc 	beq.w	d5884 <_Z17sleepHelperConfigv+0x1fc>
   d56cc:	b110      	cbz	r0, d56d4 <_Z17sleepHelperConfigv+0x4c>
   d56ce:	a908      	add	r1, sp, #32
   d56d0:	f7ff fb7e 	bl	d4dd0 <_ZNSt8functionIFbmEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   d56d4:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
   d56d8:	3310      	adds	r3, #16
   d56da:	f8c4 3708 	str.w	r3, [r4, #1800]	; 0x708
    class function<_Res(_ArgTypes...)>
   d56de:	a808      	add	r0, sp, #32
   d56e0:	f7ff f9cc 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d56e4:	a804      	add	r0, sp, #16
   d56e6:	f7ff f9c9 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
     * | Sydney, Australia   | "AEST-10AEDT,M10.1.0/02:00:00,M4.1.0/03:00:00" | 
     * | Adelaide, Australia | "ACST-9:30ACDT,M10.1.0/02:00:00,M4.1.0/03:00:00" |
     * 
     */
    SleepHelper &withTimeConfig(const char *tzConfig) {
        LocalTime::instance().withConfig(tzConfig);
   d56ea:	f001 ffd3 	bl	d7694 <_ZN9LocalTime8instanceEv>
   d56ee:	4974      	ldr	r1, [pc, #464]	; (d58c0 <_Z17sleepHelperConfigv+0x238>)
   d56f0:	4605      	mov	r5, r0
   d56f2:	a808      	add	r0, sp, #32
   d56f4:	f001 fef2 	bl	d74dc <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d56f8:	a909      	add	r1, sp, #36	; 0x24
   d56fa:	f105 0008 	add.w	r0, r5, #8
   d56fe:	f00a fa3a 	bl	dfb76 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d5702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5704:	61eb      	str	r3, [r5, #28]
class LocalTimePosixTimezone {
   d5706:	a90f      	add	r1, sp, #60	; 0x3c
   d5708:	f105 0020 	add.w	r0, r5, #32
   d570c:	f00a fa33 	bl	dfb76 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d5710:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d5712:	636b      	str	r3, [r5, #52]	; 0x34
class LocalTimeChange {
   d5714:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d5716:	63eb      	str	r3, [r5, #60]	; 0x3c
class LocalTimeHMS {
   d5718:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d571a:	646b      	str	r3, [r5, #68]	; 0x44
class LocalTimeChange {
   d571c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d571e:	64eb      	str	r3, [r5, #76]	; 0x4c
class LocalTimeHMS {
   d5720:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d5722:	656b      	str	r3, [r5, #84]	; 0x54
class LocalTimePosixTimezone {
   d5724:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   d5728:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
   d572c:	a808      	add	r0, sp, #32
   d572e:	f001 fb5f 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
            this->path = path;
   d5732:	4964      	ldr	r1, [pc, #400]	; (d58c4 <_Z17sleepHelperConfigv+0x23c>)
   d5734:	f204 7054 	addw	r0, r4, #1876	; 0x754
   d5738:	f00a fa3f 	bl	dfbba <_ZN6StringaSEPKc>
            this->eventHistoryKey = key;
   d573c:	4962      	ldr	r1, [pc, #392]	; (d58c8 <_Z17sleepHelperConfigv+0x240>)
   d573e:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   d5742:	f00a fa3a 	bl	dfbba <_ZN6StringaSEPKc>
	    _M_invoker = &_My_handler::_M_invoke;
   d5746:	4b61      	ldr	r3, [pc, #388]	; (d58cc <_Z17sleepHelperConfigv+0x244>)
   d5748:	9303      	str	r3, [sp, #12]
        dataCaptureFunctions.add(fn);
   d574a:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   d574c:	4b60      	ldr	r3, [pc, #384]	; (d58d0 <_Z17sleepHelperConfigv+0x248>)
   d574e:	9302      	str	r3, [sp, #8]
   d5750:	a808      	add	r0, sp, #32
   d5752:	f7ff fb01 	bl	d4d58 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d5756:	f8d4 06b4 	ldr.w	r0, [r4, #1716]	; 0x6b4
   d575a:	f8d4 36b8 	ldr.w	r3, [r4, #1720]	; 0x6b8
   d575e:	4298      	cmp	r0, r3
   d5760:	f000 8097 	beq.w	d5892 <_Z17sleepHelperConfigv+0x20a>
   d5764:	b110      	cbz	r0, d576c <_Z17sleepHelperConfigv+0xe4>
   d5766:	a908      	add	r1, sp, #32
   d5768:	f7ff faf6 	bl	d4d58 <_ZNSt8functionIFbRN11SleepHelper16AppCallbackStateEEEC1ERKS4_>
	    ++this->_M_impl._M_finish;
   d576c:	f8d4 36b4 	ldr.w	r3, [r4, #1716]	; 0x6b4
   d5770:	3310      	adds	r3, #16
   d5772:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
    class AppCallbackState {
   d5776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d577a:	2200      	movs	r2, #0
      { emplace_back(std::move(__x)); }
   d577c:	a904      	add	r1, sp, #16
   d577e:	f204 60bc 	addw	r0, r4, #1724	; 0x6bc
   d5782:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d5786:	f7ff fef1 	bl	d556c <_ZNSt6vectorIN11SleepHelper16AppCallbackStateESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
    class function<_Res(_ArgTypes...)>
   d578a:	a808      	add	r0, sp, #32
   d578c:	f7ff f976 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d5790:	4b50      	ldr	r3, [pc, #320]	; (d58d4 <_Z17sleepHelperConfigv+0x24c>)
   d5792:	9307      	str	r3, [sp, #28]
        sleepConfigurationFunctions.add(fn); 
   d5794:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   d5796:	4b50      	ldr	r3, [pc, #320]	; (d58d8 <_Z17sleepHelperConfigv+0x250>)
   d5798:	9306      	str	r3, [sp, #24]
   d579a:	a808      	add	r0, sp, #32
   d579c:	f7ff fabe 	bl	d4d1c <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d57a0:	f8d4 0648 	ldr.w	r0, [r4, #1608]	; 0x648
   d57a4:	f8d4 364c 	ldr.w	r3, [r4, #1612]	; 0x64c
   d57a8:	4298      	cmp	r0, r3
   d57aa:	d079      	beq.n	d58a0 <_Z17sleepHelperConfigv+0x218>
   d57ac:	b110      	cbz	r0, d57b4 <_Z17sleepHelperConfigv+0x12c>
   d57ae:	a908      	add	r1, sp, #32
   d57b0:	f7ff fab4 	bl	d4d1c <_ZNSt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEEC1ERKS7_>
	    ++this->_M_impl._M_finish;
   d57b4:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
   d57b8:	3310      	adds	r3, #16
   d57ba:	f8c4 3648 	str.w	r3, [r4, #1608]	; 0x648
    class function<_Res(_ArgTypes...)>
   d57be:	a808      	add	r0, sp, #32
   d57c0:	f7ff f95c 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   d57c4:	4b45      	ldr	r3, [pc, #276]	; (d58dc <_Z17sleepHelperConfigv+0x254>)
   d57c6:	930b      	str	r3, [sp, #44]	; 0x2c
        })
   d57c8:	a908      	add	r1, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   d57ca:	4b45      	ldr	r3, [pc, #276]	; (d58e0 <_Z17sleepHelperConfigv+0x258>)
   d57cc:	930a      	str	r3, [sp, #40]	; 0x28
   d57ce:	4620      	mov	r0, r4
   d57d0:	f7ff fee0 	bl	d5594 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
        .withAB1805_WDT(ab1805)                     // Stop the watchdog before sleep or reset, and resume after wake
   d57d4:	4943      	ldr	r1, [pc, #268]	; (d58e4 <_Z17sleepHelperConfigv+0x25c>)
   d57d6:	f7ff fdc9 	bl	d536c <_ZN11SleepHelper14withAB1805_WDTER6AB1805>
        .withPublishQueuePosixRK()                  // Manage both internal publish queueing and PublishQueuePosixRK
   d57da:	2300      	movs	r3, #0
   d57dc:	2200      	movs	r2, #0
   d57de:	f7ff ff05 	bl	d55ec <_ZN11SleepHelper23withPublishQueuePosixRKENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE>
    class function<_Res(_ArgTypes...)>
   d57e2:	a808      	add	r0, sp, #32
   d57e4:	f7ff f94a 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d57e8:	a804      	add	r0, sp, #16
   d57ea:	f7ff f947 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d57ee:	4668      	mov	r0, sp
   d57f0:	f7ff f944 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().getScheduleFull()
   d57f4:	f004 fe28 	bl	da448 <_ZN11SleepHelper8instanceEv>
     * @brief Get the full wake schedule
     * 
     * @return LocalTimeSchedule& 
     */
    LocalTimeSchedule &getScheduleFull() {
        return scheduleManager.getScheduleByName("full");
   d57f8:	493b      	ldr	r1, [pc, #236]	; (d58e8 <_Z17sleepHelperConfigv+0x260>)
   d57fa:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   d57fe:	f002 fdad 	bl	d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        .withMinuteOfHour(60, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));
   d5802:	493a      	ldr	r1, [pc, #232]	; (d58ec <_Z17sleepHelperConfigv+0x264>)
   d5804:	4604      	mov	r4, r0
   d5806:	4668      	mov	r0, sp
   d5808:	f001 fc8c 	bl	d7124 <_ZN12LocalTimeHMSC1EPKc>
   d580c:	4938      	ldr	r1, [pc, #224]	; (d58f0 <_Z17sleepHelperConfigv+0x268>)
   d580e:	a804      	add	r0, sp, #16
   d5810:	f001 fc88 	bl	d7124 <_ZN12LocalTimeHMSC1EPKc>
   d5814:	aa04      	add	r2, sp, #16
   d5816:	4669      	mov	r1, sp
   d5818:	a808      	add	r0, sp, #32
   d581a:	f7ff f9df 	bl	d4bdc <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d581e:	aa08      	add	r2, sp, #32
   d5820:	213c      	movs	r1, #60	; 0x3c
   d5822:	4620      	mov	r0, r4
   d5824:	f002 fca1 	bl	d816a <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d5828:	a808      	add	r0, sp, #32
   d582a:	f7ff f9eb 	bl	d4c04 <_ZN14LocalTimeRangeD1Ev>
   d582e:	a804      	add	r0, sp, #16
   d5830:	f001 fac6 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
   d5834:	4668      	mov	r0, sp
   d5836:	f001 fac3 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
    SleepHelper::instance().getScheduleDataCapture()
   d583a:	f004 fe05 	bl	da448 <_ZN11SleepHelper8instanceEv>
     * 
     * @return LocalTimeSchedule& 
     * 
     */
    LocalTimeSchedule &getScheduleDataCapture() {
        return scheduleManager.getScheduleByName("data");
   d583e:	492d      	ldr	r1, [pc, #180]	; (d58f4 <_Z17sleepHelperConfigv+0x26c>)
   d5840:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   d5844:	f002 fd8a 	bl	d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        .withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS("05:00:00"), LocalTimeHMS("21:59:59")));
   d5848:	4928      	ldr	r1, [pc, #160]	; (d58ec <_Z17sleepHelperConfigv+0x264>)
   d584a:	4604      	mov	r4, r0
   d584c:	4668      	mov	r0, sp
   d584e:	f001 fc69 	bl	d7124 <_ZN12LocalTimeHMSC1EPKc>
   d5852:	4927      	ldr	r1, [pc, #156]	; (d58f0 <_Z17sleepHelperConfigv+0x268>)
   d5854:	a804      	add	r0, sp, #16
   d5856:	f001 fc65 	bl	d7124 <_ZN12LocalTimeHMSC1EPKc>
   d585a:	aa04      	add	r2, sp, #16
   d585c:	4669      	mov	r1, sp
   d585e:	a808      	add	r0, sp, #32
   d5860:	f7ff f9bc 	bl	d4bdc <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d5864:	aa08      	add	r2, sp, #32
   d5866:	210f      	movs	r1, #15
   d5868:	4620      	mov	r0, r4
   d586a:	f002 fc7e 	bl	d816a <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d586e:	a808      	add	r0, sp, #32
   d5870:	f7ff f9c8 	bl	d4c04 <_ZN14LocalTimeRangeD1Ev>
   d5874:	a804      	add	r0, sp, #16
   d5876:	f001 faa3 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
   d587a:	4668      	mov	r0, sp
   d587c:	f001 faa0 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
}
   d5880:	b01f      	add	sp, #124	; 0x7c
   d5882:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d5884:	4601      	mov	r1, r0
   d5886:	aa08      	add	r2, sp, #32
   d5888:	f204 7004 	addw	r0, r4, #1796	; 0x704
   d588c:	f7ff fdc8 	bl	d5420 <_ZNSt6vectorISt8functionIFbmEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   d5890:	e725      	b.n	d56de <_Z17sleepHelperConfigv+0x56>
   d5892:	4601      	mov	r1, r0
   d5894:	aa08      	add	r2, sp, #32
   d5896:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   d589a:	f7ff fc47 	bl	d512c <_ZNSt6vectorISt8functionIFbRN11SleepHelper16AppCallbackStateEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
   d589e:	e76a      	b.n	d5776 <_Z17sleepHelperConfigv+0xee>
   d58a0:	4601      	mov	r1, r0
   d58a2:	aa08      	add	r2, sp, #32
   d58a4:	f204 6044 	addw	r0, r4, #1604	; 0x644
   d58a8:	f7ff fbb0 	bl	d500c <_ZNSt6vectorISt8functionIFbRN8particle24SystemSleepConfigurationERN11SleepHelper28SleepConfigurationParametersEEESaIS8_EE17_M_realloc_insertIJRKS8_EEEvN9__gnu_cxx17__normal_iteratorIPS8_SA_EEDpOT_>
   d58ac:	e787      	b.n	d57be <_Z17sleepHelperConfigv+0x136>
   d58ae:	bf00      	nop
   d58b0:	000493e0 	.word	0x000493e0
   d58b4:	000a1220 	.word	0x000a1220
   d58b8:	000d48ed 	.word	0x000d48ed
   d58bc:	000d4a05 	.word	0x000d4a05
   d58c0:	000e3bf6 	.word	0x000e3bf6
   d58c4:	000e3c1f 	.word	0x000e3c1f
   d58c8:	000e3c2f 	.word	0x000e3c2f
   d58cc:	000d4c49 	.word	0x000d4c49
   d58d0:	000d4947 	.word	0x000d4947
   d58d4:	000d4b35 	.word	0x000d4b35
   d58d8:	000d4951 	.word	0x000d4951
   d58dc:	000d49e5 	.word	0x000d49e5
   d58e0:	000d495b 	.word	0x000d495b
   d58e4:	2003e3bc 	.word	0x2003e3bc
   d58e8:	000e3c32 	.word	0x000e3c32
   d58ec:	000e3c37 	.word	0x000e3c37
   d58f0:	000e3c40 	.word	0x000e3c40
   d58f4:	000e4153 	.word	0x000e4153

000d58f8 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d58f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d58fa:	f007 fb4d 	bl	dcf98 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d58fe:	b1d8      	cbz	r0, d5938 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5900:	4b16      	ldr	r3, [pc, #88]	; (d595c <_Z18loadSystemDefaultsv+0x64>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5902:	4a17      	ldr	r2, [pc, #92]	; (d5960 <_Z18loadSystemDefaultsv+0x68>)
   d5904:	781b      	ldrb	r3, [r3, #0]
   d5906:	f88d 3000 	strb.w	r3, [sp]
   d590a:	4916      	ldr	r1, [pc, #88]	; (d5964 <_Z18loadSystemDefaultsv+0x6c>)
   d590c:	233c      	movs	r3, #60	; 0x3c
   d590e:	a802      	add	r0, sp, #8
   d5910:	f007 ff14 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d5914:	9c03      	ldr	r4, [sp, #12]
   d5916:	b17c      	cbz	r4, d5938 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d5918:	6863      	ldr	r3, [r4, #4]
   d591a:	3b01      	subs	r3, #1
   d591c:	6063      	str	r3, [r4, #4]
   d591e:	b95b      	cbnz	r3, d5938 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d5920:	6823      	ldr	r3, [r4, #0]
   d5922:	4620      	mov	r0, r4
   d5924:	689b      	ldr	r3, [r3, #8]
   d5926:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5928:	68a3      	ldr	r3, [r4, #8]
   d592a:	3b01      	subs	r3, #1
   d592c:	60a3      	str	r3, [r4, #8]
   d592e:	b91b      	cbnz	r3, d5938 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d5930:	6823      	ldr	r3, [r4, #0]
   d5932:	4620      	mov	r0, r4
   d5934:	68db      	ldr	r3, [r3, #12]
   d5936:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d5938:	490b      	ldr	r1, [pc, #44]	; (d5968 <_Z18loadSystemDefaultsv+0x70>)
   d593a:	480c      	ldr	r0, [pc, #48]	; (d596c <_Z18loadSystemDefaultsv+0x74>)
   d593c:	f7fe fd2e 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d5940:	4b0b      	ldr	r3, [pc, #44]	; (d5970 <_Z18loadSystemDefaultsv+0x78>)
   d5942:	2201      	movs	r2, #1
   d5944:	701a      	strb	r2, [r3, #0]
  sysStatus.currentConnectionLimit = 10;
  sysStatus.verboseMode = false;
   d5946:	4a0b      	ldr	r2, [pc, #44]	; (d5974 <_Z18loadSystemDefaultsv+0x7c>)
   d5948:	210a      	movs	r1, #10
   d594a:	e9c3 1201 	strd	r1, r2, [r3, #4]
  sysStatus.enableSleep = true;
  sysStatus.wakeTime = 6;
  sysStatus.sleepTime = 22;
  sysStatus.wateringDuration = 0;
  sysStatus.wateringThresholdPct = 0;
   d594e:	2200      	movs	r2, #0
   d5950:	60da      	str	r2, [r3, #12]
  sysStatus.wateringDuration = 0;
   d5952:	2200      	movs	r2, #0
   d5954:	611a      	str	r2, [r3, #16]
   d5956:	b004      	add	sp, #16
   d5958:	bd10      	pop	{r4, pc}
   d595a:	bf00      	nop
   d595c:	2003e412 	.word	0x2003e412
   d5960:	000e3c49 	.word	0x000e3c49
   d5964:	000e3b2d 	.word	0x000e3b2d
   d5968:	000e3c61 	.word	0x000e3c61
   d596c:	2003e560 	.word	0x2003e560
   d5970:	2003e458 	.word	0x2003e458
   d5974:	16060100 	.word	0x16060100

000d5978 <_ZNSt10_Hash_impl4hashIdEEjRKT_>:
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
	 size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }
   d5978:	4a01      	ldr	r2, [pc, #4]	; (d5980 <_ZNSt10_Hash_impl4hashIdEEjRKT_+0x8>)
   d597a:	2108      	movs	r1, #8
   d597c:	f00a bec2 	b.w	e0704 <_ZSt11_Hash_bytesPKvjj>
   d5980:	c70f6907 	.word	0xc70f6907

000d5984 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d5984:	4b01      	ldr	r3, [pc, #4]	; (d598c <_GLOBAL__sub_I_sysStatus+0x8>)
   d5986:	2201      	movs	r2, #1
   d5988:	701a      	strb	r2, [r3, #0]
   d598a:	4770      	bx	lr
   d598c:	2003e412 	.word	0x2003e412

000d5990 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d5990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5994:	ed2d 8b02 	vpush	{d8}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d5998:	4c4b      	ldr	r4, [pc, #300]	; (d5ac8 <_Z17storageObjectLoopv+0x138>)
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d599a:	b082      	sub	sp, #8
  if (Time.now() - lastCheckTime) {          // Check once a second
   d599c:	f00a fbc9 	bl	e0132 <_ZN9TimeClass3nowEv>
   d59a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   d59a4:	17c1      	asrs	r1, r0, #31
   d59a6:	4299      	cmp	r1, r3
   d59a8:	bf08      	it	eq
   d59aa:	4290      	cmpeq	r0, r2
   d59ac:	f000 8089 	beq.w	d5ac2 <_Z17storageObjectLoopv+0x132>
    size_t sysStatusHash =  std::hash<byte>{}(sysStatus.structuresVersion) + \
   d59b0:	4e46      	ldr	r6, [pc, #280]	; (d5acc <_Z17storageObjectLoopv+0x13c>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d59b2:	f00a fbbe 	bl	e0132 <_ZN9TimeClass3nowEv>
   d59b6:	6873      	ldr	r3, [r6, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d59b8:	7835      	ldrb	r5, [r6, #0]
                      std::hash<double>{}(sysStatus.wateringThresholdPct) + \
   d59ba:	ed96 8a03 	vldr	s16, [r6, #12]
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d59be:	17c1      	asrs	r1, r0, #31
   d59c0:	441d      	add	r5, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d59c2:	7a33      	ldrb	r3, [r6, #8]
   d59c4:	e9c4 0100 	strd	r0, r1, [r4]
   d59c8:	7a74      	ldrb	r4, [r6, #9]
   d59ca:	441d      	add	r5, r3
   d59cc:	4425      	add	r5, r4
                      std::hash<double>{}(sysStatus.wateringThresholdPct) + \
   d59ce:	ee18 0a10 	vmov	r0, s16
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d59d2:	7ab4      	ldrb	r4, [r6, #10]
   d59d4:	f00b fa4c 	bl	e0e70 <__aeabi_f2d>
   d59d8:	4425      	add	r5, r4
    {
      size_t
      operator()(double __val) const noexcept
      {
	// 0 and -0 both hash to zero.
	return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
   d59da:	eeb5 8a40 	vcmp.f32	s16, #0.0
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d59de:	7af4      	ldrb	r4, [r6, #11]
	return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
   d59e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d59e4:	e9cd 0100 	strd	r0, r1, [sp]
   d59e8:	4425      	add	r5, r4
   d59ea:	d060      	beq.n	d5aae <_Z17storageObjectLoopv+0x11e>
   d59ec:	4668      	mov	r0, sp
   d59ee:	f7ff ffc3 	bl	d5978 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
                      std::hash<int>{}(sysStatus.wateringDuration);
   d59f2:	6934      	ldr	r4, [r6, #16]
   d59f4:	4425      	add	r5, r4
   d59f6:	182c      	adds	r4, r5, r0
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d59f8:	4d35      	ldr	r5, [pc, #212]	; (d5ad0 <_Z17storageObjectLoopv+0x140>)
   d59fa:	682b      	ldr	r3, [r5, #0]
   d59fc:	429c      	cmp	r4, r3
   d59fe:	d058      	beq.n	d5ab2 <_Z17storageObjectLoopv+0x122>
      Log.info("sysStaus object stored and hash updated");
   d5a00:	4934      	ldr	r1, [pc, #208]	; (d5ad4 <_Z17storageObjectLoopv+0x144>)
   d5a02:	4835      	ldr	r0, [pc, #212]	; (d5ad8 <_Z17storageObjectLoopv+0x148>)
   d5a04:	f7fe fcca 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5a08:	4a30      	ldr	r2, [pc, #192]	; (d5acc <_Z17storageObjectLoopv+0x13c>)
   d5a0a:	4834      	ldr	r0, [pc, #208]	; (d5adc <_Z17storageObjectLoopv+0x14c>)
   d5a0c:	2314      	movs	r3, #20
   d5a0e:	2101      	movs	r1, #1
   d5a10:	f002 fda1 	bl	d8556 <_ZN6MB85RC9writeDataEjPKhj>
      returnValue = true;                           // In case I want to test whether values changed
   d5a14:	2701      	movs	r7, #1
      lastSysStatusHash = sysStatusHash;
   d5a16:	602c      	str	r4, [r5, #0]
    size_t currentHash =  std::hash<double>{}(current.internalTempC) + \
   d5a18:	4c31      	ldr	r4, [pc, #196]	; (d5ae0 <_Z17storageObjectLoopv+0x150>)
   d5a1a:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5a1e:	2200      	movs	r2, #0
   d5a20:	2300      	movs	r3, #0
   d5a22:	e9cd 0100 	strd	r0, r1, [sp]
   d5a26:	f00b fce3 	bl	e13f0 <__aeabi_dcmpeq>
   d5a2a:	46a0      	mov	r8, r4
   d5a2c:	2800      	cmp	r0, #0
   d5a2e:	d142      	bne.n	d5ab6 <_Z17storageObjectLoopv+0x126>
   d5a30:	4668      	mov	r0, sp
   d5a32:	f7ff ffa1 	bl	d5978 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d5a36:	f8d8 6008 	ldr.w	r6, [r8, #8]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d5a3a:	f898 300c 	ldrb.w	r3, [r8, #12]
   d5a3e:	4433      	add	r3, r6
   d5a40:	f8d8 6010 	ldr.w	r6, [r8, #16]
   d5a44:	4433      	add	r3, r6
   d5a46:	f898 6018 	ldrb.w	r6, [r8, #24]
   d5a4a:	4433      	add	r3, r6
   d5a4c:	181c      	adds	r4, r3, r0
                      std::hash<double>{}(current.soilMoisture) + \
   d5a4e:	e9d8 0108 	ldrd	r0, r1, [r8, #32]
	return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
   d5a52:	2200      	movs	r2, #0
   d5a54:	2300      	movs	r3, #0
   d5a56:	e9cd 0100 	strd	r0, r1, [sp]
   d5a5a:	f00b fcc9 	bl	e13f0 <__aeabi_dcmpeq>
   d5a5e:	bb60      	cbnz	r0, d5aba <_Z17storageObjectLoopv+0x12a>
   d5a60:	4668      	mov	r0, sp
   d5a62:	f7ff ff89 	bl	d5978 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
                      std::hash<byte>{}(current.wateringState) + \
   d5a66:	4404      	add	r4, r0
                      std::hash<double>{}(current.soilTempC);
   d5a68:	e9d8 010a 	ldrd	r0, r1, [r8, #40]	; 0x28
   d5a6c:	2200      	movs	r2, #0
   d5a6e:	2300      	movs	r3, #0
   d5a70:	e9cd 0100 	strd	r0, r1, [sp]
   d5a74:	f00b fcbc 	bl	e13f0 <__aeabi_dcmpeq>
   d5a78:	bb08      	cbnz	r0, d5abe <_Z17storageObjectLoopv+0x12e>
   d5a7a:	4668      	mov	r0, sp
   d5a7c:	f7ff ff7c 	bl	d5978 <_ZNSt10_Hash_impl4hashIdEEjRKT_>
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5a80:	4d18      	ldr	r5, [pc, #96]	; (d5ae4 <_Z17storageObjectLoopv+0x154>)
   d5a82:	682b      	ldr	r3, [r5, #0]
                      std::hash<double>{}(current.soilTempC);
   d5a84:	4404      	add	r4, r0
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d5a86:	429c      	cmp	r4, r3
   d5a88:	d00b      	beq.n	d5aa2 <_Z17storageObjectLoopv+0x112>
      Log.info("current object stored and hash updated");
   d5a8a:	4917      	ldr	r1, [pc, #92]	; (d5ae8 <_Z17storageObjectLoopv+0x158>)
   d5a8c:	4812      	ldr	r0, [pc, #72]	; (d5ad8 <_Z17storageObjectLoopv+0x148>)
   d5a8e:	f7fe fc85 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d5a92:	4a13      	ldr	r2, [pc, #76]	; (d5ae0 <_Z17storageObjectLoopv+0x150>)
   d5a94:	4811      	ldr	r0, [pc, #68]	; (d5adc <_Z17storageObjectLoopv+0x14c>)
   d5a96:	2330      	movs	r3, #48	; 0x30
   d5a98:	2150      	movs	r1, #80	; 0x50
   d5a9a:	f002 fd5c 	bl	d8556 <_ZN6MB85RC9writeDataEjPKhj>
      returnValue = true;
   d5a9e:	2701      	movs	r7, #1
      lastCurrentHash = currentHash;
   d5aa0:	602c      	str	r4, [r5, #0]
}
   d5aa2:	4638      	mov	r0, r7
   d5aa4:	b002      	add	sp, #8
   d5aa6:	ecbd 8b02 	vpop	{d8}
   d5aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5aae:	2000      	movs	r0, #0
   d5ab0:	e79f      	b.n	d59f2 <_Z17storageObjectLoopv+0x62>
  bool returnValue = false;
   d5ab2:	2700      	movs	r7, #0
   d5ab4:	e7b0      	b.n	d5a18 <_Z17storageObjectLoopv+0x88>
   d5ab6:	2000      	movs	r0, #0
   d5ab8:	e7bd      	b.n	d5a36 <_Z17storageObjectLoopv+0xa6>
   d5aba:	2000      	movs	r0, #0
   d5abc:	e7d3      	b.n	d5a66 <_Z17storageObjectLoopv+0xd6>
   d5abe:	2000      	movs	r0, #0
   d5ac0:	e7de      	b.n	d5a80 <_Z17storageObjectLoopv+0xf0>
   d5ac2:	2700      	movs	r7, #0
   d5ac4:	e7ed      	b.n	d5aa2 <_Z17storageObjectLoopv+0x112>
   d5ac6:	bf00      	nop
   d5ac8:	2003e418 	.word	0x2003e418
   d5acc:	2003e458 	.word	0x2003e458
   d5ad0:	2003e424 	.word	0x2003e424
   d5ad4:	000e3c79 	.word	0x000e3c79
   d5ad8:	2003e560 	.word	0x2003e560
   d5adc:	2003e3dc 	.word	0x2003e3dc
   d5ae0:	2003e428 	.word	0x2003e428
   d5ae4:	2003e420 	.word	0x2003e420
   d5ae8:	000e3ca1 	.word	0x000e3ca1

000d5aec <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d5aec:	b513      	push	{r0, r1, r4, lr}
  fram.begin();                                     // Initialize the FRAM module
   d5aee:	481d      	ldr	r0, [pc, #116]	; (d5b64 <_Z18storageObjectStartv+0x78>)
   d5af0:	f002 fca4 	bl	d843c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5af4:	481b      	ldr	r0, [pc, #108]	; (d5b64 <_Z18storageObjectStartv+0x78>)
   d5af6:	2301      	movs	r3, #1
   d5af8:	f10d 0207 	add.w	r2, sp, #7
   d5afc:	2100      	movs	r1, #0
   d5afe:	f002 fcdf 	bl	d84c0 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d5b02:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d5b06:	2c01      	cmp	r4, #1
   d5b08:	d018      	beq.n	d5b3c <_Z18storageObjectStartv+0x50>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d5b0a:	4816      	ldr	r0, [pc, #88]	; (d5b64 <_Z18storageObjectStartv+0x78>)
   d5b0c:	f002 fca0 	bl	d8450 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5b10:	4a15      	ldr	r2, [pc, #84]	; (d5b68 <_Z18storageObjectStartv+0x7c>)
   d5b12:	4814      	ldr	r0, [pc, #80]	; (d5b64 <_Z18storageObjectStartv+0x78>)
   d5b14:	2304      	movs	r3, #4
   d5b16:	2100      	movs	r1, #0
   d5b18:	f002 fd1d 	bl	d8556 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5b1c:	4811      	ldr	r0, [pc, #68]	; (d5b64 <_Z18storageObjectStartv+0x78>)
   d5b1e:	2301      	movs	r3, #1
   d5b20:	f10d 0207 	add.w	r2, sp, #7
   d5b24:	2100      	movs	r1, #0
   d5b26:	f002 fccb 	bl	d84c0 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d5b2a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d5b2e:	2c01      	cmp	r4, #1
   d5b30:	d115      	bne.n	d5b5e <_Z18storageObjectStartv+0x72>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d5b32:	f7ff fee1 	bl	d58f8 <_Z18loadSystemDefaultsv>
   d5b36:	4620      	mov	r0, r4
}
   d5b38:	b002      	add	sp, #8
   d5b3a:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d5b3c:	490b      	ldr	r1, [pc, #44]	; (d5b6c <_Z18storageObjectStartv+0x80>)
   d5b3e:	480c      	ldr	r0, [pc, #48]	; (d5b70 <_Z18storageObjectStartv+0x84>)
   d5b40:	f7fe fc2c 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d5b44:	4621      	mov	r1, r4
   d5b46:	4a0b      	ldr	r2, [pc, #44]	; (d5b74 <_Z18storageObjectStartv+0x88>)
   d5b48:	4806      	ldr	r0, [pc, #24]	; (d5b64 <_Z18storageObjectStartv+0x78>)
   d5b4a:	2314      	movs	r3, #20
   d5b4c:	f002 fcb8 	bl	d84c0 <_ZN6MB85RC8readDataEjPhj>
   d5b50:	4a09      	ldr	r2, [pc, #36]	; (d5b78 <_Z18storageObjectStartv+0x8c>)
   d5b52:	4804      	ldr	r0, [pc, #16]	; (d5b64 <_Z18storageObjectStartv+0x78>)
   d5b54:	2330      	movs	r3, #48	; 0x30
   d5b56:	2150      	movs	r1, #80	; 0x50
   d5b58:	f002 fcb2 	bl	d84c0 <_ZN6MB85RC8readDataEjPhj>
   d5b5c:	e7eb      	b.n	d5b36 <_Z18storageObjectStartv+0x4a>
      return false;
   d5b5e:	2000      	movs	r0, #0
   d5b60:	e7ea      	b.n	d5b38 <_Z18storageObjectStartv+0x4c>
   d5b62:	bf00      	nop
   d5b64:	2003e3dc 	.word	0x2003e3dc
   d5b68:	000e3cec 	.word	0x000e3cec
   d5b6c:	000e3cc8 	.word	0x000e3cc8
   d5b70:	2003e560 	.word	0x2003e560
   d5b74:	2003e458 	.word	0x2003e458
   d5b78:	2003e428 	.word	0x2003e428

000d5b7c <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d5b7c:	ee07 0a90 	vmov	s15, r0
   d5b80:	ed9f 7a09 	vldr	s14, [pc, #36]	; d5ba8 <_Z17tmp36TemperatureCi+0x2c>
   d5b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5b88:	ee67 7a87 	vmul.f32	s15, s15, s14
   d5b8c:	ed9f 7a07 	vldr	s14, [pc, #28]	; d5bac <_Z17tmp36TemperatureCi+0x30>
   d5b90:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d5b94:	eddf 7a06 	vldr	s15, [pc, #24]	; d5bb0 <_Z17tmp36TemperatureCi+0x34>
   d5b98:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d5b9c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d5ba0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5ba4:	4770      	bx	lr
   d5ba6:	bf00      	nop
   d5ba8:	454e4000 	.word	0x454e4000
   d5bac:	457ff000 	.word	0x457ff000
   d5bb0:	43fa0000 	.word	0x43fa0000
   d5bb4:	00000000 	.word	0x00000000

000d5bb8 <_Z16soilTemperarureCi>:
 * 
 */
float soilTemperarureC (int adcValue) {
  // c1, c2, c3 are calibration coefficients for a particular thermistor
  float Vex = 2500.0;                               // circuit excitation in mV
  float Vo = (((float)adcValue) * 3300 / 4095);
   d5bb8:	ee07 0a90 	vmov	s15, r0
float soilTemperarureC (int adcValue) {
   d5bbc:	b510      	push	{r4, lr}
  float Vo = (((float)adcValue) * 3300 / 4095);
   d5bbe:	ed9f 7a36 	vldr	s14, [pc, #216]	; d5c98 <_Z16soilTemperarureCi+0xe0>
   d5bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
float soilTemperarureC (int adcValue) {
   d5bc6:	ed2d 8b02 	vpush	{d8}
  float Vo = (((float)adcValue) * 3300 / 4095);
   d5bca:	ee67 7a87 	vmul.f32	s15, s15, s14
   d5bce:	ed9f 7a33 	vldr	s14, [pc, #204]	; d5c9c <_Z16soilTemperarureCi+0xe4>
   d5bd2:	eec7 8a87 	vdiv.f32	s17, s15, s14
float soilTemperarureC (int adcValue) {
   d5bd6:	b086      	sub	sp, #24
  float c1 = 0.901747748E-03, c2=2.489190310E-04, c3 = 2.043213857E-07; // Murata NCP18XH103F03RB
  float logRt,Rt,T;
  float R = 10000.0;                                // fixed resistor, 10K

  Rt=R/(Vex/Vo-1);            // calc thermistor resistance, therm next to gnd
   d5bd8:	ed9f 7a31 	vldr	s14, [pc, #196]	; d5ca0 <_Z16soilTemperarureCi+0xe8>
   d5bdc:	eec7 7a28 	vdiv.f32	s15, s14, s17
   d5be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d5be4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d5be8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; d5ca4 <_Z16soilTemperarureCi+0xec>
   d5bec:	ee87 8a27 	vdiv.f32	s16, s14, s15
  
  if (Rt>0) {
   d5bf0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d5bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5bf8:	dd46      	ble.n	d5c88 <_Z16soilTemperarureCi+0xd0>
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
   d5bfa:	eeb0 0a48 	vmov.f32	s0, s16
   d5bfe:	f00a fe47 	bl	e0890 <logf>
    logRt = log(Rt);                                //calc log of R
    T = ( 1.0 / (c1 + c2*logRt + c3*logRt*logRt*logRt ) ) - 273.15; // Steinhart Hart, 3nd order, Celcius
   d5c02:	eddf 7a29 	vldr	s15, [pc, #164]	; d5ca8 <_Z16soilTemperarureCi+0xf0>
   d5c06:	ed9f 7a29 	vldr	s14, [pc, #164]	; d5cac <_Z16soilTemperarureCi+0xf4>
   d5c0a:	eea0 7a27 	vfma.f32	s14, s0, s15
   d5c0e:	eddf 7a28 	vldr	s15, [pc, #160]	; d5cb0 <_Z16soilTemperarureCi+0xf8>
   d5c12:	ee60 7a27 	vmul.f32	s15, s0, s15
   d5c16:	ee67 7a80 	vmul.f32	s15, s15, s0
   d5c1a:	eea7 7a80 	vfma.f32	s14, s15, s0
   d5c1e:	ee17 0a10 	vmov	r0, s14
   d5c22:	f00b f925 	bl	e0e70 <__aeabi_f2d>
   d5c26:	4602      	mov	r2, r0
   d5c28:	460b      	mov	r3, r1
   d5c2a:	2000      	movs	r0, #0
   d5c2c:	4921      	ldr	r1, [pc, #132]	; (d5cb4 <_Z16soilTemperarureCi+0xfc>)
   d5c2e:	f00b faa1 	bl	e1174 <__aeabi_ddiv>
   d5c32:	a317      	add	r3, pc, #92	; (adr r3, d5c90 <_Z16soilTemperarureCi+0xd8>)
   d5c34:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c38:	f00a ffba 	bl	e0bb0 <__aeabi_dsub>
   d5c3c:	f00b fc68 	bl	e1510 <__aeabi_d2f>
   d5c40:	4604      	mov	r4, r0
  } 
  else T=-99.9;                                     // Invalid Reading

  delay(1000);
   d5c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5c46:	f007 fabb 	bl	dd1c0 <delay>
  Log.info("Vo: %4.2f mV  Rt= %4.2f mV  T = %4.2f", Vo, Rt, T);
   d5c4a:	ee18 0a90 	vmov	r0, s17
   d5c4e:	f00b f90f 	bl	e0e70 <__aeabi_f2d>
   d5c52:	4602      	mov	r2, r0
   d5c54:	460b      	mov	r3, r1
   d5c56:	4620      	mov	r0, r4
   d5c58:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d5c5c:	f00b f908 	bl	e0e70 <__aeabi_f2d>
   d5c60:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5c64:	ee18 0a10 	vmov	r0, s16
   d5c68:	f00b f902 	bl	e0e70 <__aeabi_f2d>
   d5c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5c70:	e9cd 0100 	strd	r0, r1, [sp]
   d5c74:	4910      	ldr	r1, [pc, #64]	; (d5cb8 <_Z16soilTemperarureCi+0x100>)
   d5c76:	4811      	ldr	r0, [pc, #68]	; (d5cbc <_Z16soilTemperarureCi+0x104>)
   d5c78:	f7fe fb90 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>

  return T;
}
   d5c7c:	ee00 4a10 	vmov	s0, r4
   d5c80:	b006      	add	sp, #24
   d5c82:	ecbd 8b02 	vpop	{d8}
   d5c86:	bd10      	pop	{r4, pc}
  else T=-99.9;                                     // Invalid Reading
   d5c88:	4c0d      	ldr	r4, [pc, #52]	; (d5cc0 <_Z16soilTemperarureCi+0x108>)
   d5c8a:	e7da      	b.n	d5c42 <_Z16soilTemperarureCi+0x8a>
   d5c8c:	f3af 8000 	nop.w
   d5c90:	66666666 	.word	0x66666666
   d5c94:	40711266 	.word	0x40711266
   d5c98:	454e4000 	.word	0x454e4000
   d5c9c:	457ff000 	.word	0x457ff000
   d5ca0:	451c4000 	.word	0x451c4000
   d5ca4:	461c4000 	.word	0x461c4000
   d5ca8:	39828159 	.word	0x39828159
   d5cac:	3a6c6344 	.word	0x3a6c6344
   d5cb0:	345b636f 	.word	0x345b636f
   d5cb4:	3ff00000 	.word	0x3ff00000
   d5cb8:	000e3d2e 	.word	0x000e3d2e
   d5cbc:	2003e560 	.word	0x2003e560
   d5cc0:	c2c7cccd 	.word	0xc2c7cccd

000d5cc4 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d5cc4:	b510      	push	{r4, lr}
   d5cc6:	b086      	sub	sp, #24
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d5cc8:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d5cca:	a902      	add	r1, sp, #8
   d5ccc:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d5cce:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d5cd0:	f007 f8d2 	bl	dce78 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5cd4:	b9b8      	cbnz	r0, d5d06 <_Z12batteryStatev+0x42>
        return ret;
    }
    return get(src, val);
   d5cd6:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d5cd8:	b10c      	cbz	r4, d5cde <_Z12batteryStatev+0x1a>
   d5cda:	6923      	ldr	r3, [r4, #16]
   d5cdc:	b923      	cbnz	r3, d5ce8 <_Z12batteryStatev+0x24>
   d5cde:	4a19      	ldr	r2, [pc, #100]	; (d5d44 <_Z12batteryStatev+0x80>)
   d5ce0:	2100      	movs	r1, #0
   d5ce2:	200a      	movs	r0, #10
   d5ce4:	f007 f888 	bl	dcdf8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d5ce8:	2300      	movs	r3, #0
   d5cea:	f8ad 300e 	strh.w	r3, [sp, #14]
   d5cee:	230c      	movs	r3, #12
   d5cf0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5cf4:	ab01      	add	r3, sp, #4
   d5cf6:	9304      	str	r3, [sp, #16]
   d5cf8:	2304      	movs	r3, #4
   d5cfa:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d5cfc:	aa03      	add	r2, sp, #12
   d5cfe:	6923      	ldr	r3, [r4, #16]
   d5d00:	2101      	movs	r1, #1
   d5d02:	4620      	mov	r0, r4
   d5d04:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.enableSleep) {                                        // Need to take these steps if we are sleeping
   d5d06:	4a10      	ldr	r2, [pc, #64]	; (d5d48 <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d5d08:	4c10      	ldr	r4, [pc, #64]	; (d5d4c <_Z12batteryStatev+0x88>)
  if (sysStatus.enableSleep) {                                        // Need to take these steps if we are sleeping
   d5d0a:	7a52      	ldrb	r2, [r2, #9]
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d5d0c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d5d0e:	bfa8      	it	ge
   d5d10:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d5d12:	7320      	strb	r0, [r4, #12]
  if (sysStatus.enableSleep) {                                        // Need to take these steps if we are sleeping
   d5d14:	b132      	cbz	r2, d5d24 <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d5d16:	480e      	ldr	r0, [pc, #56]	; (d5d50 <_Z12batteryStatev+0x8c>)
   d5d18:	f007 ff7e 	bl	ddc18 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d5d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5d20:	f007 fa4e 	bl	dd1c0 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5d24:	480a      	ldr	r0, [pc, #40]	; (d5d50 <_Z12batteryStatev+0x8c>)
   d5d26:	f007 ff17 	bl	ddb58 <_ZN9FuelGauge6getSoCEv>
   d5d2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d5d2e:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d5d32:	283c      	cmp	r0, #60	; 0x3c
   d5d34:	bfd4      	ite	le
   d5d36:	2000      	movle	r0, #0
   d5d38:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d5d3a:	edc4 7a02 	vstr	s15, [r4, #8]
}
   d5d3e:	b006      	add	sp, #24
   d5d40:	bd10      	pop	{r4, pc}
   d5d42:	bf00      	nop
   d5d44:	000dca29 	.word	0x000dca29
   d5d48:	2003e458 	.word	0x2003e458
   d5d4c:	2003e428 	.word	0x2003e428
   d5d50:	2003e46c 	.word	0x2003e46c

000d5d54 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d5d54:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5d56:	4c13      	ldr	r4, [pc, #76]	; (d5da4 <_Z16isItSafeToChargev+0x50>)
  PMIC pmic(true);
   d5d58:	2101      	movs	r1, #1
   d5d5a:	a801      	add	r0, sp, #4
   d5d5c:	f009 fd45 	bl	df7ea <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5d60:	e9d4 6700 	ldrd	r6, r7, [r4]
   d5d64:	2200      	movs	r2, #0
   d5d66:	2300      	movs	r3, #0
   d5d68:	4630      	mov	r0, r6
   d5d6a:	4639      	mov	r1, r7
   d5d6c:	f00b fb4a 	bl	e1404 <__aeabi_dcmplt>
   d5d70:	b930      	cbnz	r0, d5d80 <_Z16isItSafeToChargev+0x2c>
   d5d72:	4b0d      	ldr	r3, [pc, #52]	; (d5da8 <_Z16isItSafeToChargev+0x54>)
   d5d74:	2200      	movs	r2, #0
   d5d76:	4630      	mov	r0, r6
   d5d78:	4639      	mov	r1, r7
   d5d7a:	f00b fb61 	bl	e1440 <__aeabi_dcmpgt>
   d5d7e:	b158      	cbz	r0, d5d98 <_Z16isItSafeToChargev+0x44>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5d80:	a801      	add	r0, sp, #4
   d5d82:	f009 fdc5 	bl	df910 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d5d86:	2301      	movs	r3, #1
   d5d88:	7323      	strb	r3, [r4, #12]
    return false;
   d5d8a:	2400      	movs	r4, #0
  PMIC pmic(true);
   d5d8c:	a801      	add	r0, sp, #4
   d5d8e:	f009 fd3b 	bl	df808 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d5d92:	4620      	mov	r0, r4
   d5d94:	b002      	add	sp, #8
   d5d96:	bdd0      	pop	{r4, r6, r7, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d5d98:	a801      	add	r0, sp, #4
   d5d9a:	f009 fda2 	bl	df8e2 <_ZN4PMIC14enableChargingEv>
    return true;
   d5d9e:	2401      	movs	r4, #1
   d5da0:	e7f4      	b.n	d5d8c <_Z16isItSafeToChargev+0x38>
   d5da2:	bf00      	nop
   d5da4:	2003e428 	.word	0x2003e428
   d5da8:	40428000 	.word	0x40428000

000d5dac <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d5dac:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5dae:	4d19      	ldr	r5, [pc, #100]	; (d5e14 <_Z17getSignalStrengthv+0x68>)
   d5db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d5db2:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5db4:	ac04      	add	r4, sp, #16
   d5db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5dbc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5dc0:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d5dc4:	4914      	ldr	r1, [pc, #80]	; (d5e18 <_Z17getSignalStrengthv+0x6c>)
   d5dc6:	a80e      	add	r0, sp, #56	; 0x38
   d5dc8:	f007 fa4e 	bl	dd268 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d5dcc:	a80e      	add	r0, sp, #56	; 0x38
   d5dce:	f007 fa9e 	bl	dd30e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d5dd2:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d5dd4:	a80e      	add	r0, sp, #56	; 0x38
   d5dd6:	f007 fab5 	bl	dd344 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d5dda:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d5ddc:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d5de0:	f007 fae0 	bl	dd3a4 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5de4:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d5de6:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5dea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d5dee:	f00b f83f 	bl	e0e70 <__aeabi_f2d>
   d5df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5df6:	4628      	mov	r0, r5
   d5df8:	f00b f83a 	bl	e0e70 <__aeabi_f2d>
   d5dfc:	e9cd 0100 	strd	r0, r1, [sp]
   d5e00:	4a06      	ldr	r2, [pc, #24]	; (d5e1c <_Z17getSignalStrengthv+0x70>)
   d5e02:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d5e06:	4806      	ldr	r0, [pc, #24]	; (d5e20 <_Z17getSignalStrengthv+0x74>)
   d5e08:	2140      	movs	r1, #64	; 0x40
   d5e0a:	f007 f97d 	bl	dd108 <snprintf>
   d5e0e:	b019      	add	sp, #100	; 0x64
   d5e10:	bd30      	pop	{r4, r5, pc}
   d5e12:	bf00      	nop
   d5e14:	000e3dc4 	.word	0x000e3dc4
   d5e18:	2003e51c 	.word	0x2003e51c
   d5e1c:	000e3d54 	.word	0x000e3d54
   d5e20:	2003e166 	.word	0x2003e166

000d5e24 <_Z16takeMeasurementsv>:
    digitalWrite(SOIL_POWER_PIN, HIGH);             // Power up the soil sensor
   d5e24:	4b38      	ldr	r3, [pc, #224]	; (d5f08 <_Z16takeMeasurementsv+0xe4>)
bool takeMeasurements() { 
   d5e26:	b537      	push	{r0, r1, r2, r4, r5, lr}
    digitalWrite(SOIL_POWER_PIN, HIGH);             // Power up the soil sensor
   d5e28:	881d      	ldrh	r5, [r3, #0]
    current.internalTempC = tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5e2a:	4c38      	ldr	r4, [pc, #224]	; (d5f0c <_Z16takeMeasurementsv+0xe8>)
    digitalWrite(SOIL_POWER_PIN, HIGH);             // Power up the soil sensor
   d5e2c:	2101      	movs	r1, #1
   d5e2e:	4628      	mov	r0, r5
   d5e30:	f00a fba9 	bl	e0586 <digitalWrite>
    delay(2);
   d5e34:	2002      	movs	r0, #2
   d5e36:	f007 f9c3 	bl	dd1c0 <delay>
    current.internalTempC = tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5e3a:	4b35      	ldr	r3, [pc, #212]	; (d5f10 <_Z16takeMeasurementsv+0xec>)
   d5e3c:	8818      	ldrh	r0, [r3, #0]
   d5e3e:	f00a fbce 	bl	e05de <analogRead>
   d5e42:	f7ff fe9b 	bl	d5b7c <_Z17tmp36TemperatureCi>
   d5e46:	ee10 0a10 	vmov	r0, s0
   d5e4a:	f00b f811 	bl	e0e70 <__aeabi_f2d>
    snprintf(internalTempStr,sizeof(internalTempStr), "%4.2f C", current.internalTempC);
   d5e4e:	4a31      	ldr	r2, [pc, #196]	; (d5f14 <_Z16takeMeasurementsv+0xf0>)
    current.internalTempC = tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d5e50:	e9c4 0100 	strd	r0, r1, [r4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%4.2f C", current.internalTempC);
   d5e54:	e9cd 0100 	strd	r0, r1, [sp]
   d5e58:	2110      	movs	r1, #16
   d5e5a:	482f      	ldr	r0, [pc, #188]	; (d5f18 <_Z16takeMeasurementsv+0xf4>)
   d5e5c:	f007 f954 	bl	dd108 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d5e60:	4a2d      	ldr	r2, [pc, #180]	; (d5f18 <_Z16takeMeasurementsv+0xf4>)
   d5e62:	492e      	ldr	r1, [pc, #184]	; (d5f1c <_Z16takeMeasurementsv+0xf8>)
   d5e64:	482e      	ldr	r0, [pc, #184]	; (d5f20 <_Z16takeMeasurementsv+0xfc>)
   d5e66:	f7fe fa99 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    current.soilTempC = soilTemperarureC(analogRead(SOIL_TEMP_PIN));
   d5e6a:	4b2e      	ldr	r3, [pc, #184]	; (d5f24 <_Z16takeMeasurementsv+0x100>)
   d5e6c:	8818      	ldrh	r0, [r3, #0]
   d5e6e:	f00a fbb6 	bl	e05de <analogRead>
   d5e72:	f7ff fea1 	bl	d5bb8 <_Z16soilTemperarureCi>
   d5e76:	ee10 0a10 	vmov	r0, s0
   d5e7a:	f00a fff9 	bl	e0e70 <__aeabi_f2d>
    snprintf(soilTempStr,sizeof(soilTempStr), "%4.2f C", current.soilTempC);
   d5e7e:	4a25      	ldr	r2, [pc, #148]	; (d5f14 <_Z16takeMeasurementsv+0xf0>)
    current.soilTempC = soilTemperarureC(analogRead(SOIL_TEMP_PIN));
   d5e80:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    snprintf(soilTempStr,sizeof(soilTempStr), "%4.2f C", current.soilTempC);
   d5e84:	e9cd 0100 	strd	r0, r1, [sp]
   d5e88:	2110      	movs	r1, #16
   d5e8a:	4827      	ldr	r0, [pc, #156]	; (d5f28 <_Z16takeMeasurementsv+0x104>)
   d5e8c:	f007 f93c 	bl	dd108 <snprintf>
    Log.info("Soil Temperature is %s",soilTempStr);
   d5e90:	4a25      	ldr	r2, [pc, #148]	; (d5f28 <_Z16takeMeasurementsv+0x104>)
   d5e92:	4926      	ldr	r1, [pc, #152]	; (d5f2c <_Z16takeMeasurementsv+0x108>)
   d5e94:	4822      	ldr	r0, [pc, #136]	; (d5f20 <_Z16takeMeasurementsv+0xfc>)
   d5e96:	f7fe fa81 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    current.soilMoisture = map(analogRead(SOIL_MOISTURE_PIN),0,3722,0,100);        // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5e9a:	4b25      	ldr	r3, [pc, #148]	; (d5f30 <_Z16takeMeasurementsv+0x10c>)
   d5e9c:	8818      	ldrh	r0, [r3, #0]
   d5e9e:	f00a fb9e 	bl	e05de <analogRead>
   d5ea2:	2364      	movs	r3, #100	; 0x64
   d5ea4:	9300      	str	r3, [sp, #0]
   d5ea6:	2300      	movs	r3, #0
   d5ea8:	4619      	mov	r1, r3
   d5eaa:	f640 628a 	movw	r2, #3722	; 0xe8a
   d5eae:	f007 f97b 	bl	dd1a8 <_Z3mapiiiii>
   d5eb2:	f00a ffcb 	bl	e0e4c <__aeabi_i2d>
    snprintf(soilMoistureStr,sizeof(soilMoistureStr), "%4.2f%%", current.soilMoisture);
   d5eb6:	4a1f      	ldr	r2, [pc, #124]	; (d5f34 <_Z16takeMeasurementsv+0x110>)
    current.soilMoisture = map(analogRead(SOIL_MOISTURE_PIN),0,3722,0,100);        // Sensor puts out 0-3V for 0% to 100% soil moisuture
   d5eb8:	e9c4 0108 	strd	r0, r1, [r4, #32]
    snprintf(soilMoistureStr,sizeof(soilMoistureStr), "%4.2f%%", current.soilMoisture);
   d5ebc:	e9cd 0100 	strd	r0, r1, [sp]
   d5ec0:	2110      	movs	r1, #16
   d5ec2:	481d      	ldr	r0, [pc, #116]	; (d5f38 <_Z16takeMeasurementsv+0x114>)
   d5ec4:	f007 f920 	bl	dd108 <snprintf>
    Log.info("Soil Moisture is %s",soilMoistureStr);
   d5ec8:	4a1b      	ldr	r2, [pc, #108]	; (d5f38 <_Z16takeMeasurementsv+0x114>)
   d5eca:	491c      	ldr	r1, [pc, #112]	; (d5f3c <_Z16takeMeasurementsv+0x118>)
   d5ecc:	4814      	ldr	r0, [pc, #80]	; (d5f20 <_Z16takeMeasurementsv+0xfc>)
   d5ece:	f7fe fa65 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    digitalWrite(SOIL_POWER_PIN, LOW);              // Analog measurements complete power down the soil sensor
   d5ed2:	4628      	mov	r0, r5
   d5ed4:	2100      	movs	r1, #0
   d5ed6:	f00a fb56 	bl	e0586 <digitalWrite>
    if (current.soilMoisture < sysStatus.wateringThresholdPct) current.wateringState = 1;
   d5eda:	4b19      	ldr	r3, [pc, #100]	; (d5f40 <_Z16takeMeasurementsv+0x11c>)
   d5edc:	68d8      	ldr	r0, [r3, #12]
   d5ede:	f00a ffc7 	bl	e0e70 <__aeabi_f2d>
   d5ee2:	4602      	mov	r2, r0
   d5ee4:	460b      	mov	r3, r1
   d5ee6:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   d5eea:	f00b fa8b 	bl	e1404 <__aeabi_dcmplt>
   d5eee:	3800      	subs	r0, #0
   d5ef0:	bf18      	it	ne
   d5ef2:	2001      	movne	r0, #1
   d5ef4:	7620      	strb	r0, [r4, #24]
    batteryState();
   d5ef6:	f7ff fee5 	bl	d5cc4 <_Z12batteryStatev>
    isItSafeToCharge();
   d5efa:	f7ff ff2b 	bl	d5d54 <_Z16isItSafeToChargev>
    getSignalStrength();
   d5efe:	f7ff ff55 	bl	d5dac <_Z17getSignalStrengthv>
}
   d5f02:	2001      	movs	r0, #1
   d5f04:	b003      	add	sp, #12
   d5f06:	bd30      	pop	{r4, r5, pc}
   d5f08:	000e3992 	.word	0x000e3992
   d5f0c:	2003e428 	.word	0x2003e428
   d5f10:	000e3996 	.word	0x000e3996
   d5f14:	000e3d6d 	.word	0x000e3d6d
   d5f18:	2003e156 	.word	0x2003e156
   d5f1c:	000e3d75 	.word	0x000e3d75
   d5f20:	2003e560 	.word	0x2003e560
   d5f24:	000e3994 	.word	0x000e3994
   d5f28:	2003e1b6 	.word	0x2003e1b6
   d5f2c:	000e3d90 	.word	0x000e3d90
   d5f30:	000e3990 	.word	0x000e3990
   d5f34:	000e3da7 	.word	0x000e3da7
   d5f38:	2003e1a6 	.word	0x2003e1a6
   d5f3c:	000e3daf 	.word	0x000e3daf
   d5f40:	2003e458 	.word	0x2003e458

000d5f44 <_GLOBAL__sub_I_fuelGauge>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d5f44:	4801      	ldr	r0, [pc, #4]	; (d5f4c <_GLOBAL__sub_I_fuelGauge+0x8>)
   d5f46:	2100      	movs	r1, #0
   d5f48:	f007 bdb8 	b.w	ddabc <_ZN9FuelGaugeC1Eb>
   d5f4c:	2003e46c 	.word	0x2003e46c

000d5f50 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5f50:	4770      	bx	lr

000d5f52 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5f52:	b510      	push	{r4, lr}
}
   d5f54:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5f56:	4604      	mov	r4, r0
}
   d5f58:	f00a fbd2 	bl	e0700 <_ZdlPvj>
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	bd10      	pop	{r4, pc}

000d5f60 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5f60:	b40e      	push	{r1, r2, r3}
   d5f62:	b510      	push	{r4, lr}
   d5f64:	b08d      	sub	sp, #52	; 0x34
   d5f66:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5f68:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5f6a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5f6e:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5f70:	2300      	movs	r3, #0
   d5f72:	2020      	movs	r0, #32
   d5f74:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5f78:	e9cd 4200 	strd	r4, r2, [sp]
   d5f7c:	2001      	movs	r0, #1
   d5f7e:	aa04      	add	r2, sp, #16
   d5f80:	f006 ff5a 	bl	dce38 <log_message_v>
}
   d5f84:	b00d      	add	sp, #52	; 0x34
   d5f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5f8a:	b003      	add	sp, #12
   d5f8c:	4770      	bx	lr

000d5f8e <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d5f8e:	b40e      	push	{r1, r2, r3}
   d5f90:	b510      	push	{r4, lr}
   d5f92:	b08d      	sub	sp, #52	; 0x34
   d5f94:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5f96:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5f98:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5f9c:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5f9e:	2300      	movs	r3, #0
   d5fa0:	2020      	movs	r0, #32
   d5fa2:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5fa6:	e9cd 4200 	strd	r4, r2, [sp]
   d5faa:	2032      	movs	r0, #50	; 0x32
   d5fac:	aa04      	add	r2, sp, #16
   d5fae:	f006 ff43 	bl	dce38 <log_message_v>
}
   d5fb2:	b00d      	add	sp, #52	; 0x34
   d5fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5fb8:	b003      	add	sp, #12
   d5fba:	4770      	bx	lr

000d5fbc <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	7202      	strb	r2, [r0, #8]
   d5fc0:	22ff      	movs	r2, #255	; 0xff
   d5fc2:	8142      	strh	r2, [r0, #10]
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d5fca:	6142      	str	r2, [r0, #20]
   d5fcc:	7602      	strb	r2, [r0, #24]
   d5fce:	61c2      	str	r2, [r0, #28]
    instance = this;
   d5fd0:	4a02      	ldr	r2, [pc, #8]	; (d5fdc <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5fd2:	4c03      	ldr	r4, [pc, #12]	; (d5fe0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d5fd4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5fd6:	e9c0 4100 	strd	r4, r1, [r0]
}
   d5fda:	bd10      	pop	{r4, pc}
   d5fdc:	2003e478 	.word	0x2003e478
   d5fe0:	000e3ff0 	.word	0x000e3ff0

000d5fe4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d5fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5fe8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d5fec:	4604      	mov	r4, r0
   d5fee:	4689      	mov	r9, r1
   d5ff0:	4616      	mov	r6, r2
   d5ff2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d5ff4:	f1b8 0f00 	cmp.w	r8, #0
   d5ff8:	d002      	beq.n	d6000 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d5ffa:	6840      	ldr	r0, [r0, #4]
   d5ffc:	f007 fea6 	bl	ddd4c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6000:	7a21      	ldrb	r1, [r4, #8]
   d6002:	6860      	ldr	r0, [r4, #4]
   d6004:	f007 fe7f 	bl	ddd06 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6008:	6860      	ldr	r0, [r4, #4]
   d600a:	6803      	ldr	r3, [r0, #0]
   d600c:	4649      	mov	r1, r9
   d600e:	689b      	ldr	r3, [r3, #8]
   d6010:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d6012:	6860      	ldr	r0, [r4, #4]
   d6014:	2100      	movs	r1, #0
   d6016:	f007 fe95 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d601a:	4605      	mov	r5, r0
   d601c:	bb00      	cbnz	r0, d6060 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d601e:	2301      	movs	r3, #1
   d6020:	7a21      	ldrb	r1, [r4, #8]
   d6022:	6860      	ldr	r0, [r4, #4]
   d6024:	463a      	mov	r2, r7
   d6026:	f007 fe5c 	bl	ddce2 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d602a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d602c:	4603      	mov	r3, r0
        if (count == num) {
   d602e:	d109      	bne.n	d6044 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d6030:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d6032:	42be      	cmp	r6, r7
   d6034:	d01c      	beq.n	d6070 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d6036:	6860      	ldr	r0, [r4, #4]
   d6038:	6803      	ldr	r3, [r0, #0]
   d603a:	695b      	ldr	r3, [r3, #20]
   d603c:	4798      	blx	r3
   d603e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d6042:	e7f6      	b.n	d6032 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d6044:	490b      	ldr	r1, [pc, #44]	; (d6074 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d6046:	480c      	ldr	r0, [pc, #48]	; (d6078 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6048:	464a      	mov	r2, r9
   d604a:	f7ff ffa0 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d604e:	f1b8 0f00 	cmp.w	r8, #0
   d6052:	d002      	beq.n	d605a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d6054:	6860      	ldr	r0, [r4, #4]
   d6056:	f007 fe82 	bl	ddd5e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d605a:	4628      	mov	r0, r5
   d605c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d6060:	4603      	mov	r3, r0
   d6062:	4906      	ldr	r1, [pc, #24]	; (d607c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d6064:	4804      	ldr	r0, [pc, #16]	; (d6078 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6066:	464a      	mov	r2, r9
   d6068:	f7ff ff91 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d606c:	2500      	movs	r5, #0
   d606e:	e7ee      	b.n	d604e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d6070:	2501      	movs	r5, #1
   d6072:	e7ec      	b.n	d604e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d6074:	000e3dec 	.word	0x000e3dec
   d6078:	2003e474 	.word	0x2003e474
   d607c:	000e3e11 	.word	0x000e3e11

000d6080 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d6080:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d6082:	9300      	str	r3, [sp, #0]
   d6084:	2301      	movs	r3, #1
   d6086:	f7ff ffad 	bl	d5fe4 <_ZN6AB180513readRegistersEhPhjb>
}
   d608a:	b003      	add	sp, #12
   d608c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6090 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d6090:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d6092:	8943      	ldrh	r3, [r0, #10]
   d6094:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d6096:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d6098:	d010      	beq.n	d60bc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d609a:	4e19      	ldr	r6, [pc, #100]	; (d6100 <_ZN6AB180510detectChipEv+0x70>)
   d609c:	4d19      	ldr	r5, [pc, #100]	; (d6104 <_ZN6AB180510detectChipEv+0x74>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d609e:	f006 fccb 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d60a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d60a6:	d209      	bcs.n	d60bc <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d60a8:	8960      	ldrh	r0, [r4, #10]
   d60aa:	f00a fa85 	bl	e05b8 <digitalRead>
   d60ae:	2801      	cmp	r0, #1
   d60b0:	d004      	beq.n	d60bc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d60b2:	4631      	mov	r1, r6
   d60b4:	4628      	mov	r0, r5
   d60b6:	f7fe f971 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d60ba:	e7f0      	b.n	d609e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d60bc:	2301      	movs	r3, #1
   d60be:	f10d 0207 	add.w	r2, sp, #7
   d60c2:	2128      	movs	r1, #40	; 0x28
   d60c4:	4620      	mov	r0, r4
   d60c6:	f7ff ffdb 	bl	d6080 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d60ca:	b930      	cbnz	r0, d60da <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d60cc:	480d      	ldr	r0, [pc, #52]	; (d6104 <_ZN6AB180510detectChipEv+0x74>)
   d60ce:	490e      	ldr	r1, [pc, #56]	; (d6108 <_ZN6AB180510detectChipEv+0x78>)
   d60d0:	f7fe f964 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d60d4:	2000      	movs	r0, #0
}
   d60d6:	b002      	add	sp, #8
   d60d8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d60da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d60de:	2b18      	cmp	r3, #24
   d60e0:	d1f4      	bne.n	d60cc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d60e2:	2301      	movs	r3, #1
   d60e4:	f10d 0207 	add.w	r2, sp, #7
   d60e8:	2129      	movs	r1, #41	; 0x29
   d60ea:	4620      	mov	r0, r4
   d60ec:	f7ff ffc8 	bl	d6080 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d60f0:	2800      	cmp	r0, #0
   d60f2:	d0eb      	beq.n	d60cc <_ZN6AB180510detectChipEv+0x3c>
   d60f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d60f8:	2b05      	cmp	r3, #5
   d60fa:	d1e7      	bne.n	d60cc <_ZN6AB180510detectChipEv+0x3c>
   d60fc:	e7eb      	b.n	d60d6 <_ZN6AB180510detectChipEv+0x46>
   d60fe:	bf00      	nop
   d6100:	000e3e35 	.word	0x000e3e35
   d6104:	2003e474 	.word	0x2003e474
   d6108:	000e3e4a 	.word	0x000e3e4a

000d610c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6110:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d6114:	4604      	mov	r4, r0
   d6116:	460f      	mov	r7, r1
   d6118:	4615      	mov	r5, r2
   d611a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d611c:	f1b8 0f00 	cmp.w	r8, #0
   d6120:	d002      	beq.n	d6128 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d6122:	6840      	ldr	r0, [r0, #4]
   d6124:	f007 fe12 	bl	ddd4c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6128:	7a21      	ldrb	r1, [r4, #8]
   d612a:	6860      	ldr	r0, [r4, #4]
   d612c:	f007 fdeb 	bl	ddd06 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6130:	6860      	ldr	r0, [r4, #4]
   d6132:	6803      	ldr	r3, [r0, #0]
   d6134:	4639      	mov	r1, r7
   d6136:	689b      	ldr	r3, [r3, #8]
   d6138:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d613a:	442e      	add	r6, r5
   d613c:	42b5      	cmp	r5, r6
   d613e:	6860      	ldr	r0, [r4, #4]
   d6140:	d005      	beq.n	d614e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d6142:	6803      	ldr	r3, [r0, #0]
   d6144:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6148:	689b      	ldr	r3, [r3, #8]
   d614a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d614c:	e7f6      	b.n	d613c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d614e:	2101      	movs	r1, #1
   d6150:	f007 fdf8 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6154:	4603      	mov	r3, r0
   d6156:	b170      	cbz	r0, d6176 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d6158:	4908      	ldr	r1, [pc, #32]	; (d617c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d615a:	4809      	ldr	r0, [pc, #36]	; (d6180 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d615c:	463a      	mov	r2, r7
   d615e:	f7ff ff16 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6162:	2500      	movs	r5, #0
    }

    if (lock) {
   d6164:	f1b8 0f00 	cmp.w	r8, #0
   d6168:	d002      	beq.n	d6170 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d616a:	6860      	ldr	r0, [r4, #4]
   d616c:	f007 fdf7 	bl	ddd5e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d6170:	4628      	mov	r0, r5
   d6172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d6176:	2501      	movs	r5, #1
   d6178:	e7f4      	b.n	d6164 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d617a:	bf00      	nop
   d617c:	000e3e57 	.word	0x000e3e57
   d6180:	2003e474 	.word	0x2003e474

000d6184 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d6184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6186:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d618a:	9300      	str	r3, [sp, #0]
   d618c:	f10d 020f 	add.w	r2, sp, #15
   d6190:	2301      	movs	r3, #1
   d6192:	f7ff ffbb 	bl	d610c <_ZN6AB180514writeRegistersEhPKhjb>
}
   d6196:	b005      	add	sp, #20
   d6198:	f85d fb04 	ldr.w	pc, [sp], #4

000d619c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d619e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d61a0:	460c      	mov	r4, r1
   d61a2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d61a4:	491a      	ldr	r1, [pc, #104]	; (d6210 <_ZN6AB18056setWDTEi+0x74>)
   d61a6:	481b      	ldr	r0, [pc, #108]	; (d6214 <_ZN6AB18056setWDTEi+0x78>)
   d61a8:	f7fe f8f8 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d61ac:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d61ae:	bfb8      	it	lt
   d61b0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d61b2:	b97c      	cbnz	r4, d61d4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d61b4:	2301      	movs	r3, #1
   d61b6:	4622      	mov	r2, r4
   d61b8:	211b      	movs	r1, #27
   d61ba:	4628      	mov	r0, r5
   d61bc:	f7ff ffe2 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d61c0:	4915      	ldr	r1, [pc, #84]	; (d6218 <_ZN6AB18056setWDTEi+0x7c>)
   d61c2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d61c4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d61c6:	4813      	ldr	r0, [pc, #76]	; (d6214 <_ZN6AB18056setWDTEi+0x78>)
   d61c8:	f7ff feca 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d61cc:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d61ce:	616c      	str	r4, [r5, #20]
}
   d61d0:	4630      	mov	r0, r6
   d61d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d61d4:	2c03      	cmp	r4, #3
   d61d6:	dd19      	ble.n	d620c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d61d8:	10a7      	asrs	r7, r4, #2
   d61da:	2f1f      	cmp	r7, #31
   d61dc:	bfa8      	it	ge
   d61de:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d61e0:	00ba      	lsls	r2, r7, #2
   d61e2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d61e6:	2301      	movs	r3, #1
   d61e8:	b2d2      	uxtb	r2, r2
   d61ea:	211b      	movs	r1, #27
   d61ec:	4628      	mov	r0, r5
   d61ee:	f7ff ffc9 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d61f2:	463a      	mov	r2, r7
   d61f4:	4603      	mov	r3, r0
   d61f6:	4909      	ldr	r1, [pc, #36]	; (d621c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d61f8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d61fa:	4806      	ldr	r0, [pc, #24]	; (d6214 <_ZN6AB18056setWDTEi+0x78>)
   d61fc:	f7ff feb0 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6200:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6204:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d6206:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6208:	616f      	str	r7, [r5, #20]
   d620a:	e7e1      	b.n	d61d0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d620c:	2701      	movs	r7, #1
   d620e:	e7e7      	b.n	d61e0 <_ZN6AB18056setWDTEi+0x44>
   d6210:	000e3e7c 	.word	0x000e3e7c
   d6214:	2003e474 	.word	0x2003e474
   d6218:	000e3e86 	.word	0x000e3e86
   d621c:	000e3ea2 	.word	0x000e3ea2

000d6220 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6220:	460b      	mov	r3, r1
    if (instance) {
   d6222:	4907      	ldr	r1, [pc, #28]	; (d6240 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6224:	4602      	mov	r2, r0
    if (instance) {
   d6226:	6808      	ldr	r0, [r1, #0]
   d6228:	b148      	cbz	r0, d623e <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d622a:	2b00      	cmp	r3, #0
   d622c:	bf08      	it	eq
   d622e:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d6232:	d104      	bne.n	d623e <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d6234:	68c3      	ldr	r3, [r0, #12]
   d6236:	b113      	cbz	r3, d623e <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d6238:	2100      	movs	r1, #0
   d623a:	f7ff bfaf 	b.w	d619c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d623e:	4770      	bx	lr
   d6240:	2003e478 	.word	0x2003e478

000d6244 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d6244:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6248:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d624c:	4605      	mov	r5, r0
   d624e:	4616      	mov	r6, r2
   d6250:	461f      	mov	r7, r3
    if (lock) {
   d6252:	f1b8 0f00 	cmp.w	r8, #0
   d6256:	d004      	beq.n	d6262 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d6258:	6840      	ldr	r0, [r0, #4]
   d625a:	9101      	str	r1, [sp, #4]
   d625c:	f007 fd76 	bl	ddd4c <_ZN7TwoWire4lockEv>
   d6260:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d6262:	9101      	str	r1, [sp, #4]
   d6264:	2300      	movs	r3, #0
   d6266:	f10d 020f 	add.w	r2, sp, #15
   d626a:	4628      	mov	r0, r5
   d626c:	f7ff ff08 	bl	d6080 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d6270:	4604      	mov	r4, r0
   d6272:	b160      	cbz	r0, d628e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d6274:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6278:	ea03 0206 	and.w	r2, r3, r6
   d627c:	433a      	orrs	r2, r7
        if (newValue != value) {
   d627e:	4293      	cmp	r3, r2
   d6280:	d005      	beq.n	d628e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d6282:	9901      	ldr	r1, [sp, #4]
   d6284:	2300      	movs	r3, #0
   d6286:	4628      	mov	r0, r5
   d6288:	f7ff ff7c 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
   d628c:	4604      	mov	r4, r0
    if (lock) {
   d628e:	f1b8 0f00 	cmp.w	r8, #0
   d6292:	d002      	beq.n	d629a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d6294:	6868      	ldr	r0, [r5, #4]
   d6296:	f007 fd62 	bl	ddd5e <_ZN7TwoWire6unlockEv>
}
   d629a:	4620      	mov	r0, r4
   d629c:	b004      	add	sp, #16
   d629e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d62a4 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d62a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d62a6:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d62a8:	460a      	mov	r2, r1
   d62aa:	483f      	ldr	r0, [pc, #252]	; (d63a8 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d62ac:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d62ae:	493f      	ldr	r1, [pc, #252]	; (d63ac <_ZN6AB180511resetConfigEm+0x108>)
   d62b0:	f7ff fe56 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d62b4:	6860      	ldr	r0, [r4, #4]
   d62b6:	f007 fd49 	bl	ddd4c <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d62ba:	2300      	movs	r3, #0
   d62bc:	461a      	mov	r2, r3
   d62be:	210f      	movs	r1, #15
   d62c0:	4620      	mov	r0, r4
   d62c2:	f7ff ff5f 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d62c6:	2300      	movs	r3, #0
   d62c8:	2213      	movs	r2, #19
   d62ca:	2110      	movs	r1, #16
   d62cc:	4620      	mov	r0, r4
   d62ce:	f7ff ff59 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d62d2:	2300      	movs	r3, #0
   d62d4:	223c      	movs	r2, #60	; 0x3c
   d62d6:	2111      	movs	r1, #17
   d62d8:	4620      	mov	r0, r4
   d62da:	f7ff ff53 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d62de:	2300      	movs	r3, #0
   d62e0:	22e0      	movs	r2, #224	; 0xe0
   d62e2:	2112      	movs	r1, #18
   d62e4:	4620      	mov	r0, r4
   d62e6:	f7ff ff4d 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d62ea:	2300      	movs	r3, #0
   d62ec:	2226      	movs	r2, #38	; 0x26
   d62ee:	2113      	movs	r1, #19
   d62f0:	4620      	mov	r0, r4
   d62f2:	f7ff ff47 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d62f6:	2300      	movs	r3, #0
   d62f8:	461a      	mov	r2, r3
   d62fa:	2117      	movs	r1, #23
   d62fc:	4620      	mov	r0, r4
   d62fe:	f7ff ff41 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d6302:	f015 0301 	ands.w	r3, r5, #1
   d6306:	d048      	beq.n	d639a <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d6308:	2300      	movs	r3, #0
   d630a:	9300      	str	r3, [sp, #0]
   d630c:	22e3      	movs	r2, #227	; 0xe3
   d630e:	2323      	movs	r3, #35	; 0x23
   d6310:	2118      	movs	r1, #24
   d6312:	4620      	mov	r0, r4
   d6314:	f7ff ff96 	bl	d6244 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d6318:	2300      	movs	r3, #0
   d631a:	461a      	mov	r2, r3
   d631c:	2119      	movs	r1, #25
   d631e:	4620      	mov	r0, r4
   d6320:	f7ff ff30 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d6324:	2300      	movs	r3, #0
   d6326:	461a      	mov	r2, r3
   d6328:	211a      	movs	r1, #26
   d632a:	4620      	mov	r0, r4
   d632c:	f7ff ff2a 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d6330:	2300      	movs	r3, #0
   d6332:	461a      	mov	r2, r3
   d6334:	211b      	movs	r1, #27
   d6336:	4620      	mov	r0, r4
   d6338:	f7ff ff24 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d633c:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d6340:	f04f 0300 	mov.w	r3, #0
   d6344:	bf0c      	ite	eq
   d6346:	461a      	moveq	r2, r3
   d6348:	2288      	movne	r2, #136	; 0x88
   d634a:	211c      	movs	r1, #28
   d634c:	4620      	mov	r0, r4
   d634e:	f7ff ff19 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d6352:	2300      	movs	r3, #0
   d6354:	461a      	mov	r2, r3
   d6356:	2120      	movs	r1, #32
   d6358:	4620      	mov	r0, r4
   d635a:	f7ff ff13 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d635e:	2300      	movs	r3, #0
   d6360:	22f0      	movs	r2, #240	; 0xf0
   d6362:	2121      	movs	r1, #33	; 0x21
   d6364:	4620      	mov	r0, r4
   d6366:	f7ff ff0d 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d636a:	2300      	movs	r3, #0
   d636c:	461a      	mov	r2, r3
   d636e:	2126      	movs	r1, #38	; 0x26
   d6370:	4620      	mov	r0, r4
   d6372:	f7ff ff07 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d6376:	2300      	movs	r3, #0
   d6378:	2280      	movs	r2, #128	; 0x80
   d637a:	2127      	movs	r1, #39	; 0x27
   d637c:	4620      	mov	r0, r4
   d637e:	f7ff ff01 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d6382:	2300      	movs	r3, #0
   d6384:	461a      	mov	r2, r3
   d6386:	2130      	movs	r1, #48	; 0x30
   d6388:	4620      	mov	r0, r4
   d638a:	f7ff fefb 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d638e:	6860      	ldr	r0, [r4, #4]
   d6390:	f007 fce5 	bl	ddd5e <_ZN7TwoWire6unlockEv>
}
   d6394:	2001      	movs	r0, #1
   d6396:	b003      	add	sp, #12
   d6398:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d639a:	2223      	movs	r2, #35	; 0x23
   d639c:	2118      	movs	r1, #24
   d639e:	4620      	mov	r0, r4
   d63a0:	f7ff fef0 	bl	d6184 <_ZN6AB180513writeRegisterEhhb>
   d63a4:	e7b8      	b.n	d6318 <_ZN6AB180511resetConfigEm+0x74>
   d63a6:	bf00      	nop
   d63a8:	2003e474 	.word	0x2003e474
   d63ac:	000e3ec6 	.word	0x000e3ec6

000d63b0 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d63b0:	b513      	push	{r0, r1, r4, lr}
   d63b2:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d63b4:	f10d 0207 	add.w	r2, sp, #7
   d63b8:	f7ff fe62 	bl	d6080 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d63bc:	b128      	cbz	r0, d63ca <_ZN6AB180510isBitClearEhhb+0x1a>
   d63be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d63c2:	421c      	tst	r4, r3
   d63c4:	bf0c      	ite	eq
   d63c6:	2001      	moveq	r0, #1
   d63c8:	2000      	movne	r0, #0
}
   d63ca:	b002      	add	sp, #8
   d63cc:	bd10      	pop	{r4, pc}

000d63ce <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d63ce:	b513      	push	{r0, r1, r4, lr}
   d63d0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d63d2:	f10d 0207 	add.w	r2, sp, #7
   d63d6:	f7ff fe53 	bl	d6080 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d63da:	b128      	cbz	r0, d63e8 <_ZN6AB18058isBitSetEhhb+0x1a>
   d63dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d63e0:	421c      	tst	r4, r3
   d63e2:	bf14      	ite	ne
   d63e4:	2001      	movne	r0, #1
   d63e6:	2000      	moveq	r0, #0
}
   d63e8:	b002      	add	sp, #8
   d63ea:	bd10      	pop	{r4, pc}

000d63ec <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d63ec:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d63ee:	43d2      	mvns	r2, r2
   d63f0:	9300      	str	r3, [sp, #0]
   d63f2:	b2d2      	uxtb	r2, r2
   d63f4:	2300      	movs	r3, #0
   d63f6:	f7ff ff25 	bl	d6244 <_ZN6AB180512maskRegisterEhhhb>
}
   d63fa:	b003      	add	sp, #12
   d63fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d6400 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6400:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d6402:	2301      	movs	r3, #1
   d6404:	f10d 0207 	add.w	r2, sp, #7
   d6408:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d640a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d640c:	f7ff fe38 	bl	d6080 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6410:	4605      	mov	r5, r0
   d6412:	b938      	cbnz	r0, d6424 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d6414:	491e      	ldr	r1, [pc, #120]	; (d6490 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d6416:	481f      	ldr	r0, [pc, #124]	; (d6494 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6418:	22ad      	movs	r2, #173	; 0xad
   d641a:	f7ff fdb8 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
}
   d641e:	4628      	mov	r0, r5
   d6420:	b003      	add	sp, #12
   d6422:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d6424:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6428:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d642c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d6430:	d00b      	beq.n	d644a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6432:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d6434:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6436:	210f      	movs	r1, #15
   d6438:	4620      	mov	r0, r4
   d643a:	f7ff ffd7 	bl	d63ec <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d643e:	4a16      	ldr	r2, [pc, #88]	; (d6498 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6440:	4916      	ldr	r1, [pc, #88]	; (d649c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d6442:	4814      	ldr	r0, [pc, #80]	; (d6494 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6444:	f7fd ffaa 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d6448:	e7e9      	b.n	d641e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d644a:	2208      	movs	r2, #8
   d644c:	2117      	movs	r1, #23
   d644e:	4620      	mov	r0, r4
   d6450:	f7ff ffbd 	bl	d63ce <_ZN6AB18058isBitSetEhhb>
   d6454:	b118      	cbz	r0, d645e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6456:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d6458:	4a11      	ldr	r2, [pc, #68]	; (d64a0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d645a:	61e3      	str	r3, [r4, #28]
   d645c:	e7f0      	b.n	d6440 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d645e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6462:	071a      	lsls	r2, r3, #28
   d6464:	d509      	bpl.n	d647a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d6466:	2303      	movs	r3, #3
   d6468:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d646a:	2208      	movs	r2, #8
   d646c:	2301      	movs	r3, #1
   d646e:	210f      	movs	r1, #15
   d6470:	4620      	mov	r0, r4
   d6472:	f7ff ffbb 	bl	d63ec <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d6476:	4a0b      	ldr	r2, [pc, #44]	; (d64a4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d6478:	e7e2      	b.n	d6440 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d647a:	075b      	lsls	r3, r3, #29
   d647c:	d5cf      	bpl.n	d641e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d647e:	2204      	movs	r2, #4
   d6480:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d6482:	2301      	movs	r3, #1
   d6484:	210f      	movs	r1, #15
   d6486:	4620      	mov	r0, r4
   d6488:	f7ff ffb0 	bl	d63ec <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d648c:	4a06      	ldr	r2, [pc, #24]	; (d64a8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d648e:	e7d7      	b.n	d6440 <_ZN6AB180516updateWakeReasonEv+0x40>
   d6490:	000e3f0a 	.word	0x000e3f0a
   d6494:	2003e474 	.word	0x2003e474
   d6498:	000e3edb 	.word	0x000e3edb
   d649c:	000e3f29 	.word	0x000e3f29
   d64a0:	000e3ee4 	.word	0x000e3ee4
   d64a4:	000e3ef4 	.word	0x000e3ef4
   d64a8:	000e3f04 	.word	0x000e3f04

000d64ac <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d64ac:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d64ae:	9300      	str	r3, [sp, #0]
   d64b0:	4613      	mov	r3, r2
   d64b2:	22ff      	movs	r2, #255	; 0xff
   d64b4:	f7ff fec6 	bl	d6244 <_ZN6AB180512maskRegisterEhhhb>
}
   d64b8:	b003      	add	sp, #12
   d64ba:	f85d fb04 	ldr.w	pc, [sp], #4

000d64be <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d64be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d64c2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d64c6:	4605      	mov	r5, r0
   d64c8:	460c      	mov	r4, r1
   d64ca:	4691      	mov	r9, r2
   d64cc:	461f      	mov	r7, r3
    if (lock) {
   d64ce:	f1ba 0f00 	cmp.w	sl, #0
   d64d2:	d002      	beq.n	d64da <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d64d4:	6840      	ldr	r0, [r0, #4]
   d64d6:	f007 fc39 	bl	ddd4c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d64da:	b307      	cbz	r7, d651e <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d64dc:	2f20      	cmp	r7, #32
   d64de:	463e      	mov	r6, r7
   d64e0:	bf28      	it	cs
   d64e2:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d64e4:	2c7f      	cmp	r4, #127	; 0x7f
   d64e6:	d826      	bhi.n	d6536 <_ZN6AB18057readRamEjPhjb+0x78>
   d64e8:	1933      	adds	r3, r6, r4
   d64ea:	2b80      	cmp	r3, #128	; 0x80
   d64ec:	d901      	bls.n	d64f2 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d64ee:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d64f2:	2301      	movs	r3, #1
   d64f4:	2204      	movs	r2, #4
   d64f6:	213f      	movs	r1, #63	; 0x3f
   d64f8:	4628      	mov	r0, r5
   d64fa:	f7ff ff77 	bl	d63ec <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d64fe:	2300      	movs	r3, #0
   d6500:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6504:	9300      	str	r3, [sp, #0]
   d6506:	464a      	mov	r2, r9
   d6508:	4633      	mov	r3, r6
   d650a:	b2c9      	uxtb	r1, r1
   d650c:	4628      	mov	r0, r5
   d650e:	f7ff fd69 	bl	d5fe4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6512:	4680      	mov	r8, r0
   d6514:	b128      	cbz	r0, d6522 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6516:	4434      	add	r4, r6
        dataLen -= count;
   d6518:	1bbf      	subs	r7, r7, r6
        data += count;
   d651a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d651c:	e7dd      	b.n	d64da <_ZN6AB18057readRamEjPhjb+0x1c>
   d651e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6522:	f1ba 0f00 	cmp.w	sl, #0
   d6526:	d002      	beq.n	d652e <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6528:	6868      	ldr	r0, [r5, #4]
   d652a:	f007 fc18 	bl	ddd5e <_ZN7TwoWire6unlockEv>
}
   d652e:	4640      	mov	r0, r8
   d6530:	b002      	add	sp, #8
   d6532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6536:	2301      	movs	r3, #1
   d6538:	2204      	movs	r2, #4
   d653a:	213f      	movs	r1, #63	; 0x3f
   d653c:	4628      	mov	r0, r5
   d653e:	f7ff ffb5 	bl	d64ac <_ZN6AB180514setRegisterBitEhhb>
   d6542:	e7dc      	b.n	d64fe <_ZN6AB18057readRamEjPhjb+0x40>

000d6544 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6544:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6548:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d654c:	4605      	mov	r5, r0
   d654e:	460c      	mov	r4, r1
   d6550:	4691      	mov	r9, r2
   d6552:	461f      	mov	r7, r3
    if (lock) {
   d6554:	f1ba 0f00 	cmp.w	sl, #0
   d6558:	d002      	beq.n	d6560 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d655a:	6840      	ldr	r0, [r0, #4]
   d655c:	f007 fbf6 	bl	ddd4c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6560:	b307      	cbz	r7, d65a4 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6562:	2f1f      	cmp	r7, #31
   d6564:	463e      	mov	r6, r7
   d6566:	bf28      	it	cs
   d6568:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d656a:	2c7f      	cmp	r4, #127	; 0x7f
   d656c:	d826      	bhi.n	d65bc <_ZN6AB18058writeRamEjPKhjb+0x78>
   d656e:	1933      	adds	r3, r6, r4
   d6570:	2b80      	cmp	r3, #128	; 0x80
   d6572:	d901      	bls.n	d6578 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6574:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6578:	2301      	movs	r3, #1
   d657a:	2204      	movs	r2, #4
   d657c:	213f      	movs	r1, #63	; 0x3f
   d657e:	4628      	mov	r0, r5
   d6580:	f7ff ff34 	bl	d63ec <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6584:	2300      	movs	r3, #0
   d6586:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d658a:	9300      	str	r3, [sp, #0]
   d658c:	464a      	mov	r2, r9
   d658e:	4633      	mov	r3, r6
   d6590:	b2c9      	uxtb	r1, r1
   d6592:	4628      	mov	r0, r5
   d6594:	f7ff fdba 	bl	d610c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6598:	4680      	mov	r8, r0
   d659a:	b128      	cbz	r0, d65a8 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d659c:	4434      	add	r4, r6
        dataLen -= count;
   d659e:	1bbf      	subs	r7, r7, r6
        data += count;
   d65a0:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d65a2:	e7dd      	b.n	d6560 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d65a4:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d65a8:	f1ba 0f00 	cmp.w	sl, #0
   d65ac:	d002      	beq.n	d65b4 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d65ae:	6868      	ldr	r0, [r5, #4]
   d65b0:	f007 fbd5 	bl	ddd5e <_ZN7TwoWire6unlockEv>
}
   d65b4:	4640      	mov	r0, r8
   d65b6:	b002      	add	sp, #8
   d65b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d65bc:	2301      	movs	r3, #1
   d65be:	2204      	movs	r2, #4
   d65c0:	213f      	movs	r1, #63	; 0x3f
   d65c2:	4628      	mov	r0, r5
   d65c4:	f7ff ff72 	bl	d64ac <_ZN6AB180514setRegisterBitEhhb>
   d65c8:	e7dc      	b.n	d6584 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d65cc <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d65cc:	b530      	push	{r4, r5, lr}
   d65ce:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d65d0:	680d      	ldr	r5, [r1, #0]
   d65d2:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d65d6:	9503      	str	r5, [sp, #12]
   d65d8:	684d      	ldr	r5, [r1, #4]
   d65da:	9502      	str	r5, [sp, #8]
   d65dc:	688d      	ldr	r5, [r1, #8]
   d65de:	9501      	str	r5, [sp, #4]
   d65e0:	68c9      	ldr	r1, [r1, #12]
   d65e2:	9100      	str	r1, [sp, #0]
   d65e4:	3301      	adds	r3, #1
   d65e6:	4904      	ldr	r1, [pc, #16]	; (d65f8 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d65e8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d65ec:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d65ee:	f009 fba9 	bl	dfd44 <_ZN6String6formatEPKcz>
}
   d65f2:	4620      	mov	r0, r4
   d65f4:	b005      	add	sp, #20
   d65f6:	bd30      	pop	{r4, r5, pc}
   d65f8:	000e3f3a 	.word	0x000e3f3a

000d65fc <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d65fc:	1103      	asrs	r3, r0, #4
}
   d65fe:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6600:	f000 000f 	and.w	r0, r0, #15
}
   d6604:	fb02 0003 	mla	r0, r2, r3, r0
   d6608:	4770      	bx	lr

000d660a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d660a:	b538      	push	{r3, r4, r5, lr}
   d660c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d660e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6610:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6612:	f7ff fff3 	bl	d65fc <_ZN6AB180510bcdToValueEh>
   d6616:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6618:	7860      	ldrb	r0, [r4, #1]
   d661a:	f7ff ffef 	bl	d65fc <_ZN6AB180510bcdToValueEh>
   d661e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6620:	78a0      	ldrb	r0, [r4, #2]
   d6622:	f7ff ffeb 	bl	d65fc <_ZN6AB180510bcdToValueEh>
   d6626:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6628:	78e0      	ldrb	r0, [r4, #3]
   d662a:	f7ff ffe7 	bl	d65fc <_ZN6AB180510bcdToValueEh>
   d662e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6630:	7920      	ldrb	r0, [r4, #4]
   d6632:	f7ff ffe3 	bl	d65fc <_ZN6AB180510bcdToValueEh>
   d6636:	3801      	subs	r0, #1
   d6638:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d663a:	b92d      	cbnz	r5, d6648 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d663c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d663e:	7828      	ldrb	r0, [r5, #0]
   d6640:	f7ff ffdc 	bl	d65fc <_ZN6AB180510bcdToValueEh>
   d6644:	6188      	str	r0, [r1, #24]
}
   d6646:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6648:	7960      	ldrb	r0, [r4, #5]
   d664a:	f7ff ffd7 	bl	d65fc <_ZN6AB180510bcdToValueEh>
   d664e:	3064      	adds	r0, #100	; 0x64
   d6650:	1da5      	adds	r5, r4, #6
   d6652:	6148      	str	r0, [r1, #20]
   d6654:	e7f3      	b.n	d663e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6658 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6658:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d665a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d665c:	b088      	sub	sp, #32
   d665e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6660:	461a      	mov	r2, r3
   d6662:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6664:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6666:	f7ff fea3 	bl	d63b0 <_ZN6AB180510isBitClearEhhb>
   d666a:	b1f0      	cbz	r0, d66aa <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d666c:	2308      	movs	r3, #8
   d666e:	2601      	movs	r6, #1
   d6670:	4620      	mov	r0, r4
   d6672:	9600      	str	r6, [sp, #0]
   d6674:	eb0d 0203 	add.w	r2, sp, r3
   d6678:	2100      	movs	r1, #0
   d667a:	f7ff fcb3 	bl	d5fe4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d667e:	4604      	mov	r4, r0
   d6680:	b198      	cbz	r0, d66aa <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6682:	4632      	mov	r2, r6
   d6684:	4629      	mov	r1, r5
   d6686:	f10d 0009 	add.w	r0, sp, #9
   d668a:	f7ff ffbe 	bl	d660a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d668e:	a804      	add	r0, sp, #16
   d6690:	f7ff ff9c 	bl	d65cc <_ZN6AB180510tmToStringEPK2tm>
   d6694:	4808      	ldr	r0, [pc, #32]	; (d66b8 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6696:	9a04      	ldr	r2, [sp, #16]
   d6698:	4908      	ldr	r1, [pc, #32]	; (d66bc <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d669a:	f7fd fe7f 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d669e:	a804      	add	r0, sp, #16
   d66a0:	f009 f9e2 	bl	dfa68 <_ZN6StringD1Ev>
}
   d66a4:	4620      	mov	r0, r4
   d66a6:	b008      	add	sp, #32
   d66a8:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d66aa:	2224      	movs	r2, #36	; 0x24
   d66ac:	2100      	movs	r1, #0
   d66ae:	4628      	mov	r0, r5
   d66b0:	f00b f802 	bl	e16b8 <memset>
   d66b4:	2400      	movs	r4, #0
   d66b6:	e7f5      	b.n	d66a4 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d66b8:	2003e474 	.word	0x2003e474
   d66bc:	000e3f58 	.word	0x000e3f58

000d66c0 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d66c0:	b530      	push	{r4, r5, lr}
   d66c2:	b08b      	sub	sp, #44	; 0x2c
   d66c4:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d66c6:	a901      	add	r1, sp, #4
   d66c8:	f7ff ffc6 	bl	d6658 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d66cc:	4604      	mov	r4, r0
   d66ce:	b120      	cbz	r0, d66da <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d66d0:	a801      	add	r0, sp, #4
   d66d2:	f006 fd61 	bl	dd198 <mktime>
   d66d6:	e9c5 0100 	strd	r0, r1, [r5]
}
   d66da:	4620      	mov	r0, r4
   d66dc:	b00b      	add	sp, #44	; 0x2c
   d66de:	bd30      	pop	{r4, r5, pc}

000d66e0 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d66e0:	b510      	push	{r4, lr}
   d66e2:	4604      	mov	r4, r0
   d66e4:	b088      	sub	sp, #32
    if (callBegin) {
   d66e6:	b111      	cbz	r1, d66ee <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d66e8:	6840      	ldr	r0, [r0, #4]
   d66ea:	f007 fadd 	bl	ddca8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d66ee:	4620      	mov	r0, r4
   d66f0:	f7ff fcce 	bl	d6090 <_ZN6AB180510detectChipEv>
   d66f4:	b370      	cbz	r0, d6754 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d66f6:	4620      	mov	r0, r4
   d66f8:	f7ff fe82 	bl	d6400 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d66fc:	2301      	movs	r3, #1
   d66fe:	461a      	mov	r2, r3
   d6700:	2110      	movs	r1, #16
   d6702:	4620      	mov	r0, r4
   d6704:	f7ff fe54 	bl	d63b0 <_ZN6AB180510isBitClearEhhb>
   d6708:	b1d8      	cbz	r0, d6742 <_ZN6AB18055setupEb+0x62>
   d670a:	f009 fcf5 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   d670e:	b9c0      	cbnz	r0, d6742 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6710:	a902      	add	r1, sp, #8
   d6712:	4620      	mov	r0, r4
   d6714:	f7ff ffd4 	bl	d66c0 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d671c:	f009 fbf3 	bl	dff06 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6720:	4b0f      	ldr	r3, [pc, #60]	; (d6760 <_ZN6AB18055setupEb+0x80>)
   d6722:	4910      	ldr	r1, [pc, #64]	; (d6764 <_ZN6AB18055setupEb+0x84>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	9300      	str	r3, [sp, #0]
   d6728:	a804      	add	r0, sp, #16
   d672a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d672e:	f009 fca1 	bl	e0074 <_ZN9TimeClass6formatExPKc>
   d6732:	480d      	ldr	r0, [pc, #52]	; (d6768 <_ZN6AB18055setupEb+0x88>)
   d6734:	9a04      	ldr	r2, [sp, #16]
   d6736:	490d      	ldr	r1, [pc, #52]	; (d676c <_ZN6AB18055setupEb+0x8c>)
   d6738:	f7fd fe30 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d673c:	a804      	add	r0, sp, #16
   d673e:	f009 f993 	bl	dfa68 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6742:	4a0b      	ldr	r2, [pc, #44]	; (d6770 <_ZN6AB18055setupEb+0x90>)
   d6744:	2300      	movs	r3, #0
   d6746:	2100      	movs	r1, #0
   d6748:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d674c:	f006 fbb6 	bl	dcebc <system_subscribe_event>
}
   d6750:	b008      	add	sp, #32
   d6752:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6754:	4907      	ldr	r1, [pc, #28]	; (d6774 <_ZN6AB18055setupEb+0x94>)
   d6756:	4804      	ldr	r0, [pc, #16]	; (d6768 <_ZN6AB18055setupEb+0x88>)
   d6758:	f7ff fc19 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
   d675c:	e7f1      	b.n	d6742 <_ZN6AB18055setupEb+0x62>
   d675e:	bf00      	nop
   d6760:	2003e1d0 	.word	0x2003e1d0
   d6764:	2003e5b4 	.word	0x2003e5b4
   d6768:	2003e474 	.word	0x2003e474
   d676c:	000e3f66 	.word	0x000e3f66
   d6770:	000d6221 	.word	0x000d6221
   d6774:	000e3f83 	.word	0x000e3f83

000d6778 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6778:	220a      	movs	r2, #10
   d677a:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d677e:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6782:	fb93 f1f2 	sdiv	r1, r3, r2
   d6786:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d678a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d678e:	b2c0      	uxtb	r0, r0
   d6790:	4770      	bx	lr

000d6792 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6792:	b570      	push	{r4, r5, r6, lr}
   d6794:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6796:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6798:	460c      	mov	r4, r1
   d679a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d679c:	f7ff ffec 	bl	d6778 <_ZN6AB180510valueToBcdEi>
   d67a0:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d67a2:	6868      	ldr	r0, [r5, #4]
   d67a4:	f7ff ffe8 	bl	d6778 <_ZN6AB180510valueToBcdEi>
   d67a8:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d67aa:	68a8      	ldr	r0, [r5, #8]
   d67ac:	f7ff ffe4 	bl	d6778 <_ZN6AB180510valueToBcdEi>
   d67b0:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d67b2:	68e8      	ldr	r0, [r5, #12]
   d67b4:	f7ff ffe0 	bl	d6778 <_ZN6AB180510valueToBcdEi>
   d67b8:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d67ba:	6928      	ldr	r0, [r5, #16]
   d67bc:	3001      	adds	r0, #1
   d67be:	f7ff ffdb 	bl	d6778 <_ZN6AB180510valueToBcdEi>
   d67c2:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d67c4:	b92e      	cbnz	r6, d67d2 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d67c6:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d67c8:	69a8      	ldr	r0, [r5, #24]
   d67ca:	f7ff ffd5 	bl	d6778 <_ZN6AB180510valueToBcdEi>
   d67ce:	7030      	strb	r0, [r6, #0]
}
   d67d0:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d67d2:	696a      	ldr	r2, [r5, #20]
   d67d4:	2364      	movs	r3, #100	; 0x64
   d67d6:	fb92 f0f3 	sdiv	r0, r2, r3
   d67da:	fb03 2010 	mls	r0, r3, r0, r2
   d67de:	f7ff ffcb 	bl	d6778 <_ZN6AB180510valueToBcdEi>
   d67e2:	1da6      	adds	r6, r4, #6
   d67e4:	7160      	strb	r0, [r4, #5]
   d67e6:	e7ef      	b.n	d67c8 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d67e8 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d67e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67ea:	b087      	sub	sp, #28
   d67ec:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d67ee:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d67f0:	4616      	mov	r6, r2
   d67f2:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d67f4:	f7ff feea 	bl	d65cc <_ZN6AB180510tmToStringEPK2tm>
   d67f8:	481e      	ldr	r0, [pc, #120]	; (d6874 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d67fa:	9a02      	ldr	r2, [sp, #8]
   d67fc:	491e      	ldr	r1, [pc, #120]	; (d6878 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d67fe:	f7fd fdcd 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d6802:	a802      	add	r0, sp, #8
   d6804:	f009 f930 	bl	dfa68 <_ZN6StringD1Ev>
    if (lock) {
   d6808:	b116      	cbz	r6, d6810 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d680a:	6868      	ldr	r0, [r5, #4]
   d680c:	f007 fa9e 	bl	ddd4c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6810:	4620      	mov	r0, r4
   d6812:	2201      	movs	r2, #1
   d6814:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6818:	2700      	movs	r7, #0
   d681a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d681e:	f7ff ffb8 	bl	d6792 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6822:	2301      	movs	r3, #1
   d6824:	461a      	mov	r2, r3
   d6826:	2110      	movs	r1, #16
   d6828:	4628      	mov	r0, r5
   d682a:	f7ff fe3f 	bl	d64ac <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d682e:	4604      	mov	r4, r0
   d6830:	b1e8      	cbz	r0, d686e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6832:	2308      	movs	r3, #8
   d6834:	9700      	str	r7, [sp, #0]
   d6836:	eb0d 0203 	add.w	r2, sp, r3
   d683a:	4639      	mov	r1, r7
   d683c:	4628      	mov	r0, r5
   d683e:	f7ff fc65 	bl	d610c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d6842:	4604      	mov	r4, r0
   d6844:	b160      	cbz	r0, d6860 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6846:	2301      	movs	r3, #1
   d6848:	461a      	mov	r2, r3
   d684a:	2110      	movs	r1, #16
   d684c:	4628      	mov	r0, r5
   d684e:	f7ff fdcd 	bl	d63ec <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d6852:	b116      	cbz	r6, d685a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6854:	6868      	ldr	r0, [r5, #4]
   d6856:	f007 fa82 	bl	ddd5e <_ZN7TwoWire6unlockEv>
}
   d685a:	4620      	mov	r0, r4
   d685c:	b007      	add	sp, #28
   d685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d6860:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6864:	4905      	ldr	r1, [pc, #20]	; (d687c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6866:	4803      	ldr	r0, [pc, #12]	; (d6874 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6868:	f7ff fb91 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
   d686c:	e7f1      	b.n	d6852 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d686e:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d6872:	e7f7      	b.n	d6864 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6874:	2003e474 	.word	0x2003e474
   d6878:	000e3f9b 	.word	0x000e3f9b
   d687c:	000e3fa9 	.word	0x000e3fa9

000d6880 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6880:	b513      	push	{r0, r1, r4, lr}
   d6882:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6884:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6886:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d688a:	f00a fedb 	bl	e1644 <gmtime>
    return setRtcFromTm(tm, lock);
   d688e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d6892:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6894:	4620      	mov	r0, r4
   d6896:	f7ff ffa7 	bl	d67e8 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d689a:	b002      	add	sp, #8
   d689c:	bd10      	pop	{r4, pc}
	...

000d68a0 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d68a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d68a2:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d68a4:	b089      	sub	sp, #36	; 0x24
   d68a6:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d68a8:	bb75      	cbnz	r5, d6908 <_ZN6AB18054loopEv+0x68>
   d68aa:	f009 fc25 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   d68ae:	b358      	cbz	r0, d6908 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d68b0:	2600      	movs	r6, #0
   d68b2:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d68b4:	a904      	add	r1, sp, #16
   d68b6:	4628      	mov	r0, r5
        tm = 0;
   d68b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d68bc:	f006 fb84 	bl	dcfc8 <spark_sync_time_last>
   d68c0:	b310      	cbz	r0, d6908 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d68c2:	2501      	movs	r5, #1
   d68c4:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d68c6:	f009 fc34 	bl	e0132 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d68ca:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d68cc:	4602      	mov	r2, r0
   d68ce:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d68d0:	4620      	mov	r0, r4
        time_t time = Time.now();
   d68d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d68d6:	f7ff ffd3 	bl	d6880 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d68da:	a902      	add	r1, sp, #8
   d68dc:	4620      	mov	r0, r4
        time = 0;
   d68de:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d68e2:	f7ff feed 	bl	d66c0 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d68e6:	4b12      	ldr	r3, [pc, #72]	; (d6930 <_ZN6AB18054loopEv+0x90>)
   d68e8:	4912      	ldr	r1, [pc, #72]	; (d6934 <_ZN6AB18054loopEv+0x94>)
   d68ea:	681b      	ldr	r3, [r3, #0]
   d68ec:	9300      	str	r3, [sp, #0]
   d68ee:	a804      	add	r0, sp, #16
   d68f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d68f4:	f009 fbbe 	bl	e0074 <_ZN9TimeClass6formatExPKc>
   d68f8:	480f      	ldr	r0, [pc, #60]	; (d6938 <_ZN6AB18054loopEv+0x98>)
   d68fa:	9a04      	ldr	r2, [sp, #16]
   d68fc:	490f      	ldr	r1, [pc, #60]	; (d693c <_ZN6AB18054loopEv+0x9c>)
   d68fe:	f7fd fd4d 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d6902:	a804      	add	r0, sp, #16
   d6904:	f009 f8b0 	bl	dfa68 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6908:	6963      	ldr	r3, [r4, #20]
   d690a:	b173      	cbz	r3, d692a <_ZN6AB18054loopEv+0x8a>
   d690c:	f006 f894 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6910:	6923      	ldr	r3, [r4, #16]
   d6912:	1ac0      	subs	r0, r0, r3
   d6914:	6963      	ldr	r3, [r4, #20]
   d6916:	4298      	cmp	r0, r3
   d6918:	d307      	bcc.n	d692a <_ZN6AB18054loopEv+0x8a>
   d691a:	f006 f88d 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d691e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6922:	6120      	str	r0, [r4, #16]
            setWDT();
   d6924:	4620      	mov	r0, r4
   d6926:	f7ff fc39 	bl	d619c <_ZN6AB18056setWDTEi>
}
   d692a:	b009      	add	sp, #36	; 0x24
   d692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d692e:	bf00      	nop
   d6930:	2003e1d0 	.word	0x2003e1d0
   d6934:	2003e5b4 	.word	0x2003e5b4
   d6938:	2003e474 	.word	0x2003e474
   d693c:	000e3fc4 	.word	0x000e3fc4

000d6940 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6940:	4b01      	ldr	r3, [pc, #4]	; (d6948 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6942:	4a02      	ldr	r2, [pc, #8]	; (d694c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6944:	601a      	str	r2, [r3, #0]
}
   d6946:	4770      	bx	lr
   d6948:	2003e474 	.word	0x2003e474
   d694c:	000e3fda 	.word	0x000e3fda

000d6950 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d6950:	2a02      	cmp	r2, #2
   d6952:	d006      	beq.n	d6962 <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x12>
   d6954:	2a03      	cmp	r2, #3
   d6956:	d002      	beq.n	d695e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d6958:	2a01      	cmp	r2, #1
   d695a:	d100      	bne.n	d695e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d695c:	6001      	str	r1, [r0, #0]
	}
   d695e:	2000      	movs	r0, #0
   d6960:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6962:	680b      	ldr	r3, [r1, #0]
   d6964:	6003      	str	r3, [r0, #0]
	}
   d6966:	e7fa      	b.n	d695e <_ZNSt14_Function_base13_Base_managerIZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>

000d6968 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6968:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d696a:	2301      	movs	r3, #1
   d696c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d696e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6970:	4604      	mov	r4, r0
        if (th->func) {
   d6972:	b143      	cbz	r3, d6986 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d6974:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6976:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d6978:	2301      	movs	r3, #1
   d697a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d697c:	2000      	movs	r0, #0
    }
   d697e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6982:	f006 b829 	b.w	dc9d8 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6986:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6988:	2800      	cmp	r0, #0
   d698a:	d0f5      	beq.n	d6978 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d698c:	6883      	ldr	r3, [r0, #8]
   d698e:	b90b      	cbnz	r3, d6994 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d6990:	f009 fef6 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6994:	68c3      	ldr	r3, [r0, #12]
   d6996:	e7ee      	b.n	d6976 <_ZN6Thread3runEPv+0xe>

000d6998 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d6998:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d699a:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d699c:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d699e:	b135      	cbz	r5, d69ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d69a0:	4628      	mov	r0, r5
   d69a2:	f7fe f86b 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d69a6:	2110      	movs	r1, #16
   d69a8:	4628      	mov	r0, r5
   d69aa:	f009 fea9 	bl	e0700 <_ZdlPvj>
   d69ae:	4620      	mov	r0, r4
   d69b0:	2114      	movs	r1, #20
      }
   d69b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d69b6:	f009 bea3 	b.w	e0700 <_ZdlPvj>

000d69ba <_ZN6Thread7disposeEv>:
    void dispose()
   d69ba:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d69bc:	6803      	ldr	r3, [r0, #0]
   d69be:	4604      	mov	r4, r0
        if (!isValid())
   d69c0:	b1ab      	cbz	r3, d69ee <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   d69c2:	6858      	ldr	r0, [r3, #4]
   d69c4:	f005 ffb8 	bl	dc938 <os_thread_is_current>
   d69c8:	b988      	cbnz	r0, d69ee <_ZN6Thread7disposeEv+0x34>
   d69ca:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d69cc:	7c5a      	ldrb	r2, [r3, #17]
   d69ce:	b912      	cbnz	r2, d69d6 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d69d0:	6858      	ldr	r0, [r3, #4]
   d69d2:	f005 ffb9 	bl	dc948 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d69d6:	6823      	ldr	r3, [r4, #0]
   d69d8:	6858      	ldr	r0, [r3, #4]
   d69da:	f005 ffbd 	bl	dc958 <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69de:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d69e0:	2300      	movs	r3, #0
   d69e2:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d69e4:	b118      	cbz	r0, d69ee <_ZN6Thread7disposeEv+0x34>
    }
   d69e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d69ea:	f7ff bfd5 	b.w	d6998 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d69ee:	bd10      	pop	{r4, pc}

000d69f0 <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   d69f0:	4a05      	ldr	r2, [pc, #20]	; (d6a08 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   d69f2:	6002      	str	r2, [r0, #0]
   d69f4:	2200      	movs	r2, #0
   d69f6:	6042      	str	r2, [r0, #4]
   d69f8:	7302      	strb	r2, [r0, #12]
        val_(0) {
   d69fa:	f880 22bd 	strb.w	r2, [r0, #701]	; 0x2bd
    _Function_base() : _M_manager(nullptr) { }
   d69fe:	f8c0 22c8 	str.w	r2, [r0, #712]	; 0x2c8
   d6a02:	f8c0 22d0 	str.w	r2, [r0, #720]	; 0x2d0
}
   d6a06:	4770      	bx	lr
   d6a08:	000e401c 	.word	0x000e401c

000d6a0c <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   d6a0c:	b510      	push	{r4, lr}
    if (!_instance) {
   d6a0e:	4c07      	ldr	r4, [pc, #28]	; (d6a2c <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   d6a10:	6823      	ldr	r3, [r4, #0]
   d6a12:	b943      	cbnz	r3, d6a26 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   d6a14:	f44f 7035 	mov.w	r0, #724	; 0x2d4
   d6a18:	f7fd fb3d 	bl	d4096 <_Znwj>
   d6a1c:	4603      	mov	r3, r0
   d6a1e:	b108      	cbz	r0, d6a24 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   d6a20:	f7ff ffe6 	bl	d69f0 <_ZN19BackgroundPublishRKC1Ev>
   d6a24:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   d6a26:	6820      	ldr	r0, [r4, #0]
   d6a28:	bd10      	pop	{r4, pc}
   d6a2a:	bf00      	nop
   d6a2c:	2003e47c 	.word	0x2003e47c

000d6a30 <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   d6a30:	b538      	push	{r3, r4, r5, lr}
   d6a32:	4604      	mov	r4, r0
    if(thread)
   d6a34:	6840      	ldr	r0, [r0, #4]
   d6a36:	b190      	cbz	r0, d6a5e <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   d6a38:	2302      	movs	r3, #2
   d6a3a:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   d6a3c:	f7ff ffbd 	bl	d69ba <_ZN6Thread7disposeEv>
        delete thread;
   d6a40:	6865      	ldr	r5, [r4, #4]
   d6a42:	b155      	cbz	r5, d6a5a <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   d6a44:	4628      	mov	r0, r5
   d6a46:	f7ff ffb8 	bl	d69ba <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   d6a4a:	6828      	ldr	r0, [r5, #0]
   d6a4c:	b108      	cbz	r0, d6a52 <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   d6a4e:	f7ff ffa3 	bl	d6998 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
   d6a52:	2104      	movs	r1, #4
   d6a54:	4628      	mov	r0, r5
   d6a56:	f009 fe53 	bl	e0700 <_ZdlPvj>
        thread = NULL;
   d6a5a:	2300      	movs	r3, #0
   d6a5c:	6063      	str	r3, [r4, #4]
    }
}
   d6a5e:	bd38      	pop	{r3, r4, r5, pc}

000d6a60 <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d6a60:	b510      	push	{r4, lr}
   d6a62:	4b05      	ldr	r3, [pc, #20]	; (d6a78 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   d6a64:	6003      	str	r3, [r0, #0]
   d6a66:	4604      	mov	r4, r0
    stop();
   d6a68:	f7ff ffe2 	bl	d6a30 <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   d6a6c:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6a70:	f7fe f804 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
}
   d6a74:	4620      	mov	r0, r4
   d6a76:	bd10      	pop	{r4, pc}
   d6a78:	000e401c 	.word	0x000e401c

000d6a7c <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   d6a7c:	b510      	push	{r4, lr}
   d6a7e:	4604      	mov	r4, r0
}
   d6a80:	f7ff ffee 	bl	d6a60 <_ZN19BackgroundPublishRKD1Ev>
   d6a84:	4620      	mov	r0, r4
   d6a86:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   d6a8a:	f009 fe39 	bl	e0700 <_ZdlPvj>
   d6a8e:	4620      	mov	r0, r4
   d6a90:	bd10      	pop	{r4, pc}

000d6a92 <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   d6a92:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a94:	4604      	mov	r4, r0
   d6a96:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   d6a98:	f100 060d 	add.w	r6, r0, #13
   d6a9c:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   d6aa0:	7b23      	ldrb	r3, [r4, #12]
   d6aa2:	b91b      	cbnz	r3, d6aac <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   d6aa4:	2001      	movs	r0, #1
   d6aa6:	f006 fb8b 	bl	dd1c0 <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   d6aaa:	e7f9      	b.n	d6aa0 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   d6aac:	7b23      	ldrb	r3, [r4, #12]
   d6aae:	2b02      	cmp	r3, #2
   d6ab0:	d062      	beq.n	d6b78 <_ZN19BackgroundPublishRK8thread_fEv+0xe6>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   d6ab2:	68a0      	ldr	r0, [r4, #8]
   d6ab4:	f005 ff60 	bl	dc978 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   d6ab8:	68a0      	ldr	r0, [r4, #8]
   d6aba:	f005 ff65 	bl	dc988 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d6abe:	f894 32bd 	ldrb.w	r3, [r4, #701]	; 0x2bd
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6ac2:	f88d 3000 	strb.w	r3, [sp]
   d6ac6:	463a      	mov	r2, r7
   d6ac8:	233c      	movs	r3, #60	; 0x3c
   d6aca:	4631      	mov	r1, r6
   d6acc:	a806      	add	r0, sp, #24
   d6ace:	f006 fe35 	bl	dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6ad2:	9d06      	ldr	r5, [sp, #24]
   d6ad4:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6ad6:	b933      	cbnz	r3, d6ae6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   d6ad8:	7b23      	ldrb	r3, [r4, #12]
   d6ada:	2b02      	cmp	r3, #2
   d6adc:	d003      	beq.n	d6ae6 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   d6ade:	2001      	movs	r0, #1
   d6ae0:	f006 fb6e 	bl	dd1c0 <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   d6ae4:	e7f5      	b.n	d6ad2 <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   d6ae6:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6aea:	b31b      	cbz	r3, d6b34 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6aec:	2000      	movs	r0, #0
   d6aee:	f006 f9f5 	bl	dcedc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6af2:	b120      	cbz	r0, d6afe <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   d6af4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6af6:	b913      	cbnz	r3, d6afe <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   d6af8:	f006 fa3e 	bl	dcf78 <spark_process>
    }
   d6afc:	e7fa      	b.n	d6af4 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6afe:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   d6b00:	f8d4 22d0 	ldr.w	r2, [r4, #720]	; 0x2d0
   d6b04:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   d6b06:	1e59      	subs	r1, r3, #1
   d6b08:	424b      	negs	r3, r1
   d6b0a:	414b      	adcs	r3, r1
   d6b0c:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   d6b10:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
   d6b14:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d6b18:	b90b      	cbnz	r3, d6b1e <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   d6b1a:	f009 fe31 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b1e:	ab05      	add	r3, sp, #20
   d6b20:	9300      	str	r3, [sp, #0]
   d6b22:	f8d4 52cc 	ldr.w	r5, [r4, #716]	; 0x2cc
   d6b26:	ab04      	add	r3, sp, #16
   d6b28:	aa03      	add	r2, sp, #12
   d6b2a:	f10d 010b 	add.w	r1, sp, #11
   d6b2e:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
   d6b32:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   d6b34:	68a0      	ldr	r0, [r4, #8]
   d6b36:	f005 ff1f 	bl	dc978 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   d6b3a:	7b23      	ldrb	r3, [r4, #12]
   d6b3c:	2b02      	cmp	r3, #2
   d6b3e:	d015      	beq.n	d6b6c <_ZN19BackgroundPublishRK8thread_fEv+0xda>
	if (_M_manager)
   d6b40:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
            {
                return;
            }
            event_context = NULL;
   d6b44:	2500      	movs	r5, #0
   d6b46:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
   d6b4a:	b133      	cbz	r3, d6b5a <_ZN19BackgroundPublishRK8thread_fEv+0xc8>
            completed_cb = NULL;
   d6b4c:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b50:	2203      	movs	r2, #3
   d6b52:	4608      	mov	r0, r1
   d6b54:	4798      	blx	r3
	    _M_invoker = nullptr;
   d6b56:	e9c4 55b2 	strd	r5, r5, [r4, #712]	; 0x2c8
            state = BACKGROUND_PUBLISH_IDLE;
   d6b5a:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   d6b5c:	68a0      	ldr	r0, [r4, #8]
   d6b5e:	7323      	strb	r3, [r4, #12]
   d6b60:	f005 ff12 	bl	dc988 <os_mutex_unlock>
      ~__shared_ptr() = default;
   d6b64:	a807      	add	r0, sp, #28
   d6b66:	f7fd fd6b 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b6a:	e799      	b.n	d6aa0 <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   d6b6c:	68a0      	ldr	r0, [r4, #8]
   d6b6e:	f005 ff0b 	bl	dc988 <os_mutex_unlock>
   d6b72:	a807      	add	r0, sp, #28
   d6b74:	f7fd fd64 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6b78:	b009      	add	sp, #36	; 0x24
   d6b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b7c <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   d6b7c:	6800      	ldr	r0, [r0, #0]
   d6b7e:	f7ff bf88 	b.w	d6a92 <_ZN19BackgroundPublishRK8thread_fEv>
	...

000d6b84 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d6b84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6b88:	4606      	mov	r6, r0
   d6b8a:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d6b8c:	2014      	movs	r0, #20
   d6b8e:	4926      	ldr	r1, [pc, #152]	; (d6c28 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d6b90:	4617      	mov	r7, r2
   d6b92:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d6b94:	f009 fdea 	bl	e076c <_ZnwjRKSt9nothrow_t>
   d6b98:	4604      	mov	r4, r0
   d6b9a:	b130      	cbz	r0, d6baa <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6b9c:	2200      	movs	r2, #0
            exited(false) {
   d6b9e:	e9c0 2200 	strd	r2, r2, [r0]
   d6ba2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d6ba6:	7402      	strb	r2, [r0, #16]
   d6ba8:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6baa:	6034      	str	r4, [r6, #0]
        if (!d_) {
   d6bac:	2c00      	cmp	r4, #0
   d6bae:	d031      	beq.n	d6c14 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d6bb0:	491d      	ldr	r1, [pc, #116]	; (d6c28 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   d6bb2:	2010      	movs	r0, #16
   d6bb4:	f009 fdda 	bl	e076c <_ZnwjRKSt9nothrow_t>
   d6bb8:	4605      	mov	r5, r0
   d6bba:	b168      	cbz	r0, d6bd8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   d6bbc:	2300      	movs	r3, #0
   d6bbe:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6bc0:	4601      	mov	r1, r0
   d6bc2:	4638      	mov	r0, r7
   d6bc4:	f7fe f913 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bc8:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6bca:	68aa      	ldr	r2, [r5, #8]
   d6bcc:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bce:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6bd0:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bd2:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bd4:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6bd6:	60fa      	str	r2, [r7, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bd8:	6827      	ldr	r7, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6bda:	6025      	str	r5, [r4, #0]
	if (__p != pointer())
   d6bdc:	b137      	cbz	r7, d6bec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   d6bde:	4638      	mov	r0, r7
   d6be0:	f7fd ff4c 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6be4:	2110      	movs	r1, #16
   d6be6:	4638      	mov	r0, r7
   d6be8:	f009 fd8a 	bl	e0700 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6bec:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d6bee:	6803      	ldr	r3, [r0, #0]
   d6bf0:	b183      	cbz	r3, d6c14 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6bf4:	464a      	mov	r2, r9
   d6bf6:	e9cd 0300 	strd	r0, r3, [sp]
   d6bfa:	4641      	mov	r1, r8
   d6bfc:	4b0b      	ldr	r3, [pc, #44]	; (d6c2c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   d6bfe:	3004      	adds	r0, #4
   d6c00:	f005 fe92 	bl	dc928 <os_thread_create>
   d6c04:	b930      	cbnz	r0, d6c14 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   d6c06:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   d6c08:	7c1b      	ldrb	r3, [r3, #16]
   d6c0a:	b94b      	cbnz	r3, d6c20 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   d6c0c:	2001      	movs	r0, #1
   d6c0e:	f005 ff03 	bl	dca18 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6c12:	e7f8      	b.n	d6c06 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c14:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6c16:	2300      	movs	r3, #0
   d6c18:	6033      	str	r3, [r6, #0]
	if (__p != pointer())
   d6c1a:	b108      	cbz	r0, d6c20 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   d6c1c:	f7ff febc 	bl	d6998 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d6c20:	4630      	mov	r0, r6
   d6c22:	b003      	add	sp, #12
   d6c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6c28:	000e4ac8 	.word	0x000e4ac8
   d6c2c:	000d6969 	.word	0x000d6969

000d6c30 <_ZN19BackgroundPublishRK5startEv>:
{
   d6c30:	b530      	push	{r4, r5, lr}
    if(!thread)
   d6c32:	6843      	ldr	r3, [r0, #4]
{
   d6c34:	b087      	sub	sp, #28
   d6c36:	4604      	mov	r4, r0
    if(!thread)
   d6c38:	b9c3      	cbnz	r3, d6c6c <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   d6c3a:	3008      	adds	r0, #8
   d6c3c:	f005 fe94 	bl	dc968 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   d6c40:	4b0b      	ldr	r3, [pc, #44]	; (d6c70 <_ZN19BackgroundPublishRK5startEv+0x40>)
   d6c42:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   d6c44:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   d6c46:	4b0b      	ldr	r3, [pc, #44]	; (d6c74 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6c48:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d6c4a:	9304      	str	r3, [sp, #16]
   d6c4c:	f7fd fa23 	bl	d4096 <_Znwj>
   d6c50:	4605      	mov	r5, r0
   d6c52:	b138      	cbz	r0, d6c64 <_ZN19BackgroundPublishRK5startEv+0x34>
   d6c54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d6c58:	9300      	str	r3, [sp, #0]
   d6c5a:	4907      	ldr	r1, [pc, #28]	; (d6c78 <_ZN19BackgroundPublishRK5startEv+0x48>)
   d6c5c:	2302      	movs	r3, #2
   d6c5e:	aa02      	add	r2, sp, #8
   d6c60:	f7ff ff90 	bl	d6b84 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   d6c64:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   d6c66:	a802      	add	r0, sp, #8
   d6c68:	f7fd ff08 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
}
   d6c6c:	b007      	add	sp, #28
   d6c6e:	bd30      	pop	{r4, r5, pc}
   d6c70:	000d6b7d 	.word	0x000d6b7d
   d6c74:	000d6951 	.word	0x000d6951
   d6c78:	000e4000 	.word	0x000e4000

000d6c7c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   d6c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c80:	4604      	mov	r4, r0
   d6c82:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   d6c84:	6880      	ldr	r0, [r0, #8]
   d6c86:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d6c88:	4698      	mov	r8, r3
   d6c8a:	460d      	mov	r5, r1
   d6c8c:	4616      	mov	r6, r2
   d6c8e:	f005 fe73 	bl	dc978 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   d6c92:	6863      	ldr	r3, [r4, #4]
   d6c94:	b11b      	cbz	r3, d6c9e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   d6c96:	7b23      	ldrb	r3, [r4, #12]
   d6c98:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d6c9c:	b133      	cbz	r3, d6cac <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   d6c9e:	68a0      	ldr	r0, [r4, #8]
   d6ca0:	f005 fe72 	bl	dc988 <os_mutex_unlock>
    {
        return false;
   d6ca4:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   d6ca6:	b005      	add	sp, #20
   d6ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6cac:	68a0      	ldr	r0, [r4, #8]
   d6cae:	f005 fe6b 	bl	dc988 <os_mutex_unlock>
    if(!name)
   d6cb2:	2d00      	cmp	r5, #0
   d6cb4:	d03d      	beq.n	d6d32 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   d6cb6:	2241      	movs	r2, #65	; 0x41
   d6cb8:	4629      	mov	r1, r5
   d6cba:	f104 000d 	add.w	r0, r4, #13
   d6cbe:	f00a fda0 	bl	e1802 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   d6cc2:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   d6cc6:	b38e      	cbz	r6, d6d2c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   d6cc8:	f240 226f 	movw	r2, #623	; 0x26f
   d6ccc:	4631      	mov	r1, r6
   d6cce:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   d6cd2:	f00a fd96 	bl	e1802 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   d6cd6:	f884 92bc 	strb.w	r9, [r4, #700]	; 0x2bc
    _Function_base() : _M_manager(nullptr) { }
   d6cda:	2300      	movs	r3, #0
   d6cdc:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d6cde:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   d6ce0:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
      if (static_cast<bool>(__x))
   d6ce4:	b13b      	cbz	r3, d6cf6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6ce6:	2202      	movs	r2, #2
   d6ce8:	4639      	mov	r1, r7
   d6cea:	4668      	mov	r0, sp
   d6cec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6cee:	68fb      	ldr	r3, [r7, #12]
   d6cf0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d6cf2:	68bb      	ldr	r3, [r7, #8]
   d6cf4:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d6cf6:	4629      	mov	r1, r5
   d6cf8:	4668      	mov	r0, sp
   d6cfa:	f7fe f878 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cfe:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6d00:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
      __b = _GLIBCXX_MOVE(__tmp);
   d6d04:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d08:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6d0a:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d6d0c:	4668      	mov	r0, sp
   d6d0e:	f8d4 22cc 	ldr.w	r2, [r4, #716]	; 0x2cc
      __b = _GLIBCXX_MOVE(__tmp);
   d6d12:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
      __a = _GLIBCXX_MOVE(__b);
   d6d16:	9203      	str	r2, [sp, #12]
   d6d18:	f7fd feb0 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   d6d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6d1e:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
    state = BACKGROUND_PUBLISH_REQUESTED;
   d6d22:	2001      	movs	r0, #1
    event_flags = flags;
   d6d24:	f884 82bd 	strb.w	r8, [r4, #701]	; 0x2bd
    state = BACKGROUND_PUBLISH_REQUESTED;
   d6d28:	7320      	strb	r0, [r4, #12]
    return true;
   d6d2a:	e7bc      	b.n	d6ca6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   d6d2c:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   d6d30:	e7d3      	b.n	d6cda <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   d6d32:	4628      	mov	r0, r5
   d6d34:	e7b7      	b.n	d6ca6 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000d6d38 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6d38:	b510      	push	{r4, lr}
   d6d3a:	4b05      	ldr	r3, [pc, #20]	; (d6d50 <_ZN10JsonBufferD1Ev+0x18>)
   d6d3c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d6d3e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d6d40:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d6d42:	b91b      	cbnz	r3, d6d4c <_ZN10JsonBufferD1Ev+0x14>
   d6d44:	6840      	ldr	r0, [r0, #4]
   d6d46:	b108      	cbz	r0, d6d4c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d6d48:	f006 f9be 	bl	dd0c8 <free>
	}
}
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	bd10      	pop	{r4, pc}
   d6d50:	000e402c 	.word	0x000e402c

000d6d54 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d6d54:	b510      	push	{r4, lr}
   d6d56:	4604      	mov	r4, r0
}
   d6d58:	f7ff ffee 	bl	d6d38 <_ZN10JsonBufferD1Ev>
   d6d5c:	4620      	mov	r0, r4
   d6d5e:	2114      	movs	r1, #20
   d6d60:	f009 fcce 	bl	e0700 <_ZdlPvj>
   d6d64:	4620      	mov	r0, r4
   d6d66:	bd10      	pop	{r4, pc}

000d6d68 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d6d68:	b510      	push	{r4, lr}
   d6d6a:	4b07      	ldr	r3, [pc, #28]	; (d6d88 <_ZN10JsonParserD1Ev+0x20>)
   d6d6c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d6d6e:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   d6d70:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d6d72:	b91b      	cbnz	r3, d6d7c <_ZN10JsonParserD1Ev+0x14>
   d6d74:	6940      	ldr	r0, [r0, #20]
   d6d76:	b108      	cbz	r0, d6d7c <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d6d78:	f006 f9a6 	bl	dd0c8 <free>
JsonParser::~JsonParser() {
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	f7ff ffdb 	bl	d6d38 <_ZN10JsonBufferD1Ev>
	}
}
   d6d82:	4620      	mov	r0, r4
   d6d84:	bd10      	pop	{r4, pc}
   d6d86:	bf00      	nop
   d6d88:	000e403c 	.word	0x000e403c

000d6d8c <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   d6d8c:	b510      	push	{r4, lr}
   d6d8e:	4604      	mov	r4, r0
}
   d6d90:	f7ff ffea 	bl	d6d68 <_ZN10JsonParserD1Ev>
   d6d94:	4620      	mov	r0, r4
   d6d96:	212c      	movs	r1, #44	; 0x2c
   d6d98:	f009 fcb2 	bl	e0700 <_ZdlPvj>
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	bd10      	pop	{r4, pc}

000d6da0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d6da0:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d6da2:	e9c0 1201 	strd	r1, r2, [r0, #4]
   d6da6:	2200      	movs	r2, #0
   d6da8:	60c2      	str	r2, [r0, #12]
   d6daa:	2201      	movs	r2, #1
   d6dac:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d6dae:	6143      	str	r3, [r0, #20]
   d6db0:	4a02      	ldr	r2, [pc, #8]	; (d6dbc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d6db2:	9b02      	ldr	r3, [sp, #8]
   d6db4:	6002      	str	r2, [r0, #0]
   d6db6:	61c3      	str	r3, [r0, #28]
}
   d6db8:	bd10      	pop	{r4, pc}
   d6dba:	bf00      	nop
   d6dbc:	000e403c 	.word	0x000e403c

000d6dc0 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d6dc0:	4770      	bx	lr

000d6dc2 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d6dc2:	4770      	bx	lr

000d6dc4 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      }
   d6dc4:	2001      	movs	r0, #1
   d6dc6:	4770      	bx	lr

000d6dc8 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d6dc8:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6dca:	bf08      	it	eq
   d6dcc:	6001      	streq	r1, [r0, #0]
	}
   d6dce:	2000      	movs	r0, #0
   d6dd0:	4770      	bx	lr

000d6dd2 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d6dd2:	b510      	push	{r4, lr}
}
   d6dd4:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d6dd6:	4604      	mov	r4, r0
}
   d6dd8:	f009 fc92 	bl	e0700 <_ZdlPvj>
   d6ddc:	4620      	mov	r0, r4
   d6dde:	bd10      	pop	{r4, pc}

000d6de0 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d6de0:	b510      	push	{r4, lr}
}
   d6de2:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d6de4:	4604      	mov	r4, r0
}
   d6de6:	f009 fc8b 	bl	e0700 <_ZdlPvj>
   d6dea:	4620      	mov	r0, r4
   d6dec:	bd10      	pop	{r4, pc}
	...

000d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6df0:	b510      	push	{r4, lr}
   d6df2:	4b05      	ldr	r3, [pc, #20]	; (d6e08 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d6df4:	4604      	mov	r4, r0
   d6df6:	f840 3b1c 	str.w	r3, [r0], #28
   d6dfa:	f008 fe35 	bl	dfa68 <_ZN6StringD1Ev>
   d6dfe:	1d20      	adds	r0, r4, #4
   d6e00:	f008 fe32 	bl	dfa68 <_ZN6StringD1Ev>
}
   d6e04:	4620      	mov	r0, r4
   d6e06:	bd10      	pop	{r4, pc}
   d6e08:	000e40a4 	.word	0x000e40a4

000d6e0c <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d6e0c:	b510      	push	{r4, lr}
   d6e0e:	4604      	mov	r4, r0
}
   d6e10:	f7ff ffee 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
   d6e14:	4620      	mov	r0, r4
   d6e16:	2158      	movs	r1, #88	; 0x58
   d6e18:	f009 fc72 	bl	e0700 <_ZdlPvj>
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	bd10      	pop	{r4, pc}

000d6e20 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d6e20:	b510      	push	{r4, lr}
   d6e22:	4b04      	ldr	r3, [pc, #16]	; (d6e34 <_ZN9LocalTimeD1Ev+0x14>)
   d6e24:	4604      	mov	r4, r0
   d6e26:	f840 3b04 	str.w	r3, [r0], #4
   d6e2a:	f7ff ffe1 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
   d6e2e:	4620      	mov	r0, r4
   d6e30:	bd10      	pop	{r4, pc}
   d6e32:	bf00      	nop
   d6e34:	000e4074 	.word	0x000e4074

000d6e38 <_ZN9LocalTimeD0Ev>:
   d6e38:	b510      	push	{r4, lr}
   d6e3a:	4604      	mov	r4, r0
   d6e3c:	f7ff fff0 	bl	d6e20 <_ZN9LocalTimeD1Ev>
   d6e40:	4620      	mov	r0, r4
   d6e42:	2160      	movs	r1, #96	; 0x60
   d6e44:	f009 fc5c 	bl	e0700 <_ZdlPvj>
   d6e48:	4620      	mov	r0, r4
   d6e4a:	bd10      	pop	{r4, pc}

000d6e4c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d6e4c:	f020 0302 	bic.w	r3, r0, #2
   d6e50:	2b01      	cmp	r3, #1
   d6e52:	d003      	beq.n	d6e5c <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d6e54:	1f43      	subs	r3, r0, #5
   d6e56:	4258      	negs	r0, r3
   d6e58:	4158      	adcs	r0, r3
   d6e5a:	4770      	bx	lr
   d6e5c:	4618      	mov	r0, r3
   d6e5e:	4770      	bx	lr

000d6e60 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d6e60:	b108      	cbz	r0, d6e66 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
	::operator delete(__p);
   d6e62:	f7fd b91c 	b.w	d409e <_ZdlPv>
      }
   d6e66:	4770      	bx	lr

000d6e68 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d6e68:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6e6a:	b148      	cbz	r0, d6e80 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d6e6c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d6e70:	d301      	bcc.n	d6e76 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d6e72:	f009 fc7f 	bl	e0774 <_ZSt17__throw_bad_allocv>
      }
   d6e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6e7a:	0080      	lsls	r0, r0, #2
   d6e7c:	f7fd b90b 	b.w	d4096 <_Znwj>
   d6e80:	bd08      	pop	{r3, pc}

000d6e82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e82:	680b      	ldr	r3, [r1, #0]
   d6e84:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d6e86:	684b      	ldr	r3, [r1, #4]
   d6e88:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d6e8a:	b113      	cbz	r3, d6e92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d6e8c:	685a      	ldr	r2, [r3, #4]
   d6e8e:	3201      	adds	r2, #1
   d6e90:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e92:	4770      	bx	lr

000d6e94 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d6e94:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d6e98:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d6e9c:	429a      	cmp	r2, r3
   d6e9e:	db13      	blt.n	d6ec8 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d6ea0:	dc10      	bgt.n	d6ec4 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d6ea2:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d6ea6:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d6eaa:	429a      	cmp	r2, r3
   d6eac:	db0c      	blt.n	d6ec8 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d6eae:	dc09      	bgt.n	d6ec4 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d6eb0:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d6eb4:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d6eb8:	429a      	cmp	r2, r3
   d6eba:	db05      	blt.n	d6ec8 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d6ebc:	bfcc      	ite	gt
   d6ebe:	2001      	movgt	r0, #1
   d6ec0:	2000      	movle	r0, #0
   d6ec2:	4770      	bx	lr
            return +1;
   d6ec4:	2001      	movs	r0, #1
   d6ec6:	4770      	bx	lr
            return -1;
   d6ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d6ecc:	4770      	bx	lr
	...

000d6ed0 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d6ed0:	4a02      	ldr	r2, [pc, #8]	; (d6edc <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d6ed2:	6002      	str	r2, [r0, #0]
   d6ed4:	684a      	ldr	r2, [r1, #4]
   d6ed6:	6042      	str	r2, [r0, #4]
   d6ed8:	4770      	bx	lr
   d6eda:	bf00      	nop
   d6edc:	000e4084 	.word	0x000e4084

000d6ee0 <_ZN12LocalTimeHMSaSERKS_>:
   d6ee0:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d6ee4:	7102      	strb	r2, [r0, #4]
   d6ee6:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d6eea:	7142      	strb	r2, [r0, #5]
   d6eec:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d6ef0:	7182      	strb	r2, [r0, #6]
   d6ef2:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d6ef6:	71c2      	strb	r2, [r0, #7]
   d6ef8:	4770      	bx	lr

000d6efa <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d6efa:	b538      	push	{r3, r4, r5, lr}
   d6efc:	460c      	mov	r4, r1
   d6efe:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d6f00:	f100 011c 	add.w	r1, r0, #28
   d6f04:	4620      	mov	r0, r4
   d6f06:	f7ff ffc5 	bl	d6e94 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d6f0a:	2800      	cmp	r0, #0
   d6f0c:	db09      	blt.n	d6f22 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d6f0e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d6f12:	4620      	mov	r0, r4
   d6f14:	f7ff ffbe 	bl	d6e94 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d6f18:	2800      	cmp	r0, #0
   d6f1a:	bfd4      	ite	le
   d6f1c:	2000      	movle	r0, #0
   d6f1e:	2001      	movgt	r0, #1
    }
   d6f20:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d6f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6f26:	e7fb      	b.n	d6f20 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d6f28 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d6f28:	b538      	push	{r3, r4, r5, lr}
   d6f2a:	4604      	mov	r4, r0
   d6f2c:	460d      	mov	r5, r1
   d6f2e:	3004      	adds	r0, #4
   d6f30:	3104      	adds	r1, #4
   d6f32:	f008 fe20 	bl	dfb76 <_ZN6StringaSERKS_>
   d6f36:	f105 0114 	add.w	r1, r5, #20
   d6f3a:	f104 0014 	add.w	r0, r4, #20
   d6f3e:	f7ff ffcf 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
   d6f42:	f105 011c 	add.w	r1, r5, #28
   d6f46:	f104 001c 	add.w	r0, r4, #28
   d6f4a:	f008 fe14 	bl	dfb76 <_ZN6StringaSERKS_>
   d6f4e:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d6f52:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6f56:	f7ff ffc3 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d6f5a:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d6f5e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d6f62:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d6f66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d6f6a:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d6f6e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d6f72:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d6f76:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d6f7a:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6f7e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6f82:	f7ff ffad 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
   d6f86:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d6f8a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d6f8e:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d6f92:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d6f96:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d6f9a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d6f9e:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d6fa2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d6fa6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6faa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6fae:	f7ff ff97 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d6fb2:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6fb6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6fba:	4620      	mov	r0, r4
   d6fbc:	bd38      	pop	{r3, r4, r5, pc}

000d6fbe <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d6fbe:	694a      	ldr	r2, [r1, #20]
   d6fc0:	6803      	ldr	r3, [r0, #0]
   d6fc2:	f362 0316 	bfi	r3, r2, #0, #23
   d6fc6:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d6fc8:	690b      	ldr	r3, [r1, #16]
   d6fca:	1c5a      	adds	r2, r3, #1
   d6fcc:	8843      	ldrh	r3, [r0, #2]
   d6fce:	f362 13ca 	bfi	r3, r2, #7, #4
   d6fd2:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d6fd4:	68ca      	ldr	r2, [r1, #12]
   d6fd6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d6fda:	f362 03c7 	bfi	r3, r2, #3, #5
   d6fde:	70c3      	strb	r3, [r0, #3]
}
   d6fe0:	4770      	bx	lr

000d6fe2 <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d6fe2:	b510      	push	{r4, lr}
   d6fe4:	4604      	mov	r4, r0
   d6fe6:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d6fe8:	2224      	movs	r2, #36	; 0x24
   d6fea:	2100      	movs	r1, #0
   d6fec:	a803      	add	r0, sp, #12
   d6fee:	f00a fb63 	bl	e16b8 <memset>
    timeInfo.tm_year = ymd.year;
   d6ff2:	6823      	ldr	r3, [r4, #0]
   d6ff4:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d6ff8:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d6ffa:	8863      	ldrh	r3, [r4, #2]
   d6ffc:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d7000:	3b01      	subs	r3, #1
   d7002:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d7004:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d7006:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d7008:	08db      	lsrs	r3, r3, #3
   d700a:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d700c:	f006 f8c4 	bl	dd198 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d7010:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d7014:	a903      	add	r1, sp, #12
   d7016:	4668      	mov	r0, sp
   d7018:	f006 f8ae 	bl	dd178 <localtime_r>
}
   d701c:	9809      	ldr	r0, [sp, #36]	; 0x24
   d701e:	b00c      	add	sp, #48	; 0x30
   d7020:	bd10      	pop	{r4, pc}

000d7022 <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d7022:	b530      	push	{r4, r5, lr}
   d7024:	4604      	mov	r4, r0
   d7026:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d7028:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d702a:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d702c:	a803      	add	r0, sp, #12
   d702e:	2100      	movs	r1, #0
   d7030:	f00a fb42 	bl	e16b8 <memset>
    timeInfo.tm_year = ymd.year;
   d7034:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d7036:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d7038:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d703c:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d703e:	8863      	ldrh	r3, [r4, #2]
   d7040:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d7044:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d7046:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d704a:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d704c:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d704e:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d7050:	f006 f8a2 	bl	dd198 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d7054:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d7058:	a903      	add	r1, sp, #12
   d705a:	4668      	mov	r0, sp
   d705c:	f006 f88c 	bl	dd178 <localtime_r>
    fromTimeInfo(&timeInfo);
   d7060:	a903      	add	r1, sp, #12
   d7062:	4620      	mov	r0, r4
   d7064:	f7ff ffab 	bl	d6fbe <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d7068:	b00d      	add	sp, #52	; 0x34
   d706a:	bd30      	pop	{r4, r5, pc}

000d706c <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d706c:	6803      	ldr	r3, [r0, #0]
   d706e:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d7072:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d7076:	4293      	cmp	r3, r2
   d7078:	d313      	bcc.n	d70a2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d707a:	d810      	bhi.n	d709e <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d707c:	8842      	ldrh	r2, [r0, #2]
   d707e:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d7082:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d7086:	429a      	cmp	r2, r3
   d7088:	d30b      	bcc.n	d70a2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d708a:	d808      	bhi.n	d709e <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d708c:	78c3      	ldrb	r3, [r0, #3]
   d708e:	08db      	lsrs	r3, r3, #3
   d7090:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d7094:	d305      	bcc.n	d70a2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d7096:	bf8c      	ite	hi
   d7098:	2001      	movhi	r0, #1
   d709a:	2000      	movls	r0, #0
   d709c:	4770      	bx	lr
        cmp = +1;
   d709e:	2001      	movs	r0, #1
   d70a0:	4770      	bx	lr
        cmp = -1;
   d70a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d70a6:	4770      	bx	lr

000d70a8 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d70a8:	4a02      	ldr	r2, [pc, #8]	; (d70b4 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d70aa:	6002      	str	r2, [r0, #0]
   d70ac:	2200      	movs	r2, #0
   d70ae:	6042      	str	r2, [r0, #4]
}
   d70b0:	4770      	bx	lr
   d70b2:	bf00      	nop
   d70b4:	000e4084 	.word	0x000e4084

000d70b8 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d70b8:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d70ba:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d70bc:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d70be:	8083      	strh	r3, [r0, #4]
   d70c0:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d70c2:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d70c4:	ab05      	add	r3, sp, #20
   d70c6:	9300      	str	r3, [sp, #0]
   d70c8:	4913      	ldr	r1, [pc, #76]	; (d7118 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d70ca:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d70cc:	ab04      	add	r3, sp, #16
   d70ce:	aa03      	add	r2, sp, #12
   d70d0:	4628      	mov	r0, r5
   d70d2:	f006 f811 	bl	dd0f8 <sscanf>
   d70d6:	2803      	cmp	r0, #3
   d70d8:	d107      	bne.n	d70ea <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d70da:	9b03      	ldr	r3, [sp, #12]
   d70dc:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d70de:	9b04      	ldr	r3, [sp, #16]
   d70e0:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d70e2:	9b05      	ldr	r3, [sp, #20]
   d70e4:	71a3      	strb	r3, [r4, #6]
}
   d70e6:	b007      	add	sp, #28
   d70e8:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d70ea:	490c      	ldr	r1, [pc, #48]	; (d711c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d70ec:	ab04      	add	r3, sp, #16
   d70ee:	aa03      	add	r2, sp, #12
   d70f0:	4628      	mov	r0, r5
   d70f2:	f006 f801 	bl	dd0f8 <sscanf>
   d70f6:	2802      	cmp	r0, #2
   d70f8:	d104      	bne.n	d7104 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d70fa:	9b03      	ldr	r3, [sp, #12]
   d70fc:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d70fe:	9b04      	ldr	r3, [sp, #16]
   d7100:	7163      	strb	r3, [r4, #5]
   d7102:	e7f0      	b.n	d70e6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d7104:	4906      	ldr	r1, [pc, #24]	; (d7120 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d7106:	aa03      	add	r2, sp, #12
   d7108:	4628      	mov	r0, r5
   d710a:	f005 fff5 	bl	dd0f8 <sscanf>
   d710e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d7110:	bf04      	itt	eq
   d7112:	9b03      	ldreq	r3, [sp, #12]
   d7114:	7123      	strbeq	r3, [r4, #4]
}
   d7116:	e7e6      	b.n	d70e6 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d7118:	000e4044 	.word	0x000e4044
   d711c:	000e4047 	.word	0x000e4047
   d7120:	000e3e83 	.word	0x000e3e83

000d7124 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d7124:	b510      	push	{r4, lr}
   d7126:	4b04      	ldr	r3, [pc, #16]	; (d7138 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d7128:	6003      	str	r3, [r0, #0]
   d712a:	2300      	movs	r3, #0
   d712c:	4604      	mov	r4, r0
   d712e:	6043      	str	r3, [r0, #4]
    parse(str);
   d7130:	f7ff ffc2 	bl	d70b8 <_ZN12LocalTimeHMS5parseEPKc>
}
   d7134:	4620      	mov	r0, r4
   d7136:	bd10      	pop	{r4, pc}
   d7138:	000e4084 	.word	0x000e4084

000d713c <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d713c:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d713e:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d7140:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d7142:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d7144:	7003      	strb	r3, [r0, #0]
   d7146:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d714a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d714e:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d7152:	490a      	ldr	r1, [pc, #40]	; (d717c <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d7154:	301c      	adds	r0, #28
   d7156:	f7ff ffe5 	bl	d7124 <_ZN12LocalTimeHMSC1EPKc>
   d715a:	4909      	ldr	r1, [pc, #36]	; (d7180 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d715c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7160:	f7ff ffe0 	bl	d7124 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d7164:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d7168:	4906      	ldr	r1, [pc, #24]	; (d7184 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d716a:	6365      	str	r5, [r4, #52]	; 0x34
   d716c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7170:	f008 fcc5 	bl	dfafe <_ZN6StringC1EPKc>
   d7174:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d7176:	4620      	mov	r0, r4
   d7178:	bd38      	pop	{r3, r4, r5, pc}
   d717a:	bf00      	nop
   d717c:	000e404d 	.word	0x000e404d
   d7180:	000e4056 	.word	0x000e4056
   d7184:	000e44eb 	.word	0x000e44eb

000d7188 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d7188:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d718c:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d7190:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d7194:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d7196:	bfb8      	it	lt
   d7198:	4808      	ldrlt	r0, [pc, #32]	; (d71bc <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d719a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d719e:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d71a2:	bfbd      	ittte	lt
   d71a4:	fb00 2003 	mlalt	r0, r0, r3, r2
   d71a8:	1840      	addlt	r0, r0, r1
   d71aa:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d71ac:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d71b0:	bfa4      	itt	ge
   d71b2:	fb00 2303 	mlage	r3, r0, r3, r2
   d71b6:	1858      	addge	r0, r3, r1
}
   d71b8:	4770      	bx	lr
   d71ba:	bf00      	nop
   d71bc:	fffff1f0 	.word	0xfffff1f0

000d71c0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d71c0:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d71c4:	b943      	cbnz	r3, d71d8 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d71c6:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d71ca:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d71cc:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d71d0:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d71d2:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d71d6:	600b      	str	r3, [r1, #0]
}
   d71d8:	4770      	bx	lr

000d71da <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d71da:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d71de:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d71e0:	b9b3      	cbnz	r3, d7210 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d71e2:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d71e6:	688c      	ldr	r4, [r1, #8]
   d71e8:	442c      	add	r4, r5
   d71ea:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d71ee:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d71f0:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d71f4:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d71f6:	bfb5      	itete	lt
   d71f8:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d71fa:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d71fc:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d71fe:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d7200:	bfb5      	itete	lt
   d7202:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d7206:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d720a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d720c:	189b      	addge	r3, r3, r2
   d720e:	600b      	str	r3, [r1, #0]
}
   d7210:	bd30      	pop	{r4, r5, pc}

000d7212 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d7212:	b538      	push	{r3, r4, r5, lr}
   d7214:	6844      	ldr	r4, [r0, #4]
   d7216:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d7218:	68ab      	ldr	r3, [r5, #8]
   d721a:	42a3      	cmp	r3, r4
   d721c:	d007      	beq.n	d722e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d721e:	4620      	mov	r0, r4
   d7220:	f7ff ff24 	bl	d706c <_ZNK12LocalTimeYMD9compareToES_>
   d7224:	3404      	adds	r4, #4
        if (*it == ymd) {
   d7226:	2800      	cmp	r0, #0
   d7228:	d1f6      	bne.n	d7218 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d722a:	2001      	movs	r0, #1
}
   d722c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d722e:	2000      	movs	r0, #0
   d7230:	e7fc      	b.n	d722c <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d7232 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d7232:	b538      	push	{r3, r4, r5, lr}
   d7234:	6904      	ldr	r4, [r0, #16]
   d7236:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d7238:	696b      	ldr	r3, [r5, #20]
   d723a:	42a3      	cmp	r3, r4
   d723c:	d007      	beq.n	d724e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d723e:	4620      	mov	r0, r4
   d7240:	f7ff ff14 	bl	d706c <_ZNK12LocalTimeYMD9compareToES_>
   d7244:	3404      	adds	r4, #4
        if (*it == ymd) {
   d7246:	2800      	cmp	r0, #0
   d7248:	d1f6      	bne.n	d7238 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d724a:	2001      	movs	r0, #1
}
   d724c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d724e:	2000      	movs	r0, #0
   d7250:	e7fc      	b.n	d724c <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d7252 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d7252:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7254:	4605      	mov	r5, r0
   d7256:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d7258:	f7ff ffeb 	bl	d7232 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d725c:	b990      	cbnz	r0, d7284 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d725e:	a801      	add	r0, sp, #4
   d7260:	9101      	str	r1, [sp, #4]
   d7262:	f7ff febe 	bl	d6fe2 <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d7266:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d7268:	4631      	mov	r1, r6
   d726a:	fa43 f400 	asr.w	r4, r3, r0
   d726e:	4628      	mov	r0, r5
   d7270:	f7ff ffcf 	bl	d7212 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d7274:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d7278:	2c00      	cmp	r4, #0
   d727a:	bf08      	it	eq
   d727c:	4604      	moveq	r4, r0
}
   d727e:	4620      	mov	r0, r4
   d7280:	b002      	add	sp, #8
   d7282:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d7284:	2400      	movs	r4, #0
   d7286:	e7fa      	b.n	d727e <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d7288 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d7288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d728c:	2400      	movs	r4, #0
   d728e:	6845      	ldr	r5, [r0, #4]
   d7290:	4680      	mov	r8, r0
   d7292:	4626      	mov	r6, r4
   d7294:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d7296:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d729a:	429d      	cmp	r5, r3
   d729c:	d01e      	beq.n	d72dc <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d729e:	f367 0916 	bfi	r9, r7, #0, #23
   d72a2:	f366 59da 	bfi	r9, r6, #23, #4
   d72a6:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d72aa:	f1b9 0f00 	cmp.w	r9, #0
   d72ae:	d109      	bne.n	d72c4 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d72b0:	682f      	ldr	r7, [r5, #0]
   d72b2:	886e      	ldrh	r6, [r5, #2]
   d72b4:	78ec      	ldrb	r4, [r5, #3]
   d72b6:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d72ba:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d72be:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d72c0:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d72c2:	e7e8      	b.n	d7296 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d72c4:	f367 0116 	bfi	r1, r7, #0, #23
   d72c8:	f366 51da 	bfi	r1, r6, #23, #4
   d72cc:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d72d0:	4628      	mov	r0, r5
   d72d2:	f7ff fecb 	bl	d706c <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d72d6:	2800      	cmp	r0, #0
   d72d8:	dcea      	bgt.n	d72b0 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d72da:	e7f1      	b.n	d72c0 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d72dc:	2000      	movs	r0, #0
   d72de:	f367 0016 	bfi	r0, r7, #0, #23
   d72e2:	f366 50da 	bfi	r0, r6, #23, #4
   d72e6:	f364 60df 	bfi	r0, r4, #27, #5
}
   d72ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d72f0 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d72f0:	4a05      	ldr	r2, [pc, #20]	; (d7308 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d72f2:	b508      	push	{r3, lr}
   d72f4:	6002      	str	r2, [r0, #0]
   d72f6:	2200      	movs	r2, #0
   d72f8:	4603      	mov	r3, r0
   d72fa:	6042      	str	r2, [r0, #4]
   d72fc:	3008      	adds	r0, #8
   d72fe:	f7ff fed3 	bl	d70a8 <_ZN12LocalTimeHMSC1Ev>
}
   d7302:	4618      	mov	r0, r3
   d7304:	bd08      	pop	{r3, pc}
   d7306:	bf00      	nop
   d7308:	000e4094 	.word	0x000e4094

000d730c <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d730c:	2300      	movs	r3, #0
   d730e:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d7310:	8183      	strh	r3, [r0, #12]
   d7312:	7383      	strb	r3, [r0, #14]
}
   d7314:	4770      	bx	lr
	...

000d7318 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d7318:	b530      	push	{r4, r5, lr}
   d731a:	4604      	mov	r4, r0
   d731c:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d731e:	460d      	mov	r5, r1
   d7320:	b111      	cbz	r1, d7328 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d7322:	780b      	ldrb	r3, [r1, #0]
   d7324:	2b4d      	cmp	r3, #77	; 0x4d
   d7326:	d003      	beq.n	d7330 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d7328:	4620      	mov	r0, r4
   d732a:	f7ff ffef 	bl	d730c <_ZN15LocalTimeChange5clearEv>
   d732e:	e01b      	b.n	d7368 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d7330:	ab05      	add	r3, sp, #20
   d7332:	9300      	str	r3, [sp, #0]
   d7334:	490f      	ldr	r1, [pc, #60]	; (d7374 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d7336:	ab04      	add	r3, sp, #16
   d7338:	aa03      	add	r2, sp, #12
   d733a:	4628      	mov	r0, r5
   d733c:	f005 fedc 	bl	dd0f8 <sscanf>
   d7340:	2803      	cmp	r0, #3
   d7342:	d1f1      	bne.n	d7328 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d7344:	9b03      	ldr	r3, [sp, #12]
   d7346:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d7348:	9b04      	ldr	r3, [sp, #16]
   d734a:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d734c:	9b05      	ldr	r3, [sp, #20]
   d734e:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d7350:	212f      	movs	r1, #47	; 0x2f
   d7352:	4628      	mov	r0, r5
   d7354:	f00a f9f5 	bl	e1742 <strchr>
        if (cp) {
   d7358:	b140      	cbz	r0, d736c <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d735a:	1c41      	adds	r1, r0, #1
   d735c:	f104 0008 	add.w	r0, r4, #8
   d7360:	f7ff feaa 	bl	d70b8 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d7364:	2301      	movs	r3, #1
   d7366:	71e3      	strb	r3, [r4, #7]
}
   d7368:	b007      	add	sp, #28
   d736a:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d736c:	81a0      	strh	r0, [r4, #12]
   d736e:	73a0      	strb	r0, [r4, #14]
}
   d7370:	e7f8      	b.n	d7364 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d7372:	bf00      	nop
   d7374:	000e405f 	.word	0x000e405f

000d7378 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d7378:	4b10      	ldr	r3, [pc, #64]	; (d73bc <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d737a:	4911      	ldr	r1, [pc, #68]	; (d73c0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d737c:	b510      	push	{r4, lr}
   d737e:	4604      	mov	r4, r0
   d7380:	f840 3b04 	str.w	r3, [r0], #4
   d7384:	f008 fbbb 	bl	dfafe <_ZN6StringC1EPKc>
   d7388:	f104 0014 	add.w	r0, r4, #20
   d738c:	f7ff fe8c 	bl	d70a8 <_ZN12LocalTimeHMSC1Ev>
   d7390:	490b      	ldr	r1, [pc, #44]	; (d73c0 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d7392:	f104 001c 	add.w	r0, r4, #28
   d7396:	f008 fbb2 	bl	dfafe <_ZN6StringC1EPKc>
   d739a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d739e:	f7ff fe83 	bl	d70a8 <_ZN12LocalTimeHMSC1Ev>
   d73a2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d73a6:	f7ff ffa3 	bl	d72f0 <_ZN15LocalTimeChangeC1Ev>
   d73aa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d73ae:	f7ff ff9f 	bl	d72f0 <_ZN15LocalTimeChangeC1Ev>
   d73b2:	2300      	movs	r3, #0
   d73b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d73b8:	4620      	mov	r0, r4
   d73ba:	bd10      	pop	{r4, pc}
   d73bc:	000e40a4 	.word	0x000e40a4
   d73c0:	000e44eb 	.word	0x000e44eb

000d73c4 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d73c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73c8:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d73ca:	4608      	mov	r0, r1
   d73cc:	f00a f9e2 	bl	e1794 <strdup>
    size_t ii = 0;
   d73d0:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d73d2:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d73d4:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d73d6:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d73da:	493f      	ldr	r1, [pc, #252]	; (d74d8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d73dc:	9801      	ldr	r0, [sp, #4]
   d73de:	aa01      	add	r2, sp, #4
   d73e0:	f00b f8ea 	bl	e25b8 <strtok_r>
   d73e4:	4601      	mov	r1, r0
   d73e6:	2800      	cmp	r0, #0
   d73e8:	d062      	beq.n	d74b0 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d73ea:	2d01      	cmp	r5, #1
   d73ec:	f105 0301 	add.w	r3, r5, #1
   d73f0:	d053      	beq.n	d749a <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d73f2:	2d02      	cmp	r5, #2
   d73f4:	d056      	beq.n	d74a4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d73f6:	2d00      	cmp	r5, #0
   d73f8:	d146      	bne.n	d7488 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d73fa:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d73fc:	f892 9000 	ldrb.w	r9, [r2]
   d7400:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d7404:	4615      	mov	r5, r2
   d7406:	4617      	mov	r7, r2
   d7408:	f102 0201 	add.w	r2, r2, #1
   d740c:	d8f6      	bhi.n	d73fc <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d740e:	2200      	movs	r2, #0
   d7410:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d7412:	f104 001c 	add.w	r0, r4, #28
   d7416:	f008 fbd0 	bl	dfbba <_ZN6StringaSEPKc>
                valid = true;
   d741a:	2201      	movs	r2, #1
                *cp = save2;
   d741c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d7420:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d7424:	782a      	ldrb	r2, [r5, #0]
   d7426:	b36a      	cbz	r2, d7484 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d7428:	f897 a000 	ldrb.w	sl, [r7]
   d742c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d7430:	2a3f      	cmp	r2, #63	; 0x3f
   d7432:	46b9      	mov	r9, r7
   d7434:	46bb      	mov	fp, r7
   d7436:	f107 0701 	add.w	r7, r7, #1
   d743a:	d9f5      	bls.n	d7428 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d743c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d743e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d7442:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d7446:	4629      	mov	r1, r5
   d7448:	4638      	mov	r0, r7
   d744a:	f7ff fe35 	bl	d70b8 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d744e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d7452:	f1ba 0f00 	cmp.w	sl, #0
   d7456:	d015      	beq.n	d7484 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d7458:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d745a:	f81b ab01 	ldrb.w	sl, [fp], #1
   d745e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d7462:	d8f9      	bhi.n	d7458 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d7464:	2200      	movs	r2, #0
   d7466:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d7468:	4649      	mov	r1, r9
   d746a:	1d20      	adds	r0, r4, #4
   d746c:	f008 fba5 	bl	dfbba <_ZN6StringaSEPKc>
                        *cp = save2;
   d7470:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d7474:	f104 0014 	add.w	r0, r4, #20
   d7478:	f1ba 0f00 	cmp.w	sl, #0
   d747c:	d006      	beq.n	d748c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d747e:	4629      	mov	r1, r5
   d7480:	f7ff fe1a 	bl	d70b8 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d7484:	2501      	movs	r5, #1
   d7486:	e7a8      	b.n	d73da <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d7488:	461d      	mov	r5, r3
   d748a:	e7a6      	b.n	d73da <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d748c:	4639      	mov	r1, r7
   d748e:	f7ff fd27 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d7492:	7e23      	ldrb	r3, [r4, #24]
   d7494:	3b01      	subs	r3, #1
   d7496:	7623      	strb	r3, [r4, #24]
   d7498:	e7f4      	b.n	d7484 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d749a:	4640      	mov	r0, r8
   d749c:	f7ff ff3c 	bl	d7318 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d74a0:	2502      	movs	r5, #2
   d74a2:	e79a      	b.n	d73da <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d74a4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d74a8:	f7ff ff36 	bl	d7318 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d74ac:	2503      	movs	r5, #3
   d74ae:	e794      	b.n	d73da <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d74b0:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d74b4:	b143      	cbz	r3, d74c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d74b6:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d74ba:	b92a      	cbnz	r2, d74c8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d74bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d74c0:	f7ff ff24 	bl	d730c <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d74c4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d74c8:	4630      	mov	r0, r6
   d74ca:	f005 fdfd 	bl	dd0c8 <free>
}
   d74ce:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d74d2:	b003      	add	sp, #12
   d74d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d74d8:	000e4069 	.word	0x000e4069

000d74dc <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d74dc:	b538      	push	{r3, r4, r5, lr}
   d74de:	4b13      	ldr	r3, [pc, #76]	; (d752c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d74e0:	4604      	mov	r4, r0
   d74e2:	460d      	mov	r5, r1
   d74e4:	f840 3b04 	str.w	r3, [r0], #4
   d74e8:	4911      	ldr	r1, [pc, #68]	; (d7530 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d74ea:	f008 fb08 	bl	dfafe <_ZN6StringC1EPKc>
   d74ee:	f104 0014 	add.w	r0, r4, #20
   d74f2:	f7ff fdd9 	bl	d70a8 <_ZN12LocalTimeHMSC1Ev>
   d74f6:	490e      	ldr	r1, [pc, #56]	; (d7530 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d74f8:	f104 001c 	add.w	r0, r4, #28
   d74fc:	f008 faff 	bl	dfafe <_ZN6StringC1EPKc>
   d7500:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d7504:	f7ff fdd0 	bl	d70a8 <_ZN12LocalTimeHMSC1Ev>
   d7508:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d750c:	f7ff fef0 	bl	d72f0 <_ZN15LocalTimeChangeC1Ev>
   d7510:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d7514:	f7ff feec 	bl	d72f0 <_ZN15LocalTimeChangeC1Ev>
   d7518:	2300      	movs	r3, #0
   d751a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d751e:	4629      	mov	r1, r5
   d7520:	4620      	mov	r0, r4
   d7522:	f7ff ff4f 	bl	d73c4 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d7526:	4620      	mov	r0, r4
   d7528:	bd38      	pop	{r3, r4, r5, pc}
   d752a:	bf00      	nop
   d752c:	000e40a4 	.word	0x000e40a4
   d7530:	000e44eb 	.word	0x000e44eb

000d7534 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d7534:	b508      	push	{r3, lr}
   d7536:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d7538:	f7ff fdb6 	bl	d70a8 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d753c:	688a      	ldr	r2, [r1, #8]
   d753e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d7540:	684a      	ldr	r2, [r1, #4]
   d7542:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d7544:	680a      	ldr	r2, [r1, #0]
   d7546:	719a      	strb	r2, [r3, #6]
}
   d7548:	4618      	mov	r0, r3
   d754a:	bd08      	pop	{r3, pc}

000d754c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d754c:	b513      	push	{r0, r1, r4, lr}
   d754e:	4b07      	ldr	r3, [pc, #28]	; (d756c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d7550:	6003      	str	r3, [r0, #0]
   d7552:	2300      	movs	r3, #0
   d7554:	4604      	mov	r4, r0
   d7556:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d7558:	4668      	mov	r0, sp
   d755a:	f7ff ffeb 	bl	d7534 <_ZNK14LocalTimeValue3hmsEv>
   d755e:	4669      	mov	r1, sp
   d7560:	4620      	mov	r0, r4
   d7562:	f7ff fcbd 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
}
   d7566:	4620      	mov	r0, r4
   d7568:	b002      	add	sp, #8
   d756a:	bd10      	pop	{r4, pc}
   d756c:	000e4084 	.word	0x000e4084

000d7570 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d7570:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d7574:	b943      	cbnz	r3, d7588 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d7576:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d757a:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d757c:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d7580:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d7582:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d7586:	6003      	str	r3, [r0, #0]
}
   d7588:	4770      	bx	lr

000d758a <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d758a:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d758c:	2300      	movs	r3, #0
   d758e:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d7590:	a801      	add	r0, sp, #4
   d7592:	9301      	str	r3, [sp, #4]
   d7594:	f7ff fd13 	bl	d6fbe <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d7598:	9801      	ldr	r0, [sp, #4]
   d759a:	b003      	add	sp, #12
   d759c:	f85d fb04 	ldr.w	pc, [sp], #4

000d75a0 <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d75a0:	4b19      	ldr	r3, [pc, #100]	; (d7608 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d75a2:	b570      	push	{r4, r5, r6, lr}
   d75a4:	4604      	mov	r4, r0
   d75a6:	460d      	mov	r5, r1
   d75a8:	f840 3b04 	str.w	r3, [r0], #4
   d75ac:	3104      	adds	r1, #4
   d75ae:	f008 faf1 	bl	dfb94 <_ZN6StringC1ERKS_>
   d75b2:	f105 0114 	add.w	r1, r5, #20
   d75b6:	f104 0014 	add.w	r0, r4, #20
   d75ba:	f7ff fc89 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d75be:	f105 011c 	add.w	r1, r5, #28
   d75c2:	f104 001c 	add.w	r0, r4, #28
   d75c6:	f008 fae5 	bl	dfb94 <_ZN6StringC1ERKS_>
   d75ca:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d75ce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d75d2:	f7ff fc7d 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d75d6:	4e0d      	ldr	r6, [pc, #52]	; (d760c <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d75d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d75da:	63a3      	str	r3, [r4, #56]	; 0x38
   d75dc:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d75e0:	6366      	str	r6, [r4, #52]	; 0x34
   d75e2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d75e6:	f7ff fc73 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d75ea:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d75ec:	64a3      	str	r3, [r4, #72]	; 0x48
   d75ee:	6466      	str	r6, [r4, #68]	; 0x44
   d75f0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d75f4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d75f8:	f7ff fc6a 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d75fc:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d7600:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d7604:	4620      	mov	r0, r4
   d7606:	bd70      	pop	{r4, r5, r6, pc}
   d7608:	000e40a4 	.word	0x000e40a4
   d760c:	000e4094 	.word	0x000e4094

000d7610 <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d7610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7612:	460c      	mov	r4, r1
   d7614:	f851 3b04 	ldr.w	r3, [r1], #4
   d7618:	4607      	mov	r7, r0
   d761a:	f840 3b04 	str.w	r3, [r0], #4
   d761e:	f7ff ffbf 	bl	d75a0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d7622:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d7626:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d762a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d762e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7630:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d7634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7636:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d763a:	6833      	ldr	r3, [r6, #0]
   d763c:	602b      	str	r3, [r5, #0]
   d763e:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d7642:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d7646:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d764a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d764c:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d7650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7652:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7656:	6833      	ldr	r3, [r6, #0]
   d7658:	602b      	str	r3, [r5, #0]
   d765a:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d765e:	34c8      	adds	r4, #200	; 0xc8
   d7660:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d7664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7666:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d766a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d766c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d766e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7670:	6823      	ldr	r3, [r4, #0]
   d7672:	602b      	str	r3, [r5, #0]
   d7674:	4638      	mov	r0, r7
   d7676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7678 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d7678:	b510      	push	{r4, lr}
   d767a:	4604      	mov	r4, r0
   d767c:	3038      	adds	r0, #56	; 0x38
   d767e:	f008 f9f3 	bl	dfa68 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d7682:	6920      	ldr	r0, [r4, #16]
   d7684:	f7ff fbec 	bl	d6e60 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d7688:	6860      	ldr	r0, [r4, #4]
   d768a:	f7ff fbe9 	bl	d6e60 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d768e:	4620      	mov	r0, r4
   d7690:	bd10      	pop	{r4, pc}
	...

000d7694 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d7694:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d7696:	4d09      	ldr	r5, [pc, #36]	; (d76bc <_ZN9LocalTime8instanceEv+0x28>)
   d7698:	682b      	ldr	r3, [r5, #0]
   d769a:	b963      	cbnz	r3, d76b6 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d769c:	2060      	movs	r0, #96	; 0x60
   d769e:	f7fc fcfa 	bl	d4096 <_Znwj>
   d76a2:	4604      	mov	r4, r0
   d76a4:	b130      	cbz	r0, d76b4 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d76a6:	4b06      	ldr	r3, [pc, #24]	; (d76c0 <_ZN9LocalTime8instanceEv+0x2c>)
   d76a8:	f840 3b04 	str.w	r3, [r0], #4
   d76ac:	f7ff fe64 	bl	d7378 <_ZN22LocalTimePosixTimezoneC1Ev>
   d76b0:	2364      	movs	r3, #100	; 0x64
   d76b2:	65e3      	str	r3, [r4, #92]	; 0x5c
   d76b4:	602c      	str	r4, [r5, #0]
}
   d76b6:	6828      	ldr	r0, [r5, #0]
   d76b8:	bd38      	pop	{r3, r4, r5, pc}
   d76ba:	bf00      	nop
   d76bc:	2003e480 	.word	0x2003e480
   d76c0:	000e4074 	.word	0x000e4074

000d76c4 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d76c4:	f005 bd68 	b.w	dd198 <mktime>

000d76c8 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d76c8:	3901      	subs	r1, #1
   d76ca:	290b      	cmp	r1, #11
   d76cc:	d815      	bhi.n	d76fa <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d76ce:	e8df f001 	tbb	[pc, r1]
   d76d2:	0816      	.short	0x0816
   d76d4:	06160616 	.word	0x06160616
   d76d8:	16061616 	.word	0x16061616
   d76dc:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d76de:	201e      	movs	r0, #30
   d76e0:	4770      	bx	lr
            if ((year % 4) == 0) {
   d76e2:	0783      	lsls	r3, r0, #30
   d76e4:	d10d      	bne.n	d7702 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d76e6:	2264      	movs	r2, #100	; 0x64
   d76e8:	fb90 f3f2 	sdiv	r3, r0, r2
   d76ec:	fb02 0013 	mls	r0, r2, r3, r0
   d76f0:	2800      	cmp	r0, #0
                    return 29;
   d76f2:	bf0c      	ite	eq
   d76f4:	201c      	moveq	r0, #28
   d76f6:	201d      	movne	r0, #29
   d76f8:	4770      	bx	lr
    return 0;
   d76fa:	2000      	movs	r0, #0
   d76fc:	4770      	bx	lr
            return 31;
   d76fe:	201f      	movs	r0, #31
   d7700:	4770      	bx	lr
                return 28;
   d7702:	201c      	movs	r0, #28
}
   d7704:	4770      	bx	lr

000d7706 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d7706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d7708:	2301      	movs	r3, #1
   d770a:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d770c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d7710:	3b01      	subs	r3, #1
   d7712:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d7714:	2300      	movs	r3, #0
   d7716:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d771a:	4606      	mov	r6, r0
   d771c:	460c      	mov	r4, r1
   d771e:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d7720:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d7722:	4620      	mov	r0, r4
   d7724:	f7ff ffce 	bl	d76c4 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d7728:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d772c:	69a2      	ldr	r2, [r4, #24]
   d772e:	429a      	cmp	r2, r3
   d7730:	d003      	beq.n	d773a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d7732:	68e3      	ldr	r3, [r4, #12]
   d7734:	3301      	adds	r3, #1
   d7736:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d7738:	e7f3      	b.n	d7722 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d773a:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d773e:	2d01      	cmp	r5, #1
   d7740:	d013      	beq.n	d776a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d7742:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d7744:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d7746:	3d01      	subs	r5, #1
   d7748:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d774c:	441d      	add	r5, r3
   d774e:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d7750:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d7754:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7758:	f7ff ffb6 	bl	d76c8 <_ZN9LocalTime14lastDayOfMonthEii>
   d775c:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d775e:	bfc4      	itt	gt
   d7760:	3d07      	subgt	r5, #7
   d7762:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d7764:	4620      	mov	r0, r4
   d7766:	f7ff ffad 	bl	d76c4 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d776a:	4621      	mov	r1, r4
   d776c:	f106 0008 	add.w	r0, r6, #8
   d7770:	f7ff fd26 	bl	d71c0 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d7774:	4638      	mov	r0, r7
   d7776:	f7ff fd30 	bl	d71da <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d777a:	4620      	mov	r0, r4
}
   d777c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d7780:	f005 bd0a 	b.w	dd198 <mktime>

000d7784 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d7784:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d7786:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d778a:	b085      	sub	sp, #20
   d778c:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d778e:	b92b      	cbnz	r3, d779c <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d7790:	f7ff ff80 	bl	d7694 <_ZN9LocalTime8instanceEv>
   d7794:	1d01      	adds	r1, r0, #4
   d7796:	1d20      	adds	r0, r4, #4
   d7798:	f7ff fbc6 	bl	d6f28 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d779c:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d77a0:	2b00      	cmp	r3, #0
   d77a2:	d069      	beq.n	d7878 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d77a4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d77a8:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d77ac:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d77ae:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d77b0:	a802      	add	r0, sp, #8
   d77b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d77b6:	f005 fcdf 	bl	dd178 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d77ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d77bc:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d77c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d77c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77c6:	6833      	ldr	r3, [r6, #0]
   d77c8:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d77ca:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d77ce:	a802      	add	r0, sp, #8
   d77d0:	f7ff fb7e 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d77d4:	aa02      	add	r2, sp, #8
   d77d6:	4639      	mov	r1, r7
   d77d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d77dc:	f7ff ff93 	bl	d7706 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d77e0:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d77e4:	f104 0118 	add.w	r1, r4, #24
   d77e8:	a802      	add	r0, sp, #8
   d77ea:	f7ff fb71 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d77ee:	aa02      	add	r2, sp, #8
   d77f0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d77f4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d77f8:	f7ff ff85 	bl	d7706 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d77fc:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7800:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d7802:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d7804:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d7806:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d780a:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d780e:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d7812:	da24      	bge.n	d785e <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d7814:	42b0      	cmp	r0, r6
   d7816:	eb71 0507 	sbcs.w	r5, r1, r7
   d781a:	da19      	bge.n	d7850 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d781c:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d781e:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d7820:	6820      	ldr	r0, [r4, #0]
   d7822:	f7ff fb13 	bl	d6e4c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d7826:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d782a:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d782e:	9101      	str	r1, [sp, #4]
   d7830:	bb20      	cbnz	r0, d787c <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d7832:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d7836:	f7ff fca7 	bl	d7188 <_ZNK12LocalTimeHMS9toSecondsEv>
   d783a:	1a36      	subs	r6, r6, r0
   d783c:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d7840:	9901      	ldr	r1, [sp, #4]
   d7842:	a802      	add	r0, sp, #8
   d7844:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7848:	f005 fc96 	bl	dd178 <localtime_r>
}
   d784c:	b005      	add	sp, #20
   d784e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d7850:	4290      	cmp	r0, r2
   d7852:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d7856:	bfb4      	ite	lt
   d7858:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d785a:	2302      	movge	r3, #2
   d785c:	e7df      	b.n	d781e <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d785e:	4290      	cmp	r0, r2
   d7860:	eb71 0303 	sbcs.w	r3, r1, r3
   d7864:	da01      	bge.n	d786a <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d7866:	2303      	movs	r3, #3
   d7868:	e7d9      	b.n	d781e <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d786a:	42b0      	cmp	r0, r6
   d786c:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d7870:	bfb4      	ite	lt
   d7872:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d7874:	2305      	movge	r3, #5
   d7876:	e7d2      	b.n	d781e <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d7878:	2306      	movs	r3, #6
   d787a:	e7d0      	b.n	d781e <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d787c:	f104 0018 	add.w	r0, r4, #24
   d7880:	e7d9      	b.n	d7836 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d7882 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d7882:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d7886:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d7888:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d788a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d788c:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d788e:	ad01      	add	r5, sp, #4
   d7890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7896:	6823      	ldr	r3, [r4, #0]
   d7898:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d789a:	a801      	add	r0, sp, #4
   d789c:	f005 fc7c 	bl	dd198 <mktime>
   d78a0:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d78a2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d78a6:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d78a8:	f7ff fc6e 	bl	d7188 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d78ac:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d78b0:	eb14 0800 	adds.w	r8, r4, r0
   d78b4:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d78b8:	b31b      	cbz	r3, d7902 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d78ba:	2306      	movs	r3, #6
   d78bc:	a821      	add	r0, sp, #132	; 0x84
   d78be:	9320      	str	r3, [sp, #128]	; 0x80
   d78c0:	f7ff fd5a 	bl	d7378 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d78c4:	4631      	mov	r1, r6
   d78c6:	a80a      	add	r0, sp, #40	; 0x28
   d78c8:	f7ff fe6a 	bl	d75a0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d78cc:	a90a      	add	r1, sp, #40	; 0x28
   d78ce:	a821      	add	r0, sp, #132	; 0x84
   d78d0:	f7ff fb2a 	bl	d6f28 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d78d4:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d78d6:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d78da:	f7ff ff53 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
   d78de:	a80a      	add	r0, sp, #40	; 0x28
   d78e0:	f7ff fa86 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d78e4:	9820      	ldr	r0, [sp, #128]	; 0x80
   d78e6:	f7ff fab1 	bl	d6e4c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d78ea:	b138      	cbz	r0, d78fc <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d78ec:	f106 0014 	add.w	r0, r6, #20
   d78f0:	f7ff fc4a 	bl	d7188 <_ZNK12LocalTimeHMS9toSecondsEv>
   d78f4:	eb14 0800 	adds.w	r8, r4, r0
   d78f8:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d78fc:	a821      	add	r0, sp, #132	; 0x84
   d78fe:	f7ff fa77 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7902:	4640      	mov	r0, r8
   d7904:	4649      	mov	r1, r9
   d7906:	b05c      	add	sp, #368	; 0x170
   d7908:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d790c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d790c:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d790e:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d7912:	b097      	sub	sp, #92	; 0x5c
   d7914:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d7916:	b9c3      	cbnz	r3, d794a <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d7918:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d791c:	4668      	mov	r0, sp
   d791e:	f7ff fad7 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d7922:	4669      	mov	r1, sp
   d7924:	4628      	mov	r0, r5
   d7926:	f7ff fe23 	bl	d7570 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d792a:	1d21      	adds	r1, r4, #4
   d792c:	4668      	mov	r0, sp
   d792e:	f7ff fe37 	bl	d75a0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d7932:	4669      	mov	r1, sp
   d7934:	4628      	mov	r0, r5
   d7936:	f7ff ffa4 	bl	d7882 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d793a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d793e:	4668      	mov	r0, sp
   d7940:	f7ff fa56 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d7944:	4620      	mov	r0, r4
   d7946:	f7ff ff1d 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
}
   d794a:	b017      	add	sp, #92	; 0x5c
   d794c:	bd30      	pop	{r4, r5, pc}
	...

000d7950 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d7950:	b530      	push	{r4, r5, lr}
    time += 86400;
   d7952:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d7956:	4d0b      	ldr	r5, [pc, #44]	; (d7984 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d7958:	195b      	adds	r3, r3, r5
   d795a:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d795e:	b085      	sub	sp, #20
    time += 86400;
   d7960:	eb45 0202 	adc.w	r2, r5, r2
   d7964:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d7968:	4604      	mov	r4, r0
   d796a:	9101      	str	r1, [sp, #4]
    convert();
   d796c:	f7ff ff0a 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d7970:	9901      	ldr	r1, [sp, #4]
   d7972:	a802      	add	r0, sp, #8
   d7974:	f7ff faac 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d7978:	a902      	add	r1, sp, #8
   d797a:	4620      	mov	r0, r4
   d797c:	f7ff ffc6 	bl	d790c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d7980:	b005      	add	sp, #20
   d7982:	bd30      	pop	{r4, r5, pc}
   d7984:	00015180 	.word	0x00015180

000d7988 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d7988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d798c:	b08a      	sub	sp, #40	; 0x28
   d798e:	4617      	mov	r7, r2
   d7990:	4606      	mov	r6, r0
   d7992:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d7994:	2224      	movs	r2, #36	; 0x24
   d7996:	2100      	movs	r1, #0
   d7998:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d799a:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d799c:	f009 fe8c 	bl	e16b8 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d79a0:	2f06      	cmp	r7, #6
   d79a2:	d829      	bhi.n	d79f8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d79a4:	4629      	mov	r1, r5
   d79a6:	4630      	mov	r0, r6
   d79a8:	f7ff fe8e 	bl	d76c8 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d79ac:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d79ae:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d79b0:	dd24      	ble.n	d79fc <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d79b2:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d79b6:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d79b8:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d79ba:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d79bc:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d79be:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d79c0:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d79c2:	f7ff fe7f 	bl	d76c4 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d79c6:	9a07      	ldr	r2, [sp, #28]
   d79c8:	9b04      	ldr	r3, [sp, #16]
   d79ca:	42ba      	cmp	r2, r7
   d79cc:	d001      	beq.n	d79d2 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d79ce:	3301      	adds	r3, #1
   d79d0:	e7f5      	b.n	d79be <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d79d2:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d79d4:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d79d6:	4294      	cmp	r4, r2
   d79d8:	d106      	bne.n	d79e8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d79da:	b101      	cbz	r1, d79de <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d79dc:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d79de:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d79e0:	4620      	mov	r0, r4
   d79e2:	b00a      	add	sp, #40	; 0x28
   d79e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d79e8:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d79ea:	4543      	cmp	r3, r8
   d79ec:	dc04      	bgt.n	d79f8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d79ee:	3201      	adds	r2, #1
   d79f0:	2a06      	cmp	r2, #6
   d79f2:	f04f 0101 	mov.w	r1, #1
   d79f6:	d1ee      	bne.n	d79d6 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d79f8:	2400      	movs	r4, #0
   d79fa:	e7f1      	b.n	d79e0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d79fc:	d0f0      	beq.n	d79e0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d79fe:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d7a00:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d7a04:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d7a08:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d7a0a:	a801      	add	r0, sp, #4
   d7a0c:	f7ff fe5a 	bl	d76c4 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d7a10:	9b07      	ldr	r3, [sp, #28]
   d7a12:	9904      	ldr	r1, [sp, #16]
   d7a14:	42bb      	cmp	r3, r7
   d7a16:	d002      	beq.n	d7a1e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d7a18:	3901      	subs	r1, #1
   d7a1a:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d7a1c:	e7f5      	b.n	d7a0a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d7a1e:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d7a20:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d7a22:	4264      	negs	r4, r4
   d7a24:	4294      	cmp	r4, r2
   d7a26:	dc03      	bgt.n	d7a30 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d7a28:	2800      	cmp	r0, #0
   d7a2a:	d0d8      	beq.n	d79de <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d7a2c:	9104      	str	r1, [sp, #16]
   d7a2e:	e7d6      	b.n	d79de <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d7a30:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d7a32:	2900      	cmp	r1, #0
   d7a34:	dde0      	ble.n	d79f8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d7a36:	3201      	adds	r2, #1
   d7a38:	2a06      	cmp	r2, #6
   d7a3a:	f04f 0001 	mov.w	r0, #1
   d7a3e:	d1f1      	bne.n	d7a24 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d7a40:	e7da      	b.n	d79f8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d7a44 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7a44:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d7a48:	b0cd      	sub	sp, #308	; 0x134
   d7a4a:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d7a4c:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7a4e:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d7a50:	f7ff fdde 	bl	d7610 <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d7a54:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d7a56:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d7a58:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d7a5a:	f7ff fc15 	bl	d7288 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d7a5e:	bb58      	cbnz	r0, d7ab8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d7a60:	a82a      	add	r0, sp, #168	; 0xa8
   d7a62:	f7ff fd92 	bl	d758a <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d7a66:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d7a68:	f7ff fe14 	bl	d7694 <_ZN9LocalTime8instanceEv>
   d7a6c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d7a6e:	a802      	add	r0, sp, #8
   d7a70:	f7ff fad7 	bl	d7022 <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7a74:	f8df a20c 	ldr.w	sl, [pc, #524]	; d7c84 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d7a78:	a82a      	add	r0, sp, #168	; 0xa8
   d7a7a:	f7ff fd86 	bl	d758a <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d7a7e:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d7a80:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d7a82:	4606      	mov	r6, r0
   d7a84:	a803      	add	r0, sp, #12
   d7a86:	f7ff faf1 	bl	d706c <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d7a8a:	2800      	cmp	r0, #0
   d7a8c:	f300 80f2 	bgt.w	d7c74 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d7a90:	4631      	mov	r1, r6
   d7a92:	4620      	mov	r0, r4
   d7a94:	f7ff fbdd 	bl	d7252 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d7a98:	4607      	mov	r7, r0
   d7a9a:	2800      	cmp	r0, #0
   d7a9c:	f000 8094 	beq.w	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d7aa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d7aa2:	3b01      	subs	r3, #1
   d7aa4:	2b04      	cmp	r3, #4
   d7aa6:	f200 808f 	bhi.w	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d7aaa:	e8df f013 	tbh	[pc, r3, lsl #1]
   d7aae:	0007      	.short	0x0007
   d7ab0:	00960007 	.word	0x00960007
   d7ab4:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d7ab8:	9002      	str	r0, [sp, #8]
   d7aba:	e7db      	b.n	d7a74 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7abc:	a92a      	add	r1, sp, #168	; 0xa8
   d7abe:	a807      	add	r0, sp, #28
   d7ac0:	f7ff fd38 	bl	d7534 <_ZNK14LocalTimeValue3hmsEv>
   d7ac4:	a907      	add	r1, sp, #28
   d7ac6:	4620      	mov	r0, r4
   d7ac8:	f7ff fa17 	bl	d6efa <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d7acc:	2800      	cmp	r0, #0
   d7ace:	da0d      	bge.n	d7aec <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d7ad0:	f104 011c 	add.w	r1, r4, #28
   d7ad4:	a807      	add	r0, sp, #28
   d7ad6:	f7ff f9fb 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d7ada:	a907      	add	r1, sp, #28
   d7adc:	a810      	add	r0, sp, #64	; 0x40
   d7ade:	f7ff ff15 	bl	d790c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d7ae2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7ae6:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d7aea:	e094      	b.n	d7c16 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d7aec:	d16c      	bne.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d7aee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d7af0:	2b01      	cmp	r3, #1
   d7af2:	d025      	beq.n	d7b40 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d7af4:	2b02      	cmp	r3, #2
   d7af6:	d167      	bne.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7af8:	f104 011c 	add.w	r1, r4, #28
   d7afc:	a804      	add	r0, sp, #16
   d7afe:	f7ff f9e7 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d7b02:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d7b06:	4649      	mov	r1, r9
   d7b08:	a804      	add	r0, sp, #16
   d7b0a:	f7ff f9c3 	bl	d6e94 <_ZNK12LocalTimeHMS9compareToERKS_>
   d7b0e:	2800      	cmp	r0, #0
   d7b10:	dc5a      	bgt.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d7b12:	a904      	add	r1, sp, #16
   d7b14:	a807      	add	r0, sp, #28
   d7b16:	f7ff f9db 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d7b1a:	a907      	add	r1, sp, #28
   d7b1c:	a810      	add	r0, sp, #64	; 0x40
   d7b1e:	f7ff fef5 	bl	d790c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d7b22:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d7b26:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7b2a:	4290      	cmp	r0, r2
   d7b2c:	eb71 0303 	sbcs.w	r3, r1, r3
   d7b30:	db41      	blt.n	d7bb6 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d7b32:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7b38:	4413      	add	r3, r2
   d7b3a:	f88d 3014 	strb.w	r3, [sp, #20]
   d7b3e:	e7e2      	b.n	d7b06 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7b40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d7b42:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d7b46:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d7b4a:	213c      	movs	r1, #60	; 0x3c
   d7b4c:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d7b4e:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d7b52:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d7b56:	1852      	adds	r2, r2, r1
   d7b58:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d7b5c:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d7b5e:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d7b62:	f7ff fe0f 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d7b66:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d7b6a:	a907      	add	r1, sp, #28
   d7b6c:	a804      	add	r0, sp, #16
   d7b6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d7b72:	f005 fb01 	bl	dd178 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7b76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d7b78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7b7a:	1b9b      	subs	r3, r3, r6
   d7b7c:	fb93 f2f1 	sdiv	r2, r3, r1
   d7b80:	fb01 3312 	mls	r3, r1, r2, r3
   d7b84:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d7b86:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7b88:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d7b8a:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d7b8e:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d7b90:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d7b92:	f005 fb01 	bl	dd198 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d7b96:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d7b9a:	a810      	add	r0, sp, #64	; 0x40
   d7b9c:	f7ff fdf2 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d7ba0:	a92a      	add	r1, sp, #168	; 0xa8
   d7ba2:	a804      	add	r0, sp, #16
   d7ba4:	f7ff fcd2 	bl	d754c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d7ba8:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d7bac:	a804      	add	r0, sp, #16
   d7bae:	f7ff f971 	bl	d6e94 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d7bb2:	2800      	cmp	r0, #0
   d7bb4:	da08      	bge.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d7bb6:	a82a      	add	r0, sp, #168	; 0xa8
   d7bb8:	f7ff fce7 	bl	d758a <_ZNK14LocalTimeValue3ymdEv>
   d7bbc:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d7bbe:	4620      	mov	r0, r4
   d7bc0:	f7ff fb47 	bl	d7252 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d7bc4:	2800      	cmp	r0, #0
   d7bc6:	d18c      	bne.n	d7ae2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d7bc8:	4651      	mov	r1, sl
   d7bca:	a807      	add	r0, sp, #28
   d7bcc:	f7ff faaa 	bl	d7124 <_ZN12LocalTimeHMSC1EPKc>
   d7bd0:	a907      	add	r1, sp, #28
   d7bd2:	a810      	add	r0, sp, #64	; 0x40
   d7bd4:	f7ff febc 	bl	d7950 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d7bd8:	e74e      	b.n	d7a78 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d7bda:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7bdc:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7bde:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d7be2:	3101      	adds	r1, #1
   d7be4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7be8:	f7ff fece 	bl	d7988 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d7bec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d7bee:	4298      	cmp	r0, r3
   d7bf0:	d1ea      	bne.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d7bf2:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d7bf6:	a807      	add	r0, sp, #28
   d7bf8:	f7ff f96a 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d7bfc:	a907      	add	r1, sp, #28
   d7bfe:	a810      	add	r0, sp, #64	; 0x40
   d7c00:	f7ff fe84 	bl	d790c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d7c04:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d7c08:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d7c0c:	4282      	cmp	r2, r0
   d7c0e:	418b      	sbcs	r3, r1
   d7c10:	dada      	bge.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d7c12:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d7c16:	4628      	mov	r0, r5
   d7c18:	f7ff fdb4 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d7c1c:	e02b      	b.n	d7c76 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d7c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d7c20:	2e00      	cmp	r6, #0
   d7c22:	da08      	bge.n	d7c36 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d7c24:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d7c26:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d7c28:	3101      	adds	r1, #1
   d7c2a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7c2e:	f7ff fd4b 	bl	d76c8 <_ZN9LocalTime14lastDayOfMonthEii>
   d7c32:	4430      	add	r0, r6
   d7c34:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d7c36:	a82a      	add	r0, sp, #168	; 0xa8
   d7c38:	f7ff fca7 	bl	d758a <_ZNK14LocalTimeValue3ymdEv>
   d7c3c:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d7c40:	d1c2      	bne.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d7c42:	a92a      	add	r1, sp, #168	; 0xa8
   d7c44:	a807      	add	r0, sp, #28
   d7c46:	f7ff fc75 	bl	d7534 <_ZNK14LocalTimeValue3hmsEv>
   d7c4a:	a907      	add	r1, sp, #28
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f7ff f954 	bl	d6efa <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d7c52:	2800      	cmp	r0, #0
   d7c54:	dcb8      	bgt.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d7c56:	e7cc      	b.n	d7bf2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d7c58:	a92a      	add	r1, sp, #168	; 0xa8
   d7c5a:	a807      	add	r0, sp, #28
   d7c5c:	f7ff fc6a 	bl	d7534 <_ZNK14LocalTimeValue3hmsEv>
   d7c60:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d7c64:	a807      	add	r0, sp, #28
   d7c66:	9101      	str	r1, [sp, #4]
   d7c68:	f7ff f914 	bl	d6e94 <_ZNK12LocalTimeHMS9compareToERKS_>
   d7c6c:	2800      	cmp	r0, #0
   d7c6e:	9901      	ldr	r1, [sp, #4]
   d7c70:	dcaa      	bgt.n	d7bc8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d7c72:	e7c0      	b.n	d7bf6 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d7c74:	2700      	movs	r7, #0
class LocalTimeConvert {
   d7c76:	a811      	add	r0, sp, #68	; 0x44
   d7c78:	f7ff f8ba 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d7c7c:	4638      	mov	r0, r7
   d7c7e:	b04d      	add	sp, #308	; 0x134
   d7c80:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d7c84:	000e404d 	.word	0x000e404d

000d7c88 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d7c8a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7c8c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7c8e:	4668      	mov	r0, sp
   d7c90:	f7ff f8f7 	bl	d6e82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d7c94:	466a      	mov	r2, sp
   d7c96:	4629      	mov	r1, r5
   d7c98:	4620      	mov	r0, r4
   d7c9a:	f006 fb8b 	bl	de3b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7c9e:	a801      	add	r0, sp, #4
   d7ca0:	f7fc fcce 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7ca4:	4620      	mov	r0, r4
   d7ca6:	b003      	add	sp, #12
   d7ca8:	bd30      	pop	{r4, r5, pc}

000d7caa <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7caa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d7cac:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7cae:	4604      	mov	r4, r0
   d7cb0:	4668      	mov	r0, sp
   d7cb2:	f7ff f8e6 	bl	d6e82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d7cb6:	466a      	mov	r2, sp
   d7cb8:	4629      	mov	r1, r5
   d7cba:	4620      	mov	r0, r4
   d7cbc:	f006 fb56 	bl	de36c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7cc0:	a801      	add	r0, sp, #4
   d7cc2:	f7fc fcbd 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7cc6:	4620      	mov	r0, r4
   d7cc8:	b003      	add	sp, #12
   d7cca:	bd30      	pop	{r4, r5, pc}

000d7ccc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7cce:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7cd0:	4604      	mov	r4, r0
   d7cd2:	4668      	mov	r0, sp
   d7cd4:	f7ff f8d5 	bl	d6e82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d7cd8:	466a      	mov	r2, sp
   d7cda:	4629      	mov	r1, r5
   d7cdc:	4620      	mov	r0, r4
   d7cde:	f006 f992 	bl	de006 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d7ce2:	a801      	add	r0, sp, #4
   d7ce4:	f7fc fcac 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7ce8:	4620      	mov	r0, r4
   d7cea:	b003      	add	sp, #12
   d7cec:	bd30      	pop	{r4, r5, pc}

000d7cee <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   d7cee:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7cf0:	e9d1 3600 	ldrd	r3, r6, [r1]
   d7cf4:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d7cf6:	2300      	movs	r3, #0
   d7cf8:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d7cfc:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d7cfe:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d7d00:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d7d02:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d7d04:	f7ff f8b0 	bl	d6e68 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7d08:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d7d0c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d7d10:	4406      	add	r6, r0
   d7d12:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d7d14:	462a      	mov	r2, r5
	  _ForwardIterator __cur = __result;
   d7d16:	4601      	mov	r1, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d7d18:	4293      	cmp	r3, r2
   d7d1a:	d005      	beq.n	d7d28 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d7d1c:	b109      	cbz	r1, d7d22 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d7d1e:	6816      	ldr	r6, [r2, #0]
   d7d20:	600e      	str	r6, [r1, #0]
   d7d22:	3104      	adds	r1, #4
   d7d24:	3204      	adds	r2, #4
   d7d26:	e7f7      	b.n	d7d18 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d7d28:	1b5b      	subs	r3, r3, r5
   d7d2a:	4418      	add	r0, r3
   d7d2c:	6060      	str	r0, [r4, #4]
      }
   d7d2e:	4620      	mov	r0, r4
   d7d30:	bd70      	pop	{r4, r5, r6, pc}

000d7d32 <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d7d32:	b538      	push	{r3, r4, r5, lr}
   d7d34:	460d      	mov	r5, r1
   d7d36:	f811 3b04 	ldrb.w	r3, [r1], #4
   d7d3a:	4604      	mov	r4, r0
   d7d3c:	f800 3b04 	strb.w	r3, [r0], #4
   d7d40:	f7ff ffd5 	bl	d7cee <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7d44:	f105 0110 	add.w	r1, r5, #16
   d7d48:	f104 0010 	add.w	r0, r4, #16
   d7d4c:	f7ff ffcf 	bl	d7cee <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d7d50:	4620      	mov	r0, r4
   d7d52:	bd38      	pop	{r3, r4, r5, pc}

000d7d54 <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d7d54:	b538      	push	{r3, r4, r5, lr}
   d7d56:	4604      	mov	r4, r0
   d7d58:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d7d5a:	f7ff ffea 	bl	d7d32 <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d7d5e:	f105 011c 	add.w	r1, r5, #28
   d7d62:	f104 001c 	add.w	r0, r4, #28
   d7d66:	f7ff f8b3 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
   d7d6a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d7d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7d72:	f7ff f8ad 	bl	d6ed0 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d7d76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d7d78:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7d7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d7d7c:	6323      	str	r3, [r4, #48]	; 0x30
   d7d7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d7d80:	6363      	str	r3, [r4, #52]	; 0x34
   d7d82:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d7d86:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7d8a:	f007 ff03 	bl	dfb94 <_ZN6StringC1ERKS_>
   d7d8e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d7d90:	64a3      	str	r3, [r4, #72]	; 0x48
   d7d92:	4620      	mov	r0, r4
   d7d94:	bd38      	pop	{r3, r4, r5, pc}

000d7d96 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d7d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7d9a:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7d9e:	b0d1      	sub	sp, #324	; 0x144
   d7da0:	4681      	mov	r9, r0
   d7da2:	460c      	mov	r4, r1
   d7da4:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d7da6:	2600      	movs	r6, #0
   d7da8:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d7daa:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d7dae:	4543      	cmp	r3, r8
   d7db0:	d029      	beq.n	d7e06 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d7db2:	4641      	mov	r1, r8
   d7db4:	a801      	add	r0, sp, #4
   d7db6:	f7ff ffcd 	bl	d7d54 <_ZN21LocalTimeScheduleItemC1ERKS_>
      if (_M_empty())
   d7dba:	68ab      	ldr	r3, [r5, #8]
   d7dbc:	b90b      	cbnz	r3, d7dc2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d7dbe:	f008 fcdf 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7dc2:	68eb      	ldr	r3, [r5, #12]
   d7dc4:	a901      	add	r1, sp, #4
   d7dc6:	4628      	mov	r0, r5
   d7dc8:	4798      	blx	r3
        if (filter(item)) {
   d7dca:	b1b0      	cbz	r0, d7dfa <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d7dcc:	4621      	mov	r1, r4
   d7dce:	a814      	add	r0, sp, #80	; 0x50
   d7dd0:	f7ff fc1e 	bl	d7610 <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d7dd4:	a914      	add	r1, sp, #80	; 0x50
   d7dd6:	a801      	add	r0, sp, #4
   d7dd8:	f7ff fe34 	bl	d7a44 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d7ddc:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d7de0:	b110      	cbz	r0, d7de8 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d7de2:	ea56 0107 	orrs.w	r1, r6, r7
   d7de6:	d003      	beq.n	d7df0 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d7de8:	42b2      	cmp	r2, r6
   d7dea:	eb73 0107 	sbcs.w	r1, r3, r7
   d7dee:	da01      	bge.n	d7df4 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d7df0:	4616      	mov	r6, r2
   d7df2:	461f      	mov	r7, r3
class LocalTimeConvert {
   d7df4:	a815      	add	r0, sp, #84	; 0x54
   d7df6:	f7fe fffb 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d7dfa:	a801      	add	r0, sp, #4
   d7dfc:	f7ff fc3c 	bl	d7678 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d7e00:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d7e04:	e7d1      	b.n	d7daa <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d7e06:	ea56 0307 	orrs.w	r3, r6, r7
   d7e0a:	d008      	beq.n	d7e1e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d7e0c:	4620      	mov	r0, r4
        conv.time = closestTime;
   d7e0e:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d7e12:	f7ff fcb7 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d7e16:	2001      	movs	r0, #1
}
   d7e18:	b051      	add	sp, #324	; 0x144
   d7e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d7e1e:	2000      	movs	r0, #0
   d7e20:	e7fa      	b.n	d7e18 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d7e24 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d7e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d7e26:	4b08      	ldr	r3, [pc, #32]	; (d7e48 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d7e28:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d7e2a:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d7e2c:	4b07      	ldr	r3, [pc, #28]	; (d7e4c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d7e2e:	9302      	str	r3, [sp, #8]
   d7e30:	f7ff ffb1 	bl	d7d96 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d7e34:	9b02      	ldr	r3, [sp, #8]
   d7e36:	4604      	mov	r4, r0
   d7e38:	b11b      	cbz	r3, d7e42 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7e3a:	4669      	mov	r1, sp
   d7e3c:	2203      	movs	r2, #3
   d7e3e:	4608      	mov	r0, r1
   d7e40:	4798      	blx	r3
}
   d7e42:	4620      	mov	r0, r4
   d7e44:	b004      	add	sp, #16
   d7e46:	bd10      	pop	{r4, pc}
   d7e48:	000d6dc5 	.word	0x000d6dc5
   d7e4c:	000d6dc9 	.word	0x000d6dc9

000d7e50 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextWake(const LocalTimeConvert &conv) const {
   d7e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7e54:	6806      	ldr	r6, [r0, #0]
   d7e56:	b0bc      	sub	sp, #240	; 0xf0
   d7e58:	4607      	mov	r7, r0
   d7e5a:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7e5c:	2400      	movs	r4, #0
   d7e5e:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7e60:	687b      	ldr	r3, [r7, #4]
   d7e62:	429e      	cmp	r6, r3
   d7e64:	d01c      	beq.n	d7ea0 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x50>
        if ((it->flags & LocalTimeSchedule::FLAG_ANY_WAKE) != 0) {
   d7e66:	7c33      	ldrb	r3, [r6, #16]
   d7e68:	b1c3      	cbz	r3, d7e9c <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x4c>
            LocalTimeConvert tempConv(conv);
   d7e6a:	4651      	mov	r1, sl
   d7e6c:	4668      	mov	r0, sp
   d7e6e:	f7ff fbcf 	bl	d7610 <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d7e72:	4669      	mov	r1, sp
   d7e74:	4630      	mov	r0, r6
   d7e76:	f7ff ffd5 	bl	d7e24 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7e7a:	b140      	cbz	r0, d7e8e <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x3e>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7e7c:	ea54 0305 	orrs.w	r3, r4, r5
   d7e80:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d7e84:	d005      	beq.n	d7e92 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d7e86:	45a0      	cmp	r8, r4
   d7e88:	eb79 0305 	sbcs.w	r3, r9, r5
   d7e8c:	db01      	blt.n	d7e92 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x42>
   d7e8e:	46a0      	mov	r8, r4
   d7e90:	46a9      	mov	r9, r5
   d7e92:	a801      	add	r0, sp, #4
   d7e94:	f7fe ffac 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
   d7e98:	4644      	mov	r4, r8
   d7e9a:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7e9c:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7e9e:	e7df      	b.n	d7e60 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert+0x10>
}
   d7ea0:	4620      	mov	r0, r4
   d7ea2:	4629      	mov	r1, r5
   d7ea4:	b03c      	add	sp, #240	; 0xf0
   d7ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7eaa <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextFullWake(const LocalTimeConvert &conv) const {
   d7eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7eae:	6806      	ldr	r6, [r0, #0]
   d7eb0:	b0bc      	sub	sp, #240	; 0xf0
   d7eb2:	4607      	mov	r7, r0
   d7eb4:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7eb6:	2400      	movs	r4, #0
   d7eb8:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7eba:	687b      	ldr	r3, [r7, #4]
   d7ebc:	429e      	cmp	r6, r3
   d7ebe:	d01d      	beq.n	d7efc <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x52>
        if ((it->flags & LocalTimeSchedule::FLAG_FULL_WAKE) != 0) {
   d7ec0:	6933      	ldr	r3, [r6, #16]
   d7ec2:	079b      	lsls	r3, r3, #30
   d7ec4:	d518      	bpl.n	d7ef8 <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x4e>
            LocalTimeConvert tempConv(conv);
   d7ec6:	4651      	mov	r1, sl
   d7ec8:	4668      	mov	r0, sp
   d7eca:	f7ff fba1 	bl	d7610 <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d7ece:	4669      	mov	r1, sp
   d7ed0:	4630      	mov	r0, r6
   d7ed2:	f7ff ffa7 	bl	d7e24 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7ed6:	b140      	cbz	r0, d7eea <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x40>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7ed8:	ea54 0305 	orrs.w	r3, r4, r5
   d7edc:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d7ee0:	d005      	beq.n	d7eee <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d7ee2:	45a0      	cmp	r8, r4
   d7ee4:	eb79 0305 	sbcs.w	r3, r9, r5
   d7ee8:	db01      	blt.n	d7eee <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x44>
   d7eea:	46a0      	mov	r8, r4
   d7eec:	46a9      	mov	r9, r5
   d7eee:	a801      	add	r0, sp, #4
   d7ef0:	f7fe ff7e 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
   d7ef4:	4644      	mov	r4, r8
   d7ef6:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7ef8:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7efa:	e7de      	b.n	d7eba <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert+0x10>
}
   d7efc:	4620      	mov	r0, r4
   d7efe:	4629      	mov	r1, r5
   d7f00:	b03c      	add	sp, #240	; 0xf0
   d7f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d7f08 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>:
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d7f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (it->name.equals("data")) {
   d7f0c:	f8df b05c 	ldr.w	fp, [pc, #92]	; d7f6c <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x64>
   d7f10:	6806      	ldr	r6, [r0, #0]
time_t LocalTimeScheduleManager::getNextDataCapture(const LocalTimeConvert &conv) const {
   d7f12:	b0bd      	sub	sp, #244	; 0xf4
   d7f14:	4607      	mov	r7, r0
   d7f16:	468a      	mov	sl, r1
    time_t nextTime = 0;
   d7f18:	2400      	movs	r4, #0
   d7f1a:	2500      	movs	r5, #0
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d7f1c:	687b      	ldr	r3, [r7, #4]
   d7f1e:	429e      	cmp	r6, r3
   d7f20:	d01f      	beq.n	d7f62 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x5a>
        if (it->name.equals("data")) {
   d7f22:	4659      	mov	r1, fp
   d7f24:	4630      	mov	r0, r6
   d7f26:	f007 fec5 	bl	dfcb4 <_ZNK6String6equalsEPKc>
   d7f2a:	b1c0      	cbz	r0, d7f5e <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x56>
            LocalTimeConvert tempConv(conv);
   d7f2c:	4651      	mov	r1, sl
   d7f2e:	4668      	mov	r0, sp
   d7f30:	f7ff fb6e 	bl	d7610 <_ZN16LocalTimeConvertC1ERKS_>
            if (it->getNextScheduledTime(tempConv)) {
   d7f34:	4669      	mov	r1, sp
   d7f36:	4630      	mov	r0, r6
   d7f38:	f7ff ff74 	bl	d7e24 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d7f3c:	b140      	cbz	r0, d7f50 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x48>
                if (nextTime == 0 || tempConv.time < nextTime) {
   d7f3e:	ea54 0305 	orrs.w	r3, r4, r5
   d7f42:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   d7f46:	d005      	beq.n	d7f54 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d7f48:	45a0      	cmp	r8, r4
   d7f4a:	eb79 0305 	sbcs.w	r3, r9, r5
   d7f4e:	db01      	blt.n	d7f54 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x4c>
   d7f50:	46a0      	mov	r8, r4
   d7f52:	46a9      	mov	r9, r5
   d7f54:	a801      	add	r0, sp, #4
   d7f56:	f7fe ff4b 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
   d7f5a:	4644      	mov	r4, r8
   d7f5c:	464d      	mov	r5, r9
      operator++() _GLIBCXX_NOEXCEPT
   d7f5e:	3630      	adds	r6, #48	; 0x30
	return *this;
   d7f60:	e7dc      	b.n	d7f1c <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert+0x14>
}
   d7f62:	4620      	mov	r0, r4
   d7f64:	4629      	mov	r1, r5
   d7f66:	b03d      	add	sp, #244	; 0xf4
   d7f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f6c:	000e4153 	.word	0x000e4153

000d7f70 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
      if (&__x != this)
   d7f70:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d7f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f76:	4604      	mov	r4, r0
   d7f78:	460e      	mov	r6, r1
      if (&__x != this)
   d7f7a:	d022      	beq.n	d7fc2 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7f7c:	e9d1 5800 	ldrd	r5, r8, [r1]
			 - this->_M_impl._M_start); }
   d7f80:	6800      	ldr	r0, [r0, #0]
   d7f82:	68a3      	ldr	r3, [r4, #8]
   d7f84:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7f86:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d7f8a:	109b      	asrs	r3, r3, #2
	  if (__xlen > capacity())
   d7f8c:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7f90:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d7f94:	d218      	bcs.n	d7fc8 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
	  pointer __result = this->_M_allocate(__n);
   d7f96:	4608      	mov	r0, r1
   d7f98:	f7fe ff66 	bl	d6e68 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d7f9c:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d7f9e:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d7fa0:	45a8      	cmp	r8, r5
   d7fa2:	d005      	beq.n	d7fb0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d7fa4:	b10b      	cbz	r3, d7faa <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d7fa6:	682a      	ldr	r2, [r5, #0]
   d7fa8:	601a      	str	r2, [r3, #0]
   d7faa:	3304      	adds	r3, #4
   d7fac:	3504      	adds	r5, #4
   d7fae:	e7f7      	b.n	d7fa0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	      _M_deallocate(this->_M_impl._M_start,
   d7fb0:	6820      	ldr	r0, [r4, #0]
   d7fb2:	f7fe ff55 	bl	d6e60 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
	      this->_M_impl._M_start = __tmp;
   d7fb6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d7fb8:	443e      	add	r6, r7
   d7fba:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d7fbc:	6823      	ldr	r3, [r4, #0]
   d7fbe:	441f      	add	r7, r3
   d7fc0:	6067      	str	r7, [r4, #4]
    }
   d7fc2:	4620      	mov	r0, r4
   d7fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7fc8:	6862      	ldr	r2, [r4, #4]
   d7fca:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d7fcc:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d7fd0:	d806      	bhi.n	d7fe0 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d7fd2:	45a8      	cmp	r8, r5
   d7fd4:	d0f2      	beq.n	d7fbc <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7fd6:	463a      	mov	r2, r7
   d7fd8:	4629      	mov	r1, r5
   d7fda:	f009 fb53 	bl	e1684 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d7fde:	e7ed      	b.n	d7fbc <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d7fe0:	b112      	cbz	r2, d7fe8 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d7fe2:	4629      	mov	r1, r5
   d7fe4:	f009 fb4e 	bl	e1684 <memmove>
   d7fe8:	e9d4 3200 	ldrd	r3, r2, [r4]
   d7fec:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d7fee:	6833      	ldr	r3, [r6, #0]
   d7ff0:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d7ff2:	6871      	ldr	r1, [r6, #4]
   d7ff4:	4299      	cmp	r1, r3
   d7ff6:	d0e1      	beq.n	d7fbc <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d7ff8:	b10a      	cbz	r2, d7ffe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d7ffa:	6818      	ldr	r0, [r3, #0]
   d7ffc:	6010      	str	r0, [r2, #0]
   d7ffe:	3304      	adds	r3, #4
   d8000:	3204      	adds	r2, #4
   d8002:	e7f7      	b.n	d7ff4 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d8004 <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d8004:	b538      	push	{r3, r4, r5, lr}
   d8006:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d8008:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d800c:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d800e:	f800 3b04 	strb.w	r3, [r0], #4
   d8012:	f7ff ffad 	bl	d7f70 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d8016:	f105 0110 	add.w	r1, r5, #16
   d801a:	f104 0010 	add.w	r0, r4, #16
   d801e:	f7ff ffa7 	bl	d7f70 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d8022:	f105 011c 	add.w	r1, r5, #28
   d8026:	f104 001c 	add.w	r0, r4, #28
   d802a:	f7fe ff59 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
   d802e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d8032:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8036:	f7fe ff53 	bl	d6ee0 <_ZN12LocalTimeHMSaSERKS_>
   d803a:	4620      	mov	r0, r4
   d803c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8040 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d8040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8044:	e9d0 6900 	ldrd	r6, r9, [r0]
   d8048:	4d3b      	ldr	r5, [pc, #236]	; (d8138 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
	if (max_size() - size() < __n)
   d804a:	4b3c      	ldr	r3, [pc, #240]	; (d813c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d804c:	eba9 0406 	sub.w	r4, r9, r6
   d8050:	10a4      	asrs	r4, r4, #2
   d8052:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d8054:	429c      	cmp	r4, r3
   d8056:	468a      	mov	sl, r1
   d8058:	4607      	mov	r7, r0
   d805a:	4611      	mov	r1, r2
   d805c:	46a8      	mov	r8, r5
   d805e:	d102      	bne.n	d8066 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d8060:	4837      	ldr	r0, [pc, #220]	; (d8140 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d8062:	f008 fb8a 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d8066:	2c01      	cmp	r4, #1
   d8068:	4622      	mov	r2, r4
   d806a:	bf38      	it	cc
   d806c:	2201      	movcc	r2, #1
   d806e:	18a4      	adds	r4, r4, r2
   d8070:	ebaa 0506 	sub.w	r5, sl, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d8074:	d25d      	bcs.n	d8132 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d8076:	b154      	cbz	r4, d808e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d8078:	429c      	cmp	r4, r3
   d807a:	bf28      	it	cs
   d807c:	461c      	movcs	r4, r3
   d807e:	204c      	movs	r0, #76	; 0x4c
   d8080:	4360      	muls	r0, r4
   d8082:	9100      	str	r1, [sp, #0]
   d8084:	f7fc f807 	bl	d4096 <_Znwj>
   d8088:	9900      	ldr	r1, [sp, #0]
   d808a:	4683      	mov	fp, r0
   d808c:	e000      	b.n	d8090 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d808e:	46a3      	mov	fp, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8090:	eb1b 0005 	adds.w	r0, fp, r5
   d8094:	d001      	beq.n	d809a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d8096:	f7ff fe5d 	bl	d7d54 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d809a:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d809c:	4631      	mov	r1, r6
   d809e:	458a      	cmp	sl, r1
   d80a0:	d00a      	beq.n	d80b8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d80a2:	b133      	cbz	r3, d80b2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d80a4:	4618      	mov	r0, r3
   d80a6:	9101      	str	r1, [sp, #4]
   d80a8:	9300      	str	r3, [sp, #0]
   d80aa:	f7ff fe53 	bl	d7d54 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d80ae:	e9dd 3100 	ldrd	r3, r1, [sp]
   d80b2:	314c      	adds	r1, #76	; 0x4c
   d80b4:	334c      	adds	r3, #76	; 0x4c
   d80b6:	e7f2      	b.n	d809e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d80b8:	08ad      	lsrs	r5, r5, #2
   d80ba:	fb08 fa05 	mul.w	sl, r8, r5
   d80be:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d80c2:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d80c6:	fb0a fa05 	mul.w	sl, sl, r5
   d80ca:	eb06 050a 	add.w	r5, r6, sl
	      ++__new_finish;
   d80ce:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d80d2:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d80d4:	4653      	mov	r3, sl
   d80d6:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d80d8:	4549      	cmp	r1, r9
   d80da:	d113      	bne.n	d8104 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d80dc:	eba9 0505 	sub.w	r5, r9, r5
   d80e0:	08ad      	lsrs	r5, r5, #2
   d80e2:	fb08 f505 	mul.w	r5, r8, r5
   d80e6:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d80ea:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d80ee:	fb08 a505 	mla	r5, r8, r5, sl
   d80f2:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d80f4:	45c8      	cmp	r8, r9
   d80f6:	d00f      	beq.n	d8118 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d80f8:	4640      	mov	r0, r8
   d80fa:	f7ff fabd 	bl	d7678 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d80fe:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d8102:	e7f7      	b.n	d80f4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d8104:	4618      	mov	r0, r3
   d8106:	9101      	str	r1, [sp, #4]
   d8108:	9300      	str	r3, [sp, #0]
   d810a:	f7ff fe23 	bl	d7d54 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d810e:	9901      	ldr	r1, [sp, #4]
   d8110:	9b00      	ldr	r3, [sp, #0]
   d8112:	314c      	adds	r1, #76	; 0x4c
   d8114:	334c      	adds	r3, #76	; 0x4c
   d8116:	e7df      	b.n	d80d8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d8118:	b116      	cbz	r6, d8120 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d811a:	4630      	mov	r0, r6
   d811c:	f7fb ffbf 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d8120:	204c      	movs	r0, #76	; 0x4c
   d8122:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d8126:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d812a:	60bc      	str	r4, [r7, #8]
    }
   d812c:	b003      	add	sp, #12
   d812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d8132:	461c      	mov	r4, r3
   d8134:	e7a3      	b.n	d807e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d8136:	bf00      	nop
   d8138:	286bca1b 	.word	0x286bca1b
   d813c:	01af286b 	.word	0x01af286b
   d8140:	000e3bdc 	.word	0x000e3bdc

000d8144 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d8144:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d8146:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d814a:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d814c:	4604      	mov	r4, r0
   d814e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d8150:	d007      	beq.n	d8162 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8152:	b113      	cbz	r3, d815a <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d8154:	4618      	mov	r0, r3
   d8156:	f7ff fdfd 	bl	d7d54 <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d815a:	6863      	ldr	r3, [r4, #4]
   d815c:	334c      	adds	r3, #76	; 0x4c
   d815e:	6063      	str	r3, [r4, #4]
      }
   d8160:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d8162:	4619      	mov	r1, r3
   d8164:	f7ff ff6c 	bl	d8040 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d8168:	e7fa      	b.n	d8160 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d816a <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d816a:	b530      	push	{r4, r5, lr}
   d816c:	b097      	sub	sp, #92	; 0x5c
   d816e:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d8170:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d8172:	9201      	str	r2, [sp, #4]
   d8174:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d8176:	f7fe ffe1 	bl	d713c <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d817a:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d817c:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d817e:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d8180:	a803      	add	r0, sp, #12
    item.increment = increment;
   d8182:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d8184:	f7ff ff3e 	bl	d8004 <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d8188:	a903      	add	r1, sp, #12
   d818a:	f104 0020 	add.w	r0, r4, #32
   d818e:	f7ff ffd9 	bl	d8144 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d8192:	a803      	add	r0, sp, #12
   d8194:	f7ff fa70 	bl	d7678 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d8198:	4620      	mov	r0, r4
   d819a:	b017      	add	sp, #92	; 0x5c
   d819c:	bd30      	pop	{r4, r5, pc}
	...

000d81a0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   d81a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d81a4:	e9d1 3700 	ldrd	r3, r7, [r1]
   d81a8:	4d1b      	ldr	r5, [pc, #108]	; (d8218 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x78>)
   d81aa:	1aff      	subs	r7, r7, r3
   d81ac:	10bc      	asrs	r4, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   d81ae:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d81b0:	436c      	muls	r4, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
   d81b2:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d81b6:	4606      	mov	r6, r0
   d81b8:	4688      	mov	r8, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
   d81ba:	6083      	str	r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d81bc:	d008      	beq.n	d81d0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x30>
	if (__n > this->max_size())
   d81be:	4b17      	ldr	r3, [pc, #92]	; (d821c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x7c>)
   d81c0:	429c      	cmp	r4, r3
   d81c2:	d901      	bls.n	d81c8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x28>
	  std::__throw_bad_alloc();
   d81c4:	f008 fad6 	bl	e0774 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d81c8:	4638      	mov	r0, r7
   d81ca:	f7fb ff64 	bl	d4096 <_Znwj>
   d81ce:	4604      	mov	r4, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d81d0:	4427      	add	r7, r4
   d81d2:	60b7      	str	r7, [r6, #8]
   d81d4:	e9d8 a700 	ldrd	sl, r7, [r8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d81d8:	e9c6 4400 	strd	r4, r4, [r6]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d81dc:	46d0      	mov	r8, sl
	  _ForwardIterator __cur = __result;
   d81de:	46a1      	mov	r9, r4
	      for (; __first != __last; ++__first, (void)++__cur)
   d81e0:	4547      	cmp	r7, r8
   d81e2:	d00b      	beq.n	d81fc <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x5c>
   d81e4:	f1b9 0f00 	cmp.w	r9, #0
   d81e8:	d003      	beq.n	d81f2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x52>
   d81ea:	4641      	mov	r1, r8
   d81ec:	4648      	mov	r0, r9
   d81ee:	f7ff fdb1 	bl	d7d54 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d81f2:	f109 094c 	add.w	r9, r9, #76	; 0x4c
   d81f6:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d81fa:	e7f1      	b.n	d81e0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_+0x40>
	this->_M_impl._M_finish =
   d81fc:	eba7 070a 	sub.w	r7, r7, sl
   d8200:	08bf      	lsrs	r7, r7, #2
   d8202:	437d      	muls	r5, r7
   d8204:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d8208:	204c      	movs	r0, #76	; 0x4c
   d820a:	fb00 4405 	mla	r4, r0, r5, r4
   d820e:	6074      	str	r4, [r6, #4]
      }
   d8210:	4630      	mov	r0, r6
   d8212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8216:	bf00      	nop
   d8218:	286bca1b 	.word	0x286bca1b
   d821c:	01af286b 	.word	0x01af286b

000d8220 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   d8220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8224:	4607      	mov	r7, r0
   d8226:	4688      	mov	r8, r1
   d8228:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   d822a:	4615      	mov	r5, r2
   d822c:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d822e:	4544      	cmp	r4, r8
   d8230:	d013      	beq.n	d825a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x3a>
   d8232:	b17d      	cbz	r5, d8254 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x34>
class LocalTimeSchedule {
   d8234:	4621      	mov	r1, r4
   d8236:	4628      	mov	r0, r5
   d8238:	f007 fcac 	bl	dfb94 <_ZN6StringC1ERKS_>
   d823c:	6923      	ldr	r3, [r4, #16]
   d823e:	612b      	str	r3, [r5, #16]
   d8240:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d8244:	f104 0120 	add.w	r1, r4, #32
   d8248:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d824c:	f105 0020 	add.w	r0, r5, #32
   d8250:	f7ff ffa6 	bl	d81a0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
   d8254:	3430      	adds	r4, #48	; 0x30
   d8256:	3530      	adds	r5, #48	; 0x30
   d8258:	e7e9      	b.n	d822e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0xe>
	      return __cur;
   d825a:	1be0      	subs	r0, r4, r7
   d825c:	0904      	lsrs	r4, r0, #4
   d825e:	4804      	ldr	r0, [pc, #16]	; (d8270 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_+0x50>)
   d8260:	4344      	muls	r4, r0
   d8262:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
	}
   d8266:	2030      	movs	r0, #48	; 0x30
   d8268:	fb00 6004 	mla	r0, r0, r4, r6
   d826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8270:	0aaaaaab 	.word	0x0aaaaaab

000d8274 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d8274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d8278:	e9d0 6800 	ldrd	r6, r8, [r0]
   d827c:	eba8 0406 	sub.w	r4, r8, r6
   d8280:	1123      	asrs	r3, r4, #4
   d8282:	4c33      	ldr	r4, [pc, #204]	; (d8350 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xdc>)
   d8284:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   d8286:	4b33      	ldr	r3, [pc, #204]	; (d8354 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>)
   d8288:	429c      	cmp	r4, r3
   d828a:	4605      	mov	r5, r0
   d828c:	460f      	mov	r7, r1
   d828e:	4693      	mov	fp, r2
   d8290:	d102      	bne.n	d8298 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   d8292:	4831      	ldr	r0, [pc, #196]	; (d8358 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe4>)
   d8294:	f008 fa71 	bl	e077a <_ZSt20__throw_length_errorPKc>
   d8298:	2c01      	cmp	r4, #1
   d829a:	4622      	mov	r2, r4
   d829c:	bf38      	it	cc
   d829e:	2201      	movcc	r2, #1
   d82a0:	18a4      	adds	r4, r4, r2
   d82a2:	eba1 0a06 	sub.w	sl, r1, r6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d82a6:	d250      	bcs.n	d834a <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d82a8:	b144      	cbz	r4, d82bc <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
   d82aa:	429c      	cmp	r4, r3
   d82ac:	bf28      	it	cs
   d82ae:	461c      	movcs	r4, r3
   d82b0:	2030      	movs	r0, #48	; 0x30
   d82b2:	4360      	muls	r0, r4
   d82b4:	f7fb feef 	bl	d4096 <_Znwj>
   d82b8:	4681      	mov	r9, r0
   d82ba:	e000      	b.n	d82be <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   d82bc:	46a1      	mov	r9, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d82be:	eb19 0a0a 	adds.w	sl, r9, sl
   d82c2:	d011      	beq.n	d82e8 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
   d82c4:	4659      	mov	r1, fp
   d82c6:	4650      	mov	r0, sl
   d82c8:	f007 fc64 	bl	dfb94 <_ZN6StringC1ERKS_>
   d82cc:	f8db 3010 	ldr.w	r3, [fp, #16]
   d82d0:	f8ca 3010 	str.w	r3, [sl, #16]
   d82d4:	e9db 2306 	ldrd	r2, r3, [fp, #24]
   d82d8:	f10b 0120 	add.w	r1, fp, #32
   d82dc:	e9ca 2306 	strd	r2, r3, [sl, #24]
   d82e0:	f10a 0020 	add.w	r0, sl, #32
   d82e4:	f7ff ff5c 	bl	d81a0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
	__uninit_copy(__first, __last, __result);
   d82e8:	4639      	mov	r1, r7
   d82ea:	464a      	mov	r2, r9
   d82ec:	4630      	mov	r0, r6
   d82ee:	f7ff ff97 	bl	d8220 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
   d82f2:	4641      	mov	r1, r8
   d82f4:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d82f8:	4638      	mov	r0, r7
   d82fa:	f7ff ff91 	bl	d8220 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK17LocalTimeSchedulePS2_EET0_T_S7_S6_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d82fe:	4637      	mov	r7, r6
   d8300:	4683      	mov	fp, r0
	  for (; __first != __last; ++__first)
   d8302:	4547      	cmp	r7, r8
   d8304:	d014      	beq.n	d8330 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d8306:	e9d7 a308 	ldrd	sl, r3, [r7, #32]
   d830a:	4553      	cmp	r3, sl
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	d006      	beq.n	d831e <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
    { __pointer->~_Tp(); }
   d8310:	4650      	mov	r0, sl
   d8312:	f7ff f9b1 	bl	d7678 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d8316:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d831a:	9b01      	ldr	r3, [sp, #4]
   d831c:	e7f5      	b.n	d830a <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
	_M_deallocate(_M_impl._M_start,
   d831e:	6a38      	ldr	r0, [r7, #32]
	if (__p)
   d8320:	b108      	cbz	r0, d8326 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb2>
	::operator delete(__p);
   d8322:	f7fb febc 	bl	d409e <_ZdlPv>
   d8326:	4638      	mov	r0, r7
   d8328:	f007 fb9e 	bl	dfa68 <_ZN6StringD1Ev>
   d832c:	3730      	adds	r7, #48	; 0x30
   d832e:	e7e8      	b.n	d8302 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8e>
   d8330:	b116      	cbz	r6, d8338 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d8332:	4630      	mov	r0, r6
   d8334:	f7fb feb3 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d8338:	2030      	movs	r0, #48	; 0x30
   d833a:	fb00 9404 	mla	r4, r0, r4, r9
      this->_M_impl._M_finish = __new_finish;
   d833e:	e9c5 9b00 	strd	r9, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d8342:	60ac      	str	r4, [r5, #8]
    }
   d8344:	b003      	add	sp, #12
   d8346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d834a:	461c      	mov	r4, r3
   d834c:	e7b0      	b.n	d82b0 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
   d834e:	bf00      	nop
   d8350:	aaaaaaab 	.word	0xaaaaaaab
   d8354:	02aaaaaa 	.word	0x02aaaaaa
   d8358:	000e3bdc 	.word	0x000e3bdc

000d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>:
LocalTimeSchedule &LocalTimeScheduleManager::getScheduleByName(const char *name) {
   d835c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d835e:	6805      	ldr	r5, [r0, #0]
   d8360:	b08d      	sub	sp, #52	; 0x34
   d8362:	4604      	mov	r4, r0
   d8364:	460e      	mov	r6, r1
    for(auto it = schedules.begin(); it != schedules.end(); ++it) {
   d8366:	6863      	ldr	r3, [r4, #4]
   d8368:	429d      	cmp	r5, r3
   d836a:	462f      	mov	r7, r5
   d836c:	d009      	beq.n	d8382 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x26>
        if (it->name.equals(name)) {
   d836e:	4628      	mov	r0, r5
   d8370:	4631      	mov	r1, r6
   d8372:	f007 fc9f 	bl	dfcb4 <_ZNK6String6equalsEPKc>
   d8376:	3530      	adds	r5, #48	; 0x30
   d8378:	2800      	cmp	r0, #0
   d837a:	d0f4      	beq.n	d8366 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa>
}
   d837c:	4638      	mov	r0, r7
   d837e:	b00d      	add	sp, #52	; 0x34
   d8380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LocalTimeSchedule() {
   d8382:	4922      	ldr	r1, [pc, #136]	; (d840c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xb0>)
   d8384:	4668      	mov	r0, sp
   d8386:	f007 fbba 	bl	dfafe <_ZN6StringC1EPKc>
   d838a:	2000      	movs	r0, #0
   d838c:	2100      	movs	r1, #0
   d838e:	2300      	movs	r3, #0
   d8390:	e9cd 0106 	strd	r0, r1, [sp, #24]
    sch.name = name;
   d8394:	4631      	mov	r1, r6
   d8396:	4668      	mov	r0, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
   d8398:	e9cd 3308 	strd	r3, r3, [sp, #32]
   d839c:	9304      	str	r3, [sp, #16]
   d839e:	930a      	str	r3, [sp, #40]	; 0x28
   d83a0:	f007 fc0b 	bl	dfbba <_ZN6StringaSEPKc>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d83a4:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
   d83a8:	429d      	cmp	r5, r3
   d83aa:	d020      	beq.n	d83ee <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d83ac:	b175      	cbz	r5, d83cc <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x70>
class LocalTimeSchedule {
   d83ae:	4669      	mov	r1, sp
   d83b0:	4628      	mov	r0, r5
   d83b2:	f007 fbef 	bl	dfb94 <_ZN6StringC1ERKS_>
   d83b6:	9b04      	ldr	r3, [sp, #16]
   d83b8:	612b      	str	r3, [r5, #16]
   d83ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d83be:	a908      	add	r1, sp, #32
   d83c0:	e9c5 2306 	strd	r2, r3, [r5, #24]
   d83c4:	f105 0020 	add.w	r0, r5, #32
   d83c8:	f7ff feea 	bl	d81a0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   d83cc:	6863      	ldr	r3, [r4, #4]
   d83ce:	3330      	adds	r3, #48	; 0x30
   d83d0:	6063      	str	r3, [r4, #4]
    return getScheduleByName(name);
   d83d2:	4620      	mov	r0, r4
   d83d4:	4631      	mov	r1, r6
   d83d6:	f7ff ffc1 	bl	d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d83da:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   d83de:	4607      	mov	r7, r0
   d83e0:	42a5      	cmp	r5, r4
   d83e2:	d00a      	beq.n	d83fa <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x9e>
    { __pointer->~_Tp(); }
   d83e4:	4620      	mov	r0, r4
   d83e6:	f7ff f947 	bl	d7678 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d83ea:	344c      	adds	r4, #76	; 0x4c
   d83ec:	e7f8      	b.n	d83e0 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x84>
	  _M_realloc_insert(end(), __x);
   d83ee:	466a      	mov	r2, sp
   d83f0:	4629      	mov	r1, r5
   d83f2:	4620      	mov	r0, r4
   d83f4:	f7ff ff3e 	bl	d8274 <_ZNSt6vectorI17LocalTimeScheduleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   d83f8:	e7eb      	b.n	d83d2 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x76>
	_M_deallocate(_M_impl._M_start,
   d83fa:	9808      	ldr	r0, [sp, #32]
	if (__p)
   d83fc:	b108      	cbz	r0, d8402 <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0xa6>
	::operator delete(__p);
   d83fe:	f7fb fe4e 	bl	d409e <_ZdlPv>
   d8402:	4668      	mov	r0, sp
   d8404:	f007 fb30 	bl	dfa68 <_ZN6StringD1Ev>
   d8408:	e7b8      	b.n	d837c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc+0x20>
   d840a:	bf00      	nop
   d840c:	000e44eb 	.word	0x000e44eb

000d8410 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d8410:	4770      	bx	lr

000d8412 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d8412:	b510      	push	{r4, lr}
}
   d8414:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d8416:	4604      	mov	r4, r0
}
   d8418:	f008 f972 	bl	e0700 <_ZdlPvj>
   d841c:	4620      	mov	r0, r4
   d841e:	bd10      	pop	{r4, pc}

000d8420 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d8420:	6803      	ldr	r3, [r0, #0]
   d8422:	b2c9      	uxtb	r1, r1
   d8424:	689b      	ldr	r3, [r3, #8]
   d8426:	4718      	bx	r3

000d8428 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d8428:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d842a:	4d03      	ldr	r5, [pc, #12]	; (d8438 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d842c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d8430:	e9c0 5100 	strd	r5, r1, [r0]
}
   d8434:	bd30      	pop	{r4, r5, pc}
   d8436:	bf00      	nop
   d8438:	000e40e0 	.word	0x000e40e0

000d843c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d843c:	6840      	ldr	r0, [r0, #4]
   d843e:	f005 bc33 	b.w	ddca8 <_ZN7TwoWire5beginEv>

000d8442 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d8442:	b510      	push	{r4, lr}
   d8444:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d8446:	6800      	ldr	r0, [r0, #0]
   d8448:	f005 fc89 	bl	ddd5e <_ZN7TwoWire6unlockEv>
   d844c:	4620      	mov	r0, r4
   d844e:	bd10      	pop	{r4, pc}

000d8450 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d8450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8454:	b08a      	sub	sp, #40	; 0x28
   d8456:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d8458:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d845a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d845c:	f005 fc76 	bl	ddd4c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d8460:	221e      	movs	r2, #30
   d8462:	2100      	movs	r1, #0
   d8464:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d8466:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d8468:	f009 f926 	bl	e16b8 <memset>
		size_t framAddr = 0;
   d846c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d846e:	b1ef      	cbz	r7, d84ac <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d8470:	6823      	ldr	r3, [r4, #0]
   d8472:	2f1e      	cmp	r7, #30
   d8474:	46b8      	mov	r8, r7
   d8476:	bf28      	it	cs
   d8478:	f04f 081e 	movcs.w	r8, #30
   d847c:	68dd      	ldr	r5, [r3, #12]
   d847e:	aa02      	add	r2, sp, #8
   d8480:	4643      	mov	r3, r8
   d8482:	4631      	mov	r1, r6
   d8484:	4620      	mov	r0, r4
   d8486:	47a8      	blx	r5
			if (!result) {
   d8488:	4605      	mov	r5, r0
   d848a:	b958      	cbnz	r0, d84a4 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d848c:	480a      	ldr	r0, [pc, #40]	; (d84b8 <_ZN6MB85RC5eraseEv+0x68>)
   d848e:	490b      	ldr	r1, [pc, #44]	; (d84bc <_ZN6MB85RC5eraseEv+0x6c>)
   d8490:	4632      	mov	r2, r6
   d8492:	f7fb ff83 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d8496:	a801      	add	r0, sp, #4
   d8498:	f7ff ffd3 	bl	d8442 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d849c:	4628      	mov	r0, r5
   d849e:	b00a      	add	sp, #40	; 0x28
   d84a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d84a4:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d84a8:	4446      	add	r6, r8
		while(totalLen > 0) {
   d84aa:	e7e0      	b.n	d846e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d84ac:	a801      	add	r0, sp, #4
   d84ae:	f7ff ffc8 	bl	d8442 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d84b2:	2501      	movs	r5, #1
   d84b4:	e7f2      	b.n	d849c <_ZN6MB85RC5eraseEv+0x4c>
   d84b6:	bf00      	nop
   d84b8:	2003e560 	.word	0x2003e560
   d84bc:	000e40ac 	.word	0x000e40ac

000d84c0 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d84c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d84c4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d84c6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d84c8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d84ca:	460d      	mov	r5, r1
   d84cc:	4616      	mov	r6, r2
   d84ce:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d84d0:	f005 fc3c 	bl	ddd4c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d84d4:	b1a7      	cbz	r7, d8500 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d84d6:	68e1      	ldr	r1, [r4, #12]
   d84d8:	6860      	ldr	r0, [r4, #4]
   d84da:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d84de:	f005 fc16 	bl	ddd0e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d84e2:	0a29      	lsrs	r1, r5, #8
   d84e4:	6860      	ldr	r0, [r4, #4]
   d84e6:	f7ff ff9b 	bl	d8420 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d84ea:	4629      	mov	r1, r5
   d84ec:	6860      	ldr	r0, [r4, #4]
   d84ee:	f7ff ff97 	bl	d8420 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d84f2:	6860      	ldr	r0, [r4, #4]
   d84f4:	2100      	movs	r1, #0
   d84f6:	f005 fc25 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d84fa:	b148      	cbz	r0, d8510 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d84fc:	2400      	movs	r4, #0
   d84fe:	e000      	b.n	d8502 <_ZN6MB85RC8readDataEjPhj+0x42>
   d8500:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d8502:	a801      	add	r0, sp, #4
   d8504:	f7ff ff9d 	bl	d8442 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d8508:	4620      	mov	r0, r4
   d850a:	b003      	add	sp, #12
   d850c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d8510:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d8512:	7b21      	ldrb	r1, [r4, #12]
   d8514:	6860      	ldr	r0, [r4, #4]
   d8516:	46b8      	mov	r8, r7
   d8518:	bf28      	it	cs
   d851a:	f04f 0820 	movcs.w	r8, #32
   d851e:	2301      	movs	r3, #1
   d8520:	4642      	mov	r2, r8
   d8522:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d8526:	f005 fbdc 	bl	ddce2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d852a:	f008 f8a1 	bl	e0670 <_Z19__fetch_global_Wirev>
   d852e:	6803      	ldr	r3, [r0, #0]
   d8530:	691b      	ldr	r3, [r3, #16]
   d8532:	4798      	blx	r3
   d8534:	4540      	cmp	r0, r8
   d8536:	dbe1      	blt.n	d84fc <_ZN6MB85RC8readDataEjPhj+0x3c>
   d8538:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d853c:	f008 f898 	bl	e0670 <_Z19__fetch_global_Wirev>
   d8540:	6803      	ldr	r3, [r0, #0]
   d8542:	695b      	ldr	r3, [r3, #20]
   d8544:	4798      	blx	r3
   d8546:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d854a:	454e      	cmp	r6, r9
   d854c:	d1f6      	bne.n	d853c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d854e:	4445      	add	r5, r8
   d8550:	eba7 0708 	sub.w	r7, r7, r8
   d8554:	e7be      	b.n	d84d4 <_ZN6MB85RC8readDataEjPhj+0x14>

000d8556 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d8556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d855a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d855c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d855e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d8560:	460e      	mov	r6, r1
   d8562:	4690      	mov	r8, r2
   d8564:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d8566:	f005 fbf1 	bl	ddd4c <_ZN7TwoWire4lockEv>
   d856a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d856e:	f1b9 0f00 	cmp.w	r9, #0
   d8572:	d02a      	beq.n	d85ca <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d8574:	b34d      	cbz	r5, d85ca <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d8576:	68e1      	ldr	r1, [r4, #12]
   d8578:	6860      	ldr	r0, [r4, #4]
   d857a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d857e:	f005 fbc6 	bl	ddd0e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d8582:	0a31      	lsrs	r1, r6, #8
   d8584:	6860      	ldr	r0, [r4, #4]
   d8586:	f7ff ff4b 	bl	d8420 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d858a:	6860      	ldr	r0, [r4, #4]
   d858c:	4631      	mov	r1, r6
   d858e:	f7ff ff47 	bl	d8420 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d8592:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d8596:	4647      	mov	r7, r8
   d8598:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d859c:	6860      	ldr	r0, [r4, #4]
   d859e:	f817 1b01 	ldrb.w	r1, [r7], #1
   d85a2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d85a4:	3d01      	subs	r5, #1
				wire.write(*data);
   d85a6:	689b      	ldr	r3, [r3, #8]
   d85a8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d85aa:	4555      	cmp	r5, sl
   d85ac:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d85b0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d85b2:	d001      	beq.n	d85b8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d85b4:	2d00      	cmp	r5, #0
   d85b6:	d1f1      	bne.n	d859c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d85b8:	6860      	ldr	r0, [r4, #4]
   d85ba:	2101      	movs	r1, #1
   d85bc:	f005 fbc2 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d85c0:	2800      	cmp	r0, #0
   d85c2:	d0d7      	beq.n	d8574 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d85c4:	f04f 0900 	mov.w	r9, #0
   d85c8:	e7d1      	b.n	d856e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d85ca:	a801      	add	r0, sp, #4
   d85cc:	f7ff ff39 	bl	d8442 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d85d0:	4648      	mov	r0, r9
   d85d2:	b003      	add	sp, #12
   d85d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d85d8 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d85d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d85dc:	b08b      	sub	sp, #44	; 0x2c
   d85de:	460e      	mov	r6, r1
   d85e0:	4615      	mov	r5, r2
   d85e2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d85e4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d85e6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d85e8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d85ea:	f005 fbaf 	bl	ddd4c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d85ee:	42ae      	cmp	r6, r5
   d85f0:	d229      	bcs.n	d8646 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d85f2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d85f4:	4425      	add	r5, r4
			while(numBytes > 0) {
   d85f6:	b18c      	cbz	r4, d861c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d85f8:	2c1e      	cmp	r4, #30
   d85fa:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d85fc:	f8d8 3000 	ldr.w	r3, [r8]
   d8600:	bf28      	it	cs
   d8602:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d8604:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d8606:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d860a:	aa02      	add	r2, sp, #8
   d860c:	463b      	mov	r3, r7
   d860e:	4631      	mov	r1, r6
   d8610:	4640      	mov	r0, r8
				framAddrTo -= count;
   d8612:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d8614:	47c8      	blx	r9
				if (!result) {
   d8616:	b948      	cbnz	r0, d862c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d8618:	2400      	movs	r4, #0
   d861a:	e000      	b.n	d861e <_ZN6MB85RC8moveDataEjjj+0x46>
   d861c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d861e:	a801      	add	r0, sp, #4
   d8620:	f7ff ff0f 	bl	d8442 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d8624:	4620      	mov	r0, r4
   d8626:	b00b      	add	sp, #44	; 0x2c
   d8628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d862c:	f8d8 3000 	ldr.w	r3, [r8]
   d8630:	aa02      	add	r2, sp, #8
   d8632:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d8636:	4629      	mov	r1, r5
   d8638:	463b      	mov	r3, r7
   d863a:	4640      	mov	r0, r8
   d863c:	47c8      	blx	r9
				if (!result) {
   d863e:	2800      	cmp	r0, #0
   d8640:	d0ea      	beq.n	d8618 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d8642:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d8644:	e7d7      	b.n	d85f6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d8646:	d9e9      	bls.n	d861c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d8648:	2c00      	cmp	r4, #0
   d864a:	d0e7      	beq.n	d861c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d864c:	f8d8 3000 	ldr.w	r3, [r8]
   d8650:	2c1e      	cmp	r4, #30
   d8652:	4627      	mov	r7, r4
   d8654:	bf28      	it	cs
   d8656:	271e      	movcs	r7, #30
   d8658:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d865c:	aa02      	add	r2, sp, #8
   d865e:	463b      	mov	r3, r7
   d8660:	4631      	mov	r1, r6
   d8662:	4640      	mov	r0, r8
   d8664:	47c8      	blx	r9
				if (!result) {
   d8666:	2800      	cmp	r0, #0
   d8668:	d0d6      	beq.n	d8618 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d866a:	f8d8 3000 	ldr.w	r3, [r8]
   d866e:	aa02      	add	r2, sp, #8
   d8670:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d8674:	4629      	mov	r1, r5
   d8676:	463b      	mov	r3, r7
   d8678:	4640      	mov	r0, r8
   d867a:	47c8      	blx	r9
				if (!result) {
   d867c:	2800      	cmp	r0, #0
   d867e:	d0cb      	beq.n	d8618 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d8680:	443e      	add	r6, r7
				framAddrTo += count;
   d8682:	443d      	add	r5, r7
				numBytes -= count;
   d8684:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d8686:	e7df      	b.n	d8648 <_ZN6MB85RC8moveDataEjjj+0x70>

000d8688 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
	(*_Base::_M_get_pointer(__functor))(
   d8688:	6803      	ldr	r3, [r0, #0]
   d868a:	780a      	ldrb	r2, [r1, #0]
    return result;
}

void PublishQueuePosix::publishCompleteCallback(bool succeeded, const char *eventName, const char *eventData) {
    publishComplete = true;
    publishSuccess = succeeded;
   d868c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   d8690:	2101      	movs	r1, #1
   d8692:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   d8696:	4770      	bx	lr

000d8698 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d8698:	2a02      	cmp	r2, #2
   d869a:	d006      	beq.n	d86aa <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d869c:	2a03      	cmp	r2, #3
   d869e:	d002      	beq.n	d86a6 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d86a0:	2a01      	cmp	r2, #1
   d86a2:	d100      	bne.n	d86a6 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d86a4:	6001      	str	r1, [r0, #0]
	}
   d86a6:	2000      	movs	r0, #0
   d86a8:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d86aa:	680b      	ldr	r3, [r1, #0]
   d86ac:	6003      	str	r3, [r0, #0]
	}
   d86ae:	e7fa      	b.n	d86a6 <_ZNSt14_Function_base13_Base_managerIZN17PublishQueuePosix9stateWaitEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d86b0 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d86b0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d86b2:	4603      	mov	r3, r0
	switch (__op)
   d86b4:	d102      	bne.n	d86bc <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d86b6:	6001      	str	r1, [r0, #0]
      }
   d86b8:	2000      	movs	r0, #0
   d86ba:	4770      	bx	lr
	  switch (__op)
   d86bc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d86be:	bf04      	itt	eq
   d86c0:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d86c4:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d86c8:	e7f6      	b.n	d86b8 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d86ca <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d86ca:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d86cc:	6842      	ldr	r2, [r0, #4]
   d86ce:	4603      	mov	r3, r0
   d86d0:	1054      	asrs	r4, r2, #1
   d86d2:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d86d6:	07d2      	lsls	r2, r2, #31
   d86d8:	bf48      	it	mi
   d86da:	590a      	ldrmi	r2, [r1, r4]
   d86dc:	681b      	ldr	r3, [r3, #0]
      }
   d86de:	f85d 4b04 	ldr.w	r4, [sp], #4
   d86e2:	bf48      	it	mi
   d86e4:	58d3      	ldrmi	r3, [r2, r3]
   d86e6:	4718      	bx	r3

000d86e8 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   d86e8:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   d86ec:	4601      	mov	r1, r0
    if (stateHandler) {
   d86ee:	b11b      	cbz	r3, d86f8 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d86f0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   d86f4:	30c0      	adds	r0, #192	; 0xc0
   d86f6:	4718      	bx	r3
}
   d86f8:	4770      	bx	lr
	...

000d86fc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d86fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   d86fe:	4d12      	ldr	r5, [pc, #72]	; (d8748 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d8700:	4608      	mov	r0, r1
        eventData = "";
   d8702:	2a00      	cmp	r2, #0
   d8704:	bf18      	it	ne
   d8706:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   d8708:	460f      	mov	r7, r1
   d870a:	461e      	mov	r6, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   d870c:	f009 f85f 	bl	e17ce <strlen>
   d8710:	2840      	cmp	r0, #64	; 0x40
   d8712:	d817      	bhi.n	d8744 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   d8714:	4628      	mov	r0, r5
   d8716:	f009 f85a 	bl	e17ce <strlen>
   d871a:	f240 236e 	movw	r3, #622	; 0x26e
   d871e:	4298      	cmp	r0, r3
   d8720:	d810      	bhi.n	d8744 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x48>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   d8722:	3043      	adds	r0, #67	; 0x43
   d8724:	f7fb fcb9 	bl	d409a <_Znaj>
    if (event) {
   d8728:	4604      	mov	r4, r0
   d872a:	b148      	cbz	r0, d8740 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
        strcpy(event->eventName, eventName);
   d872c:	4639      	mov	r1, r7
        event->flags = flags;
   d872e:	f800 6b01 	strb.w	r6, [r0], #1
        strcpy(event->eventName, eventName);
   d8732:	f009 f827 	bl	e1784 <strcpy>
        strcpy(event->eventData, eventData);
   d8736:	4629      	mov	r1, r5
   d8738:	f104 0042 	add.w	r0, r4, #66	; 0x42
   d873c:	f009 f822 	bl	e1784 <strcpy>
}
   d8740:	4620      	mov	r0, r4
   d8742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   d8744:	2400      	movs	r4, #0
   d8746:	e7fb      	b.n	d8740 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x44>
   d8748:	000e44eb 	.word	0x000e44eb

000d874c <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d874c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d874e:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d8750:	460a      	mov	r2, r1
   d8752:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   d8754:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   d8756:	1d01      	adds	r1, r0, #4
   d8758:	a808      	add	r0, sp, #32
   d875a:	f000 fe05 	bl	d9368 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d875e:	9808      	ldr	r0, [sp, #32]
   d8760:	2100      	movs	r1, #0
   d8762:	f009 ffcb 	bl	e26fc <open>
   d8766:	4605      	mov	r5, r0
   d8768:	a808      	add	r0, sp, #32
   d876a:	f007 f97d 	bl	dfa68 <_ZN6StringD1Ev>
    if (fd) {
   d876e:	2d00      	cmp	r5, #0
   d8770:	d060      	beq.n	d8834 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   d8772:	a908      	add	r1, sp, #32
   d8774:	4628      	mov	r0, r5
   d8776:	f009 ffaf 	bl	e26d8 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   d877a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d877c:	492e      	ldr	r1, [pc, #184]	; (d8838 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   d877e:	482f      	ldr	r0, [pc, #188]	; (d883c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8780:	4632      	mov	r2, r6
   d8782:	f7fd fbed 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   d8786:	2200      	movs	r2, #0
   d8788:	4611      	mov	r1, r2
   d878a:	4628      	mov	r0, r5
   d878c:	f009 ffac 	bl	e26e8 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   d8790:	2208      	movs	r2, #8
   d8792:	a906      	add	r1, sp, #24
   d8794:	4628      	mov	r0, r5
   d8796:	f009 ffc5 	bl	e2724 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   d879a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   d879c:	2f4a      	cmp	r7, #74	; 0x4a
   d879e:	dd39      	ble.n	d8814 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   d87a0:	4b27      	ldr	r3, [pc, #156]	; (d8840 <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   d87a2:	9a06      	ldr	r2, [sp, #24]
   d87a4:	429a      	cmp	r2, r3
   d87a6:	d135      	bne.n	d8814 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   d87a8:	4b26      	ldr	r3, [pc, #152]	; (d8844 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   d87aa:	9a07      	ldr	r2, [sp, #28]
   d87ac:	429a      	cmp	r2, r3
   d87ae:	d131      	bne.n	d8814 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   d87b0:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   d87b4:	4610      	mov	r0, r2
   d87b6:	9205      	str	r2, [sp, #20]
   d87b8:	f7fb fc6f 	bl	d409a <_Znaj>
            if (result) {
   d87bc:	4604      	mov	r4, r0
   d87be:	b1c0      	cbz	r0, d87f2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d87c0:	4427      	add	r7, r4
                read(fd, result, eventSize);
   d87c2:	4601      	mov	r1, r0
   d87c4:	9a05      	ldr	r2, [sp, #20]
   d87c6:	4628      	mov	r0, r5
   d87c8:	f009 ffac 	bl	e2724 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   d87cc:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   d87d0:	b9ab      	cbnz	r3, d87fe <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   d87d2:	1c63      	adds	r3, r4, #1
   d87d4:	4618      	mov	r0, r3
   d87d6:	9305      	str	r3, [sp, #20]
   d87d8:	f008 fff9 	bl	e17ce <strlen>
   d87dc:	283f      	cmp	r0, #63	; 0x3f
   d87de:	9b05      	ldr	r3, [sp, #20]
   d87e0:	d80d      	bhi.n	d87fe <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   d87e2:	f104 0242 	add.w	r2, r4, #66	; 0x42
   d87e6:	9200      	str	r2, [sp, #0]
   d87e8:	4917      	ldr	r1, [pc, #92]	; (d8848 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   d87ea:	4814      	ldr	r0, [pc, #80]	; (d883c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d87ec:	4632      	mov	r2, r6
   d87ee:	f7fd fbb7 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   d87f2:	4628      	mov	r0, r5
   d87f4:	f009 ff68 	bl	e26c8 <close>
}
   d87f8:	4620      	mov	r0, r4
   d87fa:	b01f      	add	sp, #124	; 0x7c
   d87fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   d87fe:	4913      	ldr	r1, [pc, #76]	; (d884c <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   d8800:	480e      	ldr	r0, [pc, #56]	; (d883c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d8802:	4632      	mov	r2, r6
   d8804:	f7fd fbac 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   d8808:	2143      	movs	r1, #67	; 0x43
   d880a:	4620      	mov	r0, r4
   d880c:	f007 ff78 	bl	e0700 <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   d8810:	2400      	movs	r4, #0
   d8812:	e7ee      	b.n	d87f2 <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   d8814:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d8818:	9302      	str	r3, [sp, #8]
   d881a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d881e:	9301      	str	r3, [sp, #4]
   d8820:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d8824:	9300      	str	r3, [sp, #0]
   d8826:	490a      	ldr	r1, [pc, #40]	; (d8850 <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   d8828:	9b06      	ldr	r3, [sp, #24]
   d882a:	4804      	ldr	r0, [pc, #16]	; (d883c <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   d882c:	4632      	mov	r2, r6
   d882e:	f7fd fb97 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
   d8832:	e7ed      	b.n	d8810 <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   d8834:	462c      	mov	r4, r5
    return result;
   d8836:	e7df      	b.n	d87f8 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   d8838:	000e40f4 	.word	0x000e40f4
   d883c:	2003e484 	.word	0x2003e484
   d8840:	31b67663 	.word	0x31b67663
   d8844:	00410801 	.word	0x00410801
   d8848:	000e4108 	.word	0x000e4108
   d884c:	000e412a 	.word	0x000e412a
   d8850:	000e4158 	.word	0x000e4158

000d8854 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   d8854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8858:	4680      	mov	r8, r0
   d885a:	4b28      	ldr	r3, [pc, #160]	; (d88fc <_ZN17PublishQueuePosixC1Ev+0xa8>)
   d885c:	f848 3b04 	str.w	r3, [r8], #4
   d8860:	4604      	mov	r4, r0
   d8862:	4640      	mov	r0, r8
   d8864:	f000 fc98 	bl	d9198 <_ZN14SequentialFileC1Ev>
   d8868:	2202      	movs	r2, #2
   d886a:	2364      	movs	r3, #100	; 0x64
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d886c:	2500      	movs	r5, #0
   d886e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d8872:	2308      	movs	r3, #8
   d8874:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d8876:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   d887a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   d887e:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   d8882:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	  _M_start(), _M_finish()
   d8886:	67a5      	str	r5, [r4, #120]	; 0x78
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8888:	2020      	movs	r0, #32
   d888a:	f7fb fc04 	bl	d4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d888e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d8890:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d8892:	3e01      	subs	r6, #1
   d8894:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d8896:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d889a:	4607      	mov	r7, r0
   d889c:	f44f 7000 	mov.w	r0, #512	; 0x200
   d88a0:	f7fb fbf9 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d88a4:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d88a8:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   d88ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d88b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d88b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d88b8:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   d88bc:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   d88c0:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   d88c4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d88c8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d88cc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   d88d0:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   d88d4:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   d88d8:	4909      	ldr	r1, [pc, #36]	; (d8900 <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   d88da:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   d88de:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   d88e2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   d88e6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   d88ea:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   d88ee:	4640      	mov	r0, r8
   d88f0:	f000 fc98 	bl	d9224 <_ZN14SequentialFile11withDirPathEPKc>
}
   d88f4:	4620      	mov	r0, r4
   d88f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d88fa:	bf00      	nop
   d88fc:	000e4374 	.word	0x000e4374
   d8900:	000e419d 	.word	0x000e419d

000d8904 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   d8904:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d8906:	4c06      	ldr	r4, [pc, #24]	; (d8920 <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   d8908:	6823      	ldr	r3, [r4, #0]
   d890a:	b93b      	cbnz	r3, d891c <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   d890c:	20d0      	movs	r0, #208	; 0xd0
   d890e:	f7fb fbc2 	bl	d4096 <_Znwj>
   d8912:	4605      	mov	r5, r0
   d8914:	b108      	cbz	r0, d891a <_ZN17PublishQueuePosix8instanceEv+0x16>
   d8916:	f7ff ff9d 	bl	d8854 <_ZN17PublishQueuePosixC1Ev>
   d891a:	6025      	str	r5, [r4, #0]
}
   d891c:	6820      	ldr	r0, [r4, #0]
   d891e:	bd38      	pop	{r3, r4, r5, pc}
   d8920:	2003e488 	.word	0x2003e488

000d8924 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d8924:	b510      	push	{r4, lr}
   d8926:	e9d1 2300 	ldrd	r2, r3, [r1]
   d892a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d892c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d892e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d8930:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d8932:	b90a      	cbnz	r2, d8938 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d8934:	07d9      	lsls	r1, r3, #31
   d8936:	d505      	bpl.n	d8944 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8938:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d893c:	4b0f      	ldr	r3, [pc, #60]	; (d897c <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d893e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d8940:	4b0f      	ldr	r3, [pc, #60]	; (d8980 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d8942:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8944:	ab02      	add	r3, sp, #8
   d8946:	e893 0003 	ldmia.w	r3, {r0, r1}
   d894a:	466a      	mov	r2, sp
   d894c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8950:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8954:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8958:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d895c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d895e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8962:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8964:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8966:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8968:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d896a:	4618      	mov	r0, r3
   d896c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d896e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8970:	9105      	str	r1, [sp, #20]
   d8972:	f7fc f883 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	}
   d8976:	4620      	mov	r0, r4
   d8978:	b006      	add	sp, #24
   d897a:	bd10      	pop	{r4, pc}
   d897c:	000d86cb 	.word	0x000d86cb
   d8980:	000d86b1 	.word	0x000d86b1

000d8984 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>:
      ~lock_guard()
   d8984:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8986:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8988:	4604      	mov	r4, r0
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   d898a:	6f58      	ldr	r0, [r3, #116]	; 0x74
   d898c:	f004 f81c 	bl	dc9c8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8990:	4620      	mov	r0, r4
   d8992:	bd10      	pop	{r4, pc}

000d8994 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d8994:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   d8996:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   d8998:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   d899a:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d899c:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   d899e:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   d89a0:	d002      	beq.n	d89a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d89a2:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d89a4:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   d89a6:	bd10      	pop	{r4, pc}
	::operator delete(__p);
   d89a8:	68c0      	ldr	r0, [r0, #12]
   d89aa:	f7fb fb78 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d89ae:	6963      	ldr	r3, [r4, #20]
   d89b0:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d89b2:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d89b4:	685b      	ldr	r3, [r3, #4]
   d89b6:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d89b8:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d89bc:	6122      	str	r2, [r4, #16]
   d89be:	e7f1      	b.n	d89a4 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>

000d89c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   d89c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d89c4:	b087      	sub	sp, #28
   d89c6:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d89c8:	9001      	str	r0, [sp, #4]
    void lock() { os_mutex_recursive_lock(mutex); };
   d89ca:	6f40      	ldr	r0, [r0, #116]	; 0x74
                hdr.magic = FILE_MAGIC;
   d89cc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d8a78 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                hdr.version = FILE_VERSION;
   d89d0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d8a7c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
   d89d4:	f003 fff0 	bl	dc9b8 <os_mutex_recursive_lock>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d89d8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; d8a80 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xc0>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d89dc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   d89e0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d89e4:	4293      	cmp	r3, r2
   d89e6:	d105      	bne.n	d89f4 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x34>
    WITH_LOCK(*this) {
   d89e8:	a801      	add	r0, sp, #4
   d89ea:	f7ff ffcb 	bl	d8984 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d89ee:	b007      	add	sp, #28
   d89f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ramQueue.pop_front();
   d89f4:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   d89f8:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   d89fc:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   d89fe:	f7ff ffc9 	bl	d8994 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   d8a02:	4640      	mov	r0, r8
   d8a04:	f000 fea4 	bl	d9750 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8a08:	2300      	movs	r3, #0
   d8a0a:	4602      	mov	r2, r0
   d8a0c:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   d8a0e:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   d8a10:	a802      	add	r0, sp, #8
   d8a12:	f000 fca9 	bl	d9368 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   d8a16:	9802      	ldr	r0, [sp, #8]
   d8a18:	f240 2102 	movw	r1, #514	; 0x202
   d8a1c:	f009 fe6e 	bl	e26fc <open>
   d8a20:	4605      	mov	r5, r0
   d8a22:	a802      	add	r0, sp, #8
   d8a24:	f007 f820 	bl	dfa68 <_ZN6StringD1Ev>
            if (fd) {
   d8a28:	b1cd      	cbz	r5, d8a5e <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x9e>
                write(fd, &hdr, sizeof(hdr));
   d8a2a:	2208      	movs	r2, #8
   d8a2c:	eb0d 0102 	add.w	r1, sp, r2
   d8a30:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   d8a32:	e9cd 9a02 	strd	r9, sl, [sp, #8]
                write(fd, &hdr, sizeof(hdr));
   d8a36:	f009 fe87 	bl	e2748 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   d8a3a:	f107 0042 	add.w	r0, r7, #66	; 0x42
   d8a3e:	f008 fec6 	bl	e17ce <strlen>
   d8a42:	4639      	mov	r1, r7
   d8a44:	f100 0243 	add.w	r2, r0, #67	; 0x43
   d8a48:	4628      	mov	r0, r5
   d8a4a:	f009 fe7d 	bl	e2748 <write>
                close(fd);
   d8a4e:	4628      	mov	r0, r5
   d8a50:	f009 fe3a 	bl	e26c8 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   d8a54:	4807      	ldr	r0, [pc, #28]	; (d8a74 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>)
   d8a56:	4632      	mov	r2, r6
   d8a58:	4659      	mov	r1, fp
   d8a5a:	f7fd fa81 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   d8a5e:	4631      	mov	r1, r6
   d8a60:	4640      	mov	r0, r8
   d8a62:	f000 feb5 	bl	d97d0 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   d8a66:	2f00      	cmp	r7, #0
   d8a68:	d0b8      	beq.n	d89dc <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x1c>
   d8a6a:	2143      	movs	r1, #67	; 0x43
   d8a6c:	4638      	mov	r0, r7
   d8a6e:	f007 fe47 	bl	e0700 <_ZdlPvj>
   d8a72:	e7b1      	b.n	d89d8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   d8a74:	2003e484 	.word	0x2003e484
   d8a78:	31b67663 	.word	0x31b67663
   d8a7c:	00410801 	.word	0x00410801
   d8a80:	000e41ab 	.word	0x000e41ab

000d8a84 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:
PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d8a84:	2900      	cmp	r1, #0
   d8a86:	bf08      	it	eq
   d8a88:	f5b0 6f00 	cmpeq.w	r0, #2048	; 0x800
void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   d8a8c:	b538      	push	{r3, r4, r5, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   d8a8e:	d005      	beq.n	d8a9c <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x18>
   d8a90:	2900      	cmp	r1, #0
   d8a92:	bf08      	it	eq
   d8a94:	2840      	cmpeq	r0, #64	; 0x40
   d8a96:	d10b      	bne.n	d8ab0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
   d8a98:	2a09      	cmp	r2, #9
   d8a9a:	d109      	bne.n	d8ab0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>
        _log.trace("reset or disconnect event, save files to queue");
   d8a9c:	4905      	ldr	r1, [pc, #20]	; (d8ab4 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   d8a9e:	4806      	ldr	r0, [pc, #24]	; (d8ab8 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x34>)
   d8aa0:	f7fd fa5e 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   d8aa4:	f7ff ff2e 	bl	d8904 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   d8aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   d8aac:	f7ff bf88 	b.w	d89c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   d8ab0:	bd38      	pop	{r3, r4, r5, pc}
   d8ab2:	bf00      	nop
   d8ab4:	000e41c8 	.word	0x000e41c8
   d8ab8:	2003e484 	.word	0x2003e484

000d8abc <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   d8abc:	b570      	push	{r4, r5, r6, lr}
   d8abe:	b086      	sub	sp, #24
   d8ac0:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8ac2:	f004 fa69 	bl	dcf98 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   d8ac6:	b948      	cbnz	r0, d8adc <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   d8ac8:	4b43      	ldr	r3, [pc, #268]	; (d8bd8 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   d8aca:	a902      	add	r1, sp, #8
   d8acc:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d8ad0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8ad4:	f7ff ff26 	bl	d8924 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8ad8:	b006      	add	sp, #24
   d8ada:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   d8adc:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   d8ae0:	b11d      	cbz	r5, d8aea <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   d8ae2:	2301      	movs	r3, #1
   d8ae4:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   d8ae8:	e7f6      	b.n	d8ad8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   d8aea:	f003 ffa5 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   d8aee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   d8af2:	1ac0      	subs	r0, r0, r3
   d8af4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   d8af8:	4298      	cmp	r0, r3
   d8afa:	d3ed      	bcc.n	d8ad8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   d8afc:	1d26      	adds	r6, r4, #4
   d8afe:	4629      	mov	r1, r5
   d8b00:	4630      	mov	r0, r6
   d8b02:	f000 fe31 	bl	d9768 <_ZN14SequentialFile16getFileFromQueueEb>
   d8b06:	4601      	mov	r1, r0
   d8b08:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   d8b0c:	2800      	cmp	r0, #0
   d8b0e:	d052      	beq.n	d8bb6 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   d8b10:	4620      	mov	r0, r4
   d8b12:	f7ff fe1b 	bl	d874c <_ZN17PublishQueuePosix13readQueueFileEi>
   d8b16:	4605      	mov	r5, r0
   d8b18:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   d8b1c:	2800      	cmp	r0, #0
   d8b1e:	d035      	beq.n	d8b8c <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   d8b20:	f003 ff8a 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8b24:	ae02      	add	r6, sp, #8
   d8b26:	2500      	movs	r5, #0
   d8b28:	4b2c      	ldr	r3, [pc, #176]	; (d8bdc <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   d8b2a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   d8b2e:	4631      	mov	r1, r6
   d8b30:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8b34:	9302      	str	r3, [sp, #8]
   d8b36:	9503      	str	r5, [sp, #12]
   d8b38:	f7ff fef4 	bl	d8924 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8b3c:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   d8b40:	f103 0242 	add.w	r2, r3, #66	; 0x42
   d8b44:	9200      	str	r2, [sp, #0]
   d8b46:	4926      	ldr	r1, [pc, #152]	; (d8be0 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   d8b48:	4a26      	ldr	r2, [pc, #152]	; (d8be4 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   d8b4a:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8b4e:	42a8      	cmp	r0, r5
   d8b50:	bf08      	it	eq
   d8b52:	460a      	moveq	r2, r1
   d8b54:	3301      	adds	r3, #1
   d8b56:	4924      	ldr	r1, [pc, #144]	; (d8be8 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   d8b58:	4824      	ldr	r0, [pc, #144]	; (d8bec <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   d8b5a:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   d8b5e:	f7fd f9ff 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   d8b62:	f7fd ff53 	bl	d6a0c <_ZN19BackgroundPublishRK8instanceEv>
   d8b66:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   d8b6a:	4b21      	ldr	r3, [pc, #132]	; (d8bf0 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   d8b6c:	9305      	str	r3, [sp, #20]
   d8b6e:	e9cd 6500 	strd	r6, r5, [sp]
   d8b72:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   d8b74:	4b1f      	ldr	r3, [pc, #124]	; (d8bf4 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d8b76:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   d8b78:	9304      	str	r3, [sp, #16]
   d8b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8b7e:	3242      	adds	r2, #66	; 0x42
   d8b80:	f7fe f87c 	bl	d6c7c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   d8b84:	4630      	mov	r0, r6
   d8b86:	f7fb ff79 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d8b8a:	e7a5      	b.n	d8ad8 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   d8b8c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   d8b90:	4919      	ldr	r1, [pc, #100]	; (d8bf8 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   d8b92:	4816      	ldr	r0, [pc, #88]	; (d8bec <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   d8b94:	f7fb fc02 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   d8b98:	2101      	movs	r1, #1
   d8b9a:	4630      	mov	r0, r6
   d8b9c:	f000 fde4 	bl	d9768 <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   d8ba0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   d8ba4:	462a      	mov	r2, r5
   d8ba6:	4630      	mov	r0, r6
   d8ba8:	f000 fc1a 	bl	d93e0 <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   d8bac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d8bb0:	2b00      	cmp	r3, #0
   d8bb2:	d1b5      	bne.n	d8b20 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   d8bb4:	e795      	b.n	d8ae2 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d8bb6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   d8bba:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   d8bbe:	429a      	cmp	r2, r3
   d8bc0:	d007      	beq.n	d8bd2 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   d8bc2:	681b      	ldr	r3, [r3, #0]
   d8bc4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   d8bc8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d8bcc:	f7ff fee2 	bl	d8994 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   d8bd0:	e7ec      	b.n	d8bac <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   d8bd2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   d8bd6:	e784      	b.n	d8ae2 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   d8bd8:	000d8c75 	.word	0x000d8c75
   d8bdc:	000d8fcd 	.word	0x000d8fcd
   d8be0:	000e41f7 	.word	0x000e41f7
   d8be4:	000e4470 	.word	0x000e4470
   d8be8:	000e4218 	.word	0x000e4218
   d8bec:	2003e484 	.word	0x2003e484
   d8bf0:	000d8689 	.word	0x000d8689
   d8bf4:	000d8699 	.word	0x000d8699
   d8bf8:	000e41fb 	.word	0x000e41fb

000d8bfc <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d8bfc:	68c3      	ldr	r3, [r0, #12]
   d8bfe:	68ca      	ldr	r2, [r1, #12]
   d8c00:	1a9b      	subs	r3, r3, r2
   d8c02:	109b      	asrs	r3, r3, #2
   d8c04:	1e5a      	subs	r2, r3, #1
   d8c06:	e9d0 3000 	ldrd	r3, r0, [r0]
   d8c0a:	1a1b      	subs	r3, r3, r0
   d8c0c:	109b      	asrs	r3, r3, #2
   d8c0e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d8c12:	6888      	ldr	r0, [r1, #8]
   d8c14:	680a      	ldr	r2, [r1, #0]
   d8c16:	1a80      	subs	r0, r0, r2
    }
   d8c18:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d8c1c:	4770      	bx	lr

000d8c1e <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   d8c1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8c20:	4605      	mov	r5, r0
   d8c22:	9001      	str	r0, [sp, #4]
   d8c24:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d8c26:	f003 fec7 	bl	dc9b8 <os_mutex_recursive_lock>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8c2a:	f105 0180 	add.w	r1, r5, #128	; 0x80
   d8c2e:	f105 0090 	add.w	r0, r5, #144	; 0x90
   d8c32:	f7ff ffe3 	bl	d8bfc <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (result == 0) {
   d8c36:	4604      	mov	r4, r0
   d8c38:	b950      	cbnz	r0, d8c50 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
            result = fileQueue.getQueueLen();
   d8c3a:	1d28      	adds	r0, r5, #4
   d8c3c:	f000 fde2 	bl	d9804 <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   d8c40:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   d8c44:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   d8c46:	b11b      	cbz	r3, d8c50 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
   d8c48:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d8c4c:	b903      	cbnz	r3, d8c50 <_ZN17PublishQueuePosix12getNumEventsEv+0x32>
                result++;
   d8c4e:	3401      	adds	r4, #1
    WITH_LOCK(*this) {
   d8c50:	a801      	add	r0, sp, #4
   d8c52:	f7ff fe97 	bl	d8984 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8c56:	4620      	mov	r0, r4
   d8c58:	b003      	add	sp, #12
   d8c5a:	bd30      	pop	{r4, r5, pc}

000d8c5c <_ZN17PublishQueuePosix18setPausePublishingEb>:
void PublishQueuePosix::setPausePublishing(bool value) { 
   d8c5c:	b538      	push	{r3, r4, r5, lr}
   d8c5e:	4605      	mov	r5, r0
   d8c60:	460c      	mov	r4, r1
    pausePublishing = value; 
   d8c62:	f880 10b2 	strb.w	r1, [r0, #178]	; 0xb2
    if (!value) {
   d8c66:	b921      	cbnz	r1, d8c72 <_ZN17PublishQueuePosix18setPausePublishingEb+0x16>
        if (getNumEvents() != 0) {
   d8c68:	f7ff ffd9 	bl	d8c1e <_ZN17PublishQueuePosix12getNumEventsEv>
   d8c6c:	b108      	cbz	r0, d8c72 <_ZN17PublishQueuePosix18setPausePublishingEb+0x16>
            canSleep = false;
   d8c6e:	f885 40b3 	strb.w	r4, [r5, #179]	; 0xb3
}
   d8c72:	bd38      	pop	{r3, r4, r5, pc}

000d8c74 <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   d8c74:	b513      	push	{r0, r1, r4, lr}
   d8c76:	4604      	mov	r4, r0
   d8c78:	f004 f98e 	bl	dcf98 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d8c7c:	b190      	cbz	r0, d8ca4 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   d8c7e:	f003 fedb 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   d8c82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   d8c86:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   d8c8a:	4b0d      	ldr	r3, [pc, #52]	; (d8cc0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   d8c8c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   d8c90:	9300      	str	r3, [sp, #0]
   d8c92:	4669      	mov	r1, sp
   d8c94:	2300      	movs	r3, #0
   d8c96:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8c9a:	9301      	str	r3, [sp, #4]
   d8c9c:	f7ff fe42 	bl	d8924 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d8ca0:	b002      	add	sp, #8
   d8ca2:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   d8ca4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   d8ca8:	b11b      	cbz	r3, d8cb2 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   d8caa:	2301      	movs	r3, #1
   d8cac:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   d8cb0:	e7f6      	b.n	d8ca0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   d8cb2:	4620      	mov	r0, r4
   d8cb4:	f7ff ffb3 	bl	d8c1e <_ZN17PublishQueuePosix12getNumEventsEv>
   d8cb8:	2800      	cmp	r0, #0
   d8cba:	d0f6      	beq.n	d8caa <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   d8cbc:	e7f0      	b.n	d8ca0 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   d8cbe:	bf00      	nop
   d8cc0:	000d8abd 	.word	0x000d8abd

000d8cc4 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   d8cc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8cc8:	4604      	mov	r4, r0
   d8cca:	9001      	str	r0, [sp, #4]
   d8ccc:	6f40      	ldr	r0, [r0, #116]	; 0x74
   d8cce:	f003 fe73 	bl	dc9b8 <os_mutex_recursive_lock>
   d8cd2:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d8cd6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d8cda:	f7ff ff8f 	bl	d8bfc <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (ramQueue.size() > ramQueueSize) {
   d8cde:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8ce0:	4283      	cmp	r3, r0
   d8ce2:	d202      	bcs.n	d8cea <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
            writeQueueToFiles();
   d8ce4:	4620      	mov	r0, r4
   d8ce6:	f7ff fe6b 	bl	d89c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   d8cea:	f8df 8048 	ldr.w	r8, [pc, #72]	; d8d34 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x70>
   d8cee:	4f10      	ldr	r7, [pc, #64]	; (d8d30 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x6c>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   d8cf0:	1d26      	adds	r6, r4, #4
   d8cf2:	4630      	mov	r0, r6
   d8cf4:	f000 fd86 	bl	d9804 <_ZNK14SequentialFile11getQueueLenEv>
   d8cf8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   d8cfa:	4298      	cmp	r0, r3
   d8cfc:	dc05      	bgt.n	d8d0a <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x46>
    WITH_LOCK(*this) {
   d8cfe:	a801      	add	r0, sp, #4
   d8d00:	f7ff fe40 	bl	d8984 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
}
   d8d04:	b002      	add	sp, #8
   d8d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            int fileNum = fileQueue.getFileFromQueue(true);
   d8d0a:	2101      	movs	r1, #1
   d8d0c:	4630      	mov	r0, r6
   d8d0e:	f000 fd2b 	bl	d9768 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   d8d12:	4605      	mov	r5, r0
   d8d14:	2800      	cmp	r0, #0
   d8d16:	d0ec      	beq.n	d8cf2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
                fileQueue.removeFileNum(fileNum, false);
   d8d18:	4601      	mov	r1, r0
   d8d1a:	2200      	movs	r2, #0
   d8d1c:	4630      	mov	r0, r6
   d8d1e:	f000 fb5f 	bl	d93e0 <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   d8d22:	462a      	mov	r2, r5
   d8d24:	4641      	mov	r1, r8
   d8d26:	4638      	mov	r0, r7
   d8d28:	f7fb fb38 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   d8d2c:	e7e1      	b.n	d8cf2 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x2e>
   d8d2e:	bf00      	nop
   d8d30:	2003e484 	.word	0x2003e484
   d8d34:	000e4237 	.word	0x000e4237

000d8d38 <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   d8d38:	b513      	push	{r0, r1, r4, lr}
   d8d3a:	4604      	mov	r4, r0
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   d8d3c:	2000      	movs	r0, #0
   d8d3e:	f004 f8dd 	bl	dcefc <system_thread_get_state>
   d8d42:	2801      	cmp	r0, #1
   d8d44:	d005      	beq.n	d8d52 <_ZN17PublishQueuePosix5setupEv+0x1a>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   d8d46:	4912      	ldr	r1, [pc, #72]	; (d8d90 <_ZN17PublishQueuePosix5setupEv+0x58>)
   d8d48:	4812      	ldr	r0, [pc, #72]	; (d8d94 <_ZN17PublishQueuePosix5setupEv+0x5c>)
   d8d4a:	f7fd f920 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
}
   d8d4e:	b002      	add	sp, #8
   d8d50:	bd10      	pop	{r4, pc}
    os_mutex_recursive_create(&mutex);
   d8d52:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d8d56:	f003 fe1f 	bl	dc998 <os_mutex_recursive_create>
   d8d5a:	4a0f      	ldr	r2, [pc, #60]	; (d8d98 <_ZN17PublishQueuePosix5setupEv+0x60>)
   d8d5c:	2300      	movs	r3, #0
   d8d5e:	2100      	movs	r1, #0
   d8d60:	f44f 6004 	mov.w	r0, #2112	; 0x840
   d8d64:	f004 f8aa 	bl	dcebc <system_subscribe_event>
    BackgroundPublishRK::instance().start();
   d8d68:	f7fd fe50 	bl	d6a0c <_ZN19BackgroundPublishRK8instanceEv>
   d8d6c:	f7fd ff60 	bl	d6c30 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   d8d70:	1d20      	adds	r0, r4, #4
   d8d72:	f000 fc75 	bl	d9660 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   d8d76:	4620      	mov	r0, r4
   d8d78:	f7ff ffa4 	bl	d8cc4 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   d8d7c:	4b07      	ldr	r3, [pc, #28]	; (d8d9c <_ZN17PublishQueuePosix5setupEv+0x64>)
   d8d7e:	9300      	str	r3, [sp, #0]
   d8d80:	4669      	mov	r1, sp
   d8d82:	2300      	movs	r3, #0
   d8d84:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d8d88:	9301      	str	r3, [sp, #4]
   d8d8a:	f7ff fdcb 	bl	d8924 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8d8e:	e7de      	b.n	d8d4e <_ZN17PublishQueuePosix5setupEv+0x16>
   d8d90:	000e424a 	.word	0x000e424a
   d8d94:	2003e484 	.word	0x2003e484
   d8d98:	000d8a85 	.word	0x000d8a85
   d8d9c:	000d8c75 	.word	0x000d8c75

000d8da0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d8da0:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d8da2:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d8da4:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d8da6:	b163      	cbz	r3, d8dc2 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d8da8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8daa:	6945      	ldr	r5, [r0, #20]
   d8dac:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d8dae:	42ae      	cmp	r6, r5
   d8db0:	d904      	bls.n	d8dbc <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x1c>
   d8db2:	f855 0b04 	ldr.w	r0, [r5], #4
   d8db6:	f7fb f972 	bl	d409e <_ZdlPv>
   d8dba:	e7f8      	b.n	d8dae <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   d8dbc:	6820      	ldr	r0, [r4, #0]
   d8dbe:	f7fb f96e 	bl	d409e <_ZdlPv>
    }
   d8dc2:	4620      	mov	r0, r4
   d8dc4:	bd70      	pop	{r4, r5, r6, pc}

000d8dc6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   d8dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8dca:	4606      	mov	r6, r0
   d8dcc:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8dce:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8dd0:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8dd2:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d8dd4:	1a47      	subs	r7, r0, r1
   d8dd6:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d8dda:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8ddc:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   d8de0:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d8de2:	d927      	bls.n	d8e34 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   d8de4:	1b5d      	subs	r5, r3, r5
   d8de6:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8de8:	6832      	ldr	r2, [r6, #0]
   d8dea:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8dec:	b10c      	cbz	r4, d8df2 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   d8dee:	ea4f 0489 	mov.w	r4, r9, lsl #2
   d8df2:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d8df4:	4414      	add	r4, r2
   d8df6:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d8df8:	42a1      	cmp	r1, r4
   d8dfa:	eba3 0201 	sub.w	r2, r3, r1
   d8dfe:	d913      	bls.n	d8e28 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   d8e00:	4299      	cmp	r1, r3
   d8e02:	d002      	beq.n	d8e0a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8e04:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8e06:	f008 fc3d 	bl	e1684 <memmove>
	_M_node = __new_node;
   d8e0a:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   d8e0c:	6823      	ldr	r3, [r4, #0]
   d8e0e:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8e10:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8e14:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d8e16:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   d8e18:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   d8e1a:	59e3      	ldr	r3, [r4, r7]
   d8e1c:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8e1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d8e22:	6233      	str	r3, [r6, #32]
    }
   d8e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d8e28:	4299      	cmp	r1, r3
   d8e2a:	d0ee      	beq.n	d8e0a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d8e2c:	1d38      	adds	r0, r7, #4
   d8e2e:	1a80      	subs	r0, r0, r2
   d8e30:	4420      	add	r0, r4
   d8e32:	e7e8      	b.n	d8e06 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d8e34:	f103 0802 	add.w	r8, r3, #2
   d8e38:	454b      	cmp	r3, r9
   d8e3a:	bf2c      	ite	cs
   d8e3c:	4498      	addcs	r8, r3
   d8e3e:	44c8      	addcc	r8, r9
	if (__n > this->max_size())
   d8e40:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   d8e44:	d301      	bcc.n	d8e4a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   d8e46:	f007 fc95 	bl	e0774 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8e4a:	ea4f 0088 	mov.w	r0, r8, lsl #2
   d8e4e:	f7fb f922 	bl	d4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8e52:	eba8 0505 	sub.w	r5, r8, r5
   d8e56:	086d      	lsrs	r5, r5, #1
   d8e58:	4682      	mov	sl, r0
   d8e5a:	00ad      	lsls	r5, r5, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8e5c:	b10c      	cbz	r4, d8e62 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   d8e5e:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   d8e62:	6a72      	ldr	r2, [r6, #36]	; 0x24
   d8e64:	6971      	ldr	r1, [r6, #20]
   d8e66:	3204      	adds	r2, #4
	                 + (__add_at_front ? __nodes_to_add : 0);
   d8e68:	442c      	add	r4, r5
	  if (_Num)
   d8e6a:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d8e6c:	4454      	add	r4, sl
   d8e6e:	d003      	beq.n	d8e78 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d8e70:	1a52      	subs	r2, r2, r1
   d8e72:	4620      	mov	r0, r4
   d8e74:	f008 fc06 	bl	e1684 <memmove>
	::operator delete(__p);
   d8e78:	6830      	ldr	r0, [r6, #0]
   d8e7a:	f7fb f910 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d8e7e:	e9c6 a800 	strd	sl, r8, [r6]
   d8e82:	e7c2      	b.n	d8e0a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>

000d8e84 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8e88:	b086      	sub	sp, #24
   d8e8a:	4604      	mov	r4, r0
   d8e8c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d8e90:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d8e94:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d8e96:	460f      	mov	r7, r1
   d8e98:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   d8e9a:	f7ff fc2f 	bl	d86fc <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   d8e9e:	4605      	mov	r5, r0
   d8ea0:	2800      	cmp	r0, #0
   d8ea2:	d042      	beq.n	d8f2a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xa6>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   d8ea4:	4b43      	ldr	r3, [pc, #268]	; (d8fb4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   d8ea6:	4944      	ldr	r1, [pc, #272]	; (d8fb8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x134>)
   d8ea8:	4844      	ldr	r0, [pc, #272]	; (d8fbc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8eaa:	2e00      	cmp	r6, #0
   d8eac:	bf18      	it	ne
   d8eae:	4633      	movne	r3, r6
   d8eb0:	463a      	mov	r2, r7
   d8eb2:	f7fd f855 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
   d8eb6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d8eb8:	9405      	str	r4, [sp, #20]
   d8eba:	f003 fd7d 	bl	dc9b8 <os_mutex_recursive_lock>
	    != this->_M_impl._M_finish._M_last - 1)
   d8ebe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   d8ec2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   d8ec6:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   d8ec8:	4293      	cmp	r3, r2
   d8eca:	f104 0878 	add.w	r8, r4, #120	; 0x78
   d8ece:	f104 0690 	add.w	r6, r4, #144	; 0x90
   d8ed2:	f104 0780 	add.w	r7, r4, #128	; 0x80
   d8ed6:	d02b      	beq.n	d8f30 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8ed8:	b103      	cbz	r3, d8edc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x58>
   d8eda:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d8edc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   d8ee0:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   d8ee2:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d8ee4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   d8ee8:	4628      	mov	r0, r5
   d8eea:	f000 fc8b 	bl	d9804 <_ZNK14SequentialFile11getQueueLenEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8eee:	4639      	mov	r1, r7
   d8ef0:	9003      	str	r0, [sp, #12]
   d8ef2:	4630      	mov	r0, r6
   d8ef4:	f7ff fe82 	bl	d8bfc <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
   d8ef8:	9002      	str	r0, [sp, #8]
   d8efa:	f004 f84d 	bl	dcf98 <spark_cloud_flag_connected>
   d8efe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d8f02:	9000      	str	r0, [sp, #0]
   d8f04:	492e      	ldr	r1, [pc, #184]	; (d8fc0 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x13c>)
   d8f06:	482d      	ldr	r0, [pc, #180]	; (d8fbc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8f08:	f7fd f82a 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8f0c:	4628      	mov	r0, r5
   d8f0e:	f000 fc79 	bl	d9804 <_ZNK14SequentialFile11getQueueLenEv>
   d8f12:	2800      	cmp	r0, #0
   d8f14:	d03e      	beq.n	d8f94 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x110>
            writeQueueToFiles();
   d8f16:	4620      	mov	r0, r4
   d8f18:	f7ff fd52 	bl	d89c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   d8f1c:	4620      	mov	r0, r4
   d8f1e:	f7ff fed1 	bl	d8cc4 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    WITH_LOCK(*this) {
   d8f22:	a805      	add	r0, sp, #20
   d8f24:	f7ff fd2e 	bl	d8984 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
    return true;
   d8f28:	2001      	movs	r0, #1
}
   d8f2a:	b006      	add	sp, #24
   d8f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f30:	4639      	mov	r1, r7
   d8f32:	4630      	mov	r0, r6
   d8f34:	f7ff fe62 	bl	d8bfc <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d8f38:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d8f3c:	4298      	cmp	r0, r3
   d8f3e:	d102      	bne.n	d8f46 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xc2>
	  __throw_length_error(
   d8f40:	4820      	ldr	r0, [pc, #128]	; (d8fc4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x140>)
   d8f42:	f007 fc1a 	bl	e077a <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d8f46:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d8f4a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d8f4c:	1a9a      	subs	r2, r3, r2
   d8f4e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   d8f50:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d8f54:	2b01      	cmp	r3, #1
   d8f56:	d804      	bhi.n	d8f62 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>
	  _M_reallocate_map(__nodes_to_add, false);
   d8f58:	2200      	movs	r2, #0
   d8f5a:	2101      	movs	r1, #1
   d8f5c:	4640      	mov	r0, r8
   d8f5e:	f7ff ff32 	bl	d8dc6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8f62:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d8f66:	f8d4 809c 	ldr.w	r8, [r4, #156]	; 0x9c
   d8f6a:	f7fb f894 	bl	d4096 <_Znwj>
   d8f6e:	f8c8 0004 	str.w	r0, [r8, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d8f72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8f76:	b103      	cbz	r3, d8f7a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf6>
   d8f78:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d8f7a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   d8f7e:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d8f80:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   d8f84:	685b      	ldr	r3, [r3, #4]
   d8f86:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   d8f8a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d8f8e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   d8f92:	e7a6      	b.n	d8ee2 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x5e>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d8f94:	4639      	mov	r1, r7
   d8f96:	4630      	mov	r0, r6
   d8f98:	f7ff fe30 	bl	d8bfc <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   d8f9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   d8f9e:	4283      	cmp	r3, r0
   d8fa0:	d3b9      	bcc.n	d8f16 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
   d8fa2:	f003 fff9 	bl	dcf98 <spark_cloud_flag_connected>
   d8fa6:	2800      	cmp	r0, #0
   d8fa8:	d0b5      	beq.n	d8f16 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x92>
            _log.trace("queued to ramQueue");
   d8faa:	4907      	ldr	r1, [pc, #28]	; (d8fc8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x144>)
   d8fac:	4803      	ldr	r0, [pc, #12]	; (d8fbc <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x138>)
   d8fae:	f7fc ffd7 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
   d8fb2:	e7b3      	b.n	d8f1c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
   d8fb4:	000e44eb 	.word	0x000e44eb
   d8fb8:	000e426d 	.word	0x000e426d
   d8fbc:	2003e484 	.word	0x2003e484
   d8fc0:	000e42c5 	.word	0x000e42c5
   d8fc4:	000e4295 	.word	0x000e4295
   d8fc8:	000e42f1 	.word	0x000e42f1

000d8fcc <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   d8fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   d8fce:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   d8fd2:	4604      	mov	r4, r0
    if (!publishComplete) {
   d8fd4:	2b00      	cmp	r3, #0
   d8fd6:	d041      	beq.n	d905c <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   d8fd8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
   d8fdc:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d8fe0:	2b00      	cmp	r3, #0
   d8fe2:	d03d      	beq.n	d9060 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   d8fe4:	4952      	ldr	r1, [pc, #328]	; (d9130 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   d8fe6:	4853      	ldr	r0, [pc, #332]	; (d9134 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d8fe8:	f7fc ffba 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   d8fec:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d8ff0:	b1d3      	cbz	r3, d9028 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   d8ff2:	1d26      	adds	r6, r4, #4
   d8ff4:	2100      	movs	r1, #0
   d8ff6:	4630      	mov	r0, r6
   d8ff8:	f000 fbb6 	bl	d9768 <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   d8ffc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d9000:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   d9002:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   d9004:	d10d      	bne.n	d9022 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   d9006:	2101      	movs	r1, #1
   d9008:	4630      	mov	r0, r6
   d900a:	f000 fbad 	bl	d9768 <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   d900e:	2200      	movs	r2, #0
   d9010:	4629      	mov	r1, r5
   d9012:	4630      	mov	r0, r6
   d9014:	f000 f9e4 	bl	d93e0 <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   d9018:	4947      	ldr	r1, [pc, #284]	; (d9138 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   d901a:	4846      	ldr	r0, [pc, #280]	; (d9134 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d901c:	462a      	mov	r2, r5
   d901e:	f7fc ff9f 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   d9022:	2300      	movs	r3, #0
   d9024:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   d9028:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d902c:	b110      	cbz	r0, d9034 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   d902e:	2143      	movs	r1, #67	; 0x43
   d9030:	f007 fb66 	bl	e0700 <_ZdlPvj>
        curEvent = NULL;
   d9034:	2300      	movs	r3, #0
   d9036:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   d903a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   d903e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   d9042:	4b3e      	ldr	r3, [pc, #248]	; (d913c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   d9044:	9300      	str	r3, [sp, #0]
   d9046:	4669      	mov	r1, sp
   d9048:	2300      	movs	r3, #0
   d904a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d904e:	9301      	str	r3, [sp, #4]
   d9050:	f7ff fc68 	bl	d8924 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d9054:	f003 fcf0 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d9058:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   d905c:	b002      	add	sp, #8
   d905e:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   d9060:	4937      	ldr	r1, [pc, #220]	; (d9140 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   d9062:	4834      	ldr	r0, [pc, #208]	; (d9134 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d9064:	f7fc ff7c 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   d9068:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   d906c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   d9070:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   d9074:	b14b      	cbz	r3, d908a <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   d9076:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   d907a:	b110      	cbz	r0, d9082 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   d907c:	2143      	movs	r1, #67	; 0x43
   d907e:	f007 fb3f 	bl	e0700 <_ZdlPvj>
            curEvent = NULL;
   d9082:	2300      	movs	r3, #0
   d9084:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   d9088:	e7db      	b.n	d9042 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   d908a:	6f60      	ldr	r0, [r4, #116]	; 0x74
   d908c:	9400      	str	r4, [sp, #0]
   d908e:	f003 fc93 	bl	dc9b8 <os_mutex_recursive_lock>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   d9092:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   d9096:	4293      	cmp	r3, r2
   d9098:	d013      	beq.n	d90c2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf6>
	    _Alloc_traits::construct(this->_M_impl,
   d909a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d909e:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   d90a2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   d90a6:	3b04      	subs	r3, #4
   d90a8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            WITH_LOCK(*this) {
   d90ac:	4668      	mov	r0, sp
   d90ae:	f7ff fc69 	bl	d8984 <_ZNSt10lock_guardIR17PublishQueuePosixED1Ev>
            _log.trace("writing to files after publish failure");
   d90b2:	4924      	ldr	r1, [pc, #144]	; (d9144 <_ZN17PublishQueuePosix16statePublishWaitEv+0x178>)
   d90b4:	481f      	ldr	r0, [pc, #124]	; (d9134 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   d90b6:	f7fc ff53 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   d90ba:	4620      	mov	r0, r4
   d90bc:	f7ff fc80 	bl	d89c0 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   d90c0:	e7bf      	b.n	d9042 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d90c2:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d90c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d90ca:	f7ff fd97 	bl	d8bfc <_ZStmiIP17PublishQueueEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
	if (size() == max_size())
   d90ce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d90d2:	4298      	cmp	r0, r3
   d90d4:	f104 0578 	add.w	r5, r4, #120	; 0x78
   d90d8:	d102      	bne.n	d90e0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x114>
	  __throw_length_error(
   d90da:	481b      	ldr	r0, [pc, #108]	; (d9148 <_ZN17PublishQueuePosix16statePublishWaitEv+0x17c>)
   d90dc:	f007 fb4d 	bl	e077a <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   d90e0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   d90e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   d90e6:	429a      	cmp	r2, r3
   d90e8:	d104      	bne.n	d90f4 <_ZN17PublishQueuePosix16statePublishWaitEv+0x128>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   d90ea:	2201      	movs	r2, #1
   d90ec:	4611      	mov	r1, r2
   d90ee:	4628      	mov	r0, r5
   d90f0:	f7ff fe69 	bl	d8dc6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d90f4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   d90f8:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   d90fc:	f7fa ffcb 	bl	d4096 <_Znwj>
   d9100:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   d9104:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   d9108:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   d910a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   d910e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   d9112:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   d9116:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d911a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   d911e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   d9122:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	    _Alloc_traits::construct(this->_M_impl,
   d9126:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d912a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   d912e:	e7bd      	b.n	d90ac <_ZN17PublishQueuePosix16statePublishWaitEv+0xe0>
   d9130:	000e4304 	.word	0x000e4304
   d9134:	2003e484 	.word	0x2003e484
   d9138:	000e4317 	.word	0x000e4317
   d913c:	000d8abd 	.word	0x000d8abd
   d9140:	000e4327 	.word	0x000e4327
   d9144:	000e4339 	.word	0x000e4339
   d9148:	000e4295 	.word	0x000e4295

000d914c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   d914c:	4b01      	ldr	r3, [pc, #4]	; (d9154 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   d914e:	4a02      	ldr	r2, [pc, #8]	; (d9158 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   d9150:	601a      	str	r2, [r3, #0]
}
   d9152:	4770      	bx	lr
   d9154:	2003e484 	.word	0x2003e484
   d9158:	000e4360 	.word	0x000e4360

000d915c <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d915c:	b510      	push	{r4, lr}
   d915e:	4b07      	ldr	r3, [pc, #28]	; (d917c <_ZN17PublishQueuePosixD1Ev+0x20>)
   d9160:	4604      	mov	r4, r0
   d9162:	f840 3bc0 	str.w	r3, [r0], #192
   d9166:	f7fb fc89 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d916a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d916e:	f7ff fe17 	bl	d8da0 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   d9172:	1d20      	adds	r0, r4, #4
   d9174:	f000 f9b2 	bl	d94dc <_ZN14SequentialFileD1Ev>
}
   d9178:	4620      	mov	r0, r4
   d917a:	bd10      	pop	{r4, pc}
   d917c:	000e4374 	.word	0x000e4374

000d9180 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   d9180:	b510      	push	{r4, lr}
   d9182:	4604      	mov	r4, r0
}
   d9184:	f7ff ffea 	bl	d915c <_ZN17PublishQueuePosixD1Ev>
   d9188:	4620      	mov	r0, r4
   d918a:	21d0      	movs	r1, #208	; 0xd0
   d918c:	f007 fab8 	bl	e0700 <_ZdlPvj>
   d9190:	4620      	mov	r0, r4
   d9192:	bd10      	pop	{r4, pc}

000d9194 <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   d9194:	2001      	movs	r0, #1
   d9196:	4770      	bx	lr

000d9198 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   d9198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d919a:	4d1f      	ldr	r5, [pc, #124]	; (d9218 <_ZN14SequentialFileC1Ev+0x80>)
   d919c:	4b1f      	ldr	r3, [pc, #124]	; (d921c <_ZN14SequentialFileC1Ev+0x84>)
   d919e:	4604      	mov	r4, r0
   d91a0:	4629      	mov	r1, r5
   d91a2:	f840 3b04 	str.w	r3, [r0], #4
   d91a6:	f006 fcaa 	bl	dfafe <_ZN6StringC1EPKc>
   d91aa:	491d      	ldr	r1, [pc, #116]	; (d9220 <_ZN14SequentialFileC1Ev+0x88>)
   d91ac:	f104 0014 	add.w	r0, r4, #20
   d91b0:	f006 fca5 	bl	dfafe <_ZN6StringC1EPKc>
   d91b4:	4629      	mov	r1, r5
   d91b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d91ba:	f006 fca0 	bl	dfafe <_ZN6StringC1EPKc>
   d91be:	2300      	movs	r3, #0
   d91c0:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d91c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   d91c8:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   d91cc:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   d91d0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   d91d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	  _M_start(), _M_finish()
   d91d8:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d91da:	2308      	movs	r3, #8
   d91dc:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d91de:	2020      	movs	r0, #32
   d91e0:	f7fa ff59 	bl	d4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d91e4:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d91e6:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d91e8:	3d01      	subs	r5, #1
   d91ea:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   d91ec:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   d91f0:	4606      	mov	r6, r0
   d91f2:	f44f 7000 	mov.w	r0, #512	; 0x200
   d91f6:	f7fa ff4e 	bl	d4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   d91fa:	f500 7300 	add.w	r3, r0, #512	; 0x200
   d91fe:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   d9202:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   d9206:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d9208:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d920a:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   d920c:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   d920e:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   d9210:	6667      	str	r7, [r4, #100]	; 0x64

}
   d9212:	4620      	mov	r0, r4
   d9214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9216:	bf00      	nop
   d9218:	000e44eb 	.word	0x000e44eb
   d921c:	000e4480 	.word	0x000e4480
   d9220:	000e4380 	.word	0x000e4380

000d9224 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   d9226:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   d9228:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   d922a:	4628      	mov	r0, r5
   d922c:	f006 fcc5 	bl	dfbba <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   d9230:	490e      	ldr	r1, [pc, #56]	; (d926c <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   d9232:	4668      	mov	r0, sp
   d9234:	f006 fc63 	bl	dfafe <_ZN6StringC1EPKc>
   d9238:	4669      	mov	r1, sp
   d923a:	4628      	mov	r0, r5
   d923c:	f006 fd4c 	bl	dfcd8 <_ZNK6String8endsWithERKS_>
   d9240:	4606      	mov	r6, r0
   d9242:	4668      	mov	r0, sp
   d9244:	f006 fc10 	bl	dfa68 <_ZN6StringD1Ev>
   d9248:	b16e      	cbz	r6, d9266 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   d924a:	68e3      	ldr	r3, [r4, #12]
   d924c:	2200      	movs	r2, #0
   d924e:	3b01      	subs	r3, #1
   d9250:	4629      	mov	r1, r5
   d9252:	4668      	mov	r0, sp
   d9254:	f006 fd56 	bl	dfd04 <_ZNK6String9substringEjj>
   d9258:	4669      	mov	r1, sp
   d925a:	4628      	mov	r0, r5
   d925c:	f006 fca5 	bl	dfbaa <_ZN6StringaSEOS_>
   d9260:	4668      	mov	r0, sp
   d9262:	f006 fc01 	bl	dfa68 <_ZN6StringD1Ev>
    }
    return *this; 
};
   d9266:	4620      	mov	r0, r4
   d9268:	b004      	add	sp, #16
   d926a:	bd70      	pop	{r4, r5, r6, pc}
   d926c:	000e4385 	.word	0x000e4385

000d9270 <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   d9270:	b510      	push	{r4, lr}
    if (!queueMutex) {
   d9272:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   d9274:	4604      	mov	r4, r0
    if (!queueMutex) {
   d9276:	b913      	cbnz	r3, d927e <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   d9278:	303c      	adds	r0, #60	; 0x3c
   d927a:	f003 fb75 	bl	dc968 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   d927e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d9280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   d9284:	f003 bb78 	b.w	dc978 <os_mutex_lock>

000d9288 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   d9288:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d928a:	f003 bb7d 	b.w	dc988 <os_mutex_unlock>
	...

000d9290 <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   d9290:	b510      	push	{r4, lr}
   d9292:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   d9294:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   d9296:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   d9298:	f003 fce6 	bl	dcc68 <stat>
    if (result == 0) {
   d929c:	b9d0      	cbnz	r0, d92d4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d929e:	9b01      	ldr	r3, [sp, #4]
   d92a0:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   d92a2:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   d92a4:	d506      	bpl.n	d92b4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   d92a6:	4915      	ldr	r1, [pc, #84]	; (d92fc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   d92a8:	4815      	ldr	r0, [pc, #84]	; (d9300 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d92aa:	f7fb f877 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        return true;
   d92ae:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   d92b0:	b016      	add	sp, #88	; 0x58
   d92b2:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   d92b4:	4812      	ldr	r0, [pc, #72]	; (d9300 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d92b6:	4913      	ldr	r1, [pc, #76]	; (d9304 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   d92b8:	f7fc fe69 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   d92bc:	4620      	mov	r0, r4
   d92be:	f009 fa3b 	bl	e2738 <unlink>
    result = mkdir(path, 0777);
   d92c2:	f240 11ff 	movw	r1, #511	; 0x1ff
   d92c6:	4620      	mov	r0, r4
   d92c8:	f003 fcd6 	bl	dcc78 <mkdir>
    if (result == 0) {
   d92cc:	b980      	cbnz	r0, d92f0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   d92ce:	490e      	ldr	r1, [pc, #56]	; (d9308 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   d92d0:	4622      	mov	r2, r4
   d92d2:	e7e9      	b.n	d92a8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   d92d4:	f003 ff38 	bl	dd148 <__errno>
   d92d8:	6803      	ldr	r3, [r0, #0]
   d92da:	2b02      	cmp	r3, #2
   d92dc:	d0f1      	beq.n	d92c2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   d92de:	f003 ff33 	bl	dd148 <__errno>
   d92e2:	490a      	ldr	r1, [pc, #40]	; (d930c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   d92e4:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   d92e6:	4806      	ldr	r0, [pc, #24]	; (d9300 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   d92e8:	f7fc fe51 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d92ec:	2000      	movs	r0, #0
   d92ee:	e7df      	b.n	d92b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   d92f0:	f003 ff2a 	bl	dd148 <__errno>
   d92f4:	4906      	ldr	r1, [pc, #24]	; (d9310 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   d92f6:	6802      	ldr	r2, [r0, #0]
   d92f8:	e7f5      	b.n	d92e6 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   d92fa:	bf00      	nop
   d92fc:	000e4392 	.word	0x000e4392
   d9300:	2003e48c 	.word	0x2003e48c
   d9304:	000e43af 	.word	0x000e43af
   d9308:	000e43e0 	.word	0x000e43e0
   d930c:	000e43cc 	.word	0x000e43cc
   d9310:	000e43ef 	.word	0x000e43ef

000d9314 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   d9314:	b538      	push	{r3, r4, r5, lr}
   d9316:	4615      	mov	r5, r2
   d9318:	4604      	mov	r4, r0
    String result = name;
   d931a:	f006 fbf0 	bl	dfafe <_ZN6StringC1EPKc>

    if (ext && *ext) {
   d931e:	b14d      	cbz	r5, d9334 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   d9320:	782b      	ldrb	r3, [r5, #0]
   d9322:	b13b      	cbz	r3, d9334 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d9324:	4904      	ldr	r1, [pc, #16]	; (d9338 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   d9326:	4620      	mov	r0, r4
   d9328:	f006 fc70 	bl	dfc0c <_ZN6String6concatEPKc>
   d932c:	4629      	mov	r1, r5
   d932e:	4620      	mov	r0, r4
   d9330:	f006 fc6c 	bl	dfc0c <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   d9334:	4620      	mov	r0, r4
   d9336:	bd38      	pop	{r3, r4, r5, pc}
   d9338:	000e4a3c 	.word	0x000e4a3c

000d933c <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   d933c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d933e:	4605      	mov	r5, r0
   d9340:	460e      	mov	r6, r1
   d9342:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   d9344:	6949      	ldr	r1, [r1, #20]
   d9346:	4668      	mov	r0, sp
   d9348:	f006 fcfc 	bl	dfd44 <_ZN6String6formatEPKcz>
        operator const char*() const { return c_str(); }
   d934c:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   d934e:	b904      	cbnz	r4, d9352 <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   d9350:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9352:	4622      	mov	r2, r4
   d9354:	4628      	mov	r0, r5
   d9356:	f7ff ffdd 	bl	d9314 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   d935a:	4668      	mov	r0, sp
   d935c:	f006 fb84 	bl	dfa68 <_ZN6StringD1Ev>
}
   d9360:	4628      	mov	r0, r5
   d9362:	b004      	add	sp, #16
   d9364:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9368 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d9368:	b570      	push	{r4, r5, r6, lr}
   d936a:	460c      	mov	r4, r1
   d936c:	b08e      	sub	sp, #56	; 0x38
    String result;
   d936e:	491a      	ldr	r1, [pc, #104]	; (d93d8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   d9370:	e9cd 3200 	strd	r3, r2, [sp]
   d9374:	4605      	mov	r5, r0
    String result;
   d9376:	f006 fbc2 	bl	dfafe <_ZN6StringC1EPKc>
    result.reserve(dirPath.length() + pattern.length() + 4);
   d937a:	69e0      	ldr	r0, [r4, #28]
   d937c:	68e1      	ldr	r1, [r4, #12]
   d937e:	4401      	add	r1, r0
   d9380:	3104      	adds	r1, #4
   d9382:	4628      	mov	r0, r5
   d9384:	f006 fb8e 	bl	dfaa4 <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d9388:	1d21      	adds	r1, r4, #4
   d938a:	a806      	add	r0, sp, #24
   d938c:	f006 fc02 	bl	dfb94 <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   d9390:	4912      	ldr	r1, [pc, #72]	; (d93dc <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   d9392:	a802      	add	r0, sp, #8
   d9394:	f006 fbb3 	bl	dfafe <_ZN6StringC1EPKc>
   d9398:	a902      	add	r1, sp, #8
   d939a:	a806      	add	r0, sp, #24
   d939c:	f006 fc47 	bl	dfc2e <_ZplRK15StringSumHelperRK6String>
   d93a0:	e9dd 3200 	ldrd	r3, r2, [sp]
   d93a4:	4606      	mov	r6, r0
   d93a6:	4621      	mov	r1, r4
   d93a8:	a80a      	add	r0, sp, #40	; 0x28
   d93aa:	f7ff ffc7 	bl	d933c <_ZN14SequentialFile17getNameForFileNumEiPKc>
   d93ae:	a90a      	add	r1, sp, #40	; 0x28
   d93b0:	4630      	mov	r0, r6
   d93b2:	f006 fc3c 	bl	dfc2e <_ZplRK15StringSumHelperRK6String>
   d93b6:	4601      	mov	r1, r0
   d93b8:	4628      	mov	r0, r5
   d93ba:	f006 fbdc 	bl	dfb76 <_ZN6StringaSERKS_>
   d93be:	a80a      	add	r0, sp, #40	; 0x28
   d93c0:	f006 fb52 	bl	dfa68 <_ZN6StringD1Ev>
   d93c4:	a802      	add	r0, sp, #8
   d93c6:	f006 fb4f 	bl	dfa68 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d93ca:	a806      	add	r0, sp, #24
   d93cc:	f006 fb4c 	bl	dfa68 <_ZN6StringD1Ev>
}
   d93d0:	4628      	mov	r0, r5
   d93d2:	b00e      	add	sp, #56	; 0x38
   d93d4:	bd70      	pop	{r4, r5, r6, pc}
   d93d6:	bf00      	nop
   d93d8:	000e44eb 	.word	0x000e44eb
   d93dc:	000e4385 	.word	0x000e4385

000d93e0 <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d93e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   d93e4:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   d93e6:	b08e      	sub	sp, #56	; 0x38
   d93e8:	4605      	mov	r5, r0
   d93ea:	460f      	mov	r7, r1
    if (allExtensions) {
   d93ec:	2a00      	cmp	r2, #0
   d93ee:	d04a      	beq.n	d9486 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   d93f0:	6840      	ldr	r0, [r0, #4]
   d93f2:	f003 fc59 	bl	dcca8 <opendir>
        if (dir) {
   d93f6:	4606      	mov	r6, r0
   d93f8:	2800      	cmp	r0, #0
   d93fa:	d041      	beq.n	d9480 <_ZN14SequentialFile13removeFileNumEib+0xa0>
                        String path = dirPath + String("/") + ent->d_name;
   d93fc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d94b0 <_ZN14SequentialFile13removeFileNumEib+0xd0>
                        _log.trace("removed %s", path.c_str());
   d9400:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d94a8 <_ZN14SequentialFile13removeFileNumEib+0xc8>
   d9404:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d94ac <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   d9408:	4630      	mov	r0, r6
   d940a:	f003 fc55 	bl	dccb8 <readdir>
                if (!ent) {
   d940e:	2800      	cmp	r0, #0
   d9410:	d033      	beq.n	d947a <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   d9412:	7a82      	ldrb	r2, [r0, #10]
   d9414:	2a08      	cmp	r2, #8
   d9416:	d1f7      	bne.n	d9408 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   d9418:	f100 040b 	add.w	r4, r0, #11
   d941c:	6969      	ldr	r1, [r5, #20]
   d941e:	aa01      	add	r2, sp, #4
   d9420:	4620      	mov	r0, r4
   d9422:	f003 fe69 	bl	dd0f8 <sscanf>
   d9426:	2801      	cmp	r0, #1
   d9428:	d1ee      	bne.n	d9408 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   d942a:	9b01      	ldr	r3, [sp, #4]
   d942c:	429f      	cmp	r7, r3
   d942e:	d1eb      	bne.n	d9408 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   d9430:	1d29      	adds	r1, r5, #4
   d9432:	a806      	add	r0, sp, #24
   d9434:	f006 fbae 	bl	dfb94 <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   d9438:	4651      	mov	r1, sl
   d943a:	a80a      	add	r0, sp, #40	; 0x28
   d943c:	f006 fb5f 	bl	dfafe <_ZN6StringC1EPKc>
   d9440:	a90a      	add	r1, sp, #40	; 0x28
   d9442:	a806      	add	r0, sp, #24
   d9444:	f006 fbf3 	bl	dfc2e <_ZplRK15StringSumHelperRK6String>
   d9448:	4621      	mov	r1, r4
   d944a:	f006 fbfc 	bl	dfc46 <_ZplRK15StringSumHelperPKc>
   d944e:	4601      	mov	r1, r0
   d9450:	a802      	add	r0, sp, #8
   d9452:	f006 fb9f 	bl	dfb94 <_ZN6StringC1ERKS_>
   d9456:	a80a      	add	r0, sp, #40	; 0x28
   d9458:	f006 fb06 	bl	dfa68 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d945c:	a806      	add	r0, sp, #24
   d945e:	f006 fb03 	bl	dfa68 <_ZN6StringD1Ev>
                        unlink(path);
   d9462:	9802      	ldr	r0, [sp, #8]
   d9464:	f009 f968 	bl	e2738 <unlink>
                        _log.trace("removed %s", path.c_str());
   d9468:	4640      	mov	r0, r8
   d946a:	9a02      	ldr	r2, [sp, #8]
   d946c:	4649      	mov	r1, r9
   d946e:	f7fc fd77 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   d9472:	a802      	add	r0, sp, #8
   d9474:	f006 faf8 	bl	dfa68 <_ZN6StringD1Ev>
                    continue;
   d9478:	e7c6      	b.n	d9408 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   d947a:	4630      	mov	r0, r6
   d947c:	f003 fc24 	bl	dccc8 <closedir>
}
   d9480:	b00e      	add	sp, #56	; 0x38
   d9482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        String path = getPathForFileNum(fileNum); 
   d9486:	460a      	mov	r2, r1
   d9488:	4601      	mov	r1, r0
   d948a:	a80a      	add	r0, sp, #40	; 0x28
   d948c:	f7ff ff6c 	bl	d9368 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   d9490:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9492:	f009 f951 	bl	e2738 <unlink>
        _log.trace("removed %s", path.c_str());
   d9496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d9498:	4903      	ldr	r1, [pc, #12]	; (d94a8 <_ZN14SequentialFile13removeFileNumEib+0xc8>)
   d949a:	4804      	ldr	r0, [pc, #16]	; (d94ac <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   d949c:	f7fc fd60 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   d94a0:	a80a      	add	r0, sp, #40	; 0x28
   d94a2:	f006 fae1 	bl	dfa68 <_ZN6StringD1Ev>
}
   d94a6:	e7eb      	b.n	d9480 <_ZN14SequentialFile13removeFileNumEib+0xa0>
   d94a8:	000e4387 	.word	0x000e4387
   d94ac:	2003e48c 	.word	0x2003e48c
   d94b0:	000e4385 	.word	0x000e4385

000d94b4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   d94b4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   d94b6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   d94b8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   d94ba:	b163      	cbz	r3, d94d6 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x22>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d94bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d94be:	6945      	ldr	r5, [r0, #20]
   d94c0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d94c2:	42ae      	cmp	r6, r5
   d94c4:	d904      	bls.n	d94d0 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x1c>
	::operator delete(__p);
   d94c6:	f855 0b04 	ldr.w	r0, [r5], #4
   d94ca:	f7fa fde8 	bl	d409e <_ZdlPv>
   d94ce:	e7f8      	b.n	d94c2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   d94d0:	6820      	ldr	r0, [r4, #0]
   d94d2:	f7fa fde4 	bl	d409e <_ZdlPv>
    }
   d94d6:	4620      	mov	r0, r4
   d94d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d94dc <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   d94dc:	b510      	push	{r4, lr}
   d94de:	4b09      	ldr	r3, [pc, #36]	; (d9504 <_ZN14SequentialFileD1Ev+0x28>)
   d94e0:	4604      	mov	r4, r0
   d94e2:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d94e6:	f7ff ffe5 	bl	d94b4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   d94ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d94ee:	f006 fabb 	bl	dfa68 <_ZN6StringD1Ev>
   d94f2:	f104 0014 	add.w	r0, r4, #20
   d94f6:	f006 fab7 	bl	dfa68 <_ZN6StringD1Ev>
   d94fa:	1d20      	adds	r0, r4, #4
   d94fc:	f006 fab4 	bl	dfa68 <_ZN6StringD1Ev>
}
   d9500:	4620      	mov	r0, r4
   d9502:	bd10      	pop	{r4, pc}
   d9504:	000e4480 	.word	0x000e4480

000d9508 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   d9508:	b510      	push	{r4, lr}
   d950a:	4604      	mov	r4, r0
}
   d950c:	f7ff ffe6 	bl	d94dc <_ZN14SequentialFileD1Ev>
   d9510:	4620      	mov	r0, r4
   d9512:	2168      	movs	r1, #104	; 0x68
   d9514:	f007 f8f4 	bl	e0700 <_ZdlPvj>
   d9518:	4620      	mov	r0, r4
   d951a:	bd10      	pop	{r4, pc}

000d951c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d951c:	68c3      	ldr	r3, [r0, #12]
   d951e:	68ca      	ldr	r2, [r1, #12]
   d9520:	1a9b      	subs	r3, r3, r2
   d9522:	109b      	asrs	r3, r3, #2
   d9524:	1e5a      	subs	r2, r3, #1
   d9526:	e9d0 3000 	ldrd	r3, r0, [r0]
   d952a:	1a1b      	subs	r3, r3, r0
   d952c:	109b      	asrs	r3, r3, #2
   d952e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	+ (__y._M_last - __y._M_cur);
   d9532:	6888      	ldr	r0, [r1, #8]
   d9534:	680a      	ldr	r2, [r1, #0]
   d9536:	1a80      	subs	r0, r0, r2
    }
   d9538:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   d953c:	4770      	bx	lr
	...

000d9540 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>:
      deque<_Tp, _Alloc>::
   d9540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9544:	4604      	mov	r4, r0
   d9546:	4688      	mov	r8, r1
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d9548:	f100 0108 	add.w	r1, r0, #8
   d954c:	3018      	adds	r0, #24
   d954e:	f7ff ffe5 	bl	d951c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
	if (size() == max_size())
   d9552:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d9556:	4298      	cmp	r0, r3
   d9558:	d102      	bne.n	d9560 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x20>
	  __throw_length_error(
   d955a:	4837      	ldr	r0, [pc, #220]	; (d9638 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xf8>)
   d955c:	f007 f90d 	bl	e077a <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d9560:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d9562:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d9564:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d9566:	1a11      	subs	r1, r2, r0
   d9568:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d956c:	2901      	cmp	r1, #1
   d956e:	d821      	bhi.n	d95b4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x74>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d9570:	6961      	ldr	r1, [r4, #20]
   d9572:	1a57      	subs	r7, r2, r1
   d9574:	10be      	asrs	r6, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d9576:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d9578:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   d957c:	d936      	bls.n	d95ec <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xac>
					 - __new_num_nodes) / 2
   d957e:	1b5d      	subs	r5, r3, r5
   d9580:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d9582:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d9586:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d9588:	42a9      	cmp	r1, r5
   d958a:	eba3 0201 	sub.w	r2, r3, r1
   d958e:	d927      	bls.n	d95e0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xa0>
	  if (_Num)
   d9590:	4299      	cmp	r1, r3
   d9592:	d002      	beq.n	d959a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d9594:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d9596:	f008 f875 	bl	e1684 <memmove>
	_M_node = __new_node;
   d959a:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d959c:	682b      	ldr	r3, [r5, #0]
   d959e:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d95a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d95a4:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d95a6:	19eb      	adds	r3, r5, r7
	_M_node = __new_node;
   d95a8:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d95aa:	59eb      	ldr	r3, [r5, r7]
   d95ac:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d95ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d95b2:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d95b4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d95b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d95ba:	f7fa fd6c 	bl	d4096 <_Znwj>
   d95be:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   d95c0:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d95c2:	b113      	cbz	r3, d95ca <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x8a>
   d95c4:	f8d8 2000 	ldr.w	r2, [r8]
   d95c8:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   d95ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d95cc:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d95ce:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d95d0:	685b      	ldr	r3, [r3, #4]
   d95d2:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d95d4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d95d8:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d95da:	61a3      	str	r3, [r4, #24]
      }
   d95dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   d95e0:	4299      	cmp	r1, r3
   d95e2:	d0da      	beq.n	d959a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d95e4:	1d38      	adds	r0, r7, #4
   d95e6:	1a80      	subs	r0, r0, r2
   d95e8:	4428      	add	r0, r5
   d95ea:	e7d4      	b.n	d9596 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x56>
	  size_type __new_map_size = this->_M_impl._M_map_size
   d95ec:	f103 0902 	add.w	r9, r3, #2
   d95f0:	2b01      	cmp	r3, #1
   d95f2:	bf2c      	ite	cs
   d95f4:	4499      	addcs	r9, r3
   d95f6:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->max_size())
   d95fa:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   d95fe:	d301      	bcc.n	d9604 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xc4>
	  std::__throw_bad_alloc();
   d9600:	f007 f8b8 	bl	e0774 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9604:	ea4f 0089 	mov.w	r0, r9, lsl #2
   d9608:	f7fa fd45 	bl	d4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   d960c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d960e:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d9610:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   d9614:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d9616:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   d9618:	4291      	cmp	r1, r2
   d961a:	4682      	mov	sl, r0
   d961c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d9620:	d003      	beq.n	d962a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0xea>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d9622:	1a52      	subs	r2, r2, r1
   d9624:	4628      	mov	r0, r5
   d9626:	f008 f82d 	bl	e1684 <memmove>
	::operator delete(__p);
   d962a:	6820      	ldr	r0, [r4, #0]
   d962c:	f7fa fd37 	bl	d409e <_ZdlPv>
	  this->_M_impl._M_map_size = __new_map_size;
   d9630:	e9c4 a900 	strd	sl, r9, [r4]
   d9634:	e7b1      	b.n	d959a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_+0x5a>
   d9636:	bf00      	nop
   d9638:	000e4295 	.word	0x000e4295

000d963c <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   d963c:	b538      	push	{r3, r4, r5, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   d963e:	6a05      	ldr	r5, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   d9640:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   d9642:	3d04      	subs	r5, #4
	if (this->_M_impl._M_finish._M_cur
   d9644:	42aa      	cmp	r2, r5
      push_back(const value_type& __x)
   d9646:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish._M_cur
   d9648:	d006      	beq.n	d9658 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d964a:	b10a      	cbz	r2, d9650 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
	    _Alloc_traits::construct(this->_M_impl,
   d964c:	6809      	ldr	r1, [r1, #0]
   d964e:	6011      	str	r1, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
   d9650:	699a      	ldr	r2, [r3, #24]
   d9652:	3204      	adds	r2, #4
   d9654:	619a      	str	r2, [r3, #24]
      }
   d9656:	bd38      	pop	{r3, r4, r5, pc}
	  _M_push_back_aux(__x);
   d9658:	f7ff ff72 	bl	d9540 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIJRKiEEEvDpOT_>
      }
   d965c:	e7fb      	b.n	d9656 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1a>
	...

000d9660 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   d9660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   d9664:	68c3      	ldr	r3, [r0, #12]
   d9666:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   d9668:	b086      	sub	sp, #24
   d966a:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   d966c:	d808      	bhi.n	d9680 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   d966e:	4934      	ldr	r1, [pc, #208]	; (d9740 <_ZN14SequentialFile7scanDirEv+0xe0>)
   d9670:	4834      	ldr	r0, [pc, #208]	; (d9744 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d9672:	f7fc fc8c 	bl	d5f8e <_ZNK5spark6Logger5errorEPKcz>
        return false;
   d9676:	2600      	movs	r6, #0
}
   d9678:	4630      	mov	r0, r6
   d967a:	b006      	add	sp, #24
   d967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   d9680:	6840      	ldr	r0, [r0, #4]
   d9682:	f7ff fe05 	bl	d9290 <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   d9686:	4606      	mov	r6, r0
   d9688:	2800      	cmp	r0, #0
   d968a:	d0f4      	beq.n	d9676 <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   d968c:	6963      	ldr	r3, [r4, #20]
   d968e:	6862      	ldr	r2, [r4, #4]
   d9690:	492d      	ldr	r1, [pc, #180]	; (d9748 <_ZN14SequentialFile7scanDirEv+0xe8>)
   d9692:	482c      	ldr	r0, [pc, #176]	; (d9744 <_ZN14SequentialFile7scanDirEv+0xe4>)
   d9694:	f7fc fc64 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   d9698:	6860      	ldr	r0, [r4, #4]
   d969a:	f003 fb05 	bl	dcca8 <opendir>
    if (!dir) {
   d969e:	4607      	mov	r7, r0
   d96a0:	2800      	cmp	r0, #0
   d96a2:	d0e8      	beq.n	d9676 <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   d96a4:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d96a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d974c <_ZN14SequentialFile7scanDirEv+0xec>
   d96aa:	f8df 8098 	ldr.w	r8, [pc, #152]	; d9744 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   d96ae:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   d96b0:	4638      	mov	r0, r7
   d96b2:	f003 fb01 	bl	dccb8 <readdir>
        if (!ent) {
   d96b6:	4605      	mov	r5, r0
   d96b8:	2800      	cmp	r0, #0
   d96ba:	d039      	beq.n	d9730 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   d96bc:	7a83      	ldrb	r3, [r0, #10]
   d96be:	2b08      	cmp	r3, #8
   d96c0:	d1f6      	bne.n	d96b0 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   d96c2:	350b      	adds	r5, #11
   d96c4:	6961      	ldr	r1, [r4, #20]
   d96c6:	aa01      	add	r2, sp, #4
   d96c8:	4628      	mov	r0, r5
   d96ca:	f003 fd15 	bl	dd0f8 <sscanf>
   d96ce:	2801      	cmp	r0, #1
   d96d0:	d1ee      	bne.n	d96b0 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   d96d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d96d4:	b17b      	cbz	r3, d96f6 <_ZN14SequentialFile7scanDirEv+0x96>
   d96d6:	4629      	mov	r1, r5
   d96d8:	a802      	add	r0, sp, #8
   d96da:	f006 fa10 	bl	dfafe <_ZN6StringC1EPKc>
   d96de:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d96e2:	a802      	add	r0, sp, #8
   d96e4:	f006 faf8 	bl	dfcd8 <_ZNK6String8endsWithERKS_>
   d96e8:	4682      	mov	sl, r0
   d96ea:	a802      	add	r0, sp, #8
   d96ec:	f006 f9bc 	bl	dfa68 <_ZN6StringD1Ev>
   d96f0:	f1ba 0f00 	cmp.w	sl, #0
   d96f4:	d0dc      	beq.n	d96b0 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   d96f6:	6823      	ldr	r3, [r4, #0]
   d96f8:	4629      	mov	r1, r5
   d96fa:	689b      	ldr	r3, [r3, #8]
   d96fc:	4620      	mov	r0, r4
   d96fe:	4798      	blx	r3
   d9700:	2800      	cmp	r0, #0
   d9702:	d0d5      	beq.n	d96b0 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   d9704:	9a01      	ldr	r2, [sp, #4]
   d9706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9708:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   d970a:	bfb8      	it	lt
   d970c:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   d970e:	462b      	mov	r3, r5
   d9710:	4649      	mov	r1, r9
   d9712:	4640      	mov	r0, r8
   d9714:	f7fc fc24 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   d9718:	4620      	mov	r0, r4
   d971a:	f7ff fda9 	bl	d9270 <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   d971e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d9722:	a901      	add	r1, sp, #4
   d9724:	f7ff ff8a 	bl	d963c <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   d9728:	4620      	mov	r0, r4
   d972a:	f7ff fdad 	bl	d9288 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   d972e:	e7bf      	b.n	d96b0 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   d9730:	4638      	mov	r0, r7
   d9732:	f003 fac9 	bl	dccc8 <closedir>
    scanDirCompleted = true;
   d9736:	2301      	movs	r3, #1
   d9738:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d973c:	e79c      	b.n	d9678 <_ZN14SequentialFile7scanDirEv+0x18>
   d973e:	bf00      	nop
   d9740:	000e4405 	.word	0x000e4405
   d9744:	2003e48c 	.word	0x2003e48c
   d9748:	000e441a 	.word	0x000e441a
   d974c:	000e4436 	.word	0x000e4436

000d9750 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   d9750:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   d9752:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   d9756:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d9758:	b90b      	cbnz	r3, d975e <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   d975a:	f7ff ff81 	bl	d9660 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   d975e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d9760:	3001      	adds	r0, #1
   d9762:	63a0      	str	r0, [r4, #56]	; 0x38
}
   d9764:	bd10      	pop	{r4, pc}
	...

000d9768 <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   d9768:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   d976a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   d976e:	4604      	mov	r4, r0
   d9770:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   d9772:	b90b      	cbnz	r3, d9778 <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   d9774:	f7ff ff74 	bl	d9660 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   d9778:	4620      	mov	r0, r4
   d977a:	f7ff fd79 	bl	d9270 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
   d977e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   d9780:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d9782:	4293      	cmp	r3, r2
   d9784:	d01e      	beq.n	d97c4 <_ZN14SequentialFile16getFileFromQueueEb+0x5c>
        fileNum = queue.front();
   d9786:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   d9788:	b12e      	cbz	r6, d9796 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
	    != this->_M_impl._M_start._M_last - 1)
   d978a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d978c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   d978e:	4293      	cmp	r3, r2
   d9790:	d00c      	beq.n	d97ac <_ZN14SequentialFile16getFileFromQueueEb+0x44>
	    ++this->_M_impl._M_start._M_cur;
   d9792:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d9794:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   d9796:	4620      	mov	r0, r4
   d9798:	f7ff fd76 	bl	d9288 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   d979c:	b125      	cbz	r5, d97a8 <_ZN14SequentialFile16getFileFromQueueEb+0x40>
        _log.trace("getFileFromQueue returned %d", fileNum);
   d979e:	490a      	ldr	r1, [pc, #40]	; (d97c8 <_ZN14SequentialFile16getFileFromQueueEb+0x60>)
   d97a0:	480a      	ldr	r0, [pc, #40]	; (d97cc <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   d97a2:	462a      	mov	r2, r5
   d97a4:	f7fc fbdc 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
}
   d97a8:	4628      	mov	r0, r5
   d97aa:	bd70      	pop	{r4, r5, r6, pc}
	::operator delete(__p);
   d97ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d97ae:	f7fa fc76 	bl	d409e <_ZdlPv>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d97b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d97b4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   d97b6:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   d97b8:	685b      	ldr	r3, [r3, #4]
   d97ba:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   d97bc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d97c0:	6522      	str	r2, [r4, #80]	; 0x50
   d97c2:	e7e7      	b.n	d9794 <_ZN14SequentialFile16getFileFromQueueEb+0x2c>
    int fileNum = 0;
   d97c4:	2500      	movs	r5, #0
   d97c6:	e7e6      	b.n	d9796 <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
   d97c8:	000e444c 	.word	0x000e444c
   d97cc:	2003e48c 	.word	0x2003e48c

000d97d0 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   d97d0:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   d97d2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   d97d6:	9101      	str	r1, [sp, #4]
   d97d8:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   d97da:	b90b      	cbnz	r3, d97e0 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   d97dc:	f7ff ff40 	bl	d9660 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   d97e0:	9b01      	ldr	r3, [sp, #4]
   d97e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d97e4:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   d97e6:	bfb8      	it	lt
   d97e8:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   d97ea:	4620      	mov	r0, r4
   d97ec:	f7ff fd40 	bl	d9270 <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   d97f0:	a901      	add	r1, sp, #4
   d97f2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d97f6:	f7ff ff21 	bl	d963c <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   d97fa:	4620      	mov	r0, r4
   d97fc:	f7ff fd44 	bl	d9288 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9800:	b002      	add	sp, #8
   d9802:	bd10      	pop	{r4, pc}

000d9804 <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   d9804:	b538      	push	{r3, r4, r5, lr}
   d9806:	4604      	mov	r4, r0
    queueMutexLock();
   d9808:	f7ff fd32 	bl	d9270 <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   d980c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   d9810:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d9814:	f7ff fe82 	bl	d951c <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
   d9818:	4605      	mov	r5, r0
    queueMutexUnlock();
   d981a:	4620      	mov	r0, r4
   d981c:	f7ff fd34 	bl	d9288 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   d9820:	4628      	mov	r0, r5
   d9822:	bd38      	pop	{r3, r4, r5, pc}

000d9824 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   d9824:	4b01      	ldr	r3, [pc, #4]	; (d982c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   d9826:	4a02      	ldr	r2, [pc, #8]	; (d9830 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   d9828:	601a      	str	r2, [r3, #0]
}
   d982a:	4770      	bx	lr
   d982c:	2003e48c 	.word	0x2003e48c
   d9830:	000e4469 	.word	0x000e4469

000d9834 <_ZN11SleepHelper18PersistentDataBase4saveEv>:
        virtual void save() {};
   d9834:	4770      	bx	lr

000d9836 <_ZN11SleepHelper18PersistentDataBase11saveOrDeferEv>:
        virtual void saveOrDefer() {}
   d9836:	4770      	bx	lr

000d9838 <_ZN11SleepHelper18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void SleepHelper::PersistentDataBase::setup() {
    // Load data at boot
    load();
   d9838:	6803      	ldr	r3, [r0, #0]
   d983a:	685b      	ldr	r3, [r3, #4]
   d983c:	4718      	bx	r3

000d983e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRNS1_16AppCallbackStateEmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d983e:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9840:	bf08      	it	eq
   d9842:	6001      	streq	r1, [r0, #0]
	}
   d9844:	2000      	movs	r0, #0
   d9846:	4770      	bx	lr

000d9848 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d9848:	2a02      	cmp	r2, #2
   d984a:	d006      	beq.n	d985a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d984c:	2a03      	cmp	r2, #3
   d984e:	d002      	beq.n	d9856 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d9850:	2a01      	cmp	r2, #1
   d9852:	d100      	bne.n	d9856 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9854:	6001      	str	r1, [r0, #0]
	}
   d9856:	2000      	movs	r0, #0
   d9858:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d985a:	680b      	ldr	r3, [r1, #0]
   d985c:	6003      	str	r3, [r0, #0]
	}
   d985e:	e7fa      	b.n	d9856 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d9860 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d9860:	2a02      	cmp	r2, #2
   d9862:	d006      	beq.n	d9872 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d9864:	2a03      	cmp	r2, #3
   d9866:	d002      	beq.n	d986e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d9868:	2a01      	cmp	r2, #1
   d986a:	d100      	bne.n	d986e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d986c:	6001      	str	r1, [r0, #0]
	}
   d986e:	2000      	movs	r0, #0
   d9870:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d9872:	680b      	ldr	r3, [r1, #0]
   d9874:	6003      	str	r3, [r0, #0]
	}
   d9876:	e7fa      	b.n	d986e <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper5setupEvEUlRiS2_E1_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d9878 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d9878:	2a02      	cmp	r2, #2
   d987a:	d006      	beq.n	d988a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d987c:	2a03      	cmp	r2, #3
   d987e:	d002      	beq.n	d9886 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d9880:	2a01      	cmp	r2, #1
   d9882:	d100      	bne.n	d9886 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9884:	6001      	str	r1, [r0, #0]
	}
   d9886:	2000      	movs	r0, #0
   d9888:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d988a:	680b      	ldr	r3, [r1, #0]
   d988c:	6003      	str	r3, [r0, #0]
	}
   d988e:	e7fa      	b.n	d9886 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d9890 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper26stateHandlerConnectedStartEvEUlRN5spark10JSONWriterERiE0_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d9890:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9892:	bf08      	it	eq
   d9894:	6001      	streq	r1, [r0, #0]
	}
   d9896:	2000      	movs	r0, #0
   d9898:	4770      	bx	lr

000d989a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d989a:	2a02      	cmp	r2, #2
   d989c:	d006      	beq.n	d98ac <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d989e:	2a03      	cmp	r2, #3
   d98a0:	d002      	beq.n	d98a8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d98a2:	2a01      	cmp	r2, #1
   d98a4:	d100      	bne.n	d98a8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98a6:	6001      	str	r1, [r0, #0]
	}
   d98a8:	2000      	movs	r0, #0
   d98aa:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d98ac:	680b      	ldr	r3, [r1, #0]
   d98ae:	6003      	str	r3, [r0, #0]
	}
   d98b0:	e7fa      	b.n	d98a8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerConnectedEvEUlbPKcS3_PKvE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d98b2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d98b2:	2a02      	cmp	r2, #2
   d98b4:	d006      	beq.n	d98c4 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
   d98b6:	2a03      	cmp	r2, #3
   d98b8:	d002      	beq.n	d98c0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
   d98ba:	2a01      	cmp	r2, #1
   d98bc:	d100      	bne.n	d98c0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98be:	6001      	str	r1, [r0, #0]
	}
   d98c0:	2000      	movs	r0, #0
   d98c2:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d98c4:	680b      	ldr	r3, [r1, #0]
   d98c6:	6003      	str	r3, [r0, #0]
	}
   d98c8:	e7fa      	b.n	d98c0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper21stateHandlerSleepDoneEvEUlRN5spark10JSONWriterERiE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xe>

000d98ca <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d98ca:	2a02      	cmp	r2, #2
   d98cc:	d006      	beq.n	d98dc <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d98ce:	2a03      	cmp	r2, #3
   d98d0:	d002      	beq.n	d98d8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d98d2:	2a01      	cmp	r2, #1
   d98d4:	d100      	bne.n	d98d8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98d6:	6001      	str	r1, [r0, #0]
	}
   d98d8:	2000      	movs	r0, #0
   d98da:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d98dc:	680b      	ldr	r3, [r1, #0]
   d98de:	6003      	str	r3, [r0, #0]
	}
   d98e0:	e7fa      	b.n	d98d8 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d98e2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	  switch (__op)
   d98e2:	2a02      	cmp	r2, #2
   d98e4:	d006      	beq.n	d98f4 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x12>
   d98e6:	2a03      	cmp	r2, #3
   d98e8:	d002      	beq.n	d98f0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d98ea:	2a01      	cmp	r2, #1
   d98ec:	d100      	bne.n	d98f0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d98ee:	6001      	str	r1, [r0, #0]
	}
   d98f0:	2000      	movs	r0, #0
   d98f2:	4770      	bx	lr
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d98f4:	680b      	ldr	r3, [r1, #0]
   d98f6:	6003      	str	r3, [r0, #0]
	}
   d98f8:	e7fa      	b.n	d98f0 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>

000d98fa <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d98fa:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d98fc:	4603      	mov	r3, r0
	switch (__op)
   d98fe:	d102      	bne.n	d9906 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d9900:	6001      	str	r1, [r0, #0]
      }
   d9902:	2000      	movs	r0, #0
   d9904:	4770      	bx	lr
	  switch (__op)
   d9906:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d9908:	bf04      	itt	eq
   d990a:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d990e:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d9912:	e7f6      	b.n	d9902 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d9914 <_ZN16JsonParserStaticILj622ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d9914:	b510      	push	{r4, lr}
   d9916:	4b03      	ldr	r3, [pc, #12]	; (d9924 <_ZN16JsonParserStaticILj622ELj50EED1Ev+0x10>)
   d9918:	6003      	str	r3, [r0, #0]
   d991a:	4604      	mov	r4, r0
   d991c:	f7fd fa24 	bl	d6d68 <_ZN10JsonParserD1Ev>
   d9920:	4620      	mov	r0, r4
   d9922:	bd10      	pop	{r4, pc}
   d9924:	000e4704 	.word	0x000e4704

000d9928 <_ZN16JsonParserStaticILj622ELj50EED0Ev>:
   d9928:	b510      	push	{r4, lr}
   d992a:	4604      	mov	r4, r0
   d992c:	f7ff fff2 	bl	d9914 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
   d9930:	4620      	mov	r0, r4
   d9932:	f240 51bc 	movw	r1, #1468	; 0x5bc
   d9936:	f006 fee3 	bl	e0700 <_ZdlPvj>
   d993a:	4620      	mov	r0, r4
   d993c:	bd10      	pop	{r4, pc}

000d993e <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv>:
        virtual void saveOrDefer() {
   d993e:	b510      	push	{r4, lr}
            if (saveDelayMs) {
   d9940:	69c3      	ldr	r3, [r0, #28]
        virtual void saveOrDefer() {
   d9942:	4604      	mov	r4, r0
            if (saveDelayMs) {
   d9944:	b11b      	cbz	r3, d994e <_ZN11SleepHelper18PersistentDataFile11saveOrDeferEv+0x10>
   d9946:	f003 f877 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
                lastUpdate = millis();
   d994a:	61a0      	str	r0, [r4, #24]
        }
   d994c:	bd10      	pop	{r4, pc}
                save();
   d994e:	6803      	ldr	r3, [r0, #0]
        }
   d9950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                save();
   d9954:	689b      	ldr	r3, [r3, #8]
   d9956:	4718      	bx	r3

000d9958 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9958:	b510      	push	{r4, lr}
	    return __source._M_access<_Functor*>();
   d995a:	6800      	ldr	r0, [r0, #0]
      if (_M_empty())
   d995c:	6883      	ldr	r3, [r0, #8]
   d995e:	b90b      	cbnz	r3, d9964 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiESt8functionIFbS2_S3_EEE9_M_invokeERKSt9_Any_dataS2_S3_+0xc>
	__throw_bad_function_call();
   d9960:	f006 ff0e 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      }
   d9964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9968:	68c3      	ldr	r3, [r0, #12]
   d996a:	4718      	bx	r3

000d996c <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper5setupEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d996c:	460b      	mov	r3, r1
        writer.value(resetReason);
   d996e:	6801      	ldr	r1, [r0, #0]
   d9970:	4618      	mov	r0, r3
   d9972:	f004 bdc1 	b.w	de4f8 <_ZN5spark10JSONWriter5valueEi>

000d9976 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d9976:	460b      	mov	r3, r1
        writer.value((int)elapsedMs);
   d9978:	6801      	ldr	r1, [r0, #0]
   d997a:	4618      	mov	r0, r3
   d997c:	f004 bdbc 	b.w	de4f8 <_ZN5spark10JSONWriter5valueEi>

000d9980 <_ZN11SleepHelper18PersistentDataBase10initializeEv>:
        isValid = true;
    }   
    return isValid;
}

void SleepHelper::PersistentDataBase::initialize() {
   d9980:	b510      	push	{r4, lr}
   d9982:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   d9984:	68c2      	ldr	r2, [r0, #12]
   d9986:	6880      	ldr	r0, [r0, #8]
   d9988:	2100      	movs	r1, #0
   d998a:	f007 fe95 	bl	e16b8 <memset>
    savedDataHeader->magic = savedDataMagic;
   d998e:	68a3      	ldr	r3, [r4, #8]
   d9990:	6922      	ldr	r2, [r4, #16]
   d9992:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   d9994:	68a3      	ldr	r3, [r4, #8]
   d9996:	8aa2      	ldrh	r2, [r4, #20]
   d9998:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   d999a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   d999e:	80da      	strh	r2, [r3, #6]
}
   d99a0:	bd10      	pop	{r4, pc}

000d99a2 <_ZN11SleepHelper18PersistentDataBase8validateEj>:
    if (dataSize >= 12 && 
   d99a2:	290b      	cmp	r1, #11
bool SleepHelper::PersistentDataBase::validate(size_t dataSize) {
   d99a4:	b510      	push	{r4, lr}
    if (dataSize >= 12 && 
   d99a6:	d91a      	bls.n	d99de <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d99a8:	6883      	ldr	r3, [r0, #8]
    if (dataSize >= 12 && 
   d99aa:	6902      	ldr	r2, [r0, #16]
   d99ac:	681c      	ldr	r4, [r3, #0]
   d99ae:	4294      	cmp	r4, r2
   d99b0:	d115      	bne.n	d99de <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->magic == savedDataMagic && 
   d99b2:	889c      	ldrh	r4, [r3, #4]
   d99b4:	8a82      	ldrh	r2, [r0, #20]
   d99b6:	4294      	cmp	r4, r2
   d99b8:	d111      	bne.n	d99de <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        savedDataHeader->version == savedDataVersion &&
   d99ba:	88dc      	ldrh	r4, [r3, #6]
   d99bc:	b28a      	uxth	r2, r1
   d99be:	4294      	cmp	r4, r2
   d99c0:	d80d      	bhi.n	d99de <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3c>
        if ((size_t)dataSize < savedDataSize) {
   d99c2:	68c2      	ldr	r2, [r0, #12]
   d99c4:	4291      	cmp	r1, r2
   d99c6:	d205      	bcs.n	d99d4 <_ZN11SleepHelper18PersistentDataBase8validateEj+0x32>
                p[ii] = 0;
   d99c8:	2400      	movs	r4, #0
   d99ca:	545c      	strb	r4, [r3, r1]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   d99cc:	68c2      	ldr	r2, [r0, #12]
   d99ce:	3101      	adds	r1, #1
   d99d0:	428a      	cmp	r2, r1
   d99d2:	d8fa      	bhi.n	d99ca <_ZN11SleepHelper18PersistentDataBase8validateEj+0x28>
        savedDataHeader->size = (uint16_t) savedDataSize;
   d99d4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
        isValid = true;
   d99d8:	2001      	movs	r0, #1
        savedDataHeader->size = (uint16_t) savedDataSize;
   d99da:	80da      	strh	r2, [r3, #6]
}
   d99dc:	bd10      	pop	{r4, pc}
    bool isValid = false;
   d99de:	2000      	movs	r0, #0
   d99e0:	e7fc      	b.n	d99dc <_ZN11SleepHelper18PersistentDataBase8validateEj+0x3a>

000d99e2 <_ZNSt17_Function_handlerIFbvEZN11SleepHelper18PersistentDataFile5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d99e2:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d99e4:	6800      	ldr	r0, [r0, #0]
    // Call parent class
    SleepHelper::PersistentDataBase::setup();

    SleepHelper::instance().withLoopFunction([this]() {
        // Handle deferred save
        flush(false);
   d99e6:	6803      	ldr	r3, [r0, #0]
   d99e8:	2100      	movs	r1, #0
   d99ea:	699b      	ldr	r3, [r3, #24]
   d99ec:	4798      	blx	r3
      }
   d99ee:	2001      	movs	r0, #1
   d99f0:	bd08      	pop	{r3, pc}

000d99f2 <_ZNSt17_Function_handlerIFbbEZN11SleepHelper18PersistentDataFile5setupEvEUlbE0_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d99f2:	b508      	push	{r3, lr}
	return (*_Base::_M_get_pointer(__functor))(
   d99f4:	6800      	ldr	r0, [r0, #0]
        return true;
    });
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
        // Make sure data is saved before sleep or reset
        flush(true);
   d99f6:	6803      	ldr	r3, [r0, #0]
   d99f8:	2101      	movs	r1, #1
   d99fa:	699b      	ldr	r3, [r3, #24]
   d99fc:	4798      	blx	r3
      }
   d99fe:	2001      	movs	r0, #1
   d9a00:	bd08      	pop	{r3, pc}

000d9a02 <_ZNSt17_Function_handlerIFbRN11SleepHelper16AppCallbackStateEmEZNS0_5setupEvEUlS2_mE_E9_M_invokeERKSt9_Any_dataS2_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9a02:	b508      	push	{r3, lr}
        return !Time.isValid();
   d9a04:	f006 fb78 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   d9a08:	f080 0001 	eor.w	r0, r0, #1
      }
   d9a0c:	b2c0      	uxtb	r0, r0
   d9a0e:	bd08      	pop	{r3, pc}

000d9a10 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper21stateHandlerSleepDoneEvEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
        writer.value(wakeReasonInt);
   d9a10:	6802      	ldr	r2, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9a12:	460b      	mov	r3, r1
   d9a14:	4618      	mov	r0, r3
   d9a16:	f8d2 177c 	ldr.w	r1, [r2, #1916]	; 0x77c
   d9a1a:	f004 bd6d 	b.w	de4f8 <_ZN5spark10JSONWriter5valueEi>

000d9a1e <_ZN11SleepHelper18PersistentDataFile5flushEb>:
            close(fd);
        }
    }
}

void SleepHelper::PersistentDataFile::flush(bool force) {
   d9a1e:	b510      	push	{r4, lr}
    if (lastUpdate) {
   d9a20:	6983      	ldr	r3, [r0, #24]
void SleepHelper::PersistentDataFile::flush(bool force) {
   d9a22:	4604      	mov	r4, r0
    if (lastUpdate) {
   d9a24:	b133      	cbz	r3, d9a34 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d9a26:	b131      	cbz	r1, d9a36 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x18>
            save();
   d9a28:	6823      	ldr	r3, [r4, #0]
   d9a2a:	4620      	mov	r0, r4
   d9a2c:	689b      	ldr	r3, [r3, #8]
   d9a2e:	4798      	blx	r3
            lastUpdate = 0;
   d9a30:	2300      	movs	r3, #0
   d9a32:	61a3      	str	r3, [r4, #24]
        }
    }
}
   d9a34:	bd10      	pop	{r4, pc}
   d9a36:	f002 ffff 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   d9a3a:	69a3      	ldr	r3, [r4, #24]
   d9a3c:	1ac0      	subs	r0, r0, r3
   d9a3e:	69e3      	ldr	r3, [r4, #28]
   d9a40:	4298      	cmp	r0, r3
   d9a42:	d2f1      	bcs.n	d9a28 <_ZN11SleepHelper18PersistentDataFile5flushEb+0xa>
   d9a44:	e7f6      	b.n	d9a34 <_ZN11SleepHelper18PersistentDataFile5flushEb+0x16>
	...

000d9a48 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_>:
   d9a48:	b530      	push	{r4, r5, lr}
   d9a4a:	b087      	sub	sp, #28
   d9a4c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d9a4e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d9a50:	a902      	add	r1, sp, #8
   d9a52:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d9a54:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d9a56:	f003 fa0f 	bl	dce78 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d9a5a:	bb68      	cbnz	r0, d9ab8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
    return get(src, val);
   d9a5c:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d9a5e:	b10c      	cbz	r4, d9a64 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x1c>
   d9a60:	6923      	ldr	r3, [r4, #16]
   d9a62:	b923      	cbnz	r3, d9a6e <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x26>
   d9a64:	4a15      	ldr	r2, [pc, #84]	; (d9abc <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x74>)
   d9a66:	2100      	movs	r1, #0
   d9a68:	200a      	movs	r0, #10
   d9a6a:	f003 f9c5 	bl	dcdf8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d9a6e:	2300      	movs	r3, #0
   d9a70:	f8ad 300e 	strh.w	r3, [sp, #14]
   d9a74:	230c      	movs	r3, #12
   d9a76:	f8ad 300c 	strh.w	r3, [sp, #12]
   d9a7a:	ab01      	add	r3, sp, #4
   d9a7c:	9304      	str	r3, [sp, #16]
   d9a7e:	2304      	movs	r3, #4
   d9a80:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d9a82:	aa03      	add	r2, sp, #12
   d9a84:	6923      	ldr	r3, [r4, #16]
   d9a86:	2101      	movs	r1, #1
   d9a88:	4620      	mov	r0, r4
   d9a8a:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d9a8c:	b9a0      	cbnz	r0, d9ab8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d9a8e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d9a92:	ee07 3a90 	vmov	s15, r3
   d9a96:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
        if (soc > 0) {
   d9a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d9a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9aa2:	dd09      	ble.n	d9ab8 <_ZNSt17_Function_handlerIFvRN5spark10JSONWriterERiEZN11SleepHelper26stateHandlerConnectedStartEvEUlS2_S3_E0_E9_M_invokeERKSt9_Any_dataS2_S3_+0x70>
            writer.value(soc, 1);
   d9aa4:	ee17 0a90 	vmov	r0, s15
   d9aa8:	f007 f9e2 	bl	e0e70 <__aeabi_f2d>
   d9aac:	ec41 0b10 	vmov	d0, r0, r1
   d9ab0:	2101      	movs	r1, #1
   d9ab2:	4628      	mov	r0, r5
   d9ab4:	f004 fd44 	bl	de540 <_ZN5spark10JSONWriter5valueEdi>
      }
   d9ab8:	b007      	add	sp, #28
   d9aba:	bd30      	pop	{r4, r5, pc}
   d9abc:	000dca29 	.word	0x000dca29

000d9ac0 <_ZNSt17_Function_handlerIFvR11SleepHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9ac0:	b410      	push	{r4}
   d9ac2:	6842      	ldr	r2, [r0, #4]
   d9ac4:	4603      	mov	r3, r0
   d9ac6:	1054      	asrs	r4, r2, #1
   d9ac8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d9acc:	07d2      	lsls	r2, r2, #31
   d9ace:	bf48      	it	mi
   d9ad0:	590a      	ldrmi	r2, [r1, r4]
   d9ad2:	681b      	ldr	r3, [r3, #0]
      }
   d9ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
   d9ad8:	bf48      	it	mi
   d9ada:	58d3      	ldrmi	r3, [r2, r3]
   d9adc:	4718      	bx	r3

000d9ade <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>:
	if (__n > this->max_size())
   d9ade:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
      allocate(size_type __n, const void* = static_cast<const void*>(0))
   d9ae2:	b508      	push	{r3, lr}
	if (__n > this->max_size())
   d9ae4:	d301      	bcc.n	d9aea <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0+0xc>
	  std::__throw_bad_alloc();
   d9ae6:	f006 fe45 	bl	e0774 <_ZSt17__throw_bad_allocv>
      }
   d9aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d9aee:	0100      	lsls	r0, r0, #4
   d9af0:	f7fa bad1 	b.w	d4096 <_Znwj>

000d9af4 <_ZN11SleepHelper23stateHandlerPublishWaitEv>:
   d9af4:	4770      	bx	lr
	...

000d9af8 <_ZN11SleepHelper14PersistentDataD1Ev>:
        virtual ~PersistentData() {};
   d9af8:	b510      	push	{r4, lr}
    class PersistentDataFile : public PersistentDataBase {
   d9afa:	4b07      	ldr	r3, [pc, #28]	; (d9b18 <_ZN11SleepHelper14PersistentDataD1Ev+0x20>)
        virtual ~PersistentData() {};
   d9afc:	4604      	mov	r4, r0
    class PersistentDataFile : public PersistentDataBase {
   d9afe:	f840 3b20 	str.w	r3, [r0], #32
   d9b02:	f005 ffb1 	bl	dfa68 <_ZN6StringD1Ev>
            if (handle_) {
   d9b06:	6860      	ldr	r0, [r4, #4]
    class PersistentDataBase : public SleepHelperRecursiveMutex {
   d9b08:	4b04      	ldr	r3, [pc, #16]	; (d9b1c <_ZN11SleepHelper14PersistentDataD1Ev+0x24>)
   d9b0a:	6023      	str	r3, [r4, #0]
            if (handle_) {
   d9b0c:	b108      	cbz	r0, d9b12 <_ZN11SleepHelper14PersistentDataD1Ev+0x1a>
                os_mutex_recursive_destroy(handle_);
   d9b0e:	f002 ff4b 	bl	dc9a8 <os_mutex_recursive_destroy>
        virtual ~PersistentData() {};
   d9b12:	4620      	mov	r0, r4
   d9b14:	bd10      	pop	{r4, pc}
   d9b16:	bf00      	nop
   d9b18:	000e4780 	.word	0x000e4780
   d9b1c:	000e4760 	.word	0x000e4760

000d9b20 <_ZN11SleepHelper14PersistentDataD0Ev>:
   d9b20:	b510      	push	{r4, lr}
   d9b22:	4604      	mov	r4, r0
   d9b24:	f7ff ffe8 	bl	d9af8 <_ZN11SleepHelper14PersistentDataD1Ev>
   d9b28:	4620      	mov	r0, r4
   d9b2a:	2150      	movs	r1, #80	; 0x50
   d9b2c:	f006 fde8 	bl	e0700 <_ZdlPvj>
   d9b30:	4620      	mov	r0, r4
   d9b32:	bd10      	pop	{r4, pc}

000d9b34 <_ZN11SleepHelper12SettingsFileD1Ev>:
        virtual ~SettingsFile() {};
   d9b34:	b570      	push	{r4, r5, r6, lr}
   d9b36:	4b10      	ldr	r3, [pc, #64]	; (d9b78 <_ZN11SleepHelper12SettingsFileD1Ev+0x44>)
   d9b38:	6003      	str	r3, [r0, #0]
   d9b3a:	4604      	mov	r4, r0
   d9b3c:	f500 60ba 	add.w	r0, r0, #1488	; 0x5d0
   d9b40:	f005 ff92 	bl	dfa68 <_ZN6StringD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d9b44:	f8d4 55c4 	ldr.w	r5, [r4, #1476]	; 0x5c4
   d9b48:	f8d4 65c8 	ldr.w	r6, [r4, #1480]	; 0x5c8
   d9b4c:	42ae      	cmp	r6, r5
   d9b4e:	d004      	beq.n	d9b5a <_ZN11SleepHelper12SettingsFileD1Ev+0x26>
    class function<_Res(_ArgTypes...)>
   d9b50:	4628      	mov	r0, r5
   d9b52:	f7fa ff93 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d9b56:	3510      	adds	r5, #16
   d9b58:	e7f8      	b.n	d9b4c <_ZN11SleepHelper12SettingsFileD1Ev+0x18>
	_M_deallocate(_M_impl._M_start,
   d9b5a:	f8d4 05c4 	ldr.w	r0, [r4, #1476]	; 0x5c4
	if (__p)
   d9b5e:	b108      	cbz	r0, d9b64 <_ZN11SleepHelper12SettingsFileD1Ev+0x30>
	::operator delete(__p);
   d9b60:	f7fa fa9d 	bl	d409e <_ZdlPv>
   d9b64:	f104 0008 	add.w	r0, r4, #8
   d9b68:	f7ff fed4 	bl	d9914 <_ZN16JsonParserStaticILj622ELj50EED1Ev>
            if (handle_) {
   d9b6c:	6860      	ldr	r0, [r4, #4]
   d9b6e:	b108      	cbz	r0, d9b74 <_ZN11SleepHelper12SettingsFileD1Ev+0x40>
                os_mutex_recursive_destroy(handle_);
   d9b70:	f002 ff1a 	bl	dc9a8 <os_mutex_recursive_destroy>
        virtual ~SettingsFile() {};
   d9b74:	4620      	mov	r0, r4
   d9b76:	bd70      	pop	{r4, r5, r6, pc}
   d9b78:	000e4714 	.word	0x000e4714

000d9b7c <_ZN11SleepHelper12SettingsFileD0Ev>:
   d9b7c:	b510      	push	{r4, lr}
   d9b7e:	4604      	mov	r4, r0
   d9b80:	f7ff ffd8 	bl	d9b34 <_ZN11SleepHelper12SettingsFileD1Ev>
   d9b84:	4620      	mov	r0, r4
   d9b86:	f240 51e4 	movw	r1, #1508	; 0x5e4
   d9b8a:	f006 fdb9 	bl	e0700 <_ZdlPvj>
   d9b8e:	4620      	mov	r0, r4
   d9b90:	bd10      	pop	{r4, pc}
	...

000d9b94 <_ZN8particle24SystemSleepConfigurationC1Ev>:
    SystemSleepConfiguration()
   d9b94:	b510      	push	{r4, lr}
   d9b96:	4604      	mov	r4, r0
            : SystemSleepConfigurationHelper(&config_),
   d9b98:	3004      	adds	r0, #4
        : config_(config) {
   d9b9a:	6020      	str	r0, [r4, #0]
              valid_(true) {
   d9b9c:	2210      	movs	r2, #16
   d9b9e:	2100      	movs	r1, #0
   d9ba0:	f007 fd8a 	bl	e16b8 <memset>
   d9ba4:	2301      	movs	r3, #1
   d9ba6:	7523      	strb	r3, [r4, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d9ba8:	4b02      	ldr	r3, [pc, #8]	; (d9bb4 <_ZN8particle24SystemSleepConfigurationC1Ev+0x20>)
   d9baa:	6063      	str	r3, [r4, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d9bac:	2300      	movs	r3, #0
   d9bae:	7223      	strb	r3, [r4, #8]
    }
   d9bb0:	4620      	mov	r0, r4
   d9bb2:	bd10      	pop	{r4, pc}
   d9bb4:	00030010 	.word	0x00030010

000d9bb8 <_ZN8particle24SystemSleepConfigurationD1Ev>:
    ~SystemSleepConfiguration() {
   d9bb8:	b538      	push	{r3, r4, r5, lr}
   d9bba:	4604      	mov	r4, r0
        auto wakeupSource = config_.wakeup_sources;
   d9bbc:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d9bbe:	b128      	cbz	r0, d9bcc <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d9bc0:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d9bc2:	210c      	movs	r1, #12
   d9bc4:	f006 fd9c 	bl	e0700 <_ZdlPvj>
            wakeupSource = next;
   d9bc8:	4628      	mov	r0, r5
        while (wakeupSource) {
   d9bca:	e7f8      	b.n	d9bbe <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
    }
   d9bcc:	4620      	mov	r0, r4
   d9bce:	bd38      	pop	{r3, r4, r5, pc}

000d9bd0 <_ZN8particle24SystemSleepConfiguration8durationEm>:
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d9bd0:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d9bd2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d9bd4:	4605      	mov	r5, r0
   d9bd6:	460e      	mov	r6, r1
        if (valid_) {
   d9bd8:	b1cb      	cbz	r3, d9c0e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d9bda:	6803      	ldr	r3, [r0, #0]
   d9bdc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d9bde:	b123      	cbz	r3, d9bea <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d9be0:	889a      	ldrh	r2, [r3, #4]
   d9be2:	2a04      	cmp	r2, #4
   d9be4:	d017      	beq.n	d9c16 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d9be6:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d9be8:	e7f9      	b.n	d9bde <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d9bea:	490c      	ldr	r1, [pc, #48]	; (d9c1c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d9bec:	2010      	movs	r0, #16
   d9bee:	f006 fdbd 	bl	e076c <_ZnwjRKSt9nothrow_t>
   d9bf2:	4604      	mov	r4, r0
   d9bf4:	b168      	cbz	r0, d9c12 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d9bf6:	2210      	movs	r2, #16
   d9bf8:	2100      	movs	r1, #0
   d9bfa:	f007 fd5d 	bl	e16b8 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d9bfe:	4b08      	ldr	r3, [pc, #32]	; (d9c20 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d9c00:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d9c02:	2304      	movs	r3, #4
   d9c04:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d9c06:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d9c08:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d9c0a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d9c0e:	4628      	mov	r0, r5
   d9c10:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d9c12:	7528      	strb	r0, [r5, #20]
                return *this;
   d9c14:	e7fb      	b.n	d9c0e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d9c16:	60de      	str	r6, [r3, #12]
                return *this;
   d9c18:	e7f9      	b.n	d9c0e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d9c1a:	bf00      	nop
   d9c1c:	000e4ac8 	.word	0x000e4ac8
   d9c20:	00030010 	.word	0x00030010

000d9c24 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d9c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d9c26:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d9c28:	4605      	mov	r5, r0
   d9c2a:	460f      	mov	r7, r1
   d9c2c:	4616      	mov	r6, r2
        if (valid_) {
   d9c2e:	b1b3      	cbz	r3, d9c5e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d9c30:	6803      	ldr	r3, [r0, #0]
   d9c32:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d9c34:	b1ab      	cbz	r3, d9c62 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d9c36:	889a      	ldrh	r2, [r3, #4]
   d9c38:	2a0e      	cmp	r2, #14
   d9c3a:	d006      	beq.n	d9c4a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x26>
            start = start->next;
   d9c3c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d9c3e:	e7f9      	b.n	d9c34 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x10>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d9c40:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d9c42:	b173      	cbz	r3, d9c62 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d9c44:	889a      	ldrh	r2, [r3, #4]
   d9c46:	2a0e      	cmp	r2, #14
   d9c48:	d1fa      	bne.n	d9c40 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
            while (wakeup) {
   d9c4a:	b153      	cbz	r3, d9c62 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
                if (networkWakeup->index == netif) {
   d9c4c:	7b1a      	ldrb	r2, [r3, #12]
   d9c4e:	42ba      	cmp	r2, r7
   d9c50:	d1f6      	bne.n	d9c40 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
                    if (networkWakeup->flags != flags.value()) {
   d9c52:	89da      	ldrh	r2, [r3, #14]
   d9c54:	8831      	ldrh	r1, [r6, #0]
   d9c56:	428a      	cmp	r2, r1
   d9c58:	d001      	beq.n	d9c5e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                        networkWakeup->flags |= flags.value();
   d9c5a:	430a      	orrs	r2, r1
   d9c5c:	81da      	strh	r2, [r3, #14]
            wakeupSource->index = static_cast<network_interface_index>(netif);
            wakeupSource->flags = flags.value();
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d9c5e:	4628      	mov	r0, r5
   d9c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d9c62:	490b      	ldr	r1, [pc, #44]	; (d9c90 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x6c>)
   d9c64:	2014      	movs	r0, #20
   d9c66:	f006 fd81 	bl	e076c <_ZnwjRKSt9nothrow_t>
   d9c6a:	4604      	mov	r4, r0
   d9c6c:	b170      	cbz	r0, d9c8c <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x68>
   d9c6e:	2214      	movs	r2, #20
   d9c70:	2100      	movs	r1, #0
   d9c72:	f007 fd21 	bl	e16b8 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d9c76:	4b07      	ldr	r3, [pc, #28]	; (d9c94 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x70>)
   d9c78:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d9c7a:	230e      	movs	r3, #14
   d9c7c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d9c7e:	692b      	ldr	r3, [r5, #16]
   d9c80:	60a3      	str	r3, [r4, #8]
            wakeupSource->flags = flags.value();
   d9c82:	8833      	ldrh	r3, [r6, #0]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d9c84:	7327      	strb	r7, [r4, #12]
            wakeupSource->flags = flags.value();
   d9c86:	81e3      	strh	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d9c88:	612c      	str	r4, [r5, #16]
   d9c8a:	e7e8      	b.n	d9c5e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                valid_ = false;
   d9c8c:	7528      	strb	r0, [r5, #20]
                return *this;
   d9c8e:	e7e6      	b.n	d9c5e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
   d9c90:	000e4ac8 	.word	0x000e4ac8
   d9c94:	00030010 	.word	0x00030010

000d9c98 <_ZN5spark9JSONValue9parseCopyEPKc>:
inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
   d9c98:	b513      	push	{r0, r1, r4, lr}
   d9c9a:	4604      	mov	r4, r0
    return parseCopy(json, strlen(json));
   d9c9c:	4608      	mov	r0, r1
   d9c9e:	9101      	str	r1, [sp, #4]
   d9ca0:	f007 fd95 	bl	e17ce <strlen>
   d9ca4:	9901      	ldr	r1, [sp, #4]
   d9ca6:	4602      	mov	r2, r0
   d9ca8:	4620      	mov	r0, r4
   d9caa:	f004 fd17 	bl	de6dc <_ZN5spark9JSONValue9parseCopyEPKcj>
}
   d9cae:	4620      	mov	r0, r4
   d9cb0:	b002      	add	sp, #8
   d9cb2:	bd10      	pop	{r4, pc}

000d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>:
        void lock() const { 
   d9cb4:	b510      	push	{r4, lr}
            if (!handle_) {
   d9cb6:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   d9cb8:	4604      	mov	r4, r0
            if (!handle_) {
   d9cba:	b90b      	cbnz	r3, d9cc0 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   d9cbc:	f002 fe6c 	bl	dc998 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   d9cc0:	6820      	ldr	r0, [r4, #0]
        }
   d9cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   d9cc6:	f002 be77 	b.w	dc9b8 <os_mutex_recursive_lock>

000d9cca <_ZN11SleepHelper18PersistentDataBase4loadEv>:
bool SleepHelper::PersistentDataBase::load() {
   d9cca:	b510      	push	{r4, lr}
   d9ccc:	4604      	mov	r4, r0
      { _M_device.lock(); }
   d9cce:	3004      	adds	r0, #4
   d9cd0:	f7ff fff0 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   d9cd4:	6823      	ldr	r3, [r4, #0]
   d9cd6:	68e1      	ldr	r1, [r4, #12]
   d9cd8:	691b      	ldr	r3, [r3, #16]
   d9cda:	4620      	mov	r0, r4
   d9cdc:	4798      	blx	r3
   d9cde:	b918      	cbnz	r0, d9ce8 <_ZN11SleepHelper18PersistentDataBase4loadEv+0x1e>
            initialize();
   d9ce0:	6823      	ldr	r3, [r4, #0]
   d9ce2:	4620      	mov	r0, r4
   d9ce4:	695b      	ldr	r3, [r3, #20]
   d9ce6:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   d9ce8:	6860      	ldr	r0, [r4, #4]
   d9cea:	f002 fe6d 	bl	dc9c8 <os_mutex_recursive_unlock>
}
   d9cee:	2001      	movs	r0, #1
   d9cf0:	bd10      	pop	{r4, pc}

000d9cf2 <_ZN11SleepHelper18PersistentDataFile4loadEv>:
bool SleepHelper::PersistentDataFile::load() {
   d9cf2:	b570      	push	{r4, r5, r6, lr}
   d9cf4:	4604      	mov	r4, r0
   d9cf6:	3004      	adds	r0, #4
   d9cf8:	f7ff ffdc 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   d9cfc:	6a20      	ldr	r0, [r4, #32]
   d9cfe:	2100      	movs	r1, #0
   d9d00:	f008 fcfc 	bl	e26fc <open>
        if (fd != -1) {
   d9d04:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDONLY);
   d9d06:	4605      	mov	r5, r0
        if (fd != -1) {
   d9d08:	d108      	bne.n	d9d1c <_ZN11SleepHelper18PersistentDataFile4loadEv+0x2a>
            initialize();
   d9d0a:	6823      	ldr	r3, [r4, #0]
   d9d0c:	4620      	mov	r0, r4
   d9d0e:	695b      	ldr	r3, [r3, #20]
   d9d10:	4798      	blx	r3
   d9d12:	6860      	ldr	r0, [r4, #4]
   d9d14:	f002 fe58 	bl	dc9c8 <os_mutex_recursive_unlock>
}
   d9d18:	2001      	movs	r0, #1
   d9d1a:	bd70      	pop	{r4, r5, r6, pc}
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d9d1c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d9d20:	f008 fd00 	bl	e2724 <read>
            if (validate(dataSize)) {
   d9d24:	6823      	ldr	r3, [r4, #0]
            dataSize = read(fd, savedDataHeader, savedDataSize);
   d9d26:	4601      	mov	r1, r0
            if (validate(dataSize)) {
   d9d28:	691b      	ldr	r3, [r3, #16]
   d9d2a:	4620      	mov	r0, r4
   d9d2c:	4798      	blx	r3
   d9d2e:	4606      	mov	r6, r0
            close(fd);
   d9d30:	4628      	mov	r0, r5
   d9d32:	f008 fcc9 	bl	e26c8 <close>
        if (!loaded) {
   d9d36:	2e00      	cmp	r6, #0
   d9d38:	d0e7      	beq.n	d9d0a <_ZN11SleepHelper18PersistentDataFile4loadEv+0x18>
   d9d3a:	e7ea      	b.n	d9d12 <_ZN11SleepHelper18PersistentDataFile4loadEv+0x20>

000d9d3c <_ZN11SleepHelper18PersistentDataFile4saveEv>:
void SleepHelper::PersistentDataFile::save() {
   d9d3c:	b538      	push	{r3, r4, r5, lr}
   d9d3e:	4604      	mov	r4, r0
   d9d40:	3004      	adds	r0, #4
   d9d42:	f7ff ffb7 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d9d46:	6a20      	ldr	r0, [r4, #32]
   d9d48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d9d4c:	f240 6102 	movw	r1, #1538	; 0x602
   d9d50:	f008 fcd4 	bl	e26fc <open>
        if (fd != -1) {            
   d9d54:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d9d56:	4605      	mov	r5, r0
        if (fd != -1) {            
   d9d58:	d006      	beq.n	d9d68 <_ZN11SleepHelper18PersistentDataFile4saveEv+0x2c>
            write(fd, savedDataHeader, savedDataSize);
   d9d5a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   d9d5e:	f008 fcf3 	bl	e2748 <write>
            close(fd);
   d9d62:	4628      	mov	r0, r5
   d9d64:	f008 fcb0 	bl	e26c8 <close>
   d9d68:	6860      	ldr	r0, [r4, #4]
}
   d9d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9d6e:	f002 be2b 	b.w	dc9c8 <os_mutex_recursive_unlock>
	...

000d9d74 <_ZN11SleepHelper20eventsEnablePriorityEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d9d74:	4a0b      	ldr	r2, [pc, #44]	; (d9da4 <_ZN11SleepHelper20eventsEnablePriorityEy+0x30>)
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d9d76:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9d78:	2300      	movs	r3, #0
int SleepHelper::eventsEnablePriority(uint64_t flag) {
   d9d7a:	4604      	mov	r4, r0
   d9d7c:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9d7e:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d9d80:	e9d2 0100 	ldrd	r0, r1, [r2]
   d9d84:	428d      	cmp	r5, r1
   d9d86:	bf08      	it	eq
   d9d88:	4284      	cmpeq	r4, r0
   d9d8a:	d103      	bne.n	d9d94 <_ZN11SleepHelper20eventsEnablePriorityEy+0x20>
        return ev->priority;
   d9d8c:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d9d90:	6998      	ldr	r0, [r3, #24]
}
   d9d92:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9d94:	3301      	adds	r3, #1
   d9d96:	2b04      	cmp	r3, #4
   d9d98:	f102 0220 	add.w	r2, r2, #32
   d9d9c:	d1f0      	bne.n	d9d80 <_ZN11SleepHelper20eventsEnablePriorityEy+0xc>
        return 0;
   d9d9e:	2000      	movs	r0, #0
   d9da0:	e7f7      	b.n	d9d92 <_ZN11SleepHelper20eventsEnablePriorityEy+0x1e>
   d9da2:	bf00      	nop
   d9da4:	2003e490 	.word	0x2003e490

000d9da8 <_ZN11SleepHelper16eventsEnableNameEy>:
    const SleepHelperWakeEvents *ev = _findWakeEvent(flag);
   d9da8:	4a0b      	ldr	r2, [pc, #44]	; (d9dd8 <_ZN11SleepHelper16eventsEnableNameEy+0x30>)
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d9daa:	b570      	push	{r4, r5, r6, lr}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9dac:	2300      	movs	r3, #0
const char *SleepHelper::eventsEnableName(uint64_t flag) {
   d9dae:	4604      	mov	r4, r0
   d9db0:	460d      	mov	r5, r1
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9db2:	4616      	mov	r6, r2
        if (_wakeEvents[ii].flag == flag) {
   d9db4:	e9d2 0100 	ldrd	r0, r1, [r2]
   d9db8:	428d      	cmp	r5, r1
   d9dba:	bf08      	it	eq
   d9dbc:	4284      	cmpeq	r4, r0
   d9dbe:	d103      	bne.n	d9dc8 <_ZN11SleepHelper16eventsEnableNameEy+0x20>
        operator const char*() const { return c_str(); }
   d9dc0:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   d9dc4:	6898      	ldr	r0, [r3, #8]
}
   d9dc6:	bd70      	pop	{r4, r5, r6, pc}
    for(size_t ii = 0; ii < numWakeEvents; ii++) {
   d9dc8:	3301      	adds	r3, #1
   d9dca:	2b04      	cmp	r3, #4
   d9dcc:	f102 0220 	add.w	r2, r2, #32
   d9dd0:	d1f0      	bne.n	d9db4 <_ZN11SleepHelper16eventsEnableNameEy+0xc>
        return "";
   d9dd2:	4802      	ldr	r0, [pc, #8]	; (d9ddc <_ZN11SleepHelper16eventsEnableNameEy+0x34>)
   d9dd4:	e7f7      	b.n	d9dc6 <_ZN11SleepHelper16eventsEnableNameEy+0x1e>
   d9dd6:	bf00      	nop
   d9dd8:	2003e490 	.word	0x2003e490
   d9ddc:	000e44eb 	.word	0x000e44eb

000d9de0 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>:
    class AppCallbackWithState {
   d9de0:	b570      	push	{r4, r5, r6, lr}
   d9de2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   d9de4:	68c0      	ldr	r0, [r0, #12]
	if (__p)
   d9de6:	b108      	cbz	r0, d9dec <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0xc>
   d9de8:	f7fa f959 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d9dec:	e9d4 5600 	ldrd	r5, r6, [r4]
   d9df0:	42ae      	cmp	r6, r5
   d9df2:	d004      	beq.n	d9dfe <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x1e>
   d9df4:	4628      	mov	r0, r5
   d9df6:	f7fa fe41 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   d9dfa:	3510      	adds	r5, #16
   d9dfc:	e7f8      	b.n	d9df0 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x10>
	_M_deallocate(_M_impl._M_start,
   d9dfe:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d9e00:	b108      	cbz	r0, d9e06 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev+0x26>
   d9e02:	f7fa f94c 	bl	d409e <_ZdlPv>
   d9e06:	4620      	mov	r0, r4
   d9e08:	bd70      	pop	{r4, r5, r6, pc}

000d9e0a <_ZN11SleepHelper11PublishDataD1Ev>:
    class PublishData {
   d9e0a:	b510      	push	{r4, lr}
   d9e0c:	4604      	mov	r4, r0
   d9e0e:	3010      	adds	r0, #16
   d9e10:	f005 fe2a 	bl	dfa68 <_ZN6StringD1Ev>
   d9e14:	4620      	mov	r0, r4
   d9e16:	f005 fe27 	bl	dfa68 <_ZN6StringD1Ev>
   d9e1a:	4620      	mov	r0, r4
   d9e1c:	bd10      	pop	{r4, pc}
	...

000d9e20 <_ZN11SleepHelper12EventHistory12removeEventsEv>:
    }

    return bResult;
}

void SleepHelper::EventHistory::removeEvents() {
   d9e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9e24:	b0a3      	sub	sp, #140	; 0x8c
   d9e26:	4604      	mov	r4, r0
   d9e28:	f7ff ff44 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
    WITH_LOCK(*this) {
        const size_t bufSize = 512;
        char *buf = (char *)malloc(bufSize);
   d9e2c:	f44f 7000 	mov.w	r0, #512	; 0x200
   d9e30:	f003 f942 	bl	dd0b8 <malloc>
        if (buf) {
   d9e34:	4605      	mov	r5, r0
   d9e36:	2800      	cmp	r0, #0
   d9e38:	d05b      	beq.n	d9ef2 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xd2>
            int fdsrc = open(path, O_RDONLY);
   d9e3a:	6860      	ldr	r0, [r4, #4]
   d9e3c:	2100      	movs	r1, #0
   d9e3e:	f008 fc5d 	bl	e26fc <open>
            if (fdsrc != -1) {
   d9e42:	1c43      	adds	r3, r0, #1
            int fdsrc = open(path, O_RDONLY);
   d9e44:	4606      	mov	r6, r0
            if (fdsrc != -1) {
   d9e46:	d051      	beq.n	d9eec <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
                struct stat sb;
                fstat(fdsrc, &sb);
   d9e48:	a90c      	add	r1, sp, #48	; 0x30
   d9e4a:	f008 fc45 	bl	e26d8 <fstat>
                size_t fileSize = sb.st_size;  
   d9e4e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
                if (removeOffset < fileSize) {
   d9e52:	69a1      	ldr	r1, [r4, #24]
   d9e54:	4549      	cmp	r1, r9
   d9e56:	d252      	bcs.n	d9efe <_ZN11SleepHelper12EventHistory12removeEventsEv+0xde>
                    lseek(fdsrc, removeOffset, SEEK_SET);
   d9e58:	2200      	movs	r2, #0
   d9e5a:	4630      	mov	r0, r6
   d9e5c:	f008 fc44 	bl	e26e8 <lseek>

                    String tempPath = String(path) + ".tmp";
   d9e60:	1d21      	adds	r1, r4, #4
   d9e62:	a804      	add	r0, sp, #16
   d9e64:	f005 fe96 	bl	dfb94 <_ZN6StringC1ERKS_>
	StringSumHelper(const String &s) : String(s) {}
   d9e68:	a904      	add	r1, sp, #16
   d9e6a:	a808      	add	r0, sp, #32
   d9e6c:	f005 fe92 	bl	dfb94 <_ZN6StringC1ERKS_>
   d9e70:	4926      	ldr	r1, [pc, #152]	; (d9f0c <_ZN11SleepHelper12EventHistory12removeEventsEv+0xec>)
   d9e72:	a808      	add	r0, sp, #32
   d9e74:	f005 fee7 	bl	dfc46 <_ZplRK15StringSumHelperPKc>
   d9e78:	4601      	mov	r1, r0
   d9e7a:	4668      	mov	r0, sp
   d9e7c:	f005 fe8a 	bl	dfb94 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d9e80:	a808      	add	r0, sp, #32
   d9e82:	f005 fdf1 	bl	dfa68 <_ZN6StringD1Ev>
   d9e86:	a804      	add	r0, sp, #16
   d9e88:	f005 fdee 	bl	dfa68 <_ZN6StringD1Ev>
                    int fddst = open(tempPath, O_RDWR | O_CREAT | O_TRUNC, 0666);
   d9e8c:	9800      	ldr	r0, [sp, #0]
   d9e8e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   d9e92:	f240 6102 	movw	r1, #1538	; 0x602
   d9e96:	f008 fc31 	bl	e26fc <open>
                    if (fddst) {
   d9e9a:	4607      	mov	r7, r0
   d9e9c:	b1b8      	cbz	r0, d9ece <_ZN11SleepHelper12EventHistory12removeEventsEv+0xae>
                        while(removeOffset < fileSize) {
   d9e9e:	69a3      	ldr	r3, [r4, #24]
   d9ea0:	454b      	cmp	r3, r9
   d9ea2:	d211      	bcs.n	d9ec8 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                            int count = read(fdsrc, buf, bufSize);
   d9ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d9ea8:	4629      	mov	r1, r5
   d9eaa:	4630      	mov	r0, r6
   d9eac:	f008 fc3a 	bl	e2724 <read>
                            if (count > 0) {
   d9eb0:	f1b0 0800 	subs.w	r8, r0, #0
   d9eb4:	dd08      	ble.n	d9ec8 <_ZN11SleepHelper12EventHistory12removeEventsEv+0xa8>
                                write(fddst, buf, count);
   d9eb6:	4642      	mov	r2, r8
   d9eb8:	4629      	mov	r1, r5
   d9eba:	4638      	mov	r0, r7
   d9ebc:	f008 fc44 	bl	e2748 <write>
                                removeOffset += count;
   d9ec0:	69a0      	ldr	r0, [r4, #24]
   d9ec2:	4440      	add	r0, r8
   d9ec4:	61a0      	str	r0, [r4, #24]
                        while(removeOffset < fileSize) {
   d9ec6:	e7ea      	b.n	d9e9e <_ZN11SleepHelper12EventHistory12removeEventsEv+0x7e>
                            }
                            else {
                                break;
                            }
                        }
                        close(fddst);
   d9ec8:	4638      	mov	r0, r7
   d9eca:	f008 fbfd 	bl	e26c8 <close>
                    }
                    close(fdsrc);
   d9ece:	4630      	mov	r0, r6
   d9ed0:	f008 fbfa 	bl	e26c8 <close>

                    // Swap src and dst files
                    unlink(path);
   d9ed4:	6860      	ldr	r0, [r4, #4]
   d9ed6:	f008 fc2f 	bl	e2738 <unlink>
                    rename(tempPath, path);
   d9eda:	6861      	ldr	r1, [r4, #4]
   d9edc:	9800      	ldr	r0, [sp, #0]
   d9ede:	f007 fc17 	bl	e1710 <rename>
                    removeOffset = 0;
   d9ee2:	2300      	movs	r3, #0
   d9ee4:	61a3      	str	r3, [r4, #24]
                    String tempPath = String(path) + ".tmp";
   d9ee6:	4668      	mov	r0, sp
   d9ee8:	f005 fdbe 	bl	dfa68 <_ZN6StringD1Ev>
                else {
                    unlink(path);
                    hasEvents = false;
                }
            }
            free(buf);
   d9eec:	4628      	mov	r0, r5
   d9eee:	f003 f8eb 	bl	dd0c8 <free>
            os_mutex_recursive_unlock(handle_); 
   d9ef2:	6820      	ldr	r0, [r4, #0]
   d9ef4:	f002 fd68 	bl	dc9c8 <os_mutex_recursive_unlock>
        }

    }
}
   d9ef8:	b023      	add	sp, #140	; 0x8c
   d9efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    unlink(path);
   d9efe:	6860      	ldr	r0, [r4, #4]
   d9f00:	f008 fc1a 	bl	e2738 <unlink>
                    hasEvents = false;
   d9f04:	2300      	movs	r3, #0
   d9f06:	7563      	strb	r3, [r4, #21]
   d9f08:	e7f0      	b.n	d9eec <_ZN11SleepHelper12EventHistory12removeEventsEv+0xcc>
   d9f0a:	bf00      	nop
   d9f0c:	000e448c 	.word	0x000e448c

000d9f10 <_ZN11SleepHelper12EventHistory12getHasEventsEv>:

bool SleepHelper::EventHistory::getHasEvents() { 
   d9f10:	b530      	push	{r4, r5, lr}
    if (firstRun) {
   d9f12:	7d03      	ldrb	r3, [r0, #20]
bool SleepHelper::EventHistory::getHasEvents() { 
   d9f14:	b097      	sub	sp, #92	; 0x5c
   d9f16:	4604      	mov	r4, r0
    if (firstRun) {
   d9f18:	b163      	cbz	r3, d9f34 <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x24>
        firstRun = false;
   d9f1a:	2500      	movs	r5, #0
   d9f1c:	7505      	strb	r5, [r0, #20]

        struct stat sb;
        int res = stat(path, &sb);
   d9f1e:	4669      	mov	r1, sp
   d9f20:	6840      	ldr	r0, [r0, #4]
   d9f22:	f002 fea1 	bl	dcc68 <stat>

        hasEvents = (res == 0 && sb.st_size > 0);
   d9f26:	b920      	cbnz	r0, d9f32 <_ZN11SleepHelper12EventHistory12getHasEventsEv+0x22>
   d9f28:	9d04      	ldr	r5, [sp, #16]
   d9f2a:	2d00      	cmp	r5, #0
   d9f2c:	bfd4      	ite	le
   d9f2e:	2500      	movle	r5, #0
   d9f30:	2501      	movgt	r5, #1
   d9f32:	7565      	strb	r5, [r4, #21]
    }
    return hasEvents; 
};
   d9f34:	7d60      	ldrb	r0, [r4, #21]
   d9f36:	b017      	add	sp, #92	; 0x5c
   d9f38:	bd30      	pop	{r4, r5, pc}

000d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d9f3a:	680b      	ldr	r3, [r1, #0]
   d9f3c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d9f3e:	b113      	cbz	r3, d9f46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d9f40:	685a      	ldr	r2, [r3, #4]
   d9f42:	3201      	adds	r2, #1
   d9f44:	605a      	str	r2, [r3, #4]
      }
   d9f46:	4770      	bx	lr

000d9f48 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
    JSONCopy(JSONValue::parseCopy(src), writer);
}

// [static]
void SleepHelper::JSONCopy(const JSONValue &src, JSONWriter &writer) {
   d9f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9f4a:	b08f      	sub	sp, #60	; 0x3c
   d9f4c:	4604      	mov	r4, r0
   d9f4e:	460d      	mov	r5, r1
    return type() == JSON_TYPE_ARRAY;
   d9f50:	f004 f867 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
    // This is inefficient and annoying, but there's no way to insert pre-formatted JSON into a JSONWriter
    if (src.isArray()) {
   d9f54:	2805      	cmp	r0, #5
   d9f56:	d132      	bne.n	d9fbe <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x76>
        writer.beginArray();
   d9f58:	4628      	mov	r0, r5
   d9f5a:	f004 fa9c 	bl	de496 <_ZN5spark10JSONWriter10beginArrayEv>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9f5e:	4621      	mov	r1, r4
        JSONArrayIterator(value.t_, value.d_) {
   d9f60:	68a6      	ldr	r6, [r4, #8]
   d9f62:	f851 3b04 	ldr.w	r3, [r1], #4
   d9f66:	9304      	str	r3, [sp, #16]
   d9f68:	a805      	add	r0, sp, #20
   d9f6a:	f7ff ffe6 	bl	d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d9f6e:	aa04      	add	r2, sp, #16
   d9f70:	4631      	mov	r1, r6
   d9f72:	a808      	add	r0, sp, #32
   d9f74:	f004 fa49 	bl	de40a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9f78:	a805      	add	r0, sp, #20
   d9f7a:	f7fa fb61 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

        JSONArrayIterator iter(src);
        while(iter.next()) {
   d9f7e:	a808      	add	r0, sp, #32
   d9f80:	f004 fa5a 	bl	de438 <_ZN5spark17JSONArrayIterator4nextEv>
   d9f84:	b198      	cbz	r0, d9fae <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x66>
    return JSONValue(v_, d_);
   d9f86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9f88:	9b08      	ldr	r3, [sp, #32]
   d9f8a:	9302      	str	r3, [sp, #8]
   d9f8c:	a909      	add	r1, sp, #36	; 0x24
   d9f8e:	a803      	add	r0, sp, #12
   d9f90:	f7ff ffd3 	bl	d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d9f94:	4621      	mov	r1, r4
   d9f96:	aa02      	add	r2, sp, #8
   d9f98:	a804      	add	r0, sp, #16
   d9f9a:	f004 f834 	bl	de006 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9f9e:	a803      	add	r0, sp, #12
   d9fa0:	f7fa fb4e 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   d9fa4:	4629      	mov	r1, r5
   d9fa6:	a804      	add	r0, sp, #16
   d9fa8:	f7ff ffce 	bl	d9f48 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   d9fac:	e7e4      	b.n	d9f78 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x30>
        }

        writer.endArray();
   d9fae:	4628      	mov	r0, r5
   d9fb0:	f004 fa52 	bl	de458 <_ZN5spark10JSONWriter8endArrayEv>
   d9fb4:	a809      	add	r0, sp, #36	; 0x24
   d9fb6:	f7fa fb43 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        else {
            writer.value(d);
        }
    }
}
   d9fba:	b00f      	add	sp, #60	; 0x3c
   d9fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return type() == JSON_TYPE_OBJECT;
   d9fbe:	4620      	mov	r0, r4
   d9fc0:	f004 f82f 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
    if (src.isObject()) {
   d9fc4:	2806      	cmp	r0, #6
   d9fc6:	d130      	bne.n	da02a <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xe2>
        writer.beginObject();
   d9fc8:	4628      	mov	r0, r5
   d9fca:	f004 fa70 	bl	de4ae <_ZN5spark10JSONWriter11beginObjectEv>
        JSONObjectIterator iter(src);
   d9fce:	4621      	mov	r1, r4
   d9fd0:	a808      	add	r0, sp, #32
   d9fd2:	f7fd fe59 	bl	d7c88 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        while(iter.next()) {
   d9fd6:	a808      	add	r0, sp, #32
   d9fd8:	f004 fa04 	bl	de3e4 <_ZN5spark18JSONObjectIterator4nextEv>
   d9fdc:	b308      	cbz	r0, da022 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0xda>
            writer.name((const char *) iter.name());
   d9fde:	a908      	add	r1, sp, #32
   d9fe0:	a804      	add	r0, sp, #16
   d9fe2:	f7fd fe62 	bl	d7caa <_ZNK5spark18JSONObjectIterator4nameEv>
   d9fe6:	9906      	ldr	r1, [sp, #24]
   d9fe8:	4628      	mov	r0, r5
   d9fea:	f7fa fd50 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
   d9fee:	a805      	add	r0, sp, #20
   d9ff0:	f7fa fb26 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONValue(v_, d_);
   d9ff4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9ff6:	9b08      	ldr	r3, [sp, #32]
   d9ff8:	9302      	str	r3, [sp, #8]
   d9ffa:	a909      	add	r1, sp, #36	; 0x24
   d9ffc:	a803      	add	r0, sp, #12
   d9ffe:	f7ff ff9c 	bl	d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   da002:	aa02      	add	r2, sp, #8
   da004:	4621      	mov	r1, r4
   da006:	a804      	add	r0, sp, #16
   da008:	f003 fffd 	bl	de006 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   da00c:	a803      	add	r0, sp, #12
   da00e:	f7fa fb17 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            JSONCopy(iter.value(), writer);
   da012:	a804      	add	r0, sp, #16
   da014:	4629      	mov	r1, r5
   da016:	f7ff ff97 	bl	d9f48 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   da01a:	a805      	add	r0, sp, #20
   da01c:	f7fa fb10 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        while(iter.next()) {
   da020:	e7d9      	b.n	d9fd6 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x8e>
        writer.endObject();
   da022:	4628      	mov	r0, r5
   da024:	f004 fa21 	bl	de46a <_ZN5spark10JSONWriter9endObjectEv>
   da028:	e7c4      	b.n	d9fb4 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_STRING;
   da02a:	4620      	mov	r0, r4
   da02c:	f003 fff9 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
    if (src.isString()) {
   da030:	2804      	cmp	r0, #4
   da032:	d11a      	bne.n	da06a <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x122>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   da034:	4621      	mov	r1, r4
    return JSONString(t_, d_);
   da036:	68a6      	ldr	r6, [r4, #8]
   da038:	f851 3b04 	ldr.w	r3, [r1], #4
   da03c:	9304      	str	r3, [sp, #16]
   da03e:	a805      	add	r0, sp, #20
   da040:	f7ff ff7b 	bl	d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   da044:	aa04      	add	r2, sp, #16
   da046:	4631      	mov	r1, r6
   da048:	a808      	add	r0, sp, #32
   da04a:	f004 f98f 	bl	de36c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   da04e:	a805      	add	r0, sp, #20
   da050:	f7fa faf6 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        writer.value(src.toString().data());
   da054:	990a      	ldr	r1, [sp, #40]	; 0x28
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   da056:	9101      	str	r1, [sp, #4]
   da058:	4608      	mov	r0, r1
   da05a:	f007 fbb8 	bl	e17ce <strlen>
   da05e:	9901      	ldr	r1, [sp, #4]
   da060:	4602      	mov	r2, r0
   da062:	4628      	mov	r0, r5
   da064:	f004 fb16 	bl	de694 <_ZN5spark10JSONWriter5valueEPKcj>
   da068:	e7a4      	b.n	d9fb4 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x6c>
    return type() == JSON_TYPE_BOOL;
   da06a:	4620      	mov	r0, r4
   da06c:	f003 ffd9 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
    if (src.isBool()) {
   da070:	2802      	cmp	r0, #2
        writer.value(src.toBool());
   da072:	4620      	mov	r0, r4
    if (src.isBool()) {
   da074:	d106      	bne.n	da084 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x13c>
        writer.value(src.toBool());
   da076:	f003 fffd 	bl	de074 <_ZNK5spark9JSONValue6toBoolEv>
   da07a:	4601      	mov	r1, r0
   da07c:	4628      	mov	r0, r5
   da07e:	f004 fa23 	bl	de4c8 <_ZN5spark10JSONWriter5valueEb>
   da082:	e79a      	b.n	d9fba <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
    return type() == JSON_TYPE_NULL;
   da084:	f003 ffcd 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
    if (src.isNull()) {
   da088:	2801      	cmp	r0, #1
   da08a:	d103      	bne.n	da094 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x14c>
        writer.nullValue();
   da08c:	4628      	mov	r0, r5
   da08e:	f004 fa89 	bl	de5a4 <_ZN5spark10JSONWriter9nullValueEv>
   da092:	e792      	b.n	d9fba <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
        double d = src.toDouble();
   da094:	4620      	mov	r0, r4
   da096:	f004 f84f 	bl	de138 <_ZNK5spark9JSONValue8toDoubleEv>
   da09a:	ec57 6b10 	vmov	r6, r7, d0
        if (d == std::floor(d)) {
   da09e:	f006 fb73 	bl	e0788 <floor>
   da0a2:	4630      	mov	r0, r6
   da0a4:	ec53 2b10 	vmov	r2, r3, d0
   da0a8:	4639      	mov	r1, r7
   da0aa:	f007 f9a1 	bl	e13f0 <__aeabi_dcmpeq>
   da0ae:	b140      	cbz	r0, da0c2 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x17a>
            writer.value((int)d);
   da0b0:	4639      	mov	r1, r7
   da0b2:	4630      	mov	r0, r6
   da0b4:	f007 f9e4 	bl	e1480 <__aeabi_d2iz>
   da0b8:	4601      	mov	r1, r0
   da0ba:	4628      	mov	r0, r5
   da0bc:	f004 fa1c 	bl	de4f8 <_ZN5spark10JSONWriter5valueEi>
   da0c0:	e77b      	b.n	d9fba <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>
            writer.value(d);
   da0c2:	ec47 6b10 	vmov	d0, r6, r7
   da0c6:	4628      	mov	r0, r5
   da0c8:	f004 fa58 	bl	de57c <_ZN5spark10JSONWriter5valueEd>
}
   da0cc:	e775      	b.n	d9fba <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE+0x72>

000da0ce <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>:
void SleepHelper::JSONCopy(const char *src, JSONWriter &writer) {
   da0ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da0d0:	460c      	mov	r4, r1
    JSONCopy(JSONValue::parseCopy(src), writer);
   da0d2:	4601      	mov	r1, r0
   da0d4:	a801      	add	r0, sp, #4
   da0d6:	f7ff fddf 	bl	d9c98 <_ZN5spark9JSONValue9parseCopyEPKc>
   da0da:	4621      	mov	r1, r4
   da0dc:	a801      	add	r0, sp, #4
   da0de:	f7ff ff33 	bl	d9f48 <_ZN11SleepHelper8JSONCopyERKN5spark9JSONValueERNS0_10JSONWriterE>
   da0e2:	a802      	add	r0, sp, #8
   da0e4:	f7fa faac 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da0e8:	b004      	add	sp, #16
   da0ea:	bd10      	pop	{r4, pc}

000da0ec <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>:
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   da0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da0f0:	b085      	sub	sp, #20
    if (maxSize < 2 || !hasEvents) {
   da0f2:	2a01      	cmp	r2, #1
bool SleepHelper::EventHistory::getEvents(JSONWriter &writer, size_t maxSize, bool bRemoveEvents) {
   da0f4:	4605      	mov	r5, r0
   da0f6:	4688      	mov	r8, r1
   da0f8:	4617      	mov	r7, r2
   da0fa:	9303      	str	r3, [sp, #12]
    if (maxSize < 2 || !hasEvents) {
   da0fc:	d804      	bhi.n	da108 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x1c>
        return false;
   da0fe:	2600      	movs	r6, #0
}
   da100:	4630      	mov	r0, r6
   da102:	b005      	add	sp, #20
   da104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (maxSize < 2 || !hasEvents) {
   da108:	7d46      	ldrb	r6, [r0, #21]
   da10a:	2e00      	cmp	r6, #0
   da10c:	d0f7      	beq.n	da0fe <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
    char *buf = (char *)malloc(maxSize);
   da10e:	4610      	mov	r0, r2
   da110:	f002 ffd2 	bl	dd0b8 <malloc>
    if (!buf) {
   da114:	4604      	mov	r4, r0
   da116:	2800      	cmp	r0, #0
   da118:	d0f1      	beq.n	da0fe <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x12>
   da11a:	4628      	mov	r0, r5
   da11c:	f7ff fdca 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDONLY);
   da120:	6868      	ldr	r0, [r5, #4]
   da122:	2100      	movs	r1, #0
   da124:	f008 faea 	bl	e26fc <open>
        if (fd != -1) {
   da128:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
        int fd = open(path, O_RDONLY);
   da12c:	4681      	mov	r9, r0
        if (fd != -1) {
   da12e:	d026      	beq.n	da17e <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x92>
            int dataSize = read(fd, buf, maxSize);
   da130:	463a      	mov	r2, r7
   da132:	4621      	mov	r1, r4
   da134:	f008 faf6 	bl	e2724 <read>
            if (dataSize > 0) {
   da138:	f1b0 0a00 	subs.w	sl, r0, #0
   da13c:	dd1d      	ble.n	da17a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x8e>
   da13e:	eb04 030a 	add.w	r3, r4, sl
                while(dataSize > 0 && buf[dataSize - 1] != '\n') {
   da142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   da146:	2a0a      	cmp	r2, #10
   da148:	d01b      	beq.n	da182 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x96>
   da14a:	f1ba 0a01 	subs.w	sl, sl, #1
   da14e:	d1f8      	bne.n	da142 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x56>
    bool bResult = false;
   da150:	4656      	mov	r6, sl
   da152:	e002      	b.n	da15a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
                    writer.endArray();
   da154:	4640      	mov	r0, r8
   da156:	f004 f97f 	bl	de458 <_ZN5spark10JSONWriter8endArrayEv>
            close(fd);
   da15a:	4648      	mov	r0, r9
   da15c:	f008 fab4 	bl	e26c8 <close>
   da160:	6828      	ldr	r0, [r5, #0]
   da162:	f002 fc31 	bl	dc9c8 <os_mutex_recursive_unlock>
    free(buf);
   da166:	4620      	mov	r0, r4
   da168:	f002 ffae 	bl	dd0c8 <free>
    if (bRemoveEvents) {
   da16c:	9b03      	ldr	r3, [sp, #12]
   da16e:	2b00      	cmp	r3, #0
   da170:	d0c6      	beq.n	da100 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
        removeEvents();
   da172:	4628      	mov	r0, r5
   da174:	f7ff fe54 	bl	d9e20 <_ZN11SleepHelper12EventHistory12removeEventsEv>
   da178:	e7c2      	b.n	da100 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x14>
    bool bResult = false;
   da17a:	2600      	movs	r6, #0
   da17c:	e7ed      	b.n	da15a <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x6e>
   da17e:	2600      	movs	r6, #0
   da180:	e7ee      	b.n	da160 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x74>
                    writer.beginArray();
   da182:	4640      	mov	r0, r8
   da184:	f004 f987 	bl	de496 <_ZN5spark10JSONWriter10beginArrayEv>
                    char *end = &buf[dataSize];
   da188:	eb04 030a 	add.w	r3, r4, sl
   da18c:	9302      	str	r3, [sp, #8]
   da18e:	46a2      	mov	sl, r4
                    size_t bytesUsed = 2;
   da190:	f04f 0b02 	mov.w	fp, #2
                    while(cur < end) {
   da194:	9b02      	ldr	r3, [sp, #8]
   da196:	4553      	cmp	r3, sl
   da198:	d9dc      	bls.n	da154 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        char *lf = strchr(cur, '\n');
   da19a:	210a      	movs	r1, #10
   da19c:	4650      	mov	r0, sl
   da19e:	f007 fad0 	bl	e1742 <strchr>
                        *lf = 0;
   da1a2:	f04f 0200 	mov.w	r2, #0
                        char *lf = strchr(cur, '\n');
   da1a6:	9001      	str	r0, [sp, #4]
                        *lf = 0;
   da1a8:	7002      	strb	r2, [r0, #0]
                        bytesUsed += strlen(cur) + 1;
   da1aa:	4650      	mov	r0, sl
   da1ac:	f007 fb0f 	bl	e17ce <strlen>
   da1b0:	3001      	adds	r0, #1
   da1b2:	4483      	add	fp, r0
                        if (bytesUsed > maxSize) {
   da1b4:	455f      	cmp	r7, fp
   da1b6:	d3cd      	bcc.n	da154 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0x68>
                        SleepHelper::JSONCopy(cur, writer);                        
   da1b8:	4641      	mov	r1, r8
   da1ba:	4650      	mov	r0, sl
   da1bc:	f7ff ff87 	bl	da0ce <_ZN11SleepHelper8JSONCopyEPKcRN5spark10JSONWriterE>
                        cur = lf + 1;
   da1c0:	9b01      	ldr	r3, [sp, #4]
   da1c2:	f103 0a01 	add.w	sl, r3, #1
                        removeOffset = (cur - buf);                        
   da1c6:	ebaa 0104 	sub.w	r1, sl, r4
   da1ca:	61a9      	str	r1, [r5, #24]
                    while(cur < end) {
   da1cc:	e7e2      	b.n	da194 <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb+0xa8>
	...

000da1d0 <_ZN16JsonParserStaticILj622ELj50EEC1Ev>:
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   da1d0:	b513      	push	{r0, r1, r4, lr}
   da1d2:	2332      	movs	r3, #50	; 0x32
   da1d4:	9300      	str	r3, [sp, #0]
   da1d6:	f240 226e 	movw	r2, #622	; 0x26e
   da1da:	f500 7327 	add.w	r3, r0, #668	; 0x29c
   da1de:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   da1e2:	4604      	mov	r4, r0
   da1e4:	f7fc fddc 	bl	d6da0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   da1e8:	4b02      	ldr	r3, [pc, #8]	; (da1f4 <_ZN16JsonParserStaticILj622ELj50EEC1Ev+0x24>)
   da1ea:	6023      	str	r3, [r4, #0]
   da1ec:	4620      	mov	r0, r4
   da1ee:	b002      	add	sp, #8
   da1f0:	bd10      	pop	{r4, pc}
   da1f2:	bf00      	nop
   da1f4:	000e4704 	.word	0x000e4704

000da1f8 <_ZN11SleepHelperC1Ev>:
SleepHelper::SleepHelper() : appLog("app.sleep") {
   da1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da1fc:	4b83      	ldr	r3, [pc, #524]	; (da40c <_ZN11SleepHelperC1Ev+0x214>)
        SettingsFile() {};
   da1fe:	4e84      	ldr	r6, [pc, #528]	; (da410 <_ZN11SleepHelperC1Ev+0x218>)
   da200:	6003      	str	r3, [r0, #0]
   da202:	4604      	mov	r4, r0
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da204:	2500      	movs	r5, #0
        SettingsFile() {};
   da206:	4b83      	ldr	r3, [pc, #524]	; (da414 <_ZN11SleepHelperC1Ev+0x21c>)
   da208:	6043      	str	r3, [r0, #4]
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da20a:	6085      	str	r5, [r0, #8]
        SettingsFile() {};
   da20c:	f204 58d4 	addw	r8, r4, #1492	; 0x5d4
   da210:	300c      	adds	r0, #12
   da212:	f7ff ffdd 	bl	da1d0 <_ZN16JsonParserStaticILj622ELj50EEC1Ev>
   da216:	4631      	mov	r1, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
   da218:	f8c4 55c8 	str.w	r5, [r4, #1480]	; 0x5c8
   da21c:	f8c4 55cc 	str.w	r5, [r4, #1484]	; 0x5cc
   da220:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
   da224:	4640      	mov	r0, r8
   da226:	f005 fc6a 	bl	dfafe <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   da22a:	f504 63c3 	add.w	r3, r4, #1560	; 0x618
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   da22e:	f8c4 35f0 	str.w	r3, [r4, #1520]	; 0x5f0
   da232:	2320      	movs	r3, #32
   da234:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
   da238:	4b77      	ldr	r3, [pc, #476]	; (da418 <_ZN11SleepHelperC1Ev+0x220>)
   da23a:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   da23e:	4b77      	ldr	r3, [pc, #476]	; (da41c <_ZN11SleepHelperC1Ev+0x224>)
   da240:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   da244:	f04f 0901 	mov.w	r9, #1
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   da248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da24c:	f504 67c1 	add.w	r7, r4, #1544	; 0x608
   da250:	4631      	mov	r1, r6
   da252:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
        SettingsFile() {};
   da256:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da25a:	f8c4 55ec 	str.w	r5, [r4, #1516]	; 0x5ec
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   da25e:	f8a4 95fc 	strh.w	r9, [r4, #1532]	; 0x5fc
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion) {
   da262:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
   da266:	4638      	mov	r0, r7
   da268:	f005 fc49 	bl	dfafe <_ZN6StringC1EPKc>
        PersistentData() : PersistentDataFile(&sleepHelperData.header, sizeof(SleepHelperData), SAVED_DATA_MAGIC, SAVED_DATA_VERSION) {};
   da26c:	4b6c      	ldr	r3, [pc, #432]	; (da420 <_ZN11SleepHelperC1Ev+0x228>)
   da26e:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
   da272:	f8c4 5638 	str.w	r5, [r4, #1592]	; 0x638
   da276:	f8c4 563c 	str.w	r5, [r4, #1596]	; 0x63c
   da27a:	f8c4 5640 	str.w	r5, [r4, #1600]	; 0x640
   da27e:	f8c4 5644 	str.w	r5, [r4, #1604]	; 0x644
   da282:	f8c4 5648 	str.w	r5, [r4, #1608]	; 0x648
   da286:	f8c4 564c 	str.w	r5, [r4, #1612]	; 0x64c
   da28a:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
   da28e:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
   da292:	f8c4 5658 	str.w	r5, [r4, #1624]	; 0x658
   da296:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   da29a:	f7ff fc7b 	bl	d9b94 <_ZN8particle24SystemSleepConfigurationC1Ev>
   da29e:	4961      	ldr	r1, [pc, #388]	; (da424 <_ZN11SleepHelperC1Ev+0x22c>)
   da2a0:	f8c4 5698 	str.w	r5, [r4, #1688]	; 0x698
   da2a4:	f8c4 569c 	str.w	r5, [r4, #1692]	; 0x69c
   da2a8:	f8c4 56a0 	str.w	r5, [r4, #1696]	; 0x6a0
   da2ac:	f8c4 56a4 	str.w	r5, [r4, #1700]	; 0x6a4
   da2b0:	f8c4 56a8 	str.w	r5, [r4, #1704]	; 0x6a8
   da2b4:	f8c4 56ac 	str.w	r5, [r4, #1708]	; 0x6ac
   da2b8:	f8c4 56b0 	str.w	r5, [r4, #1712]	; 0x6b0
   da2bc:	f8c4 56b4 	str.w	r5, [r4, #1716]	; 0x6b4
   da2c0:	f8c4 56b8 	str.w	r5, [r4, #1720]	; 0x6b8
   da2c4:	f8c4 56bc 	str.w	r5, [r4, #1724]	; 0x6bc
   da2c8:	f8c4 56c0 	str.w	r5, [r4, #1728]	; 0x6c0
   da2cc:	f8c4 56c4 	str.w	r5, [r4, #1732]	; 0x6c4
   da2d0:	f8c4 56c8 	str.w	r5, [r4, #1736]	; 0x6c8
   da2d4:	f8c4 56cc 	str.w	r5, [r4, #1740]	; 0x6cc
   da2d8:	f8c4 56d0 	str.w	r5, [r4, #1744]	; 0x6d0
   da2dc:	f8c4 56d4 	str.w	r5, [r4, #1748]	; 0x6d4
   da2e0:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
   da2e4:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
   da2e8:	f8c4 56e0 	str.w	r5, [r4, #1760]	; 0x6e0
   da2ec:	f8c4 56e4 	str.w	r5, [r4, #1764]	; 0x6e4
   da2f0:	f8c4 56e8 	str.w	r5, [r4, #1768]	; 0x6e8
   da2f4:	f8c4 56ec 	str.w	r5, [r4, #1772]	; 0x6ec
   da2f8:	f8c4 56f0 	str.w	r5, [r4, #1776]	; 0x6f0
   da2fc:	f8c4 56f4 	str.w	r5, [r4, #1780]	; 0x6f4
   da300:	f8c4 56f8 	str.w	r5, [r4, #1784]	; 0x6f8
   da304:	f8c4 56fc 	str.w	r5, [r4, #1788]	; 0x6fc
   da308:	f8c4 5700 	str.w	r5, [r4, #1792]	; 0x700
   da30c:	f8c4 5704 	str.w	r5, [r4, #1796]	; 0x704
   da310:	f8c4 5708 	str.w	r5, [r4, #1800]	; 0x708
   da314:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
   da318:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
   da31c:	f8c4 5714 	str.w	r5, [r4, #1812]	; 0x714
   da320:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   da324:	f8c4 5718 	str.w	r5, [r4, #1816]	; 0x718
   da328:	f8c4 571c 	str.w	r5, [r4, #1820]	; 0x71c
   da32c:	f8c4 5720 	str.w	r5, [r4, #1824]	; 0x720
   da330:	f8c4 5724 	str.w	r5, [r4, #1828]	; 0x724
   da334:	f005 fbe3 	bl	dfafe <_ZN6StringC1EPKc>
        EventHistory() {};
   da338:	4631      	mov	r1, r6
   da33a:	f8c4 5738 	str.w	r5, [r4, #1848]	; 0x738
   da33e:	f8c4 573c 	str.w	r5, [r4, #1852]	; 0x73c
   da342:	f8c4 5740 	str.w	r5, [r4, #1856]	; 0x740
   da346:	f8c4 5744 	str.w	r5, [r4, #1860]	; 0x744
   da34a:	f8c4 5748 	str.w	r5, [r4, #1864]	; 0x748
   da34e:	f8c4 574c 	str.w	r5, [r4, #1868]	; 0x74c
        SleepHelperRecursiveMutex() : handle_(nullptr) {
   da352:	f8c4 5750 	str.w	r5, [r4, #1872]	; 0x750
        EventHistory() {};
   da356:	f204 7054 	addw	r0, r4, #1876	; 0x754
   da35a:	f005 fbd0 	bl	dfafe <_ZN6StringC1EPKc>
        EventCombiner() {};
   da35e:	4631      	mov	r1, r6
        EventHistory() {};
   da360:	f8a4 9764 	strh.w	r9, [r4, #1892]	; 0x764
   da364:	f8c4 5768 	str.w	r5, [r4, #1896]	; 0x768
        EventCombiner() {};
   da368:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   da36c:	f005 fbc7 	bl	dfafe <_ZN6StringC1EPKc>
   da370:	f504 63f2 	add.w	r3, r4, #1936	; 0x790
   da374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   da37c:	f8c4 577c 	str.w	r5, [r4, #1916]	; 0x77c
   da380:	f8c4 5780 	str.w	r5, [r4, #1920]	; 0x780
   da384:	f8c4 5784 	str.w	r5, [r4, #1924]	; 0x784
   da388:	f8c4 5788 	str.w	r5, [r4, #1928]	; 0x788
   da38c:	e9c3 0100 	strd	r0, r1, [r3]
   da390:	f504 63f3 	add.w	r3, r4, #1944	; 0x798
   da394:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   da398:	2100      	movs	r1, #0
   da39a:	e9c3 0100 	strd	r0, r1, [r3]
   da39e:	4b22      	ldr	r3, [pc, #136]	; (da428 <_ZN11SleepHelperC1Ev+0x230>)
   da3a0:	f8c4 37a0 	str.w	r3, [r4, #1952]	; 0x7a0
   da3a4:	f242 7310 	movw	r3, #10000	; 0x2710
   da3a8:	f8c4 37a4 	str.w	r3, [r4, #1956]	; 0x7a4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da3ac:	4b1f      	ldr	r3, [pc, #124]	; (da42c <_ZN11SleepHelperC1Ev+0x234>)
   da3ae:	f8c4 37a8 	str.w	r3, [r4, #1960]	; 0x7a8
	    _M_invoker = &_My_handler::_M_invoke;
   da3b2:	4b1f      	ldr	r3, [pc, #124]	; (da430 <_ZN11SleepHelperC1Ev+0x238>)
   da3b4:	f8c4 37b4 	str.w	r3, [r4, #1972]	; 0x7b4
	    _M_manager = &_My_handler::_M_manager;
   da3b8:	4b1e      	ldr	r3, [pc, #120]	; (da434 <_ZN11SleepHelperC1Ev+0x23c>)
   da3ba:	f8c4 37b0 	str.w	r3, [r4, #1968]	; 0x7b0
   da3be:	4b1e      	ldr	r3, [pc, #120]	; (da438 <_ZN11SleepHelperC1Ev+0x240>)
   da3c0:	f8c4 37e0 	str.w	r3, [r4, #2016]	; 0x7e0
   da3c4:	4b1d      	ldr	r3, [pc, #116]	; (da43c <_ZN11SleepHelperC1Ev+0x244>)
   da3c6:	f8c4 37e4 	str.w	r3, [r4, #2020]	; 0x7e4
            this->path = path; 
   da3ca:	491d      	ldr	r1, [pc, #116]	; (da440 <_ZN11SleepHelperC1Ev+0x248>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da3cc:	f8c4 57ac 	str.w	r5, [r4, #1964]	; 0x7ac
   da3d0:	f8c4 57b8 	str.w	r5, [r4, #1976]	; 0x7b8
   da3d4:	f8c4 57bc 	str.w	r5, [r4, #1980]	; 0x7bc
   da3d8:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
   da3dc:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
   da3e0:	f8c4 57c8 	str.w	r5, [r4, #1992]	; 0x7c8
   da3e4:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
   da3e8:	f8a4 57d0 	strh.w	r5, [r4, #2000]	; 0x7d0
   da3ec:	f8c4 57d4 	str.w	r5, [r4, #2004]	; 0x7d4
   da3f0:	f8c4 57d8 	str.w	r5, [r4, #2008]	; 0x7d8
   da3f4:	f8c4 57dc 	str.w	r5, [r4, #2012]	; 0x7dc
   da3f8:	4640      	mov	r0, r8
   da3fa:	f005 fbde 	bl	dfbba <_ZN6StringaSEPKc>
            this->path = path; 
   da3fe:	4911      	ldr	r1, [pc, #68]	; (da444 <_ZN11SleepHelperC1Ev+0x24c>)
   da400:	4638      	mov	r0, r7
   da402:	f005 fbda 	bl	dfbba <_ZN6StringaSEPKc>
}
   da406:	4620      	mov	r0, r4
   da408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da40c:	000e4750 	.word	0x000e4750
   da410:	000e44eb 	.word	0x000e44eb
   da414:	000e4714 	.word	0x000e4714
   da418:	d87cb6ce 	.word	0xd87cb6ce
   da41c:	000e4780 	.word	0x000e4780
   da420:	000e4724 	.word	0x000e4724
   da424:	000e4491 	.word	0x000e4491
   da428:	000be6e0 	.word	0x000be6e0
   da42c:	000da9e1 	.word	0x000da9e1
   da430:	000d9ac1 	.word	0x000d9ac1
   da434:	000d98fb 	.word	0x000d98fb
   da438:	2003e51c 	.word	0x2003e51c
   da43c:	000e449d 	.word	0x000e449d
   da440:	000e44a7 	.word	0x000e44a7
   da444:	000e44bf 	.word	0x000e44bf

000da448 <_ZN11SleepHelper8instanceEv>:
SleepHelper &SleepHelper::instance() {
   da448:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   da44a:	4c07      	ldr	r4, [pc, #28]	; (da468 <_ZN11SleepHelper8instanceEv+0x20>)
   da44c:	6823      	ldr	r3, [r4, #0]
   da44e:	b943      	cbnz	r3, da462 <_ZN11SleepHelper8instanceEv+0x1a>
        _instance = new SleepHelper();
   da450:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
   da454:	f7f9 fe1f 	bl	d4096 <_Znwj>
   da458:	4605      	mov	r5, r0
   da45a:	b108      	cbz	r0, da460 <_ZN11SleepHelper8instanceEv+0x18>
   da45c:	f7ff fecc 	bl	da1f8 <_ZN11SleepHelperC1Ev>
   da460:	6025      	str	r5, [r4, #0]
}
   da462:	6820      	ldr	r0, [r4, #0]
   da464:	bd38      	pop	{r3, r4, r5, pc}
   da466:	bf00      	nop
   da468:	2003e514 	.word	0x2003e514

000da46c <_ZN11SleepHelper12EventHistory8addEventEPKc>:
void SleepHelper::EventHistory::addEvent(const char *jsonObj) {
   da46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da46e:	460e      	mov	r6, r1
   da470:	4605      	mov	r5, r0
    if (SleepHelper::instance().logEnableEnabled(SleepHelper::logEnabledHistoryData)) {
   da472:	f7ff ffe9 	bl	da448 <_ZN11SleepHelper8instanceEv>
        return (logEnabled & flag) != 0;
   da476:	f8d0 179c 	ldr.w	r1, [r0, #1948]	; 0x79c
   da47a:	2400      	movs	r4, #0
   da47c:	4622      	mov	r2, r4
   da47e:	f401 7300 	and.w	r3, r1, #512	; 0x200
   da482:	4313      	orrs	r3, r2
   da484:	d01e      	beq.n	da4c4 <_ZN11SleepHelper12EventHistory8addEventEPKc+0x58>
        SleepHelper::instance().appLog.trace("EventHistory::addEvent");
   da486:	f7ff ffdf 	bl	da448 <_ZN11SleepHelper8instanceEv>
   da48a:	4921      	ldr	r1, [pc, #132]	; (da510 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa4>)
   da48c:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   da490:	f7fb fd66 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, jsonObj, strlen(jsonObj));
   da494:	f7ff ffd8 	bl	da448 <_ZN11SleepHelper8instanceEv>
   da498:	4607      	mov	r7, r0
   da49a:	4630      	mov	r0, r6
   da49c:	f007 f997 	bl	e17ce <strlen>
        log_write(level, name_, data, size, nullptr);
   da4a0:	9400      	str	r4, [sp, #0]
   da4a2:	4603      	mov	r3, r0
   da4a4:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
   da4a8:	4632      	mov	r2, r6
   da4aa:	2001      	movs	r0, #1
   da4ac:	f002 fccc 	bl	dce48 <log_write>
        SleepHelper::instance().appLog.write(LOG_LEVEL_TRACE, "\r\n", 2);
   da4b0:	f7ff ffca 	bl	da448 <_ZN11SleepHelper8instanceEv>
   da4b4:	9400      	str	r4, [sp, #0]
   da4b6:	f8d0 17e4 	ldr.w	r1, [r0, #2020]	; 0x7e4
   da4ba:	4a16      	ldr	r2, [pc, #88]	; (da514 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xa8>)
   da4bc:	2302      	movs	r3, #2
   da4be:	2001      	movs	r0, #1
   da4c0:	f002 fcc2 	bl	dce48 <log_write>
   da4c4:	4628      	mov	r0, r5
   da4c6:	f7ff fbf5 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   da4ca:	6868      	ldr	r0, [r5, #4]
   da4cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
   da4d0:	f240 210a 	movw	r1, #522	; 0x20a
   da4d4:	f008 f912 	bl	e26fc <open>
        if (fd != -1) {
   da4d8:	1c43      	adds	r3, r0, #1
        int fd = open(path, O_RDWR | O_CREAT | O_APPEND, 0666);
   da4da:	4604      	mov	r4, r0
        if (fd != -1) {
   da4dc:	d011      	beq.n	da502 <_ZN11SleepHelper12EventHistory8addEventEPKc+0x96>
            write(fd, jsonObj, strlen(jsonObj));
   da4de:	4630      	mov	r0, r6
   da4e0:	f007 f975 	bl	e17ce <strlen>
   da4e4:	4631      	mov	r1, r6
   da4e6:	4602      	mov	r2, r0
   da4e8:	4620      	mov	r0, r4
   da4ea:	f008 f92d 	bl	e2748 <write>
            write(fd, "\n", 1);
   da4ee:	490a      	ldr	r1, [pc, #40]	; (da518 <_ZN11SleepHelper12EventHistory8addEventEPKc+0xac>)
   da4f0:	2201      	movs	r2, #1
   da4f2:	4620      	mov	r0, r4
   da4f4:	f008 f928 	bl	e2748 <write>
            close(fd);
   da4f8:	4620      	mov	r0, r4
   da4fa:	f008 f8e5 	bl	e26c8 <close>
            hasEvents = true;
   da4fe:	2301      	movs	r3, #1
   da500:	756b      	strb	r3, [r5, #21]
            os_mutex_recursive_unlock(handle_); 
   da502:	6828      	ldr	r0, [r5, #0]
}
   da504:	b003      	add	sp, #12
   da506:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   da50a:	f002 ba5d 	b.w	dc9c8 <os_mutex_recursive_unlock>
   da50e:	bf00      	nop
   da510:	000e44d2 	.word	0x000e44d2
   da514:	000e44e9 	.word	0x000e44e9
   da518:	000e44ea 	.word	0x000e44ea

000da51c <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE>:
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   da51c:	b570      	push	{r4, r5, r6, lr}
   da51e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
    memset(buf, 0, sizeof(buf));
   da522:	ae06      	add	r6, sp, #24
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   da524:	460c      	mov	r4, r1
    memset(buf, 0, sizeof(buf));
   da526:	f240 226e 	movw	r2, #622	; 0x26e
   da52a:	2100      	movs	r1, #0
void SleepHelper::EventHistory::addEvent(std::function<void(JSONWriter &)>callback) {
   da52c:	4605      	mov	r5, r0
    memset(buf, 0, sizeof(buf));
   da52e:	4630      	mov	r0, r6
   da530:	f007 f8c2 	bl	e16b8 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   da534:	4a0f      	ldr	r2, [pc, #60]	; (da574 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x58>)
   da536:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da538:	2300      	movs	r3, #0
        n_(0) {
   da53a:	f240 226d 	movw	r2, #621	; 0x26d
    writer.beginObject();
   da53e:	a801      	add	r0, sp, #4
   da540:	e9cd 2304 	strd	r2, r3, [sp, #16]
        state_(BEGIN) {
   da544:	f88d 3008 	strb.w	r3, [sp, #8]
        n_(0) {
   da548:	9603      	str	r6, [sp, #12]
   da54a:	f003 ffb0 	bl	de4ae <_ZN5spark10JSONWriter11beginObjectEv>
      if (_M_empty())
   da54e:	68a3      	ldr	r3, [r4, #8]
   da550:	b90b      	cbnz	r3, da556 <_ZN11SleepHelper12EventHistory8addEventESt8functionIFvRN5spark10JSONWriterEEE+0x3a>
	__throw_bad_function_call();
   da552:	f006 f915 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da556:	68e3      	ldr	r3, [r4, #12]
   da558:	a901      	add	r1, sp, #4
   da55a:	4620      	mov	r0, r4
   da55c:	4798      	blx	r3
    writer.endObject();
   da55e:	a801      	add	r0, sp, #4
   da560:	f003 ff83 	bl	de46a <_ZN5spark10JSONWriter9endObjectEv>
    addEvent(buf);
   da564:	4631      	mov	r1, r6
   da566:	4628      	mov	r0, r5
   da568:	f7ff ff80 	bl	da46c <_ZN11SleepHelper12EventHistory8addEventEPKc>
}
   da56c:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   da570:	bd70      	pop	{r4, r5, r6, pc}
   da572:	bf00      	nop
   da574:	000e48e4 	.word	0x000e48e4

000da578 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>:
        T getValue(size_t offset) const {
   da578:	b538      	push	{r3, r4, r5, lr}
   da57a:	4604      	mov	r4, r0
   da57c:	3004      	adds	r0, #4
   da57e:	460d      	mov	r5, r1
   da580:	f7ff fb98 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   da584:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   da586:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   da588:	3b04      	subs	r3, #4
   da58a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   da58c:	bf26      	itte	cs
   da58e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   da590:	595d      	ldrcs	r5, [r3, r5]
            T result = 0;
   da592:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   da594:	f002 fa18 	bl	dc9c8 <os_mutex_recursive_unlock>
        }
   da598:	4628      	mov	r0, r5
   da59a:	bd38      	pop	{r3, r4, r5, pc}

000da59c <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>:
        void setValue(size_t offset, T value)  {
   da59c:	b570      	push	{r4, r5, r6, lr}
   da59e:	4604      	mov	r4, r0
   da5a0:	3004      	adds	r0, #4
   da5a2:	460d      	mov	r5, r1
   da5a4:	4616      	mov	r6, r2
   da5a6:	f7ff fb85 	bl	d9cb4 <_ZNK11SleepHelper25SleepHelperRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   da5aa:	68e3      	ldr	r3, [r4, #12]
   da5ac:	3b04      	subs	r3, #4
   da5ae:	42ab      	cmp	r3, r5
   da5b0:	d308      	bcc.n	da5c4 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   da5b2:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   da5b4:	595a      	ldr	r2, [r3, r5]
   da5b6:	42b2      	cmp	r2, r6
   da5b8:	d004      	beq.n	da5c4 <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_+0x28>
                        *(T *)p = value;
   da5ba:	515e      	str	r6, [r3, r5]
                        saveOrDefer();
   da5bc:	6823      	ldr	r3, [r4, #0]
   da5be:	4620      	mov	r0, r4
   da5c0:	68db      	ldr	r3, [r3, #12]
   da5c2:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   da5c4:	6860      	ldr	r0, [r4, #4]
        }
   da5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   da5ca:	f002 b9fd 	b.w	dc9c8 <os_mutex_recursive_unlock>

000da5ce <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   da5ce:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   da5d0:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   da5d4:	4604      	mov	r4, r0
   da5d6:	42ae      	cmp	r6, r5
   da5d8:	d004      	beq.n	da5e4 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   da5da:	4628      	mov	r0, r5
   da5dc:	f7fa fa4e 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   da5e0:	3510      	adds	r5, #16
   da5e2:	e7f8      	b.n	da5d6 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   da5e4:	6820      	ldr	r0, [r4, #0]
	if (__p)
   da5e6:	b108      	cbz	r0, da5ec <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev+0x1e>
   da5e8:	f7f9 fd59 	bl	d409e <_ZdlPv>
      }
   da5ec:	4620      	mov	r0, r4
   da5ee:	bd70      	pop	{r4, r5, r6, pc}

000da5f0 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   da5f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da5f2:	2300      	movs	r3, #0
   da5f4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da5f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da5f8:	4604      	mov	r4, r0
   da5fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da5fc:	b12b      	cbz	r3, da60a <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da5fe:	2202      	movs	r2, #2
   da600:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da602:	68eb      	ldr	r3, [r5, #12]
   da604:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da606:	68ab      	ldr	r3, [r5, #8]
   da608:	60a3      	str	r3, [r4, #8]
    }
   da60a:	4620      	mov	r0, r4
   da60c:	bd38      	pop	{r3, r4, r5, pc}

000da60e <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	  switch (__op)
   da60e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   da610:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da612:	4604      	mov	r4, r0
	  switch (__op)
   da614:	d008      	beq.n	da628 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   da616:	2a03      	cmp	r2, #3
   da618:	d012      	beq.n	da640 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
   da61a:	2a01      	cmp	r2, #1
   da61c:	d101      	bne.n	da622 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   da61e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   da620:	6003      	str	r3, [r0, #0]
	}
   da622:	2000      	movs	r0, #0
   da624:	b003      	add	sp, #12
   da626:	bd30      	pop	{r4, r5, pc}
	  __dest._M_access<_Functor*>() =
   da628:	6809      	ldr	r1, [r1, #0]
   da62a:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   da62c:	2010      	movs	r0, #16
   da62e:	f7f9 fd32 	bl	d4096 <_Znwj>
   da632:	4605      	mov	r5, r0
   da634:	b110      	cbz	r0, da63c <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x2e>
   da636:	9901      	ldr	r1, [sp, #4]
   da638:	f7ff ffda 	bl	da5f0 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   da63c:	6025      	str	r5, [r4, #0]
	}
   da63e:	e7f0      	b.n	da622 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   da640:	6804      	ldr	r4, [r0, #0]
   da642:	2c00      	cmp	r4, #0
   da644:	d0ed      	beq.n	da622 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   da646:	4620      	mov	r0, r4
   da648:	f7fa fa18 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   da64c:	2110      	movs	r1, #16
   da64e:	4620      	mov	r0, r4
   da650:	f006 f856 	bl	e0700 <_ZdlPvj>
   da654:	e7e5      	b.n	da622 <_ZNSt14_Function_base13_Base_managerISt8functionIFbRN5spark10JSONWriterERiEEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x14>

000da656 <_ZNSt8functionIFbvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   da656:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da658:	2300      	movs	r3, #0
   da65a:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da65c:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da65e:	4604      	mov	r4, r0
   da660:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da662:	b12b      	cbz	r3, da670 <_ZNSt8functionIFbvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da664:	2202      	movs	r2, #2
   da666:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da668:	68eb      	ldr	r3, [r5, #12]
   da66a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da66c:	68ab      	ldr	r3, [r5, #8]
   da66e:	60a3      	str	r3, [r4, #8]
    }
   da670:	4620      	mov	r0, r4
   da672:	bd38      	pop	{r3, r4, r5, pc}

000da674 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
   da674:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da676:	2300      	movs	r3, #0
   da678:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da67a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da67c:	4604      	mov	r4, r0
   da67e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da680:	b12b      	cbz	r3, da68e <_ZNSt8functionIFbRiS0_EEC1ERKS2_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da682:	2202      	movs	r2, #2
   da684:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da686:	68eb      	ldr	r3, [r5, #12]
   da688:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da68a:	68ab      	ldr	r3, [r5, #8]
   da68c:	60a3      	str	r3, [r4, #8]
    }
   da68e:	4620      	mov	r0, r4
   da690:	bd38      	pop	{r3, r4, r5, pc}

000da692 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>:
    function<_Res(_ArgTypes...)>::
   da692:	b510      	push	{r4, lr}
      if (_M_empty())
   da694:	6884      	ldr	r4, [r0, #8]
   da696:	b90c      	cbnz	r4, da69c <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_+0xa>
	__throw_bad_function_call();
   da698:	f006 f872 	bl	e0780 <_ZSt25__throw_bad_function_callv>
    }
   da69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da6a0:	68c3      	ldr	r3, [r0, #12]
   da6a2:	4718      	bx	r3

000da6a4 <_ZNSt17_Function_handlerIFbRN5spark10JSONWriterERiEZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvS2_S3_EEEUlS2_S3_E_E9_M_invokeERKSt9_Any_dataS2_S3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da6a4:	b570      	push	{r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   da6a6:	6804      	ldr	r4, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   da6a8:	460d      	mov	r5, r1
                const char *name = eventsEnableName(flag);
   da6aa:	e9d4 0100 	ldrd	r0, r1, [r4]
   da6ae:	4616      	mov	r6, r2
   da6b0:	f7ff fb7a 	bl	d9da8 <_ZN11SleepHelper16eventsEnableNameEy>
   da6b4:	4601      	mov	r1, r0
                writer.name(name);
   da6b6:	4628      	mov	r0, r5
   da6b8:	f7fa f9e9 	bl	d4a8e <_ZN5spark10JSONWriter4nameEPKc>
                priority = eventsEnablePriority(flag);
   da6bc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   da6c0:	f7ff fb58 	bl	d9d74 <_ZN11SleepHelper20eventsEnablePriorityEy>
                fn(writer, priority);
   da6c4:	4632      	mov	r2, r6
                priority = eventsEnablePriority(flag);
   da6c6:	6030      	str	r0, [r6, #0]
                fn(writer, priority);
   da6c8:	4629      	mov	r1, r5
   da6ca:	4620      	mov	r0, r4
   da6cc:	f7ff ffe1 	bl	da692 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
      }
   da6d0:	2001      	movs	r0, #1
   da6d2:	bd70      	pop	{r4, r5, r6, pc}

000da6d4 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   da6d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   da6d6:	2300      	movs	r3, #0
   da6d8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   da6da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   da6dc:	4604      	mov	r4, r0
   da6de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   da6e0:	b12b      	cbz	r3, da6ee <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   da6e2:	2202      	movs	r2, #2
   da6e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   da6e6:	68eb      	ldr	r3, [r5, #12]
   da6e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   da6ea:	68ab      	ldr	r3, [r5, #8]
   da6ec:	60a3      	str	r3, [r4, #8]
    }
   da6ee:	4620      	mov	r0, r4
   da6f0:	bd38      	pop	{r3, r4, r5, pc}

000da6f2 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  switch (__op)
   da6f2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   da6f4:	b570      	push	{r4, r5, r6, lr}
   da6f6:	4604      	mov	r4, r0
	  switch (__op)
   da6f8:	d007      	beq.n	da70a <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x18>
   da6fa:	2a03      	cmp	r2, #3
   da6fc:	d014      	beq.n	da728 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x36>
   da6fe:	2a01      	cmp	r2, #1
   da700:	d101      	bne.n	da706 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   da702:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   da704:	6003      	str	r3, [r0, #0]
	}
   da706:	2000      	movs	r0, #0
   da708:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   da70a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   da70c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   da70e:	f7f9 fcc2 	bl	d4096 <_Znwj>
   da712:	4605      	mov	r5, r0
   da714:	b130      	cbz	r0, da724 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   da716:	4631      	mov	r1, r6
   da718:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   da71c:	e8e0 2302 	strd	r2, r3, [r0], #8
   da720:	f7ff ffd8 	bl	da6d4 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	  __dest._M_access<_Functor*>() =
   da724:	6025      	str	r5, [r4, #0]
	}
   da726:	e7ee      	b.n	da706 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   da728:	6804      	ldr	r4, [r0, #0]
   da72a:	2c00      	cmp	r4, #0
   da72c:	d0eb      	beq.n	da706 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   da72e:	f104 0008 	add.w	r0, r4, #8
   da732:	f7fa f9a3 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   da736:	2118      	movs	r1, #24
   da738:	4620      	mov	r0, r4
   da73a:	f005 ffe1 	bl	e0700 <_ZdlPvj>
   da73e:	e7e2      	b.n	da706 <_ZNSt14_Function_base13_Base_managerIZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEEEUlS5_S6_E_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>

000da740 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   da740:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   da742:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   da746:	4604      	mov	r4, r0
   da748:	42ae      	cmp	r6, r5
   da74a:	d004      	beq.n	da756 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   da74c:	4628      	mov	r0, r5
   da74e:	f7fa f995 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   da752:	3510      	adds	r5, #16
   da754:	e7f8      	b.n	da748 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   da756:	6820      	ldr	r0, [r4, #0]
	if (__p)
   da758:	b108      	cbz	r0, da75e <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev+0x1e>
   da75a:	f7f9 fca0 	bl	d409e <_ZdlPv>
      }
   da75e:	4620      	mov	r0, r4
   da760:	bd70      	pop	{r4, r5, r6, pc}

000da762 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>:
        void forEach(Types... args) {
   da762:	b573      	push	{r0, r1, r4, r5, r6, lr}
      : _M_current(__i) { }
   da764:	6804      	ldr	r4, [r0, #0]
   da766:	4605      	mov	r5, r0
   da768:	460e      	mov	r6, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   da76a:	686b      	ldr	r3, [r5, #4]
   da76c:	429c      	cmp	r4, r3
   da76e:	d00c      	beq.n	da78a <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x28>
   da770:	f88d 6007 	strb.w	r6, [sp, #7]
      if (_M_empty())
   da774:	68a3      	ldr	r3, [r4, #8]
   da776:	b90b      	cbnz	r3, da77c <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x1a>
	__throw_bad_function_call();
   da778:	f006 f802 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da77c:	68e3      	ldr	r3, [r4, #12]
   da77e:	4620      	mov	r0, r4
   da780:	f10d 0107 	add.w	r1, sp, #7
   da784:	4798      	blx	r3
	++_M_current;
   da786:	3410      	adds	r4, #16
	return *this;
   da788:	e7ef      	b.n	da76a <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb+0x8>
        }
   da78a:	b002      	add	sp, #8
   da78c:	bd70      	pop	{r4, r5, r6, pc}

000da78e <_ZN11SleepHelper18systemEventHandlerEyi>:
    switch(event) {
   da78e:	2b00      	cmp	r3, #0
   da790:	bf08      	it	eq
   da792:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
void SleepHelper::systemEventHandler(system_event_t event, int param) {
   da796:	b538      	push	{r3, r4, r5, lr}
    switch(event) {
   da798:	d005      	beq.n	da7a6 <_ZN11SleepHelper18systemEventHandlerEyi+0x18>
   da79a:	2b00      	cmp	r3, #0
   da79c:	bf08      	it	eq
   da79e:	f5b2 2f80 	cmpeq.w	r2, #262144	; 0x40000
   da7a2:	d006      	beq.n	da7b2 <_ZN11SleepHelper18systemEventHandlerEyi+0x24>
}
   da7a4:	bd38      	pop	{r3, r4, r5, pc}
            sleepOrResetFunctions.forEach(true);
   da7a6:	2101      	movs	r1, #1
   da7a8:	f500 60df 	add.w	r0, r0, #1784	; 0x6f8
   da7ac:	f7ff ffd9 	bl	da762 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
            break;
   da7b0:	e7f8      	b.n	da7a4 <_ZN11SleepHelper18systemEventHandlerEyi+0x16>
            outOfMemory = true;
   da7b2:	2301      	movs	r3, #1
   da7b4:	f880 37d0 	strb.w	r3, [r0, #2000]	; 0x7d0
}
   da7b8:	e7f4      	b.n	da7a4 <_ZN11SleepHelper18systemEventHandlerEyi+0x16>

000da7ba <_ZN11SleepHelper24systemEventHandlerStaticEyi>:
void SleepHelper::systemEventHandlerStatic(system_event_t event, int param) {
   da7ba:	b530      	push	{r4, r5, lr}
   da7bc:	b085      	sub	sp, #20
   da7be:	4615      	mov	r5, r2
   da7c0:	4604      	mov	r4, r0
   da7c2:	9103      	str	r1, [sp, #12]
    SleepHelper::instance().systemEventHandler(event, param);
   da7c4:	f7ff fe40 	bl	da448 <_ZN11SleepHelper8instanceEv>
   da7c8:	9b03      	ldr	r3, [sp, #12]
   da7ca:	9500      	str	r5, [sp, #0]
   da7cc:	4622      	mov	r2, r4
   da7ce:	f7ff ffde 	bl	da78e <_ZN11SleepHelper18systemEventHandlerEyi>
}
   da7d2:	b005      	add	sp, #20
   da7d4:	bd30      	pop	{r4, r5, pc}

000da7d6 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>:
        bool whileAnyTrue(Types... args) {
   da7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da7da:	6805      	ldr	r5, [r0, #0]
   da7dc:	68c4      	ldr	r4, [r0, #12]
   da7de:	4606      	mov	r6, r0
            bool finalRes = false;
   da7e0:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   da7e2:	f06f 0801 	mvn.w	r8, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   da7e6:	6933      	ldr	r3, [r6, #16]
   da7e8:	429c      	cmp	r4, r3
   da7ea:	d012      	beq.n	da812 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x3c>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   da7ec:	6823      	ldr	r3, [r4, #0]
   da7ee:	3302      	adds	r3, #2
   da7f0:	d00a      	beq.n	da808 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
      if (_M_empty())
   da7f2:	68ab      	ldr	r3, [r5, #8]
   da7f4:	b90b      	cbnz	r3, da7fa <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x24>
	__throw_bad_function_call();
   da7f6:	f005 ffc3 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da7fa:	68eb      	ldr	r3, [r5, #12]
   da7fc:	4621      	mov	r1, r4
   da7fe:	4628      	mov	r0, r5
   da800:	4798      	blx	r3
                    if (res) {
   da802:	b920      	cbnz	r0, da80e <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x38>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   da804:	f8c4 8000 	str.w	r8, [r4]
      operator++() _GLIBCXX_NOEXCEPT
   da808:	3510      	adds	r5, #16
   da80a:	3408      	adds	r4, #8
	return *this;
   da80c:	e7eb      	b.n	da7e6 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x10>
                        finalRes = true;
   da80e:	4607      	mov	r7, r0
   da810:	e7fa      	b.n	da808 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv+0x32>
        }
   da812:	4638      	mov	r0, r7
   da814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da818 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>:
        bool whileAnyFalse(bool defaultResult, Types... args) {
   da818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da81a:	6804      	ldr	r4, [r0, #0]
   da81c:	4606      	mov	r6, r0
   da81e:	4617      	mov	r7, r2
            bool finalRes = defaultResult;
   da820:	460d      	mov	r5, r1
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   da822:	6873      	ldr	r3, [r6, #4]
   da824:	42a3      	cmp	r3, r4
   da826:	d00d      	beq.n	da844 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x2c>
   da828:	9701      	str	r7, [sp, #4]
      if (_M_empty())
   da82a:	68a3      	ldr	r3, [r4, #8]
   da82c:	b90b      	cbnz	r3, da832 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0x1a>
	__throw_bad_function_call();
   da82e:	f005 ffa7 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da832:	68e3      	ldr	r3, [r4, #12]
   da834:	4620      	mov	r0, r4
   da836:	a901      	add	r1, sp, #4
   da838:	4798      	blx	r3
                    finalRes = res;
   da83a:	2800      	cmp	r0, #0
   da83c:	bf08      	it	eq
   da83e:	2500      	moveq	r5, #0
      operator++() _GLIBCXX_NOEXCEPT
   da840:	3410      	adds	r4, #16
	return *this;
   da842:	e7ee      	b.n	da822 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm+0xa>
        }
   da844:	4628      	mov	r0, r5
   da846:	b003      	add	sp, #12
   da848:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da84a <_ZNKSt8functionIFbvEEclEv>:
    function<_Res(_ArgTypes...)>::
   da84a:	b510      	push	{r4, lr}
      if (_M_empty())
   da84c:	6882      	ldr	r2, [r0, #8]
   da84e:	b90a      	cbnz	r2, da854 <_ZNKSt8functionIFbvEEclEv+0xa>
	__throw_bad_function_call();
   da850:	f005 ff96 	bl	e0780 <_ZSt25__throw_bad_function_callv>
    }
   da854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da858:	68c3      	ldr	r3, [r0, #12]
   da85a:	4718      	bx	r3

000da85c <_ZNKSt8functionIFbiEEclEi>:
    function<_Res(_ArgTypes...)>::
   da85c:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   da85e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   da860:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   da862:	b90a      	cbnz	r2, da868 <_ZNKSt8functionIFbiEEclEi+0xc>
	__throw_bad_function_call();
   da864:	f005 ff8c 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   da868:	68c3      	ldr	r3, [r0, #12]
   da86a:	a901      	add	r1, sp, #4
   da86c:	4798      	blx	r3
    }
   da86e:	b003      	add	sp, #12
   da870:	f85d fb04 	ldr.w	pc, [sp], #4

000da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   da874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da876:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   da87a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   da87c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   da87e:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   da880:	b90a      	cbnz	r2, da886 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   da882:	07d9      	lsls	r1, r3, #31
   da884:	d505      	bpl.n	da892 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   da886:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   da88a:	4b0b      	ldr	r3, [pc, #44]	; (da8b8 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   da88c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   da88e:	4b0b      	ldr	r3, [pc, #44]	; (da8bc <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   da890:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   da892:	4621      	mov	r1, r4
   da894:	4668      	mov	r0, sp
   da896:	f7fa faaa 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da89a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   da89c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da89e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da8a0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   da8a2:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   da8a4:	4668      	mov	r0, sp
   da8a6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da8a8:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da8aa:	9203      	str	r2, [sp, #12]
   da8ac:	f7fa f8e6 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	}
   da8b0:	4620      	mov	r0, r4
   da8b2:	b004      	add	sp, #16
   da8b4:	bd10      	pop	{r4, pc}
   da8b6:	bf00      	nop
   da8b8:	000d9ac1 	.word	0x000d9ac1
   da8bc:	000d98fb 	.word	0x000d98fb

000da8c0 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv>:
void SleepHelper::stateHandlerTimeValidWait() {
   da8c0:	b513      	push	{r0, r1, r4, lr}
   da8c2:	4604      	mov	r4, r0
    if (Time.isValid()) {
   da8c4:	f005 fc18 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   da8c8:	b140      	cbz	r0, da8dc <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x1c>
        stateHandler = &SleepHelper::stateHandlerConnectedStart;
   da8ca:	4b05      	ldr	r3, [pc, #20]	; (da8e0 <_ZN11SleepHelper25stateHandlerTimeValidWaitEv+0x20>)
   da8cc:	9300      	str	r3, [sp, #0]
   da8ce:	4669      	mov	r1, sp
   da8d0:	2300      	movs	r3, #0
   da8d2:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da8d6:	9301      	str	r3, [sp, #4]
   da8d8:	f7ff ffcc 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da8dc:	b002      	add	sp, #8
   da8de:	bd10      	pop	{r4, pc}
   da8e0:	000dafb9 	.word	0x000dafb9

000da8e4 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv>:
void SleepHelper::stateHandlerPublishRateLimit() {
   da8e4:	b513      	push	{r0, r1, r4, lr}
   da8e6:	4604      	mov	r4, r0
   da8e8:	f002 f8a6 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime > 1000) {
   da8ec:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   da8f0:	1ac0      	subs	r0, r0, r3
   da8f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   da8f6:	d908      	bls.n	da90a <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x26>
        stateHandler = &SleepHelper::stateHandlerConnected;
   da8f8:	4b05      	ldr	r3, [pc, #20]	; (da910 <_ZN11SleepHelper28stateHandlerPublishRateLimitEv+0x2c>)
   da8fa:	9300      	str	r3, [sp, #0]
   da8fc:	4669      	mov	r1, sp
   da8fe:	2300      	movs	r3, #0
   da900:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da904:	9301      	str	r3, [sp, #4]
   da906:	f7ff ffb5 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da90a:	b002      	add	sp, #8
   da90c:	bd10      	pop	{r4, pc}
   da90e:	bf00      	nop
   da910:	000dbb8d 	.word	0x000dbb8d

000da914 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv>:
void SleepHelper::stateHandlerDisconnectWait() {
   da914:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da916:	4604      	mov	r4, r0
   da918:	f002 fb3e 	bl	dcf98 <spark_cloud_flag_connected>
    if (Particle.disconnected()) {
   da91c:	4605      	mov	r5, r0
   da91e:	b988      	cbnz	r0, da944 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x30>
        appLog.info("Disconnecting cellular");
   da920:	4909      	ldr	r1, [pc, #36]	; (da948 <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x34>)
   da922:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   da926:	f7f9 fd39 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        network.disconnect();
   da92a:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   da92e:	6803      	ldr	r3, [r0, #0]
   da930:	685b      	ldr	r3, [r3, #4]
   da932:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularDisconnected;
   da934:	4b05      	ldr	r3, [pc, #20]	; (da94c <_ZN11SleepHelper26stateHandlerDisconnectWaitEv+0x38>)
   da936:	4669      	mov	r1, sp
   da938:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da93c:	e9cd 3500 	strd	r3, r5, [sp]
   da940:	f7ff ff98 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da944:	b003      	add	sp, #12
   da946:	bd30      	pop	{r4, r5, pc}
   da948:	000e44ec 	.word	0x000e44ec
   da94c:	000da951 	.word	0x000da951

000da950 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv>:
void SleepHelper::stateHandlerWaitCellularDisconnected() {
   da950:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da952:	4604      	mov	r4, r0
    if (!network.ready()) {
   da954:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   da958:	6803      	ldr	r3, [r0, #0]
   da95a:	68db      	ldr	r3, [r3, #12]
   da95c:	4798      	blx	r3
   da95e:	4605      	mov	r5, r0
   da960:	b960      	cbnz	r0, da97c <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x2c>
        network.off();
   da962:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   da966:	6803      	ldr	r3, [r0, #0]
   da968:	695b      	ldr	r3, [r3, #20]
   da96a:	4798      	blx	r3
        stateHandler = &SleepHelper::stateHandlerWaitCellularOff;
   da96c:	4b04      	ldr	r3, [pc, #16]	; (da980 <_ZN11SleepHelper36stateHandlerWaitCellularDisconnectedEv+0x30>)
   da96e:	4669      	mov	r1, sp
   da970:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da974:	e9cd 3500 	strd	r3, r5, [sp]
   da978:	f7ff ff7c 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da97c:	b003      	add	sp, #12
   da97e:	bd30      	pop	{r4, r5, pc}
   da980:	000da985 	.word	0x000da985

000da984 <_ZN11SleepHelper27stateHandlerWaitCellularOffEv>:
void SleepHelper::stateHandlerWaitCellularOff() {
   da984:	b513      	push	{r0, r1, r4, lr}
   da986:	4604      	mov	r4, r0
    if (network.isOff()) {
   da988:	f8d0 07e0 	ldr.w	r0, [r0, #2016]	; 0x7e0
   da98c:	6803      	ldr	r3, [r0, #0]
   da98e:	69db      	ldr	r3, [r3, #28]
   da990:	4798      	blx	r3
   da992:	b140      	cbz	r0, da9a6 <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x22>
        stateHandler = &SleepHelper::stateHandlerSleep;
   da994:	4b05      	ldr	r3, [pc, #20]	; (da9ac <_ZN11SleepHelper27stateHandlerWaitCellularOffEv+0x28>)
   da996:	9300      	str	r3, [sp, #0]
   da998:	4669      	mov	r1, sp
   da99a:	2300      	movs	r3, #0
   da99c:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da9a0:	9301      	str	r3, [sp, #4]
   da9a2:	f7ff ff67 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da9a6:	b002      	add	sp, #8
   da9a8:	bd10      	pop	{r4, pc}
   da9aa:	bf00      	nop
   da9ac:	000dabc1 	.word	0x000dabc1

000da9b0 <_ZN11SleepHelper22stateHandlerSleepShortEv>:
void SleepHelper::stateHandlerSleepShort() {
   da9b0:	b513      	push	{r0, r1, r4, lr}
   da9b2:	4604      	mov	r4, r0
   da9b4:	f002 f840 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= sleepParams.sleepTimeMs) {
   da9b8:	f8d4 37b8 	ldr.w	r3, [r4, #1976]	; 0x7b8
   da9bc:	1ac0      	subs	r0, r0, r3
   da9be:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   da9c2:	4298      	cmp	r0, r3
   da9c4:	d308      	bcc.n	da9d8 <_ZN11SleepHelper22stateHandlerSleepShortEv+0x28>
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   da9c6:	4b05      	ldr	r3, [pc, #20]	; (da9dc <_ZN11SleepHelper22stateHandlerSleepShortEv+0x2c>)
   da9c8:	9300      	str	r3, [sp, #0]
   da9ca:	4669      	mov	r1, sp
   da9cc:	2300      	movs	r3, #0
   da9ce:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   da9d2:	9301      	str	r3, [sp, #4]
   da9d4:	f7ff ff4e 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   da9d8:	b002      	add	sp, #8
   da9da:	bd10      	pop	{r4, pc}
   da9dc:	000db05d 	.word	0x000db05d

000da9e0 <_ZN11SleepHelper17stateHandlerStartEv>:
void SleepHelper::stateHandlerStart() {
   da9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    appLog.info("stateHandlerStart");
   da9e4:	f200 77e4 	addw	r7, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerStart() {
   da9e8:	b085      	sub	sp, #20
    appLog.info("stateHandlerStart");
   da9ea:	493a      	ldr	r1, [pc, #232]	; (daad4 <_ZN11SleepHelper17stateHandlerStartEv+0xf4>)
void SleepHelper::stateHandlerStart() {
   da9ec:	4604      	mov	r4, r0
    appLog.info("stateHandlerStart");
   da9ee:	4638      	mov	r0, r7
   da9f0:	f7f9 fcd4 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    if (Time.isValid() && sleepParams.nextFullWakeTime) {        
   da9f4:	f005 fb80 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   da9f8:	b970      	cbnz	r0, daa18 <_ZN11SleepHelper17stateHandlerStartEv+0x38>
            int maxNoConnectConviction = 0;
   da9fa:	2600      	movs	r6, #0
      : _M_current(__i) { }
   da9fc:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
            int maxConnectConviction = 0;
   daa00:	46b0      	mov	r8, r6
                int connectConviction = 0;
   daa02:	46b1      	mov	r9, r6
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   daa04:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   daa08:	42ab      	cmp	r3, r5
   daa0a:	d03d      	beq.n	daa88 <_ZN11SleepHelper17stateHandlerStartEv+0xa8>
                int noConnectConviction = 0;
   daa0c:	e9cd 9901 	strd	r9, r9, [sp, #4]
      if (_M_empty())
   daa10:	68ab      	ldr	r3, [r5, #8]
   daa12:	bb53      	cbnz	r3, daa6a <_ZN11SleepHelper17stateHandlerStartEv+0x8a>
	__throw_bad_function_call();
   daa14:	f005 feb4 	bl	e0780 <_ZSt25__throw_bad_function_callv>
   daa18:	f504 65d0 	add.w	r5, r4, #1664	; 0x680
   daa1c:	e9d5 2300 	ldrd	r2, r3, [r5]
   daa20:	4313      	orrs	r3, r2
   daa22:	d0ea      	beq.n	da9fa <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   daa24:	f005 fb85 	bl	e0132 <_ZN9TimeClass3nowEv>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   daa28:	e9d5 2300 	ldrd	r2, r3, [r5]
        isQuickWake = (Time.now() < sleepParams.nextFullWakeTime);
   daa2c:	17c1      	asrs	r1, r0, #31
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   daa2e:	4290      	cmp	r0, r2
   daa30:	eb71 0303 	sbcs.w	r3, r1, r3
   daa34:	dae1      	bge.n	da9fa <_ZN11SleepHelper17stateHandlerStartEv+0x1a>
        appLog.info("running in no connection mode");
   daa36:	4928      	ldr	r1, [pc, #160]	; (daad8 <_ZN11SleepHelper17stateHandlerStartEv+0xf8>)
   daa38:	4638      	mov	r0, r7
   daa3a:	f7f9 fcaf 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        SleepHelper::instance().persistentData.setValue_lastQuickWake(Time.now());
   daa3e:	f7ff fd03 	bl	da448 <_ZN11SleepHelper8instanceEv>
   daa42:	4605      	mov	r5, r0
   daa44:	f005 fb75 	bl	e0132 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastQuickWake), (uint32_t)value);
   daa48:	2118      	movs	r1, #24
   daa4a:	4602      	mov	r2, r0
   daa4c:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   daa50:	f7ff fda4 	bl	da59c <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   daa54:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
                it->callbackState = newState;
   daa58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   daa5c:	f8d4 1720 	ldr.w	r1, [r4, #1824]	; 0x720
   daa60:	4299      	cmp	r1, r3
   daa62:	d02d      	beq.n	daac0 <_ZN11SleepHelper17stateHandlerStartEv+0xe0>
                it->callbackState = newState;
   daa64:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   daa68:	e7f8      	b.n	daa5c <_ZN11SleepHelper17stateHandlerStartEv+0x7c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   daa6a:	68eb      	ldr	r3, [r5, #12]
   daa6c:	4628      	mov	r0, r5
   daa6e:	aa02      	add	r2, sp, #8
   daa70:	a901      	add	r1, sp, #4
   daa72:	4798      	blx	r3
                if (connectConviction > maxConnectConviction) {
   daa74:	9b01      	ldr	r3, [sp, #4]
   daa76:	4598      	cmp	r8, r3
   daa78:	bfb8      	it	lt
   daa7a:	4698      	movlt	r8, r3
                if (noConnectConviction > maxNoConnectConviction) {
   daa7c:	9b02      	ldr	r3, [sp, #8]
   daa7e:	429e      	cmp	r6, r3
   daa80:	bfb8      	it	lt
   daa82:	461e      	movlt	r6, r3
	++_M_current;
   daa84:	3510      	adds	r5, #16
	return *this;
   daa86:	e7bd      	b.n	daa04 <_ZN11SleepHelper17stateHandlerStartEv+0x24>
    if (isQuickWake || !shouldConnectFunctions.shouldConnect()) {
   daa88:	45b0      	cmp	r8, r6
   daa8a:	dbd4      	blt.n	daa36 <_ZN11SleepHelper17stateHandlerStartEv+0x56>
    appLog.info("connecting to cloud");
   daa8c:	4913      	ldr	r1, [pc, #76]	; (daadc <_ZN11SleepHelper17stateHandlerStartEv+0xfc>)
   daa8e:	4638      	mov	r0, r7
   daa90:	f7f9 fc84 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    stateHandler = &SleepHelper::stateHandlerConnectWait;
   daa94:	2500      	movs	r5, #0
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   daa96:	f002 fa77 	bl	dcf88 <spark_cloud_flag_connect>
   daa9a:	4b11      	ldr	r3, [pc, #68]	; (daae0 <_ZN11SleepHelper17stateHandlerStartEv+0x100>)
   daa9c:	9302      	str	r3, [sp, #8]
   daa9e:	a902      	add	r1, sp, #8
   daaa0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   daaa4:	9503      	str	r5, [sp, #12]
   daaa6:	f7ff fee5 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   daaaa:	f001 ffc5 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    networkConnectedMillis = 0;
   daaae:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
    connectAttemptStartMillis = millis();
   daab2:	f8c4 07bc 	str.w	r0, [r4, #1980]	; 0x7bc
    reconnectAttemptStartMillis = 0;
   daab6:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
}
   daaba:	b005      	add	sp, #20
   daabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        stateHandler = &SleepHelper::stateHandlerNoConnection;
   daac0:	4b08      	ldr	r3, [pc, #32]	; (daae4 <_ZN11SleepHelper17stateHandlerStartEv+0x104>)
   daac2:	9302      	str	r3, [sp, #8]
   daac4:	a902      	add	r1, sp, #8
   daac6:	2300      	movs	r3, #0
   daac8:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   daacc:	9303      	str	r3, [sp, #12]
   daace:	f7ff fed1 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   daad2:	e7f2      	b.n	daaba <_ZN11SleepHelper17stateHandlerStartEv+0xda>
   daad4:	000e4503 	.word	0x000e4503
   daad8:	000e4515 	.word	0x000e4515
   daadc:	000e455c 	.word	0x000e455c
   daae0:	000daae9 	.word	0x000daae9
   daae4:	000dc769 	.word	0x000dc769

000daae8 <_ZN11SleepHelper23stateHandlerConnectWaitEv>:
void SleepHelper::stateHandlerConnectWait() {
   daae8:	b513      	push	{r0, r1, r4, lr}
   daaea:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   daaec:	f002 fa54 	bl	dcf98 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   daaf0:	b150      	cbz	r0, dab08 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x20>
        stateHandler = &SleepHelper::stateHandlerTimeValidWait;
   daaf2:	4b19      	ldr	r3, [pc, #100]	; (dab58 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x70>)
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   daaf4:	9300      	str	r3, [sp, #0]
   daaf6:	4669      	mov	r1, sp
   daaf8:	2300      	movs	r3, #0
   daafa:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   daafe:	9301      	str	r3, [sp, #4]
   dab00:	f7ff feb8 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dab04:	b002      	add	sp, #8
   dab06:	bd10      	pop	{r4, pc}
    if (!networkConnectedMillis && network.ready()) {
   dab08:	f8d4 37c4 	ldr.w	r3, [r4, #1988]	; 0x7c4
   dab0c:	b98b      	cbnz	r3, dab32 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   dab0e:	f8d4 07e0 	ldr.w	r0, [r4, #2016]	; 0x7e0
   dab12:	6803      	ldr	r3, [r0, #0]
   dab14:	68db      	ldr	r3, [r3, #12]
   dab16:	4798      	blx	r3
   dab18:	b158      	cbz	r0, dab32 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x4a>
   dab1a:	f001 ff8d 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        system_tick_t elapsedMs = networkConnectedMillis - connectAttemptStartMillis;
   dab1e:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
        networkConnectedMillis = millis();
   dab22:	f8c4 07c4 	str.w	r0, [r4, #1988]	; 0x7c4
        appLog.info("connected to network in %lu ms", elapsedMs);
   dab26:	1a82      	subs	r2, r0, r2
   dab28:	490c      	ldr	r1, [pc, #48]	; (dab5c <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x74>)
   dab2a:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dab2e:	f7f9 fc35 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
   dab32:	f001 ff81 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectAttemptStartMillis;
   dab36:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   dab3a:	2100      	movs	r1, #0
   dab3c:	1a82      	subs	r2, r0, r2
   dab3e:	f204 7004 	addw	r0, r4, #1796	; 0x704
   dab42:	f7ff fe69 	bl	da818 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   dab46:	2800      	cmp	r0, #0
   dab48:	d0dc      	beq.n	dab04 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x1c>
        appLog.info("timed out connecting to cloud");
   dab4a:	4905      	ldr	r1, [pc, #20]	; (dab60 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x78>)
   dab4c:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dab50:	f7f9 fc24 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dab54:	4b03      	ldr	r3, [pc, #12]	; (dab64 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0x7c>)
   dab56:	e7cd      	b.n	daaf4 <_ZN11SleepHelper23stateHandlerConnectWaitEv+0xc>
   dab58:	000da8c1 	.word	0x000da8c1
   dab5c:	000e4533 	.word	0x000e4533
   dab60:	000e4552 	.word	0x000e4552
   dab64:	000dc7ad 	.word	0x000dc7ad

000dab68 <_ZN11SleepHelper25stateHandlerReconnectWaitEv>:
void SleepHelper::stateHandlerReconnectWait() {
   dab68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dab6a:	4604      	mov	r4, r0
   dab6c:	f002 fa14 	bl	dcf98 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   dab70:	4605      	mov	r5, r0
   dab72:	b150      	cbz	r0, dab8a <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x22>
        stateHandler = &SleepHelper::stateHandlerConnected;
   dab74:	4b0f      	ldr	r3, [pc, #60]	; (dabb4 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x4c>)
   dab76:	9300      	str	r3, [sp, #0]
   dab78:	2300      	movs	r3, #0
   dab7a:	9301      	str	r3, [sp, #4]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dab7c:	4669      	mov	r1, sp
   dab7e:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dab82:	f7ff fe77 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dab86:	b003      	add	sp, #12
   dab88:	bd30      	pop	{r4, r5, pc}
   dab8a:	f001 ff55 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - reconnectAttemptStartMillis;
   dab8e:	f8d4 27c0 	ldr.w	r2, [r4, #1984]	; 0x7c0
    if (maximumTimeToConnectFunctions.whileAnyFalse(false, elapsedMs)) {
   dab92:	4629      	mov	r1, r5
   dab94:	1a82      	subs	r2, r0, r2
   dab96:	f204 7004 	addw	r0, r4, #1796	; 0x704
   dab9a:	f7ff fe3d 	bl	da818 <_ZN11SleepHelper11AppCallbackIJmEE13whileAnyFalseEbm>
   dab9e:	2800      	cmp	r0, #0
   daba0:	d0f1      	beq.n	dab86 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x1e>
        appLog.info("timed out reconnecting to cloud");
   daba2:	4905      	ldr	r1, [pc, #20]	; (dabb8 <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x50>)
   daba4:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   daba8:	f7f9 fbf8 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dabac:	4b03      	ldr	r3, [pc, #12]	; (dabbc <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x54>)
   dabae:	e9cd 3500 	strd	r3, r5, [sp]
   dabb2:	e7e3      	b.n	dab7c <_ZN11SleepHelper25stateHandlerReconnectWaitEv+0x14>
   dabb4:	000dbb8d 	.word	0x000dbb8d
   dabb8:	000e4570 	.word	0x000e4570
   dabbc:	000dc7ad 	.word	0x000dc7ad

000dabc0 <_ZN11SleepHelper17stateHandlerSleepEv>:
void SleepHelper::stateHandlerSleep() {
   dabc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    appLog.info("stateHandlerSleep");
   dabc2:	f200 75e4 	addw	r5, r0, #2020	; 0x7e4
void SleepHelper::stateHandlerSleep() {
   dabc6:	4604      	mov	r4, r0
   dabc8:	b087      	sub	sp, #28
    appLog.info("stateHandlerSleep");
   dabca:	4937      	ldr	r1, [pc, #220]	; (daca8 <_ZN11SleepHelper17stateHandlerSleepEv+0xe8>)
   dabcc:	4628      	mov	r0, r5
   dabce:	f7f9 fbe5 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
    sleepOrResetFunctions.forEach(false);
   dabd2:	2100      	movs	r1, #0
   dabd4:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   dabd8:	f7ff fdc3 	bl	da762 <_ZN11SleepHelper11AppCallbackIJbEE7forEachEb>
        return hal_timer_millis(nullptr);
   dabdc:	2000      	movs	r0, #0
   dabde:	f001 ff3b 	bl	dca58 <hal_timer_millis>
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   dabe2:	f8d4 2688 	ldr.w	r2, [r4, #1672]	; 0x688
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   dabe6:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
    int adjustmentMs = System.millis() - sleepParams.calculatedMillis;
   dabea:	1a87      	subs	r7, r0, r2
    if (adjustmentMs < (int)sleepParams.sleepTimeMs) {
   dabec:	42b9      	cmp	r1, r7
   dabee:	dd28      	ble.n	dac42 <_ZN11SleepHelper17stateHandlerSleepEv+0x82>
        sleepParams.sleepTimeMs -= adjustmentMs;
   dabf0:	440a      	add	r2, r1
   dabf2:	1a11      	subs	r1, r2, r0
   dabf4:	f8c4 1690 	str.w	r1, [r4, #1680]	; 0x690
        sleepConfig.duration(sleepParams.sleepTimeMs);
   dabf8:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   dabfc:	f7fe ffe8 	bl	d9bd0 <_ZN8particle24SystemSleepConfiguration8durationEm>
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   dac00:	f8d4 2690 	ldr.w	r2, [r4, #1680]	; 0x690
   dac04:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   dac08:	2600      	movs	r6, #0
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   dac0a:	429a      	cmp	r2, r3
    wakeReasonInt = 0; // SystemSleepWakeupReason::UNKNOWN
   dac0c:	f8c4 677c 	str.w	r6, [r4, #1916]	; 0x77c
    if (sleepParams.sleepTimeMs >= minimumSleepTimeMs) {
   dac10:	d335      	bcc.n	dac7e <_ZN11SleepHelper17stateHandlerSleepEv+0xbe>
        appLog.info("sleeping for %d sec adjustmentMs=%d", (int)(sleepParams.sleepTimeMs / 1000), adjustmentMs);
   dac12:	4628      	mov	r0, r5
   dac14:	463b      	mov	r3, r7
   dac16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   dac1a:	fbb2 f2f1 	udiv	r2, r2, r1
   dac1e:	4923      	ldr	r1, [pc, #140]	; (dacac <_ZN11SleepHelper17stateHandlerSleepEv+0xec>)
   dac20:	f7f9 fbbc 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        SystemSleepResult sleepResult = System.sleep(sleepConfig);
   dac24:	f204 615c 	addw	r1, r4, #1628	; 0x65c
   dac28:	a803      	add	r0, sp, #12
   dac2a:	f005 f8e9 	bl	dfe00 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
      : _M_current(__i) { }
   dac2e:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dac32:	f8d4 3654 	ldr.w	r3, [r4, #1620]	; 0x654
   dac36:	42ab      	cmp	r3, r5
   dac38:	d00d      	beq.n	dac56 <_ZN11SleepHelper17stateHandlerSleepEv+0x96>
      if (_M_empty())
   dac3a:	68ab      	ldr	r3, [r5, #8]
   dac3c:	b92b      	cbnz	r3, dac4a <_ZN11SleepHelper17stateHandlerSleepEv+0x8a>
	__throw_bad_function_call();
   dac3e:	f005 fd9f 	bl	e0780 <_ZSt25__throw_bad_function_callv>
        sleepParams.sleepTimeMs = 0;
   dac42:	2300      	movs	r3, #0
   dac44:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   dac48:	e7da      	b.n	dac00 <_ZN11SleepHelper17stateHandlerSleepEv+0x40>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dac4a:	68eb      	ldr	r3, [r5, #12]
   dac4c:	4628      	mov	r0, r5
   dac4e:	a903      	add	r1, sp, #12
   dac50:	4798      	blx	r3
	++_M_current;
   dac52:	3510      	adds	r5, #16
	return *this;
   dac54:	e7ed      	b.n	dac32 <_ZN11SleepHelper17stateHandlerSleepEv+0x72>
        wakeReasonInt = (int) sleepResult.wakeupReason();
   dac56:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   dac58:	b103      	cbz	r3, dac5c <_ZN11SleepHelper17stateHandlerSleepEv+0x9c>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   dac5a:	889b      	ldrh	r3, [r3, #4]
   dac5c:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepDone;
   dac60:	4b13      	ldr	r3, [pc, #76]	; (dacb0 <_ZN11SleepHelper17stateHandlerSleepEv+0xf0>)
   dac62:	9301      	str	r3, [sp, #4]
   dac64:	a901      	add	r1, sp, #4
   dac66:	2300      	movs	r3, #0
   dac68:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dac6c:	9302      	str	r3, [sp, #8]
   dac6e:	f7ff fe01 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        if (wakeupSource_) {
   dac72:	9803      	ldr	r0, [sp, #12]
   dac74:	b108      	cbz	r0, dac7a <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
            free(wakeupSource_);
   dac76:	f002 fa27 	bl	dd0c8 <free>
}
   dac7a:	b007      	add	sp, #28
   dac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        appLog.info("period too short to sleep %d", (int)sleepParams.sleepTimeMs);
   dac7e:	490d      	ldr	r1, [pc, #52]	; (dacb4 <_ZN11SleepHelper17stateHandlerSleepEv+0xf4>)
   dac80:	4628      	mov	r0, r5
   dac82:	f7f9 fb8b 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        wakeReasonInt = WAKEUP_REASON_NO_SLEEP;
   dac86:	4b0c      	ldr	r3, [pc, #48]	; (dacb8 <_ZN11SleepHelper17stateHandlerSleepEv+0xf8>)
   dac88:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        stateHandler = &SleepHelper::stateHandlerSleepShort;
   dac8c:	4b0b      	ldr	r3, [pc, #44]	; (dacbc <_ZN11SleepHelper17stateHandlerSleepEv+0xfc>)
   dac8e:	a903      	add	r1, sp, #12
   dac90:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dac94:	e9cd 3603 	strd	r3, r6, [sp, #12]
   dac98:	f7ff fdec 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   dac9c:	f001 fecc 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   daca0:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
}
   daca4:	e7e9      	b.n	dac7a <_ZN11SleepHelper17stateHandlerSleepEv+0xba>
   daca6:	bf00      	nop
   daca8:	000e4590 	.word	0x000e4590
   dacac:	000e45a2 	.word	0x000e45a2
   dacb0:	000db05d 	.word	0x000db05d
   dacb4:	000e45c6 	.word	0x000e45c6
   dacb8:	00010002 	.word	0x00010002
   dacbc:	000da9b1 	.word	0x000da9b1

000dacc0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dacc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
            if (succeeded) {
   dacc4:	780b      	ldrb	r3, [r1, #0]
   dacc6:	4605      	mov	r5, r0
   dacc8:	b373      	cbz	r3, dad28 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x68>
                appLog.info("removing item from publishData");
   dacca:	6800      	ldr	r0, [r0, #0]
   daccc:	491d      	ldr	r1, [pc, #116]	; (dad44 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x84>)
   dacce:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dacd2:	f7f9 fb63 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            [this](bool succeeded, const char *event_name, const char *event_data, const void *event_context) {
   dacd6:	682f      	ldr	r7, [r5, #0]
      : _M_current(__i) { }
   dacd8:	f8d7 4780 	ldr.w	r4, [r7, #1920]	; 0x780
   dacdc:	f8d7 3784 	ldr.w	r3, [r7, #1924]	; 0x784
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
   dace0:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (__position + 1 != end())
   dace4:	429a      	cmp	r2, r3
   dace6:	d018      	beq.n	dad1a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dace8:	4e17      	ldr	r6, [pc, #92]	; (dad48 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x88>)
   dacea:	1a9b      	subs	r3, r3, r2
   dacec:	109b      	asrs	r3, r3, #2
   dacee:	435e      	muls	r6, r3
   dacf0:	2e00      	cmp	r6, #0
   dacf2:	dd12      	ble.n	dad1a <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x5a>
    class PublishData {
   dacf4:	f104 0824 	add.w	r8, r4, #36	; 0x24
   dacf8:	4641      	mov	r1, r8
   dacfa:	4620      	mov	r0, r4
   dacfc:	f004 ff55 	bl	dfbaa <_ZN6StringaSEOS_>
   dad00:	f104 0134 	add.w	r1, r4, #52	; 0x34
   dad04:	f104 0010 	add.w	r0, r4, #16
   dad08:	f004 ff4f 	bl	dfbaa <_ZN6StringaSEOS_>
   dad0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   dad10:	f884 3020 	strb.w	r3, [r4, #32]
   dad14:	3e01      	subs	r6, #1
	      ++__result;
   dad16:	4644      	mov	r4, r8
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dad18:	e7ea      	b.n	dacf0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x30>
      --this->_M_impl._M_finish;
   dad1a:	f8d7 0784 	ldr.w	r0, [r7, #1924]	; 0x784
   dad1e:	3824      	subs	r0, #36	; 0x24
   dad20:	f8c7 0784 	str.w	r0, [r7, #1924]	; 0x784

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   dad24:	f7ff f871 	bl	d9e0a <_ZN11SleepHelper11PublishDataD1Ev>
            stateHandler = &SleepHelper::stateHandlerPublishRateLimit;
   dad28:	6828      	ldr	r0, [r5, #0]
   dad2a:	4b08      	ldr	r3, [pc, #32]	; (dad4c <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN11SleepHelper21stateHandlerConnectedEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_+0x8c>)
   dad2c:	9300      	str	r3, [sp, #0]
   dad2e:	4669      	mov	r1, sp
   dad30:	2300      	movs	r3, #0
   dad32:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   dad36:	9301      	str	r3, [sp, #4]
   dad38:	f7ff fd9c 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
      }
   dad3c:	b002      	add	sp, #8
   dad3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dad42:	bf00      	nop
   dad44:	000e45e3 	.word	0x000e45e3
   dad48:	38e38e39 	.word	0x38e38e39
   dad4c:	000da8e5 	.word	0x000da8e5

000dad50 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   dad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_My_handler::_M_not_empty_function(__f))
   dad52:	688b      	ldr	r3, [r1, #8]
    _Function_base() : _M_manager(nullptr) { }
   dad54:	2700      	movs	r7, #0
      function<_Res(_ArgTypes...)>::
   dad56:	4606      	mov	r6, r0
   dad58:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
   dad5a:	6087      	str	r7, [r0, #8]
	if (_My_handler::_M_not_empty_function(__f))
   dad5c:	b1b3      	cbz	r3, dad8c <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x3c>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad5e:	2010      	movs	r0, #16
   dad60:	f7f9 f999 	bl	d4096 <_Znwj>
   dad64:	4604      	mov	r4, r0
   dad66:	b160      	cbz	r0, dad82 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x32>
    _Function_base() : _M_manager(nullptr) { }
   dad68:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dad6a:	4601      	mov	r1, r0
   dad6c:	4628      	mov	r0, r5
   dad6e:	f7fa f83e 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad72:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   dad74:	68a2      	ldr	r2, [r4, #8]
   dad76:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dad78:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dad7a:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dad7c:	68eb      	ldr	r3, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dad7e:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dad80:	60ea      	str	r2, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   dad82:	4b03      	ldr	r3, [pc, #12]	; (dad90 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x40>)
   dad84:	60f3      	str	r3, [r6, #12]
	    _M_manager = &_My_handler::_M_manager;
   dad86:	4b03      	ldr	r3, [pc, #12]	; (dad94 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_+0x44>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dad88:	6034      	str	r4, [r6, #0]
	    _M_manager = &_My_handler::_M_manager;
   dad8a:	60b3      	str	r3, [r6, #8]
      }
   dad8c:	4630      	mov	r0, r6
   dad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dad90:	000d9959 	.word	0x000d9959
   dad94:	000da60f 	.word	0x000da60f

000dad98 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   dad98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dad9c:	4607      	mov	r7, r0
   dad9e:	4688      	mov	r8, r1
   dada0:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   dada2:	4615      	mov	r5, r2
   dada4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   dada6:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   dadaa:	4544      	cmp	r4, r8
   dadac:	d014      	beq.n	dadd8 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dadae:	b16d      	cbz	r5, dadcc <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x34>
   dadb0:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   dadb4:	4629      	mov	r1, r5
   dadb6:	4620      	mov	r0, r4
   dadb8:	f7fa f819 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadbc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dadbe:	68aa      	ldr	r2, [r5, #8]
   dadc0:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dadc2:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dadc4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dadc6:	68ea      	ldr	r2, [r5, #12]
   dadc8:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dadca:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   dadcc:	4620      	mov	r0, r4
   dadce:	f7f9 fe55 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dadd2:	3410      	adds	r4, #16
   dadd4:	3510      	adds	r5, #16
   dadd6:	e7e8      	b.n	dadaa <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0+0x12>
      return __cur;
   dadd8:	1be0      	subs	r0, r4, r7
    }
   dadda:	4430      	add	r0, r6
   daddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dade0 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   dade0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dade4:	4607      	mov	r7, r0
   dade6:	4688      	mov	r8, r1
   dade8:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   dadea:	4615      	mov	r5, r2
   dadec:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   dadee:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   dadf2:	4544      	cmp	r4, r8
   dadf4:	d014      	beq.n	dae20 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x40>
   dadf6:	b16d      	cbz	r5, dae14 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x34>
   dadf8:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   dadfc:	4629      	mov	r1, r5
   dadfe:	4620      	mov	r0, r4
   dae00:	f7f9 fff5 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae04:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dae06:	68aa      	ldr	r2, [r5, #8]
   dae08:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dae0a:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae0c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dae0e:	68ea      	ldr	r2, [r5, #12]
   dae10:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dae12:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   dae14:	4620      	mov	r0, r4
   dae16:	f7f9 fe31 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dae1a:	3410      	adds	r4, #16
   dae1c:	3510      	adds	r5, #16
   dae1e:	e7e8      	b.n	dadf2 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0+0x12>
      return __cur;
   dae20:	1be0      	subs	r0, r4, r7
    }
   dae22:	4430      	add	r0, r6
   dae24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dae28 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   dae28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dae2c:	4607      	mov	r7, r0
   dae2e:	4688      	mov	r8, r1
   dae30:	4616      	mov	r6, r2
      _ForwardIterator __cur = __result;
   dae32:	4615      	mov	r5, r2
   dae34:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   dae36:	f04f 0900 	mov.w	r9, #0
      for (; __first != __last; ++__first, (void)++__cur)
   dae3a:	4544      	cmp	r4, r8
   dae3c:	d014      	beq.n	dae68 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x40>
   dae3e:	b16d      	cbz	r5, dae5c <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x34>
   dae40:	f8c5 9008 	str.w	r9, [r5, #8]
	std::swap(_M_functor, __x._M_functor);
   dae44:	4629      	mov	r1, r5
   dae46:	4620      	mov	r0, r4
   dae48:	f7f9 ffd1 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae4c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   dae4e:	68aa      	ldr	r2, [r5, #8]
   dae50:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dae52:	60ab      	str	r3, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dae54:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   dae56:	68ea      	ldr	r2, [r5, #12]
   dae58:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dae5a:	60eb      	str	r3, [r5, #12]
    class function<_Res(_ArgTypes...)>
   dae5c:	4620      	mov	r0, r4
   dae5e:	f7f9 fe0d 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dae62:	3410      	adds	r4, #16
   dae64:	3510      	adds	r5, #16
   dae66:	e7e8      	b.n	dae3a <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0+0x12>
      return __cur;
   dae68:	1be0      	subs	r0, r4, r7
    }
   dae6a:	4430      	add	r0, r6
   dae6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dae70 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>:
      vector<_Tp, _Alloc>::
   dae70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dae74:	e9d0 7900 	ldrd	r7, r9, [r0]
   dae78:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   dae7a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   dae7e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dae80:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   dae84:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   dae88:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dae8a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   dae8e:	d102      	bne.n	dae96 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   dae90:	481a      	ldr	r0, [pc, #104]	; (daefc <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x8c>)
   dae92:	f005 fc72 	bl	e077a <_ZSt20__throw_length_errorPKc>
   dae96:	2c01      	cmp	r4, #1
   dae98:	4622      	mov	r2, r4
   dae9a:	bf38      	it	cc
   dae9c:	2201      	movcc	r2, #1
   dae9e:	18a4      	adds	r4, r4, r2
   daea0:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   daea4:	d228      	bcs.n	daef8 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   daea6:	b14c      	cbz	r4, daebc <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4c>
   daea8:	429c      	cmp	r4, r3
   daeaa:	bf28      	it	cs
   daeac:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   daeae:	0120      	lsls	r0, r4, #4
   daeb0:	9101      	str	r1, [sp, #4]
   daeb2:	f7f9 f8f0 	bl	d4096 <_Znwj>
   daeb6:	9901      	ldr	r1, [sp, #4]
   daeb8:	4605      	mov	r5, r0
   daeba:	e000      	b.n	daebe <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x4e>
   daebc:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   daebe:	eb15 000a 	adds.w	r0, r5, sl
   daec2:	d001      	beq.n	daec8 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x58>
   daec4:	f7ff fb94 	bl	da5f0 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
      return __relocate_a_1(std::__niter_base(__first),
   daec8:	4641      	mov	r1, r8
   daeca:	462a      	mov	r2, r5
   daecc:	4638      	mov	r0, r7
   daece:	f7ff ffab 	bl	dae28 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   daed2:	4649      	mov	r1, r9
   daed4:	f100 0210 	add.w	r2, r0, #16
   daed8:	4640      	mov	r0, r8
   daeda:	f7ff ffa5 	bl	dae28 <_ZSt14__relocate_a_1IPSt8functionIFbRN5spark10JSONWriterERiEES7_SaIS6_EET0_T_SA_S9_RT1_.isra.0>
   daede:	4680      	mov	r8, r0
	if (__p)
   daee0:	b117      	cbz	r7, daee8 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x78>
	::operator delete(__p);
   daee2:	4638      	mov	r0, r7
   daee4:	f7f9 f8db 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   daee8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   daeec:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   daef0:	60b4      	str	r4, [r6, #8]
    }
   daef2:	b002      	add	sp, #8
   daef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   daef8:	461c      	mov	r4, r3
   daefa:	e7d8      	b.n	daeae <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_+0x3e>
   daefc:	000e3bdc 	.word	0x000e3bdc

000daf00 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>:
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   daf00:	b570      	push	{r4, r5, r6, lr}
        if ((eventsEnabled & flag) != 0) {
   daf02:	f8d0 4794 	ldr.w	r4, [r0, #1940]	; 0x794
   daf06:	f8d0 6790 	ldr.w	r6, [r0, #1936]	; 0x790
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   daf0a:	4605      	mov	r5, r0
        if ((eventsEnabled & flag) != 0) {
   daf0c:	ea03 0104 	and.w	r1, r3, r4
   daf10:	ea02 0006 	and.w	r0, r2, r6
   daf14:	4301      	orrs	r1, r0
    SleepHelper &withWakeEventFlagOneTimeFunction(uint64_t flag, std::function<void(JSONWriter &, int &)> fn) {
   daf16:	b08e      	sub	sp, #56	; 0x38
        if ((eventsEnabled & flag) != 0) {
   daf18:	d03f      	beq.n	daf9a <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x9a>
            });
   daf1a:	9912      	ldr	r1, [sp, #72]	; 0x48
   daf1c:	a80a      	add	r0, sp, #40	; 0x28
   daf1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   daf22:	2600      	movs	r6, #0
   daf24:	f7ff fbd6 	bl	da6d4 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1ERKS5_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daf28:	2018      	movs	r0, #24
    _Function_base() : _M_manager(nullptr) { }
   daf2a:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daf2c:	f7f9 f8b3 	bl	d4096 <_Znwj>
   daf30:	4604      	mov	r4, r0
   daf32:	b188      	cbz	r0, daf58 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x58>
            wakeEventFunctions.withOneTimeCallback([flag, fn](JSONWriter &writer, int &priority) {
   daf34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
   daf38:	6106      	str	r6, [r0, #16]
   daf3a:	e9c0 2300 	strd	r2, r3, [r0]
	std::swap(_M_functor, __x._M_functor);
   daf3e:	f100 0108 	add.w	r1, r0, #8
   daf42:	a80a      	add	r0, sp, #40	; 0x28
   daf44:	f7f9 ff53 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daf48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
   daf4a:	6922      	ldr	r2, [r4, #16]
   daf4c:	920c      	str	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   daf4e:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   daf50:	6962      	ldr	r2, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daf52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   daf54:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   daf56:	920d      	str	r2, [sp, #52]	; 0x34
	    _M_invoker = &_My_handler::_M_invoke;
   daf58:	4b15      	ldr	r3, [pc, #84]	; (dafb0 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb0>)
   daf5a:	9303      	str	r3, [sp, #12]
            oneTimeCallbacks.add(fn); 
   daf5c:	4669      	mov	r1, sp
	    _M_manager = &_My_handler::_M_manager;
   daf5e:	4b15      	ldr	r3, [pc, #84]	; (dafb4 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xb4>)
   daf60:	9302      	str	r3, [sp, #8]
   daf62:	a804      	add	r0, sp, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   daf64:	9400      	str	r4, [sp, #0]
   daf66:	f7ff fb43 	bl	da5f0 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   daf6a:	f8d5 0748 	ldr.w	r0, [r5, #1864]	; 0x748
   daf6e:	f8d5 374c 	ldr.w	r3, [r5, #1868]	; 0x74c
   daf72:	4298      	cmp	r0, r3
   daf74:	d014      	beq.n	dafa0 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0xa0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   daf76:	b110      	cbz	r0, daf7e <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x7e>
   daf78:	a904      	add	r1, sp, #16
   daf7a:	f7ff fb39 	bl	da5f0 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
	    ++this->_M_impl._M_finish;
   daf7e:	f8d5 3748 	ldr.w	r3, [r5, #1864]	; 0x748
   daf82:	3310      	adds	r3, #16
   daf84:	f8c5 3748 	str.w	r3, [r5, #1864]	; 0x748
    class function<_Res(_ArgTypes...)>
   daf88:	a804      	add	r0, sp, #16
   daf8a:	f7f9 fd77 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   daf8e:	4668      	mov	r0, sp
   daf90:	f7f9 fd74 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   daf94:	a80a      	add	r0, sp, #40	; 0x28
   daf96:	f7f9 fd71 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    }
   daf9a:	4628      	mov	r0, r5
   daf9c:	b00e      	add	sp, #56	; 0x38
   daf9e:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   dafa0:	4601      	mov	r1, r0
   dafa2:	aa04      	add	r2, sp, #16
   dafa4:	f205 7044 	addw	r0, r5, #1860	; 0x744
   dafa8:	f7ff ff62 	bl	dae70 <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EE17_M_realloc_insertIJRKS6_EEEvN9__gnu_cxx17__normal_iteratorIPS6_S8_EEDpOT_>
   dafac:	e7ec      	b.n	daf88 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE+0x88>
   dafae:	bf00      	nop
   dafb0:	000da6a5 	.word	0x000da6a5
   dafb4:	000da6f3 	.word	0x000da6f3

000dafb8 <_ZN11SleepHelper26stateHandlerConnectedStartEv>:
void SleepHelper::stateHandlerConnectedStart() {
   dafb8:	b530      	push	{r4, r5, lr}
   dafba:	b087      	sub	sp, #28
   dafbc:	4604      	mov	r4, r0
   dafbe:	f001 fd3b 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    connectedStartMillis = millis();
   dafc2:	f8c4 07c8 	str.w	r0, [r4, #1992]	; 0x7c8
    SleepHelper::instance().persistentData.setValue_lastFullWake(Time.now());
   dafc6:	f7ff fa3f 	bl	da448 <_ZN11SleepHelper8instanceEv>
   dafca:	4605      	mov	r5, r0
   dafcc:	f005 f8b1 	bl	e0132 <_ZN9TimeClass3nowEv>
            setValue<uint32_t>(offsetof(SleepHelperData, lastFullWake), (uint32_t)value);
   dafd0:	2114      	movs	r1, #20
   dafd2:	4602      	mov	r2, r0
   dafd4:	f505 60bd 	add.w	r0, r5, #1512	; 0x5e8
   dafd8:	f7ff fae0 	bl	da59c <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   dafdc:	f8d4 27bc 	ldr.w	r2, [r4, #1980]	; 0x7bc
   dafe0:	f8d4 57c8 	ldr.w	r5, [r4, #1992]	; 0x7c8
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   dafe4:	4917      	ldr	r1, [pc, #92]	; (db044 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x8c>)
    system_tick_t elapsedMs = connectedStartMillis - connectAttemptStartMillis;
   dafe6:	1aad      	subs	r5, r5, r2
    appLog.info("connected to cloud in %lu ms", elapsedMs);
   dafe8:	462a      	mov	r2, r5
   dafea:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dafee:	f7f9 f9d5 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
	    _M_invoker = &_My_handler::_M_invoke;
   daff2:	4b15      	ldr	r3, [pc, #84]	; (db048 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x90>)
   daff4:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   daff6:	4b15      	ldr	r3, [pc, #84]	; (db04c <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x94>)
   daff8:	9304      	str	r3, [sp, #16]
    });
   daffa:	ab02      	add	r3, sp, #8
   daffc:	9300      	str	r3, [sp, #0]
   daffe:	2202      	movs	r2, #2
   db000:	2300      	movs	r3, #0
   db002:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db004:	9502      	str	r5, [sp, #8]
   db006:	f7ff ff7b 	bl	daf00 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db00a:	a802      	add	r0, sp, #8
   db00c:	f7f9 fd36 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   db010:	4b0f      	ldr	r3, [pc, #60]	; (db050 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x98>)
   db012:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   db014:	4b0f      	ldr	r3, [pc, #60]	; (db054 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0x9c>)
   db016:	9304      	str	r3, [sp, #16]
    });
   db018:	ab02      	add	r3, sp, #8
   db01a:	2208      	movs	r2, #8
   db01c:	9300      	str	r3, [sp, #0]
   db01e:	4620      	mov	r0, r4
   db020:	2300      	movs	r3, #0
   db022:	f7ff ff6d 	bl	daf00 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db026:	a802      	add	r0, sp, #8
   db028:	f7f9 fd28 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    stateHandler = &SleepHelper::stateHandlerConnectedWakeEvents;
   db02c:	4b0a      	ldr	r3, [pc, #40]	; (db058 <_ZN11SleepHelper26stateHandlerConnectedStartEv+0xa0>)
   db02e:	9302      	str	r3, [sp, #8]
   db030:	a902      	add	r1, sp, #8
   db032:	2300      	movs	r3, #0
   db034:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   db038:	9303      	str	r3, [sp, #12]
   db03a:	f7ff fc1b 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   db03e:	b007      	add	sp, #28
   db040:	bd30      	pop	{r4, r5, pc}
   db042:	bf00      	nop
   db044:	000e4602 	.word	0x000e4602
   db048:	000d9977 	.word	0x000d9977
   db04c:	000d9879 	.word	0x000d9879
   db050:	000d9a49 	.word	0x000d9a49
   db054:	000d9891 	.word	0x000d9891
   db058:	000dc2b9 	.word	0x000dc2b9

000db05c <_ZN11SleepHelper21stateHandlerSleepDoneEv>:
void SleepHelper::stateHandlerSleepDone() {
   db05c:	b5f0      	push	{r4, r5, r6, r7, lr}
   db05e:	b087      	sub	sp, #28
   db060:	4604      	mov	r4, r0
    stateHandler = &SleepHelper::stateHandlerStart;
   db062:	4b14      	ldr	r3, [pc, #80]	; (db0b4 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x58>)
   db064:	9302      	str	r3, [sp, #8]
   db066:	ae02      	add	r6, sp, #8
   db068:	2300      	movs	r3, #0
   db06a:	4631      	mov	r1, r6
   db06c:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   db070:	9303      	str	r3, [sp, #12]
   db072:	f7ff fbff 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
    wakeOrBootFunctions.forEach(wakeReasonInt);
   db076:	f8d4 777c 	ldr.w	r7, [r4, #1916]	; 0x77c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db07a:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   db07e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   db082:	42ab      	cmp	r3, r5
   db084:	d005      	beq.n	db092 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x36>
                (*it)(args...);
   db086:	4628      	mov	r0, r5
   db088:	4639      	mov	r1, r7
   db08a:	f7ff fbe7 	bl	da85c <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   db08e:	3510      	adds	r5, #16
	return *this;
   db090:	e7f5      	b.n	db07e <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x22>
	    _M_invoker = &_My_handler::_M_invoke;
   db092:	4b09      	ldr	r3, [pc, #36]	; (db0b8 <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x5c>)
   db094:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   db096:	4b09      	ldr	r3, [pc, #36]	; (db0bc <_ZN11SleepHelper21stateHandlerSleepDoneEv+0x60>)
   db098:	9304      	str	r3, [sp, #16]
    });     
   db09a:	2201      	movs	r2, #1
   db09c:	2300      	movs	r3, #0
   db09e:	9600      	str	r6, [sp, #0]
   db0a0:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db0a2:	9402      	str	r4, [sp, #8]
   db0a4:	f7ff ff2c 	bl	daf00 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db0a8:	4630      	mov	r0, r6
   db0aa:	f7f9 fce7 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
}
   db0ae:	b007      	add	sp, #28
   db0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db0b2:	bf00      	nop
   db0b4:	000da9e1 	.word	0x000da9e1
   db0b8:	000d9a11 	.word	0x000d9a11
   db0bc:	000d98b3 	.word	0x000d98b3

000db0c0 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db0c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db0c4:	e9d0 7900 	ldrd	r7, r9, [r0]
   db0c8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db0ca:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db0ce:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db0d0:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db0d4:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db0d8:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db0da:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db0de:	d102      	bne.n	db0e6 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db0e0:	481a      	ldr	r0, [pc, #104]	; (db14c <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>)
   db0e2:	f005 fb4a 	bl	e077a <_ZSt20__throw_length_errorPKc>
   db0e6:	2c01      	cmp	r4, #1
   db0e8:	4622      	mov	r2, r4
   db0ea:	bf38      	it	cc
   db0ec:	2201      	movcc	r2, #1
   db0ee:	18a4      	adds	r4, r4, r2
   db0f0:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db0f4:	d228      	bcs.n	db148 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db0f6:	b14c      	cbz	r4, db10c <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   db0f8:	429c      	cmp	r4, r3
   db0fa:	bf28      	it	cs
   db0fc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db0fe:	0120      	lsls	r0, r4, #4
   db100:	9101      	str	r1, [sp, #4]
   db102:	f7f8 ffc8 	bl	d4096 <_Znwj>
   db106:	9901      	ldr	r1, [sp, #4]
   db108:	4605      	mov	r5, r0
   db10a:	e000      	b.n	db10e <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   db10c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db10e:	eb15 000a 	adds.w	r0, r5, sl
   db112:	d001      	beq.n	db118 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x58>
   db114:	f7ff fa9f 	bl	da656 <_ZNSt8functionIFbvEEC1ERKS1_>
   db118:	4641      	mov	r1, r8
   db11a:	462a      	mov	r2, r5
   db11c:	4638      	mov	r0, r7
   db11e:	f7ff fe5f 	bl	dade0 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db122:	4649      	mov	r1, r9
   db124:	f100 0210 	add.w	r2, r0, #16
   db128:	4640      	mov	r0, r8
   db12a:	f7ff fe59 	bl	dade0 <_ZSt14__relocate_a_1IPSt8functionIFbvEES3_SaIS2_EET0_T_S6_S5_RT1_.isra.0>
   db12e:	4680      	mov	r8, r0
	if (__p)
   db130:	b117      	cbz	r7, db138 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x78>
	::operator delete(__p);
   db132:	4638      	mov	r0, r7
   db134:	f7f8 ffb3 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db138:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db13c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db140:	60b4      	str	r4, [r6, #8]
    }
   db142:	b002      	add	sp, #8
   db144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db148:	461c      	mov	r4, r3
   db14a:	e7d8      	b.n	db0fe <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   db14c:	000e3bdc 	.word	0x000e3bdc

000db150 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db150:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db154:	e9d0 7900 	ldrd	r7, r9, [r0]
   db158:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
   db15a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   db15e:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db160:	eba9 0207 	sub.w	r2, r9, r7
	if (max_size() - size() < __n)
   db164:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   db168:	4606      	mov	r6, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db16a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   db16e:	d102      	bne.n	db176 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db170:	481a      	ldr	r0, [pc, #104]	; (db1dc <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x8c>)
   db172:	f005 fb02 	bl	e077a <_ZSt20__throw_length_errorPKc>
   db176:	2c01      	cmp	r4, #1
   db178:	4622      	mov	r2, r4
   db17a:	bf38      	it	cc
   db17c:	2201      	movcc	r2, #1
   db17e:	18a4      	adds	r4, r4, r2
   db180:	eba8 0a07 	sub.w	sl, r8, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db184:	d228      	bcs.n	db1d8 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x88>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db186:	b14c      	cbz	r4, db19c <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4c>
   db188:	429c      	cmp	r4, r3
   db18a:	bf28      	it	cs
   db18c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db18e:	0120      	lsls	r0, r4, #4
   db190:	9101      	str	r1, [sp, #4]
   db192:	f7f8 ff80 	bl	d4096 <_Znwj>
   db196:	9901      	ldr	r1, [sp, #4]
   db198:	4605      	mov	r5, r0
   db19a:	e000      	b.n	db19e <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4e>
   db19c:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db19e:	eb15 000a 	adds.w	r0, r5, sl
   db1a2:	d001      	beq.n	db1a8 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x58>
   db1a4:	f7ff fa66 	bl	da674 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
   db1a8:	4641      	mov	r1, r8
   db1aa:	462a      	mov	r2, r5
   db1ac:	4638      	mov	r0, r7
   db1ae:	f7ff fdf3 	bl	dad98 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   db1b2:	4649      	mov	r1, r9
   db1b4:	f100 0210 	add.w	r2, r0, #16
   db1b8:	4640      	mov	r0, r8
   db1ba:	f7ff fded 	bl	dad98 <_ZSt14__relocate_a_1IPSt8functionIFbRiS1_EES4_SaIS3_EET0_T_S7_S6_RT1_.isra.0>
   db1be:	4680      	mov	r8, r0
	if (__p)
   db1c0:	b117      	cbz	r7, db1c8 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x78>
	::operator delete(__p);
   db1c2:	4638      	mov	r0, r7
   db1c4:	f7f8 ff6b 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db1c8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   db1cc:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db1d0:	60b4      	str	r4, [r6, #8]
    }
   db1d2:	b002      	add	sp, #8
   db1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db1d8:	461c      	mov	r4, r3
   db1da:	e7d8      	b.n	db18e <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x3e>
   db1dc:	000e3bdc 	.word	0x000e3bdc

000db1e0 <_ZN11SleepHelper18PersistentDataFile5setupEv>:
void SleepHelper::PersistentDataFile::setup() {
   db1e0:	b530      	push	{r4, r5, lr}
   db1e2:	b089      	sub	sp, #36	; 0x24
   db1e4:	4605      	mov	r5, r0
    SleepHelper::PersistentDataBase::setup();
   db1e6:	f7fe fb27 	bl	d9838 <_ZN11SleepHelper18PersistentDataBase5setupEv>
    SleepHelper::instance().withLoopFunction([this]() {
   db1ea:	f7ff f92d 	bl	da448 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   db1ee:	4b28      	ldr	r3, [pc, #160]	; (db290 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb0>)
   db1f0:	9303      	str	r3, [sp, #12]
   db1f2:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   db1f4:	4b27      	ldr	r3, [pc, #156]	; (db294 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb4>)
   db1f6:	9302      	str	r3, [sp, #8]
        loopFunctions.add(fn); 
   db1f8:	4669      	mov	r1, sp
   db1fa:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db1fc:	9500      	str	r5, [sp, #0]
   db1fe:	f7ff fa2a 	bl	da656 <_ZNSt8functionIFbvEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db202:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
   db206:	f8d4 36ac 	ldr.w	r3, [r4, #1708]	; 0x6ac
   db20a:	4298      	cmp	r0, r3
   db20c:	d031      	beq.n	db272 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x92>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db20e:	b110      	cbz	r0, db216 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x36>
   db210:	a904      	add	r1, sp, #16
   db212:	f7ff fa20 	bl	da656 <_ZNSt8functionIFbvEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db216:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   db21a:	3310      	adds	r3, #16
   db21c:	f8c4 36a8 	str.w	r3, [r4, #1704]	; 0x6a8
    class function<_Res(_ArgTypes...)>
   db220:	a804      	add	r0, sp, #16
   db222:	f7f9 fc2b 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   db226:	4668      	mov	r0, sp
   db228:	f7f9 fc28 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
    SleepHelper::instance().withSleepOrResetFunction([this](bool) {
   db22c:	f7ff f90c 	bl	da448 <_ZN11SleepHelper8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   db230:	4b19      	ldr	r3, [pc, #100]	; (db298 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xb8>)
   db232:	9303      	str	r3, [sp, #12]
   db234:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   db236:	4b19      	ldr	r3, [pc, #100]	; (db29c <_ZN11SleepHelper18PersistentDataFile5setupEv+0xbc>)
   db238:	9302      	str	r3, [sp, #8]
        sleepOrResetFunctions.add(fn); 
   db23a:	4669      	mov	r1, sp
   db23c:	a804      	add	r0, sp, #16
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db23e:	9500      	str	r5, [sp, #0]
   db240:	f7f9 fdb7 	bl	d4db2 <_ZNSt8functionIFbbEEC1ERKS1_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db244:	f8d4 06fc 	ldr.w	r0, [r4, #1788]	; 0x6fc
   db248:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   db24c:	4298      	cmp	r0, r3
   db24e:	d017      	beq.n	db280 <_ZN11SleepHelper18PersistentDataFile5setupEv+0xa0>
   db250:	b110      	cbz	r0, db258 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x78>
   db252:	a904      	add	r1, sp, #16
   db254:	f7f9 fdad 	bl	d4db2 <_ZNSt8functionIFbbEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db258:	f8d4 36fc 	ldr.w	r3, [r4, #1788]	; 0x6fc
   db25c:	3310      	adds	r3, #16
   db25e:	f8c4 36fc 	str.w	r3, [r4, #1788]	; 0x6fc
    class function<_Res(_ArgTypes...)>
   db262:	a804      	add	r0, sp, #16
   db264:	f7f9 fc0a 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   db268:	4668      	mov	r0, sp
   db26a:	f7f9 fc07 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
}
   db26e:	b009      	add	sp, #36	; 0x24
   db270:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   db272:	4601      	mov	r1, r0
   db274:	aa04      	add	r2, sp, #16
   db276:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   db27a:	f7ff ff21 	bl	db0c0 <_ZNSt6vectorISt8functionIFbvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   db27e:	e7cf      	b.n	db220 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x40>
   db280:	4601      	mov	r1, r0
   db282:	aa04      	add	r2, sp, #16
   db284:	f504 60df 	add.w	r0, r4, #1784	; 0x6f8
   db288:	f7fa f828 	bl	d52dc <_ZNSt6vectorISt8functionIFbbEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   db28c:	e7e9      	b.n	db262 <_ZN11SleepHelper18PersistentDataFile5setupEv+0x82>
   db28e:	bf00      	nop
   db290:	000d99e3 	.word	0x000d99e3
   db294:	000d98cb 	.word	0x000d98cb
   db298:	000d99f3 	.word	0x000d99f3
   db29c:	000d98e3 	.word	0x000d98e3

000db2a0 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
   db2a0:	b538      	push	{r3, r4, r5, lr}
   db2a2:	4603      	mov	r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db2a4:	e9d3 3500 	ldrd	r3, r5, [r3]
   db2a8:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
   db2aa:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db2ae:	112c      	asrs	r4, r5, #4
	if (max_size() - size() < __n)
   db2b0:	eba3 1525 	sub.w	r5, r3, r5, asr #4
   db2b4:	428d      	cmp	r5, r1
      _M_check_len(size_type __n, const char* __s) const
   db2b6:	4610      	mov	r0, r2
	if (max_size() - size() < __n)
   db2b8:	d201      	bcs.n	db2be <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
   db2ba:	f005 fa5e 	bl	e077a <_ZSt20__throw_length_errorPKc>
   db2be:	42a1      	cmp	r1, r4
   db2c0:	bf38      	it	cc
   db2c2:	4621      	movcc	r1, r4
   db2c4:	1860      	adds	r0, r4, r1
   db2c6:	d203      	bcs.n	db2d0 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x30>
   db2c8:	4298      	cmp	r0, r3
   db2ca:	bf28      	it	cs
   db2cc:	4618      	movcs	r0, r3
      }
   db2ce:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db2d0:	4618      	mov	r0, r3
   db2d2:	e7fc      	b.n	db2ce <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc+0x2e>

000db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>:
        class EventInfo {
   db2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db2d8:	460e      	mov	r6, r1
   db2da:	4605      	mov	r5, r0
   db2dc:	f004 fc5a 	bl	dfb94 <_ZN6StringC1ERKS_>
   db2e0:	6933      	ldr	r3, [r6, #16]
   db2e2:	612b      	str	r3, [r5, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db2e4:	e9d6 3705 	ldrd	r3, r7, [r6, #20]
   db2e8:	1aff      	subs	r7, r7, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db2ea:	1138      	asrs	r0, r7, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
   db2ec:	f04f 0300 	mov.w	r3, #0
   db2f0:	e9c5 3305 	strd	r3, r3, [r5, #20]
   db2f4:	61eb      	str	r3, [r5, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db2f6:	d001      	beq.n	db2fc <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x28>
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
   db2f8:	f7fe fbf1 	bl	d9ade <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   db2fc:	e9c5 0005 	strd	r0, r0, [r5, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   db300:	4407      	add	r7, r0
   db302:	61ef      	str	r7, [r5, #28]
   db304:	e9d6 9705 	ldrd	r9, r7, [r6, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db308:	4604      	mov	r4, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   db30a:	464e      	mov	r6, r9
	  _ForwardIterator __cur = __result;
   db30c:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   db30e:	42b7      	cmp	r7, r6
   db310:	d00a      	beq.n	db328 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x54>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db312:	f1b8 0f00 	cmp.w	r8, #0
   db316:	d003      	beq.n	db320 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x4c>
   db318:	4631      	mov	r1, r6
   db31a:	4640      	mov	r0, r8
   db31c:	f004 fc3a 	bl	dfb94 <_ZN6StringC1ERKS_>
   db320:	f108 0810 	add.w	r8, r8, #16
   db324:	3610      	adds	r6, #16
   db326:	e7f2      	b.n	db30e <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_+0x3a>
	this->_M_impl._M_finish =
   db328:	eba7 0709 	sub.w	r7, r7, r9
   db32c:	443c      	add	r4, r7
   db32e:	61ac      	str	r4, [r5, #24]
   db330:	4628      	mov	r0, r5
   db332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000db338 <_ZN11SleepHelper5setupEv>:
void SleepHelper::setup() {
   db338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db33c:	b08a      	sub	sp, #40	; 0x28
        int reason = RESET_REASON_NONE;
   db33e:	2300      	movs	r3, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   db340:	ad06      	add	r5, sp, #24
   db342:	4604      	mov	r4, r0
   db344:	461a      	mov	r2, r3
   db346:	4619      	mov	r1, r3
   db348:	4628      	mov	r0, r5
        int reason = RESET_REASON_NONE;
   db34a:	9306      	str	r3, [sp, #24]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   db34c:	f001 fb54 	bl	dc9f8 <HAL_Core_Get_Last_Reset_Info>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   db350:	4a3e      	ldr	r2, [pc, #248]	; (db44c <_ZN11SleepHelper5setupEv+0x114>)
   db352:	483f      	ldr	r0, [pc, #252]	; (db450 <_ZN11SleepHelper5setupEv+0x118>)
        return reason;
   db354:	f8dd 8018 	ldr.w	r8, [sp, #24]
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   db358:	2300      	movs	r3, #0
   db35a:	2100      	movs	r1, #0
   db35c:	f001 fdae 	bl	dcebc <system_subscribe_event>
        return scheduleManager.getScheduleByName("quick");
   db360:	f504 66c7 	add.w	r6, r4, #1592	; 0x638
    persistentData.setup();
   db364:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   db368:	f7ff ff3a 	bl	db1e0 <_ZN11SleepHelper18PersistentDataFile5setupEv>
   db36c:	4939      	ldr	r1, [pc, #228]	; (db454 <_ZN11SleepHelper5setupEv+0x11c>)
   db36e:	4630      	mov	r0, r6
   db370:	f7fc fff4 	bl	d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        this->flags = flags;
   db374:	2701      	movs	r7, #1
        return scheduleManager.getScheduleByName("data");
   db376:	4938      	ldr	r1, [pc, #224]	; (db458 <_ZN11SleepHelper5setupEv+0x120>)
   db378:	6107      	str	r7, [r0, #16]
   db37a:	4630      	mov	r0, r6
   db37c:	f7fc ffee 	bl	d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
        return scheduleManager.getScheduleByName("full");
   db380:	4936      	ldr	r1, [pc, #216]	; (db45c <_ZN11SleepHelper5setupEv+0x124>)
   db382:	6107      	str	r7, [r0, #16]
   db384:	4630      	mov	r0, r6
   db386:	f7fc ffe9 	bl	d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   db38a:	2302      	movs	r3, #2
   db38c:	6103      	str	r3, [r0, #16]
	BackgroundPublishRK::instance().start();
   db38e:	f7fb fb3d 	bl	d6a0c <_ZN19BackgroundPublishRK8instanceEv>
   db392:	f7fb fc4d 	bl	d6c30 <_ZN19BackgroundPublishRK5startEv>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db396:	f8d4 6698 	ldr.w	r6, [r4, #1688]	; 0x698
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   db39a:	f8d4 369c 	ldr.w	r3, [r4, #1692]	; 0x69c
   db39e:	42b3      	cmp	r3, r6
   db3a0:	d004      	beq.n	db3ac <_ZN11SleepHelper5setupEv+0x74>
                (*it)(args...);
   db3a2:	4630      	mov	r0, r6
   db3a4:	f7ff fa51 	bl	da84a <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   db3a8:	3610      	adds	r6, #16
	return *this;
   db3aa:	e7f6      	b.n	db39a <_ZN11SleepHelper5setupEv+0x62>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   db3ac:	f8d4 66ec 	ldr.w	r6, [r4, #1772]	; 0x6ec
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   db3b0:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
   db3b4:	42b3      	cmp	r3, r6
   db3b6:	d006      	beq.n	db3c6 <_ZN11SleepHelper5setupEv+0x8e>
                (*it)(args...);
   db3b8:	4630      	mov	r0, r6
   db3ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   db3be:	f7ff fa4d 	bl	da85c <_ZNKSt8functionIFbiEEclEi>
      operator++() _GLIBCXX_NOEXCEPT
   db3c2:	3610      	adds	r6, #16
	return *this;
   db3c4:	e7f4      	b.n	db3b0 <_ZN11SleepHelper5setupEv+0x78>
	    _M_invoker = &_My_handler::_M_invoke;
   db3c6:	4b26      	ldr	r3, [pc, #152]	; (db460 <_ZN11SleepHelper5setupEv+0x128>)
   db3c8:	9309      	str	r3, [sp, #36]	; 0x24
    });
   db3ca:	4629      	mov	r1, r5
	    _M_manager = &_My_handler::_M_manager;
   db3cc:	4b25      	ldr	r3, [pc, #148]	; (db464 <_ZN11SleepHelper5setupEv+0x12c>)
   db3ce:	9308      	str	r3, [sp, #32]
   db3d0:	4620      	mov	r0, r4
   db3d2:	f7fa f8df 	bl	d5594 <_ZN11SleepHelper22withSleepReadyFunctionESt8functionIFbRNS_16AppCallbackStateEmEE>
    class function<_Res(_ArgTypes...)>
   db3d6:	4628      	mov	r0, r5
   db3d8:	f7f9 fb50 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   db3dc:	4b22      	ldr	r3, [pc, #136]	; (db468 <_ZN11SleepHelper5setupEv+0x130>)
   db3de:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   db3e0:	4b22      	ldr	r3, [pc, #136]	; (db46c <_ZN11SleepHelper5setupEv+0x134>)
   db3e2:	9308      	str	r3, [sp, #32]
    });
   db3e4:	2204      	movs	r2, #4
   db3e6:	2300      	movs	r3, #0
   db3e8:	9500      	str	r5, [sp, #0]
   db3ea:	4620      	mov	r0, r4
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db3ec:	f8cd 8018 	str.w	r8, [sp, #24]
   db3f0:	f7ff fd86 	bl	daf00 <_ZN11SleepHelper32withWakeEventFlagOneTimeFunctionEySt8functionIFvRN5spark10JSONWriterERiEE>
    class function<_Res(_ArgTypes...)>
   db3f4:	4628      	mov	r0, r5
   db3f6:	f7f9 fb41 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
   db3fa:	4b1d      	ldr	r3, [pc, #116]	; (db470 <_ZN11SleepHelper5setupEv+0x138>)
   db3fc:	9305      	str	r3, [sp, #20]
        shouldConnectFunctions.add(fn); 
   db3fe:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   db400:	4b1c      	ldr	r3, [pc, #112]	; (db474 <_ZN11SleepHelper5setupEv+0x13c>)
   db402:	9304      	str	r3, [sp, #16]
   db404:	4628      	mov	r0, r5
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   db406:	9402      	str	r4, [sp, #8]
   db408:	f7ff f934 	bl	da674 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db40c:	f8d4 06e4 	ldr.w	r0, [r4, #1764]	; 0x6e4
   db410:	f8d4 36e8 	ldr.w	r3, [r4, #1768]	; 0x6e8
   db414:	4298      	cmp	r0, r3
   db416:	d011      	beq.n	db43c <_ZN11SleepHelper5setupEv+0x104>
   db418:	b110      	cbz	r0, db420 <_ZN11SleepHelper5setupEv+0xe8>
   db41a:	4629      	mov	r1, r5
   db41c:	f7ff f92a 	bl	da674 <_ZNSt8functionIFbRiS0_EEC1ERKS2_>
	    ++this->_M_impl._M_finish;
   db420:	f8d4 36e4 	ldr.w	r3, [r4, #1764]	; 0x6e4
   db424:	3310      	adds	r3, #16
   db426:	f8c4 36e4 	str.w	r3, [r4, #1764]	; 0x6e4
    class function<_Res(_ArgTypes...)>
   db42a:	4628      	mov	r0, r5
   db42c:	f7f9 fb26 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   db430:	a802      	add	r0, sp, #8
   db432:	f7f9 fb23 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
}
   db436:	b00a      	add	sp, #40	; 0x28
   db438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), __x);
   db43c:	4601      	mov	r1, r0
   db43e:	462a      	mov	r2, r5
   db440:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
   db444:	f7ff fe84 	bl	db150 <_ZNSt6vectorISt8functionIFbRiS1_EESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
   db448:	e7ef      	b.n	db42a <_ZN11SleepHelper5setupEv+0xf2>
   db44a:	bf00      	nop
   db44c:	000da7bb 	.word	0x000da7bb
   db450:	00040b00 	.word	0x00040b00
   db454:	000e461f 	.word	0x000e461f
   db458:	000e4153 	.word	0x000e4153
   db45c:	000e3c32 	.word	0x000e3c32
   db460:	000d9a03 	.word	0x000d9a03
   db464:	000d983f 	.word	0x000d983f
   db468:	000d996d 	.word	0x000d996d
   db46c:	000d9849 	.word	0x000d9849
   db470:	000dc585 	.word	0x000dc585
   db474:	000d9861 	.word	0x000d9861

000db478 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   db478:	b538      	push	{r3, r4, r5, lr}
   db47a:	4604      	mov	r4, r0
   db47c:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   db47e:	42ac      	cmp	r4, r5
   db480:	d004      	beq.n	db48c <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x14>
    { __pointer->~_Tp(); }
   db482:	4620      	mov	r0, r4
   db484:	f004 faf0 	bl	dfa68 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   db488:	3410      	adds	r4, #16
   db48a:	e7f8      	b.n	db47e <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   db48c:	bd38      	pop	{r3, r4, r5, pc}

000db48e <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   db48e:	b510      	push	{r4, lr}
   db490:	4604      	mov	r4, r0
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   db492:	e9d0 0100 	ldrd	r0, r1, [r0]
   db496:	f7ff ffef 	bl	db478 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   db49a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   db49c:	b108      	cbz	r0, db4a2 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x14>
	::operator delete(__p);
   db49e:	f7f8 fdfe 	bl	d409e <_ZdlPv>
      }
   db4a2:	4620      	mov	r0, r4
   db4a4:	bd10      	pop	{r4, pc}

000db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>:
        class EventInfo {
   db4a6:	b510      	push	{r4, lr}
   db4a8:	4604      	mov	r4, r0
   db4aa:	3014      	adds	r0, #20
   db4ac:	f7ff ffef 	bl	db48e <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   db4b0:	4620      	mov	r0, r4
   db4b2:	f004 fad9 	bl	dfa68 <_ZN6StringD1Ev>
   db4b6:	4620      	mov	r0, r4
   db4b8:	bd10      	pop	{r4, pc}
	...

000db4bc <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
   db4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db4c0:	e9d0 8a00 	ldrd	r8, sl, [r0]
   db4c4:	460f      	mov	r7, r1
	if (max_size() - size() < __n)
   db4c6:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
   db4ca:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db4cc:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   db4d0:	ebb3 1f62 	cmp.w	r3, r2, asr #5
   db4d4:	4681      	mov	r9, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db4d6:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
   db4da:	d102      	bne.n	db4e2 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   db4dc:	482b      	ldr	r0, [pc, #172]	; (db58c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xd0>)
   db4de:	f005 f94c 	bl	e077a <_ZSt20__throw_length_errorPKc>
   db4e2:	2c01      	cmp	r4, #1
   db4e4:	4622      	mov	r2, r4
   db4e6:	bf38      	it	cc
   db4e8:	2201      	movcc	r2, #1
   db4ea:	18a4      	adds	r4, r4, r2
   db4ec:	eba7 0608 	sub.w	r6, r7, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db4f0:	d24a      	bcs.n	db588 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xcc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db4f2:	b14c      	cbz	r4, db508 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4c>
   db4f4:	429c      	cmp	r4, r3
   db4f6:	bf28      	it	cs
   db4f8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   db4fa:	0160      	lsls	r0, r4, #5
   db4fc:	9101      	str	r1, [sp, #4]
   db4fe:	f7f8 fdca 	bl	d4096 <_Znwj>
   db502:	9901      	ldr	r1, [sp, #4]
   db504:	4605      	mov	r5, r0
   db506:	e000      	b.n	db50a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4e>
   db508:	4625      	mov	r5, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db50a:	19a8      	adds	r0, r5, r6
   db50c:	d001      	beq.n	db512 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x56>
   db50e:	f7ff fee1 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db512:	46ab      	mov	fp, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   db514:	4646      	mov	r6, r8
   db516:	42b7      	cmp	r7, r6
   db518:	d00a      	beq.n	db530 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db51a:	f1bb 0f00 	cmp.w	fp, #0
   db51e:	d003      	beq.n	db528 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6c>
   db520:	4631      	mov	r1, r6
   db522:	4658      	mov	r0, fp
   db524:	f7ff fed6 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db528:	3620      	adds	r6, #32
   db52a:	f10b 0b20 	add.w	fp, fp, #32
   db52e:	e7f2      	b.n	db516 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	      ++__new_finish;
   db530:	eba6 0708 	sub.w	r7, r6, r8
   db534:	3720      	adds	r7, #32
   db536:	442f      	add	r7, r5
	  _ForwardIterator __cur = __result;
   db538:	463b      	mov	r3, r7
   db53a:	46b3      	mov	fp, r6
	      for (; __first != __last; ++__first, (void)++__cur)
   db53c:	45d3      	cmp	fp, sl
   db53e:	d10a      	bne.n	db556 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9a>
   db540:	ebaa 0606 	sub.w	r6, sl, r6
   db544:	4437      	add	r7, r6
   db546:	4646      	mov	r6, r8
	  for (; __first != __last; ++__first)
   db548:	4556      	cmp	r6, sl
   db54a:	d00e      	beq.n	db56a <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xae>
    { __pointer->~_Tp(); }
   db54c:	4630      	mov	r0, r6
   db54e:	f7ff ffaa 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   db552:	3620      	adds	r6, #32
   db554:	e7f8      	b.n	db548 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x8c>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db556:	4659      	mov	r1, fp
   db558:	4618      	mov	r0, r3
   db55a:	9301      	str	r3, [sp, #4]
   db55c:	f7ff feba 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db560:	9b01      	ldr	r3, [sp, #4]
   db562:	f10b 0b20 	add.w	fp, fp, #32
   db566:	3320      	adds	r3, #32
   db568:	e7e8      	b.n	db53c <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x80>
	if (__p)
   db56a:	f1b8 0f00 	cmp.w	r8, #0
   db56e:	d002      	beq.n	db576 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xba>
	::operator delete(__p);
   db570:	4640      	mov	r0, r8
   db572:	f7f8 fd94 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db576:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
   db57a:	e9c9 5700 	strd	r5, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db57e:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   db582:	b003      	add	sp, #12
   db584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   db588:	461c      	mov	r4, r3
   db58a:	e7b6      	b.n	db4fa <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
   db58c:	000e3bdc 	.word	0x000e3bdc

000db590 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
   db590:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db592:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   db596:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   db598:	4604      	mov	r4, r0
   db59a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db59c:	d007      	beq.n	db5ae <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db59e:	b113      	cbz	r3, db5a6 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x16>
   db5a0:	4618      	mov	r0, r3
   db5a2:	f7ff fe97 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
	    ++this->_M_impl._M_finish;
   db5a6:	6863      	ldr	r3, [r4, #4]
   db5a8:	3320      	adds	r3, #32
   db5aa:	6063      	str	r3, [r4, #4]
      }
   db5ac:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   db5ae:	4619      	mov	r1, r3
   db5b0:	f7ff ff84 	bl	db4bc <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
   db5b4:	e7fa      	b.n	db5ac <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_+0x1c>

000db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>:
      { }

      template<typename _Iterator1, typename _Iterator2>
        _GLIBCXX14_CONSTEXPR
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
   db5b6:	b510      	push	{r4, lr}
   db5b8:	b090      	sub	sp, #64	; 0x40
   db5ba:	460c      	mov	r4, r1
        { return bool(_M_comp(*__it1, *__it2)); }
   db5bc:	4601      	mov	r1, r0
   db5be:	a808      	add	r0, sp, #32
   db5c0:	f7ff fe88 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db5c4:	4621      	mov	r1, r4
   db5c6:	4668      	mov	r0, sp
   db5c8:	f7ff fe84 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
            return a.priority > b.priority;
   db5cc:	9c04      	ldr	r4, [sp, #16]
   db5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db5d0:	4668      	mov	r0, sp
   db5d2:	42a3      	cmp	r3, r4
   db5d4:	bfd4      	ite	le
   db5d6:	2400      	movle	r4, #0
   db5d8:	2401      	movgt	r4, #1
   db5da:	f7ff ff64 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db5de:	a808      	add	r0, sp, #32
   db5e0:	f7ff ff61 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db5e4:	4620      	mov	r0, r4
   db5e6:	b010      	add	sp, #64	; 0x40
   db5e8:	bd10      	pop	{r4, pc}

000db5ea <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   db5ea:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   db5ec:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   db5f0:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   db5f2:	42ae      	cmp	r6, r5
   db5f4:	d004      	beq.n	db600 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x16>
    { __pointer->~_Tp(); }
   db5f6:	4628      	mov	r0, r5
   db5f8:	f7ff ff55 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	  for (; __first != __last; ++__first)
   db5fc:	3520      	adds	r5, #32
   db5fe:	e7f8      	b.n	db5f2 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   db600:	6820      	ldr	r0, [r4, #0]
	if (__p)
   db602:	b108      	cbz	r0, db608 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev+0x1e>
	::operator delete(__p);
   db604:	f7f8 fd4b 	bl	d409e <_ZdlPv>
      }
   db608:	4620      	mov	r0, r4
   db60a:	bd70      	pop	{r4, r5, r6, pc}

000db60c <_ZNSt6vectorI6StringSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
   db60c:	b538      	push	{r3, r4, r5, lr}
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   db60e:	e9d0 5100 	ldrd	r5, r1, [r0]
   db612:	428d      	cmp	r5, r1
      clear() _GLIBCXX_NOEXCEPT
   db614:	4604      	mov	r4, r0
	if (size_type __n = this->_M_impl._M_finish - __pos)
   db616:	d003      	beq.n	db620 <_ZNSt6vectorI6StringSaIS0_EE5clearEv+0x14>
	__destroy(__first, __last);
   db618:	4628      	mov	r0, r5
   db61a:	f7ff ff2d 	bl	db478 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   db61e:	6065      	str	r5, [r4, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
   db620:	bd38      	pop	{r3, r4, r5, pc}

000db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>:
   db622:	b538      	push	{r3, r4, r5, lr}
   db624:	460c      	mov	r4, r1
   db626:	4605      	mov	r5, r0
   db628:	f004 fa9a 	bl	dfb60 <_ZN6StringC1EOS_>
   db62c:	6923      	ldr	r3, [r4, #16]
   db62e:	612b      	str	r3, [r5, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
   db630:	6963      	ldr	r3, [r4, #20]
   db632:	616b      	str	r3, [r5, #20]
   db634:	69a3      	ldr	r3, [r4, #24]
   db636:	61ab      	str	r3, [r5, #24]
   db638:	69e3      	ldr	r3, [r4, #28]
   db63a:	61eb      	str	r3, [r5, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
   db63c:	2300      	movs	r3, #0
   db63e:	e9c4 3306 	strd	r3, r3, [r4, #24]
   db642:	6163      	str	r3, [r4, #20]
   db644:	4628      	mov	r0, r5
   db646:	bd38      	pop	{r3, r4, r5, pc}

000db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>:
   db648:	b530      	push	{r4, r5, lr}
   db64a:	460d      	mov	r5, r1
   db64c:	4604      	mov	r4, r0
   db64e:	b085      	sub	sp, #20
   db650:	f004 faab 	bl	dfbaa <_ZN6StringaSEOS_>
   db654:	692b      	ldr	r3, [r5, #16]
   db656:	6123      	str	r3, [r4, #16]
	  _M_start = __x._M_start;
   db658:	6968      	ldr	r0, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   db65a:	69e3      	ldr	r3, [r4, #28]
   db65c:	9303      	str	r3, [sp, #12]
	  _M_finish = __x._M_finish;
   db65e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
	  _M_start = __x._M_start;
   db662:	6160      	str	r0, [r4, #20]
	  _M_finish = __x._M_finish;
   db664:	69a8      	ldr	r0, [r5, #24]
   db666:	61a0      	str	r0, [r4, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
   db668:	69e8      	ldr	r0, [r5, #28]
   db66a:	61e0      	str	r0, [r4, #28]
	  _M_start = __x._M_start;
   db66c:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   db66e:	e9c5 3305 	strd	r3, r3, [r5, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   db672:	61eb      	str	r3, [r5, #28]
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
      {
	vector __tmp(get_allocator());
   db674:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   db676:	e9cd 1201 	strd	r1, r2, [sp, #4]
	vector __tmp(get_allocator());
   db67a:	f7ff ff08 	bl	db48e <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   db67e:	4620      	mov	r0, r4
   db680:	b005      	add	sp, #20
   db682:	bd30      	pop	{r4, r5, pc}

000db684 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>:
    }

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   db684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db688:	4698      	mov	r8, r3
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   db68a:	1e53      	subs	r3, r2, #1
   db68c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   db690:	b099      	sub	sp, #100	; 0x64
   db692:	4605      	mov	r5, r0
   db694:	460f      	mov	r7, r1
   db696:	4616      	mov	r6, r2
      while (__secondChild < (__len - 1) / 2)
   db698:	ea4f 0a63 	mov.w	sl, r3, asr #1
   db69c:	460c      	mov	r4, r1
   db69e:	45a2      	cmp	sl, r4
   db6a0:	ea4f 1944 	mov.w	r9, r4, lsl #5
   db6a4:	dd13      	ble.n	db6ce <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x4a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   db6a6:	1c60      	adds	r0, r4, #1
   db6a8:	0044      	lsls	r4, r0, #1
	  if (__comp(__first + __secondChild,
   db6aa:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   db6ae:	eb05 114b 	add.w	r1, r5, fp, lsl #5
   db6b2:	eb05 1080 	add.w	r0, r5, r0, lsl #6
   db6b6:	f7ff ff7e 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
		     __first + (__secondChild - 1)))
	    __secondChild--;
   db6ba:	2800      	cmp	r0, #0
   db6bc:	bf18      	it	ne
   db6be:	465c      	movne	r4, fp
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   db6c0:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   db6c4:	eb05 0009 	add.w	r0, r5, r9
   db6c8:	f7ff ffbe 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      while (__secondChild < (__len - 1) / 2)
   db6cc:	e7e7      	b.n	db69e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x1a>
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   db6ce:	07f3      	lsls	r3, r6, #31
   db6d0:	d40d      	bmi.n	db6ee <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
   db6d2:	3e02      	subs	r6, #2
   db6d4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   db6d8:	ebb4 0f66 	cmp.w	r4, r6, asr #1
   db6dc:	d107      	bne.n	db6ee <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x6a>
	{
	  __secondChild = 2 * (__secondChild + 1);
   db6de:	0064      	lsls	r4, r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   db6e0:	3401      	adds	r4, #1
   db6e2:	eb05 1144 	add.w	r1, r5, r4, lsl #5
   db6e6:	eb05 0009 	add.w	r0, r5, r9
   db6ea:	f7ff ffad 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
   db6ee:	4641      	mov	r1, r8
   db6f0:	4668      	mov	r0, sp
      _Distance __parent = (__holeIndex - 1) / 2;
   db6f2:	1e66      	subs	r6, r4, #1
      std::__push_heap(__first, __holeIndex, __topIndex,
   db6f4:	f7ff ff95 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      _Distance __parent = (__holeIndex - 1) / 2;
   db6f8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   db6fc:	1076      	asrs	r6, r6, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   db6fe:	42a7      	cmp	r7, r4
   db700:	eb05 1844 	add.w	r8, r5, r4, lsl #5
   db704:	da1f      	bge.n	db746 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
      { return __normal_iterator(_M_current + __n); }
   db706:	eb05 1446 	add.w	r4, r5, r6, lsl #5
#endif

      template<typename _Iterator, typename _Value>
	bool
	operator()(_Iterator __it, _Value& __val)
	{ return bool(_M_comp(*__it, __val)); }
   db70a:	4621      	mov	r1, r4
   db70c:	a808      	add	r0, sp, #32
   db70e:	f7ff fde1 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db712:	4669      	mov	r1, sp
   db714:	a810      	add	r0, sp, #64	; 0x40
   db716:	f7ff fddd 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db71a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   db71e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   db722:	a810      	add	r0, sp, #64	; 0x40
   db724:	f7ff febf 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db728:	a808      	add	r0, sp, #32
   db72a:	f7ff febc 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db72e:	45ca      	cmp	sl, r9
   db730:	dd09      	ble.n	db746 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0xc2>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   db732:	4621      	mov	r1, r4
   db734:	4640      	mov	r0, r8
   db736:	f7ff ff87 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  __parent = (__holeIndex - 1) / 2;
   db73a:	1e73      	subs	r3, r6, #1
   db73c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
	  __holeIndex = __parent;
   db740:	4634      	mov	r4, r6
	  __parent = (__holeIndex - 1) / 2;
   db742:	105e      	asrs	r6, r3, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   db744:	e7db      	b.n	db6fe <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0+0x7a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   db746:	4669      	mov	r1, sp
   db748:	4640      	mov	r0, r8
   db74a:	f7ff ff7d 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      std::__push_heap(__first, __holeIndex, __topIndex,
   db74e:	4668      	mov	r0, sp
   db750:	f7ff fea9 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
		       _GLIBCXX_MOVE(__value), __cmp);
    }
   db754:	b019      	add	sp, #100	; 0x64
   db756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db75a <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>:

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
   db75a:	b570      	push	{r4, r5, r6, lr}
   db75c:	b092      	sub	sp, #72	; 0x48
   db75e:	4605      	mov	r5, r0
   db760:	4616      	mov	r6, r2
   db762:	460c      	mov	r4, r1
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   db764:	a802      	add	r0, sp, #8
   db766:	4611      	mov	r1, r2
   db768:	f7ff ff5b 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      *__result = _GLIBCXX_MOVE(*__first);
   db76c:	4629      	mov	r1, r5
   db76e:	4630      	mov	r0, r6
   db770:	f7ff ff6a 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   db774:	1b62      	subs	r2, r4, r5
   db776:	1152      	asrs	r2, r2, #5
      std::__adjust_heap(__first, _DistanceType(0),
   db778:	a902      	add	r1, sp, #8
   db77a:	a80a      	add	r0, sp, #40	; 0x28
   db77c:	9201      	str	r2, [sp, #4]
   db77e:	f7ff ff50 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   db782:	9a01      	ldr	r2, [sp, #4]
   db784:	ab0a      	add	r3, sp, #40	; 0x28
   db786:	2100      	movs	r1, #0
   db788:	4628      	mov	r0, r5
   db78a:	f7ff ff7b 	bl	db684 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   db78e:	a80a      	add	r0, sp, #40	; 0x28
   db790:	f7ff fe89 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   db794:	a802      	add	r0, sp, #8
   db796:	f7ff fe86 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			 _DistanceType(__last - __first),
			 _GLIBCXX_MOVE(__value), __comp);
    }
   db79a:	b012      	add	sp, #72	; 0x48
   db79c:	bd70      	pop	{r4, r5, r6, pc}

000db79e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
   db79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db7a2:	b098      	sub	sp, #96	; 0x60
   db7a4:	4604      	mov	r4, r0
			      _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
   db7a6:	4601      	mov	r1, r0
   db7a8:	4668      	mov	r0, sp
   db7aa:	f7ff ff3a 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	--_M_current;
   db7ae:	3c20      	subs	r4, #32
#endif

      template<typename _Value, typename _Iterator>
	bool
	operator()(_Value& __val, _Iterator __it)
	{ return bool(_M_comp(__val, *__it)); }
   db7b0:	4669      	mov	r1, sp
   db7b2:	a808      	add	r0, sp, #32
   db7b4:	f7ff fd8e 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db7b8:	4621      	mov	r1, r4
   db7ba:	a810      	add	r0, sp, #64	; 0x40
   db7bc:	f7ff fd8a 	bl	db2d4 <_ZN11SleepHelper13EventCombiner9EventInfoC1ERKS1_>
   db7c0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   db7c4:	9f14      	ldr	r7, [sp, #80]	; 0x50
   db7c6:	a810      	add	r0, sp, #64	; 0x40
   db7c8:	f7ff fe6d 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   db7cc:	a808      	add	r0, sp, #32
   db7ce:	f7ff fe6a 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
   db7d2:	45b8      	cmp	r8, r7
   db7d4:	4626      	mov	r6, r4
   db7d6:	f104 0520 	add.w	r5, r4, #32
   db7da:	f1a4 0420 	sub.w	r4, r4, #32
   db7de:	dd04      	ble.n	db7ea <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x4c>
	{
	  *__last = _GLIBCXX_MOVE(*__next);
   db7e0:	4631      	mov	r1, r6
   db7e2:	4628      	mov	r0, r5
   db7e4:	f7ff ff30 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	return *this;
   db7e8:	e7e2      	b.n	db7b0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0+0x12>
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
   db7ea:	4669      	mov	r1, sp
   db7ec:	4628      	mov	r0, r5
   db7ee:	f7ff ff2b 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	__val = _GLIBCXX_MOVE(*__last);
   db7f2:	4668      	mov	r0, sp
   db7f4:	f7ff fe57 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   db7f8:	b018      	add	sp, #96	; 0x60
   db7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db7fe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
   db7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
   db802:	4281      	cmp	r1, r0
    __insertion_sort(_RandomAccessIterator __first,
   db804:	b088      	sub	sp, #32
   db806:	4605      	mov	r5, r0
   db808:	460f      	mov	r7, r1
      if (__first == __last) return;
   db80a:	d026      	beq.n	db85a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
      { return __normal_iterator(_M_current + __n); }
   db80c:	f100 0420 	add.w	r4, r0, #32

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   db810:	42a7      	cmp	r7, r4
   db812:	d022      	beq.n	db85a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x5c>
	{
	  if (__comp(__i, __first))
   db814:	4629      	mov	r1, r5
   db816:	4620      	mov	r0, r4
   db818:	f7ff fecd 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   db81c:	f104 0820 	add.w	r8, r4, #32
   db820:	b1b8      	cbz	r0, db852 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x54>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
   db822:	4621      	mov	r1, r4
   db824:	4668      	mov	r0, sp
   db826:	f7ff fefc 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   db82a:	1b66      	subs	r6, r4, r5
   db82c:	1176      	asrs	r6, r6, #5
   db82e:	2e00      	cmp	r6, #0
   db830:	dd06      	ble.n	db840 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x42>
	    *--__result = std::move(*--__last);
   db832:	4620      	mov	r0, r4
   db834:	3c20      	subs	r4, #32
   db836:	4621      	mov	r1, r4
   db838:	f7ff ff06 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for (__n = __last - __first; __n > 0; --__n)
   db83c:	3e01      	subs	r6, #1
   db83e:	e7f6      	b.n	db82e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x30>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   db840:	4669      	mov	r1, sp
   db842:	4628      	mov	r0, r5
   db844:	f7ff ff00 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
		__val = _GLIBCXX_MOVE(*__i);
   db848:	4668      	mov	r0, sp
   db84a:	f7ff fe2c 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
	++_M_current;
   db84e:	4644      	mov	r4, r8
	return *this;
   db850:	e7de      	b.n	db810 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x12>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
   db852:	4620      	mov	r0, r4
   db854:	f7ff ffa3 	bl	db79e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
   db858:	e7f9      	b.n	db84e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0+0x50>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
   db85a:	b008      	add	sp, #32
   db85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db860 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   db860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db864:	4606      	mov	r6, r0
   db866:	4688      	mov	r8, r1
   db868:	4615      	mov	r5, r2
	  _ForwardIterator __cur = __result;
   db86a:	4617      	mov	r7, r2
   db86c:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   db86e:	4544      	cmp	r4, r8
   db870:	d007      	beq.n	db882 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x22>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   db872:	b11f      	cbz	r7, db87c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0x1c>
   db874:	4621      	mov	r1, r4
   db876:	4638      	mov	r0, r7
   db878:	f004 f98c 	bl	dfb94 <_ZN6StringC1ERKS_>
   db87c:	3410      	adds	r4, #16
   db87e:	3710      	adds	r7, #16
   db880:	e7f5      	b.n	db86e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_+0xe>
	      return __cur;
   db882:	1ba0      	subs	r0, r4, r6
	}
   db884:	4428      	add	r0, r5
   db886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000db88c <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   db88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db890:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   db894:	429e      	cmp	r6, r3
      push_back(const value_type& __x)
   db896:	4604      	mov	r4, r0
   db898:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db89a:	d008      	beq.n	db8ae <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db89c:	b116      	cbz	r6, db8a4 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x18>
   db89e:	4630      	mov	r0, r6
   db8a0:	f004 f978 	bl	dfb94 <_ZN6StringC1ERKS_>
	    ++this->_M_impl._M_finish;
   db8a4:	6863      	ldr	r3, [r4, #4]
   db8a6:	3310      	adds	r3, #16
   db8a8:	6063      	str	r3, [r4, #4]
      }
   db8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   db8ae:	4a18      	ldr	r2, [pc, #96]	; (db910 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x84>)
   db8b0:	2101      	movs	r1, #1
   db8b2:	f7ff fcf5 	bl	db2a0 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   db8b6:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db8ba:	4607      	mov	r7, r0
    { return __lhs.base() - __rhs.base(); }
   db8bc:	eba6 0908 	sub.w	r9, r6, r8
   db8c0:	b320      	cbz	r0, db90c <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x80>
   db8c2:	f7fe f90c 	bl	d9ade <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   db8c6:	4605      	mov	r5, r0
   db8c8:	eb15 0009 	adds.w	r0, r5, r9
   db8cc:	d002      	beq.n	db8d4 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x48>
   db8ce:	4651      	mov	r1, sl
   db8d0:	f004 f960 	bl	dfb94 <_ZN6StringC1ERKS_>
	__uninit_copy(__first, __last, __result);
   db8d4:	462a      	mov	r2, r5
   db8d6:	4631      	mov	r1, r6
   db8d8:	4640      	mov	r0, r8
   db8da:	f7ff ffc1 	bl	db860 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   db8de:	4631      	mov	r1, r6
   db8e0:	f100 0210 	add.w	r2, r0, #16
   db8e4:	4630      	mov	r0, r6
   db8e6:	f7ff ffbb 	bl	db860 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   db8ea:	4631      	mov	r1, r6
   db8ec:	4681      	mov	r9, r0
   db8ee:	4640      	mov	r0, r8
   db8f0:	f7ff fdc2 	bl	db478 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   db8f4:	f1b8 0f00 	cmp.w	r8, #0
   db8f8:	d002      	beq.n	db900 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x74>
	::operator delete(__p);
   db8fa:	4640      	mov	r0, r8
   db8fc:	f7f8 fbcf 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   db900:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db904:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   db908:	60a5      	str	r5, [r4, #8]
      }
   db90a:	e7ce      	b.n	db8aa <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db90c:	4605      	mov	r5, r0
   db90e:	e7db      	b.n	db8c8 <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_+0x3c>
   db910:	000e3bdc 	.word	0x000e3bdc

000db914 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
   db914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db918:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   db91c:	429e      	cmp	r6, r3
      vector<_Tp, _Alloc>::
   db91e:	4604      	mov	r4, r0
   db920:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   db922:	d008      	beq.n	db936 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   db924:	b116      	cbz	r6, db92c <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x18>
   db926:	4630      	mov	r0, r6
   db928:	f004 f91a 	bl	dfb60 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
   db92c:	6863      	ldr	r3, [r4, #4]
   db92e:	3310      	adds	r3, #16
   db930:	6063      	str	r3, [r4, #4]
      }
   db932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      const size_type __len =
   db936:	4a18      	ldr	r2, [pc, #96]	; (db998 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x84>)
   db938:	2101      	movs	r1, #1
   db93a:	f7ff fcb1 	bl	db2a0 <_ZNKSt6vectorI6StringSaIS0_EE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   db93e:	f8d4 8000 	ldr.w	r8, [r4]
   db942:	4607      	mov	r7, r0
   db944:	eba6 0908 	sub.w	r9, r6, r8
   db948:	b320      	cbz	r0, db994 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x80>
   db94a:	f7fe f8c8 	bl	d9ade <_ZN9__gnu_cxx13new_allocatorI6StringE8allocateEjPKv.isra.0>
   db94e:	4605      	mov	r5, r0
   db950:	eb15 0009 	adds.w	r0, r5, r9
   db954:	d002      	beq.n	db95c <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x48>
   db956:	4651      	mov	r1, sl
   db958:	f004 f902 	bl	dfb60 <_ZN6StringC1EOS_>
   db95c:	462a      	mov	r2, r5
   db95e:	4631      	mov	r1, r6
   db960:	4640      	mov	r0, r8
   db962:	f7ff ff7d 	bl	db860 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   db966:	4631      	mov	r1, r6
   db968:	f100 0210 	add.w	r2, r0, #16
   db96c:	4630      	mov	r0, r6
   db96e:	f7ff ff77 	bl	db860 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6StringPS2_EET0_T_S7_S6_>
   db972:	4631      	mov	r1, r6
   db974:	4681      	mov	r9, r0
   db976:	4640      	mov	r0, r8
   db978:	f7ff fd7e 	bl	db478 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6StringEEvT_S4_>
	if (__p)
   db97c:	f1b8 0f00 	cmp.w	r8, #0
   db980:	d002      	beq.n	db988 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x74>
	::operator delete(__p);
   db982:	4640      	mov	r0, r8
   db984:	f7f8 fb8b 	bl	d409e <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
   db988:	e9c4 5900 	strd	r5, r9, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   db98c:	eb05 1507 	add.w	r5, r5, r7, lsl #4
   db990:	60a5      	str	r5, [r4, #8]
      }
   db992:	e7ce      	b.n	db932 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   db994:	4605      	mov	r5, r0
   db996:	e7db      	b.n	db950 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
   db998:	000e3bdc 	.word	0x000e3bdc

000db99c <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>:
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   db99c:	b5f0      	push	{r4, r5, r6, r7, lr}
   db99e:	4614      	mov	r4, r2
   db9a0:	b0a1      	sub	sp, #132	; 0x84
    memset(buf, 0, maxSize);
   db9a2:	461a      	mov	r2, r3
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   db9a4:	460f      	mov	r7, r1
    memset(buf, 0, maxSize);
   db9a6:	4620      	mov	r0, r4
   db9a8:	2100      	movs	r1, #0
        state_(BEGIN) {
   db9aa:	2500      	movs	r5, #0
void SleepHelper::EventCombiner::generateEventInternal(std::function<void(JSONWriter &, int &)> callback, char *buf, size_t maxSize, std::vector<EventInfo> &infoArray) {
   db9ac:	461e      	mov	r6, r3
    memset(buf, 0, maxSize);
   db9ae:	f005 fe83 	bl	e16b8 <memset>
        n_(0) {
   db9b2:	4b30      	ldr	r3, [pc, #192]	; (dba74 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd8>)
   db9b4:	930d      	str	r3, [sp, #52]	; 0x34
    writer.beginObject();
   db9b6:	a80d      	add	r0, sp, #52	; 0x34
   db9b8:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
        state_(BEGIN) {
   db9bc:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
        n_(0) {
   db9c0:	9511      	str	r5, [sp, #68]	; 0x44
    int priority = 0;
   db9c2:	9501      	str	r5, [sp, #4]
    writer.beginObject();
   db9c4:	f002 fd73 	bl	de4ae <_ZN5spark10JSONWriter11beginObjectEv>
    callback(writer, priority);
   db9c8:	aa01      	add	r2, sp, #4
   db9ca:	a90d      	add	r1, sp, #52	; 0x34
   db9cc:	4638      	mov	r0, r7
   db9ce:	f7fe fe60 	bl	da692 <_ZNKSt8functionIFvRN5spark10JSONWriterERiEEclES2_S3_>
    writer.endObject();
   db9d2:	a80d      	add	r0, sp, #52	; 0x34
   db9d4:	f002 fd49 	bl	de46a <_ZN5spark10JSONWriter9endObjectEv>
    if (priority > 0 && strlen(buf) > 2) {
   db9d8:	9b01      	ldr	r3, [sp, #4]
   db9da:	42ab      	cmp	r3, r5
   db9dc:	dd48      	ble.n	dba70 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   db9de:	4620      	mov	r0, r4
   db9e0:	f005 fef5 	bl	e17ce <strlen>
   db9e4:	2802      	cmp	r0, #2
   db9e6:	d943      	bls.n	dba70 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
        if (writer.dataSize() <= writer.bufferSize()) {
   db9e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   db9ec:	429a      	cmp	r2, r3
   db9ee:	d33f      	bcc.n	dba70 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xd4>
   db9f0:	4921      	ldr	r1, [pc, #132]	; (dba78 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xdc>)
   db9f2:	a818      	add	r0, sp, #96	; 0x60
   db9f4:	f004 f883 	bl	dfafe <_ZN6StringC1EPKc>
            eventInfo.priority = priority;
   db9f8:	9b01      	ldr	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   db9fa:	951f      	str	r5, [sp, #124]	; 0x7c
            JSONValue outerObj = JSONValue::parseCopy(buf);
   db9fc:	4621      	mov	r1, r4
   db9fe:	a802      	add	r0, sp, #8
   dba00:	e9cd 551d 	strd	r5, r5, [sp, #116]	; 0x74
            eventInfo.priority = priority;
   dba04:	931c      	str	r3, [sp, #112]	; 0x70
            JSONValue outerObj = JSONValue::parseCopy(buf);
   dba06:	f7fe f947 	bl	d9c98 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(outerObj);
   dba0a:	a902      	add	r1, sp, #8
   dba0c:	a812      	add	r0, sp, #72	; 0x48
   dba0e:	f7fc f93b 	bl	d7c88 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   dba12:	a812      	add	r0, sp, #72	; 0x48
   dba14:	f002 fce6 	bl	de3e4 <_ZN5spark18JSONObjectIterator4nextEv>
   dba18:	4605      	mov	r5, r0
   dba1a:	b190      	cbz	r0, dba42 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0xa6>
                eventInfo.keys.push_back((const char *)iter.name());
   dba1c:	a912      	add	r1, sp, #72	; 0x48
   dba1e:	a805      	add	r0, sp, #20
   dba20:	f7fc f943 	bl	d7caa <_ZNK5spark18JSONObjectIterator4nameEv>
   dba24:	9907      	ldr	r1, [sp, #28]
   dba26:	a809      	add	r0, sp, #36	; 0x24
   dba28:	f004 f869 	bl	dfafe <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   dba2c:	a909      	add	r1, sp, #36	; 0x24
   dba2e:	a81d      	add	r0, sp, #116	; 0x74
   dba30:	f7ff ff70 	bl	db914 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dba34:	a809      	add	r0, sp, #36	; 0x24
   dba36:	f004 f817 	bl	dfa68 <_ZN6StringD1Ev>
   dba3a:	a806      	add	r0, sp, #24
   dba3c:	f7f8 fe00 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            while(iter.next()) {
   dba40:	e7e7      	b.n	dba12 <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE+0x76>
            buf[strlen(buf) - 1] = 0;
   dba42:	4620      	mov	r0, r4
   dba44:	f005 fec3 	bl	e17ce <strlen>
   dba48:	4420      	add	r0, r4
            eventInfo.json = &buf[1];
   dba4a:	1c61      	adds	r1, r4, #1
            buf[strlen(buf) - 1] = 0;
   dba4c:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   dba50:	a818      	add	r0, sp, #96	; 0x60
   dba52:	f004 f8b2 	bl	dfbba <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   dba56:	a918      	add	r1, sp, #96	; 0x60
   dba58:	9826      	ldr	r0, [sp, #152]	; 0x98
   dba5a:	f7ff fd99 	bl	db590 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
   dba5e:	a813      	add	r0, sp, #76	; 0x4c
   dba60:	f7f8 fdee 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dba64:	a803      	add	r0, sp, #12
   dba66:	f7f8 fdeb 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            EventInfo eventInfo;
   dba6a:	a818      	add	r0, sp, #96	; 0x60
   dba6c:	f7ff fd1b 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
}
   dba70:	b021      	add	sp, #132	; 0x84
   dba72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dba74:	000e48e4 	.word	0x000e48e4
   dba78:	000e44eb 	.word	0x000e44eb

000dba7c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   dba7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dba80:	4607      	mov	r7, r0
   dba82:	4688      	mov	r8, r1
   dba84:	4616      	mov	r6, r2
	  _ForwardIterator __cur = __result;
   dba86:	4615      	mov	r5, r2
   dba88:	4604      	mov	r4, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   dba8a:	4544      	cmp	r4, r8
   dba8c:	d011      	beq.n	dbab2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x36>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   dba8e:	b16d      	cbz	r5, dbaac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x30>
    class PublishData {
   dba90:	4621      	mov	r1, r4
   dba92:	4628      	mov	r0, r5
   dba94:	f004 f87e 	bl	dfb94 <_ZN6StringC1ERKS_>
   dba98:	f104 0110 	add.w	r1, r4, #16
   dba9c:	f105 0010 	add.w	r0, r5, #16
   dbaa0:	f004 f878 	bl	dfb94 <_ZN6StringC1ERKS_>
   dbaa4:	f894 3020 	ldrb.w	r3, [r4, #32]
   dbaa8:	f885 3020 	strb.w	r3, [r5, #32]
   dbaac:	3424      	adds	r4, #36	; 0x24
   dbaae:	3524      	adds	r5, #36	; 0x24
   dbab0:	e7eb      	b.n	dba8a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0xe>
	      return __cur;
   dbab2:	1be0      	subs	r0, r4, r7
   dbab4:	0884      	lsrs	r4, r0, #2
   dbab6:	4804      	ldr	r0, [pc, #16]	; (dbac8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_+0x4c>)
   dbab8:	4344      	muls	r4, r0
   dbaba:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
	}
   dbabe:	2024      	movs	r0, #36	; 0x24
   dbac0:	fb00 6004 	mla	r0, r0, r4, r6
   dbac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbac8:	38e38e39 	.word	0x38e38e39

000dbacc <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
   dbacc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dbad0:	e9d0 9800 	ldrd	r9, r8, [r0]
   dbad4:	eba8 0409 	sub.w	r4, r8, r9
   dbad8:	10a3      	asrs	r3, r4, #2
   dbada:	4c29      	ldr	r4, [pc, #164]	; (dbb80 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>)
   dbadc:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   dbade:	4b29      	ldr	r3, [pc, #164]	; (dbb84 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>)
   dbae0:	429c      	cmp	r4, r3
   dbae2:	4605      	mov	r5, r0
   dbae4:	460e      	mov	r6, r1
   dbae6:	4617      	mov	r7, r2
   dbae8:	d102      	bne.n	dbaf0 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   dbaea:	4827      	ldr	r0, [pc, #156]	; (dbb88 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
   dbaec:	f004 fe45 	bl	e077a <_ZSt20__throw_length_errorPKc>
   dbaf0:	2c01      	cmp	r4, #1
   dbaf2:	4622      	mov	r2, r4
   dbaf4:	bf38      	it	cc
   dbaf6:	2201      	movcc	r2, #1
   dbaf8:	18a4      	adds	r4, r4, r2
   dbafa:	eba1 0b09 	sub.w	fp, r1, r9
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   dbafe:	d23d      	bcs.n	dbb7c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   dbb00:	b144      	cbz	r4, dbb14 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
   dbb02:	429c      	cmp	r4, r3
   dbb04:	bf28      	it	cs
   dbb06:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   dbb08:	2024      	movs	r0, #36	; 0x24
   dbb0a:	4360      	muls	r0, r4
   dbb0c:	f7f8 fac3 	bl	d4096 <_Znwj>
   dbb10:	4682      	mov	sl, r0
   dbb12:	e000      	b.n	dbb16 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4a>
   dbb14:	46a2      	mov	sl, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dbb16:	eb1a 0b0b 	adds.w	fp, sl, fp
   dbb1a:	d00d      	beq.n	dbb38 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6c>
   dbb1c:	4639      	mov	r1, r7
   dbb1e:	4658      	mov	r0, fp
   dbb20:	f004 f81e 	bl	dfb60 <_ZN6StringC1EOS_>
   dbb24:	f107 0110 	add.w	r1, r7, #16
   dbb28:	f10b 0010 	add.w	r0, fp, #16
   dbb2c:	f004 f818 	bl	dfb60 <_ZN6StringC1EOS_>
   dbb30:	f897 3020 	ldrb.w	r3, [r7, #32]
   dbb34:	f88b 3020 	strb.w	r3, [fp, #32]
	__uninit_copy(__first, __last, __result);
   dbb38:	4631      	mov	r1, r6
   dbb3a:	4652      	mov	r2, sl
   dbb3c:	4648      	mov	r0, r9
   dbb3e:	f7ff ff9d 	bl	dba7c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
   dbb42:	4641      	mov	r1, r8
   dbb44:	f100 0224 	add.w	r2, r0, #36	; 0x24
   dbb48:	4630      	mov	r0, r6
   dbb4a:	f7ff ff97 	bl	dba7c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN11SleepHelper11PublishDataEPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   dbb4e:	464e      	mov	r6, r9
   dbb50:	4607      	mov	r7, r0
	  for (; __first != __last; ++__first)
   dbb52:	4546      	cmp	r6, r8
   dbb54:	d004      	beq.n	dbb60 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
    { __pointer->~_Tp(); }
   dbb56:	4630      	mov	r0, r6
   dbb58:	f7fe f957 	bl	d9e0a <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   dbb5c:	3624      	adds	r6, #36	; 0x24
   dbb5e:	e7f8      	b.n	dbb52 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
	if (__p)
   dbb60:	f1b9 0f00 	cmp.w	r9, #0
   dbb64:	d002      	beq.n	dbb6c <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
	::operator delete(__p);
   dbb66:	4648      	mov	r0, r9
   dbb68:	f7f8 fa99 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   dbb6c:	2024      	movs	r0, #36	; 0x24
   dbb6e:	fb00 a404 	mla	r4, r0, r4, sl
      this->_M_impl._M_finish = __new_finish;
   dbb72:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   dbb76:	60ac      	str	r4, [r5, #8]
    }
   dbb78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   dbb7c:	461c      	mov	r4, r3
   dbb7e:	e7c3      	b.n	dbb08 <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
   dbb80:	38e38e39 	.word	0x38e38e39
   dbb84:	038e38e3 	.word	0x038e38e3
   dbb88:	000e3bdc 	.word	0x000e3bdc

000dbb8c <_ZN11SleepHelper21stateHandlerConnectedEv>:
void SleepHelper::stateHandlerConnected() {
   dbb8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbb90:	b091      	sub	sp, #68	; 0x44
   dbb92:	4604      	mov	r4, r0
   dbb94:	f001 fa00 	bl	dcf98 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   dbb98:	4605      	mov	r5, r0
   dbb9a:	b960      	cbnz	r0, dbbb6 <_ZN11SleepHelper21stateHandlerConnectedEv+0x2a>
   dbb9c:	f000 ff4c 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   dbba0:	4b77      	ldr	r3, [pc, #476]	; (dbd80 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f4>)
        reconnectAttemptStartMillis = millis();
   dbba2:	f8c4 07c0 	str.w	r0, [r4, #1984]	; 0x7c0
        stateHandler = &SleepHelper::stateHandlerReconnectWait;
   dbba6:	e9cd 3507 	strd	r3, r5, [sp, #28]
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dbbaa:	a907      	add	r1, sp, #28
   dbbac:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dbbb0:	f7fe fe60 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   dbbb4:	e0a8      	b.n	dbd08 <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
    if (wakeEventName.length() > 0) {
   dbbb6:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
   dbbba:	2b00      	cmp	r3, #0
   dbbbc:	d042      	beq.n	dbc44 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   dbbbe:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   dbbc2:	bbbb      	cbnz	r3, dbc34 <_ZN11SleepHelper21stateHandlerConnectedEv+0xa8>
   dbbc4:	f000 ff38 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
   dbbc8:	4f6e      	ldr	r7, [pc, #440]	; (dbd84 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1f8>)
   dbbca:	f8d4 67d4 	ldr.w	r6, [r4, #2004]	; 0x7d4
            lastEventHistoryCheckMillis = millis();
   dbbce:	f8c4 07cc 	str.w	r0, [r4, #1996]	; 0x7cc
            for(auto it = wakeEventPayload.begin(); it != wakeEventPayload.end(); ++it) {
   dbbd2:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	; 0x7d8
   dbbd6:	42b3      	cmp	r3, r6
   dbbd8:	f000 80a0 	beq.w	dbd1c <_ZN11SleepHelper21stateHandlerConnectedEv+0x190>
        operator const char*() const { return c_str(); }
   dbbdc:	6835      	ldr	r5, [r6, #0]
        PublishData(const char *eventName, const char *eventData) : eventName(eventName), eventData(eventData) {}
   dbbde:	f8d4 1728 	ldr.w	r1, [r4, #1832]	; 0x728
   dbbe2:	a807      	add	r0, sp, #28
   dbbe4:	f003 ff8b 	bl	dfafe <_ZN6StringC1EPKc>
   dbbe8:	4629      	mov	r1, r5
   dbbea:	a80b      	add	r0, sp, #44	; 0x2c
   dbbec:	f003 ff87 	bl	dfafe <_ZN6StringC1EPKc>
   dbbf0:	783b      	ldrb	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   dbbf2:	f8d4 5784 	ldr.w	r5, [r4, #1924]	; 0x784
        val_(flag.value()) {
   dbbf6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   dbbfa:	f8d4 3788 	ldr.w	r3, [r4, #1928]	; 0x788
   dbbfe:	429d      	cmp	r5, r3
   dbc00:	f000 8085 	beq.w	dbd0e <_ZN11SleepHelper21stateHandlerConnectedEv+0x182>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   dbc04:	b165      	cbz	r5, dbc20 <_ZN11SleepHelper21stateHandlerConnectedEv+0x94>
    class PublishData {
   dbc06:	a907      	add	r1, sp, #28
   dbc08:	4628      	mov	r0, r5
   dbc0a:	f003 ffa9 	bl	dfb60 <_ZN6StringC1EOS_>
   dbc0e:	a90b      	add	r1, sp, #44	; 0x2c
   dbc10:	f105 0010 	add.w	r0, r5, #16
   dbc14:	f003 ffa4 	bl	dfb60 <_ZN6StringC1EOS_>
   dbc18:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   dbc1c:	f885 3020 	strb.w	r3, [r5, #32]
	    ++this->_M_impl._M_finish;
   dbc20:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   dbc24:	3324      	adds	r3, #36	; 0x24
   dbc26:	f8c4 3784 	str.w	r3, [r4, #1924]	; 0x784
                publishData.push_back(PublishData(wakeEventName, *it));            
   dbc2a:	a807      	add	r0, sp, #28
   dbc2c:	f7fe f8ed 	bl	d9e0a <_ZN11SleepHelper11PublishDataD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   dbc30:	3610      	adds	r6, #16
	return *this;
   dbc32:	e7ce      	b.n	dbbd2 <_ZN11SleepHelper21stateHandlerConnectedEv+0x46>
   dbc34:	f000 ff00 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        if (!lastEventHistoryCheckMillis || millis() - lastEventHistoryCheckMillis >= 1000) {
   dbc38:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
   dbc3c:	1ac0      	subs	r0, r0, r3
   dbc3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   dbc42:	d2bf      	bcs.n	dbbc4 <_ZN11SleepHelper21stateHandlerConnectedEv+0x38>
      { return begin() == end(); }
   dbc44:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
    if (!publishData.empty()) {
   dbc48:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
   dbc4c:	429d      	cmp	r5, r3
   dbc4e:	d06a      	beq.n	dbd26 <_ZN11SleepHelper21stateHandlerConnectedEv+0x19a>
   dbc50:	4629      	mov	r1, r5
   dbc52:	a807      	add	r0, sp, #28
   dbc54:	f003 ff9e 	bl	dfb94 <_ZN6StringC1ERKS_>
   dbc58:	f105 0110 	add.w	r1, r5, #16
   dbc5c:	a80b      	add	r0, sp, #44	; 0x2c
   dbc5e:	f003 ff99 	bl	dfb94 <_ZN6StringC1ERKS_>
   dbc62:	f895 3020 	ldrb.w	r3, [r5, #32]
   dbc66:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   dbc6a:	f000 fee5 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   dbc6e:	f504 67f5 	add.w	r7, r4, #1960	; 0x7a8
   dbc72:	ad03      	add	r5, sp, #12
   dbc74:	4b44      	ldr	r3, [pc, #272]	; (dbd88 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1fc>)
        stateTime = millis();
   dbc76:	f8c4 07b8 	str.w	r0, [r4, #1976]	; 0x7b8
        stateHandler = &SleepHelper::stateHandlerPublishWait;
   dbc7a:	2600      	movs	r6, #0
   dbc7c:	4629      	mov	r1, r5
   dbc7e:	4638      	mov	r0, r7
   dbc80:	9303      	str	r3, [sp, #12]
   dbc82:	9604      	str	r6, [sp, #16]
   dbc84:	f7fe fdf6 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return (logEnabled & flag) != 0;
   dbc88:	f8d4 179c 	ldr.w	r1, [r4, #1948]	; 0x79c
   dbc8c:	4632      	mov	r2, r6
   dbc8e:	f401 7380 	and.w	r3, r1, #256	; 0x100
        if (logEnableEnabled(logEnabledPublishData)) {
   dbc92:	4313      	orrs	r3, r2
   dbc94:	d019      	beq.n	dbcca <_ZN11SleepHelper21stateHandlerConnectedEv+0x13e>
            appLog.trace("publishing name=%s flags=0x%x", event.eventName.c_str(), (int)event.flags.value());
   dbc96:	9a07      	ldr	r2, [sp, #28]
   dbc98:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   dbc9c:	493b      	ldr	r1, [pc, #236]	; (dbd8c <_ZN11SleepHelper21stateHandlerConnectedEv+0x200>)
   dbc9e:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dbca2:	f7fa f95d 	bl	d5f60 <_ZNK5spark6Logger5traceEPKcz>
            appLog.write(LOG_LEVEL_TRACE, event.eventData.c_str(), event.eventData.length());
   dbca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    if (data) {
   dbca8:	b132      	cbz	r2, dbcb8 <_ZN11SleepHelper21stateHandlerConnectedEv+0x12c>
        log_write(level, name_, data, size, nullptr);
   dbcaa:	9600      	str	r6, [sp, #0]
   dbcac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dbcae:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   dbcb2:	2001      	movs	r0, #1
   dbcb4:	f001 f8c8 	bl	dce48 <log_write>
   dbcb8:	2300      	movs	r3, #0
   dbcba:	9300      	str	r3, [sp, #0]
   dbcbc:	4a34      	ldr	r2, [pc, #208]	; (dbd90 <_ZN11SleepHelper21stateHandlerConnectedEv+0x204>)
   dbcbe:	f8d4 17e4 	ldr.w	r1, [r4, #2020]	; 0x7e4
   dbcc2:	2302      	movs	r3, #2
   dbcc4:	2001      	movs	r0, #1
   dbcc6:	f001 f8bf 	bl	dce48 <log_write>
        bool bResult = BackgroundPublishRK::instance().publish(event.eventName, event.eventData, event.flags, 
   dbcca:	f7fa fe9f 	bl	d6a0c <_ZN19BackgroundPublishRK8instanceEv>
	    _M_invoker = &_My_handler::_M_invoke;
   dbcce:	4b31      	ldr	r3, [pc, #196]	; (dbd94 <_ZN11SleepHelper21stateHandlerConnectedEv+0x208>)
   dbcd0:	9306      	str	r3, [sp, #24]
	    _M_manager = &_My_handler::_M_manager;
   dbcd2:	4b31      	ldr	r3, [pc, #196]	; (dbd98 <_ZN11SleepHelper21stateHandlerConnectedEv+0x20c>)
   dbcd4:	9305      	str	r3, [sp, #20]
   dbcd6:	2300      	movs	r3, #0
   dbcd8:	e9cd 5300 	strd	r5, r3, [sp]
   dbcdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   dbcde:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   dbce2:	9907      	ldr	r1, [sp, #28]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   dbce4:	9403      	str	r4, [sp, #12]
   dbce6:	f7fa ffc9 	bl	d6c7c <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
   dbcea:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   dbcec:	4628      	mov	r0, r5
   dbcee:	f7f8 fec5 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
        if (!bResult) {
   dbcf2:	b934      	cbnz	r4, dbd02 <_ZN11SleepHelper21stateHandlerConnectedEv+0x176>
            stateHandler = &SleepHelper::stateHandlerConnected;
   dbcf4:	4b29      	ldr	r3, [pc, #164]	; (dbd9c <_ZN11SleepHelper21stateHandlerConnectedEv+0x210>)
   dbcf6:	4629      	mov	r1, r5
   dbcf8:	4638      	mov	r0, r7
   dbcfa:	e9cd 3403 	strd	r3, r4, [sp, #12]
   dbcfe:	f7fe fdb9 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        PublishData event = publishData.front();
   dbd02:	a807      	add	r0, sp, #28
   dbd04:	f7fe f881 	bl	d9e0a <_ZN11SleepHelper11PublishDataD1Ev>
}
   dbd08:	b011      	add	sp, #68	; 0x44
   dbd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   dbd0e:	aa07      	add	r2, sp, #28
   dbd10:	4629      	mov	r1, r5
   dbd12:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
   dbd16:	f7ff fed9 	bl	dbacc <_ZNSt6vectorIN11SleepHelper11PublishDataESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   dbd1a:	e786      	b.n	dbc2a <_ZN11SleepHelper21stateHandlerConnectedEv+0x9e>
            wakeEventPayload.clear();
   dbd1c:	f204 70d4 	addw	r0, r4, #2004	; 0x7d4
   dbd20:	f7ff fc74 	bl	db60c <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
   dbd24:	e78e      	b.n	dbc44 <_ZN11SleepHelper21stateHandlerConnectedEv+0xb8>
   dbd26:	f000 fe87 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
    system_tick_t elapsedMs = millis() - connectedStartMillis;
   dbd2a:	f8d4 37c8 	ldr.w	r3, [r4, #1992]	; 0x7c8
   dbd2e:	f8d4 56d4 	ldr.w	r5, [r4, #1748]	; 0x6d4
   dbd32:	f8d4 66c8 	ldr.w	r6, [r4, #1736]	; 0x6c8
   dbd36:	eba0 0803 	sub.w	r8, r0, r3
            bool finalRes = false;
   dbd3a:	2700      	movs	r7, #0
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   dbd3c:	f06f 0901 	mvn.w	r9, #1
            for(auto it = callbackState.begin(), it2 = callbackFunctions.begin(); it != callbackState.end(); ++it, ++it2) {
   dbd40:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
   dbd44:	42ab      	cmp	r3, r5
   dbd46:	d015      	beq.n	dbd74 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e8>
                if (it->callbackState != AppCallbackState::CALLBACK_START_RETURNED_FALSE) {
   dbd48:	682b      	ldr	r3, [r5, #0]
   dbd4a:	3302      	adds	r3, #2
   dbd4c:	d00d      	beq.n	dbd6a <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
   dbd4e:	f8cd 801c 	str.w	r8, [sp, #28]
      if (_M_empty())
   dbd52:	68b3      	ldr	r3, [r6, #8]
   dbd54:	b90b      	cbnz	r3, dbd5a <_ZN11SleepHelper21stateHandlerConnectedEv+0x1ce>
	__throw_bad_function_call();
   dbd56:	f004 fd13 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dbd5a:	68f3      	ldr	r3, [r6, #12]
   dbd5c:	aa07      	add	r2, sp, #28
   dbd5e:	4629      	mov	r1, r5
   dbd60:	4630      	mov	r0, r6
   dbd62:	4798      	blx	r3
                    if (res) {
   dbd64:	b920      	cbnz	r0, dbd70 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e4>
                        it->callbackState = AppCallbackState::CALLBACK_START_RETURNED_FALSE;
   dbd66:	f8c5 9000 	str.w	r9, [r5]
      operator++() _GLIBCXX_NOEXCEPT
   dbd6a:	3508      	adds	r5, #8
   dbd6c:	3610      	adds	r6, #16
	return *this;
   dbd6e:	e7e7      	b.n	dbd40 <_ZN11SleepHelper21stateHandlerConnectedEv+0x1b4>
                        finalRes = true;
   dbd70:	4607      	mov	r7, r0
   dbd72:	e7fa      	b.n	dbd6a <_ZN11SleepHelper21stateHandlerConnectedEv+0x1de>
    if (!sleepReadyFunctions.whileAnyTrue(elapsedMs)) {
   dbd74:	2f00      	cmp	r7, #0
   dbd76:	d1c7      	bne.n	dbd08 <_ZN11SleepHelper21stateHandlerConnectedEv+0x17c>
        stateHandler = &SleepHelper::stateHandlerDisconnectBeforeSleep;
   dbd78:	4b09      	ldr	r3, [pc, #36]	; (dbda0 <_ZN11SleepHelper21stateHandlerConnectedEv+0x214>)
   dbd7a:	e9cd 3707 	strd	r3, r7, [sp, #28]
   dbd7e:	e714      	b.n	dbbaa <_ZN11SleepHelper21stateHandlerConnectedEv+0x1e>
   dbd80:	000dab69 	.word	0x000dab69
   dbd84:	2003e510 	.word	0x2003e510
   dbd88:	000d9af5 	.word	0x000d9af5
   dbd8c:	000e4625 	.word	0x000e4625
   dbd90:	000e44e9 	.word	0x000e44e9
   dbd94:	000dacc1 	.word	0x000dacc1
   dbd98:	000d989b 	.word	0x000d989b
   dbd9c:	000dbb8d 	.word	0x000dbb8d
   dbda0:	000dc7ad 	.word	0x000dc7ad

000dbda4 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
   dbda4:	b530      	push	{r4, r5, lr}
   dbda6:	b089      	sub	sp, #36	; 0x24
   dbda8:	460c      	mov	r4, r1
   dbdaa:	4605      	mov	r5, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbdac:	4601      	mov	r1, r0
   dbdae:	4668      	mov	r0, sp
   dbdb0:	f7ff fc37 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
      __a = _GLIBCXX_MOVE(__b);
   dbdb4:	4621      	mov	r1, r4
   dbdb6:	4628      	mov	r0, r5
   dbdb8:	f7ff fc46 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      __b = _GLIBCXX_MOVE(__tmp);
   dbdbc:	4669      	mov	r1, sp
   dbdbe:	4620      	mov	r0, r4
   dbdc0:	f7ff fc42 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dbdc4:	4668      	mov	r0, sp
   dbdc6:	f7ff fb6e 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
    }
   dbdca:	b009      	add	sp, #36	; 0x24
   dbdcc:	bd30      	pop	{r4, r5, pc}

000dbdce <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
   dbdce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbdd2:	4604      	mov	r4, r0
   dbdd4:	b091      	sub	sp, #68	; 0x44
   dbdd6:	4617      	mov	r7, r2
   dbdd8:	469a      	mov	sl, r3
   dbdda:	460d      	mov	r5, r1
      { return __normal_iterator(_M_current + __n); }
   dbddc:	f100 0820 	add.w	r8, r0, #32
    { return __lhs.base() - __rhs.base(); }
   dbde0:	1b2e      	subs	r6, r5, r4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
   dbde2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbde6:	dd75      	ble.n	dbed4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
   dbde8:	ea4f 1966 	mov.w	r9, r6, asr #5
	{
	  if (__depth_limit == 0)
   dbdec:	bb47      	cbnz	r7, dbe40 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x72>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
   dbdee:	f1a9 0602 	sub.w	r6, r9, #2
   dbdf2:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbdf4:	eb04 1146 	add.w	r1, r4, r6, lsl #5
   dbdf8:	4668      	mov	r0, sp
   dbdfa:	f7ff fc12 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   dbdfe:	4669      	mov	r1, sp
   dbe00:	a808      	add	r0, sp, #32
   dbe02:	f7ff fc0e 	bl	db622 <_ZN11SleepHelper13EventCombiner9EventInfoC1EOS1_>
   dbe06:	4620      	mov	r0, r4
   dbe08:	ab08      	add	r3, sp, #32
   dbe0a:	464a      	mov	r2, r9
   dbe0c:	4631      	mov	r1, r6
   dbe0e:	f7ff fc39 	bl	db684 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiS4_NS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_SJ_T1_T2_.isra.0>
   dbe12:	a808      	add	r0, sp, #32
   dbe14:	f7ff fb47 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
			     __comp);
	  if (__parent == 0)
   dbe18:	b96e      	cbnz	r6, dbe36 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x68>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbe1a:	4668      	mov	r0, sp
   dbe1c:	f7ff fb43 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   dbe20:	1b2b      	subs	r3, r5, r4
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   dbe22:	2b20      	cmp	r3, #32
   dbe24:	f1a5 0520 	sub.w	r5, r5, #32
   dbe28:	dd54      	ble.n	dbed4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x106>
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
   dbe2a:	462a      	mov	r2, r5
   dbe2c:	4629      	mov	r1, r5
   dbe2e:	4620      	mov	r0, r4
   dbe30:	f7ff fc93 	bl	db75a <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_SI_RT0_.isra.0>
      while (__last - __first > 1)
   dbe34:	e7f4      	b.n	dbe20 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x52>
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbe36:	4668      	mov	r0, sp
	  __parent--;
   dbe38:	3e01      	subs	r6, #1
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   dbe3a:	f7ff fb34 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   dbe3e:	e7d9      	b.n	dbdf4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x26>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   dbe40:	11b6      	asrs	r6, r6, #6
      { return __normal_iterator(_M_current + __n); }
   dbe42:	eb04 1646 	add.w	r6, r4, r6, lsl #5
      if (__comp(__a, __b))
   dbe46:	4631      	mov	r1, r6
   dbe48:	4640      	mov	r0, r8
   dbe4a:	f7ff fbb4 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
      { return __normal_iterator(_M_current - __n); }
   dbe4e:	f1a5 0920 	sub.w	r9, r5, #32
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
   dbe52:	3f01      	subs	r7, #1
	  if (__comp(__b, __c))
   dbe54:	4649      	mov	r1, r9
      if (__comp(__a, __b))
   dbe56:	b160      	cbz	r0, dbe72 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa4>
	  if (__comp(__b, __c))
   dbe58:	4630      	mov	r0, r6
   dbe5a:	f7ff fbac 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbe5e:	b108      	cbz	r0, dbe64 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x96>
      swap(*__a, *__b);
   dbe60:	4631      	mov	r1, r6
   dbe62:	e00b      	b.n	dbe7c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
	  else if (__comp(__a, __c))
   dbe64:	4649      	mov	r1, r9
   dbe66:	4640      	mov	r0, r8
   dbe68:	f7ff fba5 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbe6c:	b128      	cbz	r0, dbe7a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xac>
   dbe6e:	4649      	mov	r1, r9
   dbe70:	e004      	b.n	dbe7c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xae>
      else if (__comp(__a, __c))
   dbe72:	4640      	mov	r0, r8
   dbe74:	f7ff fb9f 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbe78:	b1f8      	cbz	r0, dbeba <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xec>
   dbe7a:	4641      	mov	r1, r8
   dbe7c:	4620      	mov	r0, r4
   dbe7e:	f7ff ff91 	bl	dbda4 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
    __unguarded_partition(_RandomAccessIterator __first,
   dbe82:	4646      	mov	r6, r8
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
   dbe84:	46a9      	mov	r9, r5
	  while (__comp(__first, __pivot))
   dbe86:	4621      	mov	r1, r4
   dbe88:	4630      	mov	r0, r6
   dbe8a:	f7ff fb94 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbe8e:	b9f8      	cbnz	r0, dbed0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x102>
   dbe90:	f1a9 0b20 	sub.w	fp, r9, #32
	  while (__comp(__pivot, __last))
   dbe94:	4659      	mov	r1, fp
   dbe96:	4620      	mov	r0, r4
   dbe98:	f7ff fb8d 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbe9c:	46d9      	mov	r9, fp
   dbe9e:	f1ab 0b20 	sub.w	fp, fp, #32
   dbea2:	2800      	cmp	r0, #0
   dbea4:	d1f6      	bne.n	dbe94 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xc6>
	  if (!(__first < __last))
   dbea6:	454e      	cmp	r6, r9
   dbea8:	d30e      	bcc.n	dbec8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xfa>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   dbeaa:	4629      	mov	r1, r5
   dbeac:	4653      	mov	r3, sl
   dbeae:	463a      	mov	r2, r7
   dbeb0:	4630      	mov	r0, r6
   dbeb2:	f7ff ff8c 	bl	dbdce <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      while (__last - __first > int(_S_threshold))
   dbeb6:	4635      	mov	r5, r6
   dbeb8:	e792      	b.n	dbde0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x12>
      else if (__comp(__b, __c))
   dbeba:	4649      	mov	r1, r9
   dbebc:	4630      	mov	r0, r6
   dbebe:	f7ff fb7a 	bl	db5b6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS5_EEjEUlNS3_9EventInfoES9_E_EclINS_17__normal_iteratorIPS9_S4_IS9_SaIS9_EEEESH_EEbT_T0_.isra.0>
   dbec2:	2800      	cmp	r0, #0
   dbec4:	d0cc      	beq.n	dbe60 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0x92>
   dbec6:	e7d2      	b.n	dbe6e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xa0>
   dbec8:	4649      	mov	r1, r9
   dbeca:	4630      	mov	r0, r6
   dbecc:	f7ff ff6a 	bl	dbda4 <_ZSt4swapIN11SleepHelper13EventCombiner9EventInfoEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
      operator++() _GLIBCXX_NOEXCEPT
   dbed0:	3620      	adds	r6, #32
   dbed2:	e7d8      	b.n	dbe86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_+0xb8>
	  __last = __cut;
	}
    }
   dbed4:	b011      	add	sp, #68	; 0x44
   dbed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dbedc <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>:
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   dbedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbee0:	4617      	mov	r7, r2
   dbee2:	b09f      	sub	sp, #124	; 0x7c
   dbee4:	4604      	mov	r4, r0
    events.clear();
   dbee6:	4608      	mov	r0, r1
void SleepHelper::EventCombiner::generateEvents(std::vector<String> &events, size_t maxSize) {
   dbee8:	4688      	mov	r8, r1
    events.clear();
   dbeea:	f7ff fb8f 	bl	db60c <_ZNSt6vectorI6StringSaIS0_EE5clearEv>
	: _M_start(), _M_finish(), _M_end_of_storage()
   dbeee:	2300      	movs	r3, #0
    char *buf = (char *)malloc(maxSize + 1);
   dbef0:	1c78      	adds	r0, r7, #1
   dbef2:	e9cd 3307 	strd	r3, r3, [sp, #28]
   dbef6:	9309      	str	r3, [sp, #36]	; 0x24
   dbef8:	f001 f8de 	bl	dd0b8 <malloc>
    if (!buf) {
   dbefc:	4606      	mov	r6, r0
   dbefe:	b928      	cbnz	r0, dbf0c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x30>
    std::vector<EventInfo> infoArray;
   dbf00:	a807      	add	r0, sp, #28
   dbf02:	f7ff fb72 	bl	db5ea <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EED1Ev>
}
   dbf06:	b01f      	add	sp, #124	; 0x7c
   dbf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      : _M_current(__i) { }
   dbf0c:	6925      	ldr	r5, [r4, #16]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf0e:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = oneTimeCallbacks.callbackFunctions.rbegin(); it != oneTimeCallbacks.callbackFunctions.rend(); ++it) {
   dbf12:	68e3      	ldr	r3, [r4, #12]
   dbf14:	429d      	cmp	r5, r3
   dbf16:	d017      	beq.n	dbf48 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x6c>
	--_M_current;
   dbf18:	3d10      	subs	r5, #16
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf1a:	4629      	mov	r1, r5
   dbf1c:	a811      	add	r0, sp, #68	; 0x44
   dbf1e:	f7fe fb67 	bl	da5f0 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   dbf22:	a911      	add	r1, sp, #68	; 0x44
   dbf24:	a816      	add	r0, sp, #88	; 0x58
   dbf26:	f7fe ff13 	bl	dad50 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   dbf2a:	463b      	mov	r3, r7
   dbf2c:	4632      	mov	r2, r6
   dbf2e:	a916      	add	r1, sp, #88	; 0x58
   dbf30:	4620      	mov	r0, r4
   dbf32:	f8cd 9000 	str.w	r9, [sp]
   dbf36:	f7ff fd31 	bl	db99c <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
    class function<_Res(_ArgTypes...)>
   dbf3a:	a816      	add	r0, sp, #88	; 0x58
   dbf3c:	f7f8 fd9e 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dbf40:	a811      	add	r0, sp, #68	; 0x44
   dbf42:	f7f8 fd9b 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	return *this;
   dbf46:	e7e4      	b.n	dbf12 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x36>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dbf48:	6825      	ldr	r5, [r4, #0]
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf4a:	f10d 091c 	add.w	r9, sp, #28
    for(auto it = callbacks.callbackFunctions.begin(); it != callbacks.callbackFunctions.end(); ++it) {
   dbf4e:	6863      	ldr	r3, [r4, #4]
   dbf50:	42ab      	cmp	r3, r5
   dbf52:	d017      	beq.n	dbf84 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0xa8>
        generateEventInternal(*it, buf, maxSize, infoArray);        
   dbf54:	4629      	mov	r1, r5
   dbf56:	a811      	add	r0, sp, #68	; 0x44
   dbf58:	f7fe fb4a 	bl	da5f0 <_ZNSt8functionIFbRN5spark10JSONWriterERiEEC1ERKS5_>
   dbf5c:	a911      	add	r1, sp, #68	; 0x44
   dbf5e:	a816      	add	r0, sp, #88	; 0x58
   dbf60:	f7fe fef6 	bl	dad50 <_ZNSt8functionIFvRN5spark10JSONWriterERiEEC1IS_IFbS2_S3_EEvvEET_>
   dbf64:	463b      	mov	r3, r7
   dbf66:	4632      	mov	r2, r6
   dbf68:	a916      	add	r1, sp, #88	; 0x58
   dbf6a:	4620      	mov	r0, r4
   dbf6c:	f8cd 9000 	str.w	r9, [sp]
   dbf70:	f7ff fd14 	bl	db99c <_ZN11SleepHelper13EventCombiner21generateEventInternalESt8functionIFvRN5spark10JSONWriterERiEEPcjRSt6vectorINS0_9EventInfoESaISA_EE>
   dbf74:	a816      	add	r0, sp, #88	; 0x58
   dbf76:	f7f8 fd81 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dbf7a:	a811      	add	r0, sp, #68	; 0x44
   dbf7c:	f7f8 fd7e 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   dbf80:	3510      	adds	r5, #16
	return *this;
   dbf82:	e7e4      	b.n	dbf4e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x72>
    if (eventHistory.getHasEvents()) {
   dbf84:	f104 0a18 	add.w	sl, r4, #24
   dbf88:	4650      	mov	r0, sl
   dbf8a:	f7fd ffc1 	bl	d9f10 <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   dbf8e:	9003      	str	r0, [sp, #12]
   dbf90:	2800      	cmp	r0, #0
   dbf92:	d040      	beq.n	dc016 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        memset(buf, 0, maxSize);
   dbf94:	463a      	mov	r2, r7
   dbf96:	2100      	movs	r1, #0
   dbf98:	4630      	mov	r0, r6
   dbf9a:	f005 fb8d 	bl	e16b8 <memset>
        state_(BEGIN) {
   dbf9e:	2500      	movs	r5, #0
        n_(0) {
   dbfa0:	4bc1      	ldr	r3, [pc, #772]	; (dc2a8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>)
   dbfa2:	9311      	str	r3, [sp, #68]	; 0x44
        writer.beginObject();
   dbfa4:	a811      	add	r0, sp, #68	; 0x44
   dbfa6:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
        state_(BEGIN) {
   dbfaa:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
        n_(0) {
   dbfae:	9515      	str	r5, [sp, #84]	; 0x54
   dbfb0:	f002 fa7d 	bl	de4ae <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   dbfb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dbfb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   dbfb8:	a811      	add	r0, sp, #68	; 0x44
   dbfba:	f002 fb5b 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - overhead, false)) {
   dbfbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dbfc0:	1ffa      	subs	r2, r7, #7
   dbfc2:	1a52      	subs	r2, r2, r1
   dbfc4:	462b      	mov	r3, r5
   dbfc6:	a911      	add	r1, sp, #68	; 0x44
   dbfc8:	4650      	mov	r0, sl
   dbfca:	f7fe f88f 	bl	da0ec <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   dbfce:	9003      	str	r0, [sp, #12]
   dbfd0:	b308      	cbz	r0, dc016 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x13a>
        class EventInfo {
   dbfd2:	49b6      	ldr	r1, [pc, #728]	; (dc2ac <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3d0>)
   dbfd4:	a816      	add	r0, sp, #88	; 0x58
   dbfd6:	f003 fd92 	bl	dfafe <_ZN6StringC1EPKc>
            eventInfo.priority = 1;
   dbfda:	2301      	movs	r3, #1
            eventInfo.keys.push_back(eventHistoryKey);
   dbfdc:	f104 0134 	add.w	r1, r4, #52	; 0x34
   dbfe0:	a81b      	add	r0, sp, #108	; 0x6c
            eventInfo.priority = 1;
   dbfe2:	931a      	str	r3, [sp, #104]	; 0x68
   dbfe4:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
   dbfe8:	951d      	str	r5, [sp, #116]	; 0x74
            eventInfo.keys.push_back(eventHistoryKey);
   dbfea:	f7ff fc4f 	bl	db88c <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
            writer.endObject();
   dbfee:	a811      	add	r0, sp, #68	; 0x44
   dbff0:	f002 fa3b 	bl	de46a <_ZN5spark10JSONWriter9endObjectEv>
            buf[strlen(buf) - 1] = 0;
   dbff4:	4630      	mov	r0, r6
   dbff6:	f005 fbea 	bl	e17ce <strlen>
   dbffa:	4430      	add	r0, r6
            eventInfo.json = &buf[1];
   dbffc:	1c71      	adds	r1, r6, #1
            buf[strlen(buf) - 1] = 0;
   dbffe:	f800 5c01 	strb.w	r5, [r0, #-1]
            eventInfo.json = &buf[1];
   dc002:	a816      	add	r0, sp, #88	; 0x58
   dc004:	f003 fdd9 	bl	dfbba <_ZN6StringaSEPKc>
            infoArray.push_back(eventInfo);
   dc008:	a807      	add	r0, sp, #28
   dc00a:	a916      	add	r1, sp, #88	; 0x58
   dc00c:	f7ff fac0 	bl	db590 <_ZNSt6vectorIN11SleepHelper13EventCombiner9EventInfoESaIS2_EE9push_backERKS2_>
            EventInfo eventInfo;
   dc010:	a816      	add	r0, sp, #88	; 0x58
   dc012:	f7ff fa48 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
      { return begin() == end(); }
   dc016:	e9dd 9b07 	ldrd	r9, fp, [sp, #28]
    if (!infoArray.empty()) {
   dc01a:	45d9      	cmp	r9, fp
   dc01c:	f000 80bf 	beq.w	dc19e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2c2>
    { return __lhs.base() - __rhs.base(); }
   dc020:	ebab 0509 	sub.w	r5, fp, r9
   dc024:	116a      	asrs	r2, r5, #5

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
   dc026:	fab2 f282 	clz	r2, r2
   dc02a:	f1c2 021f 	rsb	r2, r2, #31
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
   dc02e:	f04f 0300 	mov.w	r3, #0
   dc032:	0052      	lsls	r2, r2, #1
   dc034:	4659      	mov	r1, fp
   dc036:	4648      	mov	r0, r9
   dc038:	f7ff fec9 	bl	dbdce <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEEiNS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_T1_>
      if (__last - __first > int(_S_threshold))
   dc03c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   dc040:	dd0c      	ble.n	dc05c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x180>
      { return __normal_iterator(_M_current + __n); }
   dc042:	f509 7500 	add.w	r5, r9, #512	; 0x200
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   dc046:	4629      	mov	r1, r5
   dc048:	4648      	mov	r0, r9
   dc04a:	f7ff fbd8 	bl	db7fe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   dc04e:	45ab      	cmp	fp, r5
   dc050:	d008      	beq.n	dc064 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x188>
	std::__unguarded_linear_insert(__i,
   dc052:	4628      	mov	r0, r5
   dc054:	f7ff fba3 	bl	db79e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops14_Val_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_T0_.isra.0>
      operator++() _GLIBCXX_NOEXCEPT
   dc058:	3520      	adds	r5, #32
	return *this;
   dc05a:	e7f8      	b.n	dc04e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x172>
	std::__insertion_sort(__first, __last, __comp);
   dc05c:	4659      	mov	r1, fp
   dc05e:	4648      	mov	r0, r9
   dc060:	f7ff fbcd 	bl	db7fe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN11SleepHelper13EventCombiner9EventInfoESt6vectorIS4_SaIS4_EEEENS0_5__ops15_Iter_comp_iterIZNS3_14generateEventsERS6_I6StringSaISC_EEjEUlS4_S4_E_EEEvT_SI_T0_.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   dc064:	2300      	movs	r3, #0
   dc066:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
      : _M_current(__i) { }
   dc06a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   dc06e:	9313      	str	r3, [sp, #76]	; 0x4c
        for(auto it = infoArray.begin(); it != infoArray.end(); ) {
   dc070:	9b08      	ldr	r3, [sp, #32]
   dc072:	459b      	cmp	fp, r3
   dc074:	d036      	beq.n	dc0e4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x208>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc076:	f8db 9014 	ldr.w	r9, [fp, #20]
            bool keyExists = false;
   dc07a:	2500      	movs	r5, #0
            for(auto it2 = it->keys.begin(); it2 != it->keys.end(); ++it2) {
   dc07c:	f8db 3018 	ldr.w	r3, [fp, #24]
   dc080:	4599      	cmp	r9, r3
   dc082:	d014      	beq.n	dc0ae <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1d2>
   dc084:	9b11      	ldr	r3, [sp, #68]	; 0x44
                for(auto it3 = keysAdded.begin(); it3 != keysAdded.end(); ++it3) {
   dc086:	9a12      	ldr	r2, [sp, #72]	; 0x48
   dc088:	4293      	cmp	r3, r2
   dc08a:	d009      	beq.n	dc0a0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1c4>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   dc08c:	4618      	mov	r0, r3
   dc08e:	4649      	mov	r1, r9
   dc090:	9304      	str	r3, [sp, #16]
   dc092:	f003 fe02 	bl	dfc9a <_ZNK6String6equalsERKS_>
   dc096:	9b04      	ldr	r3, [sp, #16]
   dc098:	3310      	adds	r3, #16
                    if (*it3 == *it2) {
   dc09a:	2800      	cmp	r0, #0
   dc09c:	d0f3      	beq.n	dc086 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1aa>
                        keyExists = true;
   dc09e:	2501      	movs	r5, #1
                keysAdded.push_back(*it2);
   dc0a0:	4649      	mov	r1, r9
   dc0a2:	a811      	add	r0, sp, #68	; 0x44
   dc0a4:	f7ff fbf2 	bl	db88c <_ZNSt6vectorI6StringSaIS0_EE9push_backERKS0_>
      operator++() _GLIBCXX_NOEXCEPT
   dc0a8:	f109 0910 	add.w	r9, r9, #16
	return *this;
   dc0ac:	e7e6      	b.n	dc07c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1a0>
            if (keyExists) {
   dc0ae:	f10b 0320 	add.w	r3, fp, #32
   dc0b2:	b1ad      	cbz	r5, dc0e0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x204>
   dc0b4:	9d08      	ldr	r5, [sp, #32]
      if (__position + 1 != end())
   dc0b6:	429d      	cmp	r5, r3
   dc0b8:	d00c      	beq.n	dc0d4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dc0ba:	1aed      	subs	r5, r5, r3
   dc0bc:	116d      	asrs	r5, r5, #5
   dc0be:	4658      	mov	r0, fp
   dc0c0:	2d00      	cmp	r5, #0
   dc0c2:	f100 0920 	add.w	r9, r0, #32
   dc0c6:	dd05      	ble.n	dc0d4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1f8>
	      *__result = std::move(*__first);
   dc0c8:	4649      	mov	r1, r9
   dc0ca:	f7ff fabd 	bl	db648 <_ZN11SleepHelper13EventCombiner9EventInfoaSEOS1_>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dc0ce:	3d01      	subs	r5, #1
	      ++__result;
   dc0d0:	4648      	mov	r0, r9
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   dc0d2:	e7f5      	b.n	dc0c0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x1e4>
      --this->_M_impl._M_finish;
   dc0d4:	9808      	ldr	r0, [sp, #32]
   dc0d6:	3820      	subs	r0, #32
   dc0d8:	9008      	str	r0, [sp, #32]
	{ __p->~_Up(); }
   dc0da:	f7ff f9e4 	bl	db4a6 <_ZN11SleepHelper13EventCombiner9EventInfoD1Ev>
   dc0de:	465b      	mov	r3, fp
   dc0e0:	469b      	mov	fp, r3
   dc0e2:	e7c5      	b.n	dc070 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x194>
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   dc0e4:	1ebb      	subs	r3, r7, #2
   dc0e6:	18f3      	adds	r3, r6, r3
        *cur++ = '{';
   dc0e8:	46b3      	mov	fp, r6
        char *end = &buf[maxSize - 2]; // Room for leading , and trailing }
   dc0ea:	9305      	str	r3, [sp, #20]
        *cur++ = '{';
   dc0ec:	237b      	movs	r3, #123	; 0x7b
   dc0ee:	f80b 3b01 	strb.w	r3, [fp], #1
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc0f2:	9b07      	ldr	r3, [sp, #28]
   dc0f4:	f103 0920 	add.w	r9, r3, #32
        bool firstEventBuffer = true;
   dc0f8:	2301      	movs	r3, #1
        *cur++ = '{';
   dc0fa:	465d      	mov	r5, fp
        bool firstEventBuffer = true;
   dc0fc:	9304      	str	r3, [sp, #16]
        for(auto it = infoArray.begin(); it != infoArray.end(); ++it) {
   dc0fe:	9808      	ldr	r0, [sp, #32]
   dc100:	f1a9 0120 	sub.w	r1, r9, #32
   dc104:	4288      	cmp	r0, r1
   dc106:	d036      	beq.n	dc176 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
            if (&cur[strlen(it->json)] >= end) {
   dc108:	f859 0c20 	ldr.w	r0, [r9, #-32]
   dc10c:	f005 fb5f 	bl	e17ce <strlen>
   dc110:	9b05      	ldr	r3, [sp, #20]
   dc112:	4428      	add	r0, r5
   dc114:	4283      	cmp	r3, r0
   dc116:	d81a      	bhi.n	dc14e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x272>
                if (cur > &buf[1]) {
   dc118:	455d      	cmp	r5, fp
   dc11a:	d911      	bls.n	dc140 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
                    *cur++ = '}';
   dc11c:	f04f 037d 	mov.w	r3, #125	; 0x7d
   dc120:	702b      	strb	r3, [r5, #0]
                    *cur = 0;
   dc122:	f04f 0300 	mov.w	r3, #0
   dc126:	706b      	strb	r3, [r5, #1]
                    events.push_back(buf);
   dc128:	4631      	mov	r1, r6
   dc12a:	a816      	add	r0, sp, #88	; 0x58
   dc12c:	f003 fce7 	bl	dfafe <_ZN6StringC1EPKc>
      { emplace_back(std::move(__x)); }
   dc130:	a916      	add	r1, sp, #88	; 0x58
   dc132:	4640      	mov	r0, r8
   dc134:	f7ff fbee 	bl	db914 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dc138:	a816      	add	r0, sp, #88	; 0x58
   dc13a:	f003 fc95 	bl	dfa68 <_ZN6StringD1Ev>
   dc13e:	465d      	mov	r5, fp
            if (!firstEventBuffer && it->priority < 50) {
   dc140:	f859 1c10 	ldr.w	r1, [r9, #-16]
   dc144:	2931      	cmp	r1, #49	; 0x31
   dc146:	dd16      	ble.n	dc176 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x29a>
   dc148:	2300      	movs	r3, #0
   dc14a:	9304      	str	r3, [sp, #16]
   dc14c:	e002      	b.n	dc154 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x278>
   dc14e:	9b04      	ldr	r3, [sp, #16]
   dc150:	2b00      	cmp	r3, #0
   dc152:	d0f5      	beq.n	dc140 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x264>
            if (cur != &buf[1]) {
   dc154:	45ab      	cmp	fp, r5
                *cur++ = ',';
   dc156:	bf1c      	itt	ne
   dc158:	212c      	movne	r1, #44	; 0x2c
   dc15a:	f805 1b01 	strbne.w	r1, [r5], #1
            strcpy(cur, it->json);
   dc15e:	f859 1c20 	ldr.w	r1, [r9, #-32]
   dc162:	4628      	mov	r0, r5
   dc164:	f005 fb0e 	bl	e1784 <strcpy>
            cur += strlen(cur);
   dc168:	4628      	mov	r0, r5
   dc16a:	f005 fb30 	bl	e17ce <strlen>
   dc16e:	f109 0920 	add.w	r9, r9, #32
   dc172:	4405      	add	r5, r0
	return *this;
   dc174:	e7c3      	b.n	dc0fe <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x222>
        if (cur > &buf[1]) {
   dc176:	455d      	cmp	r5, fp
   dc178:	d90e      	bls.n	dc198 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2bc>
            *cur++ = '}';
   dc17a:	237d      	movs	r3, #125	; 0x7d
   dc17c:	702b      	strb	r3, [r5, #0]
            *cur = 0;
   dc17e:	2300      	movs	r3, #0
   dc180:	706b      	strb	r3, [r5, #1]
            events.push_back(buf);
   dc182:	4631      	mov	r1, r6
   dc184:	a816      	add	r0, sp, #88	; 0x58
   dc186:	f003 fcba 	bl	dfafe <_ZN6StringC1EPKc>
   dc18a:	4640      	mov	r0, r8
   dc18c:	a916      	add	r1, sp, #88	; 0x58
   dc18e:	f7ff fbc1 	bl	db914 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dc192:	a816      	add	r0, sp, #88	; 0x58
   dc194:	f003 fc68 	bl	dfa68 <_ZN6StringD1Ev>
        std::vector<String> keysAdded;
   dc198:	a811      	add	r0, sp, #68	; 0x44
   dc19a:	f7ff f978 	bl	db48e <_ZNSt6vectorI6StringSaIS0_EED1Ev>
    if (doRemoveEvents) {
   dc19e:	9b03      	ldr	r3, [sp, #12]
   dc1a0:	2b00      	cmp	r3, #0
   dc1a2:	d039      	beq.n	dc218 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc1a4:	f8d8 5000 	ldr.w	r5, [r8]
        doRemoveEvents = false;
   dc1a8:	f04f 0b00 	mov.w	fp, #0
        for(auto it = events.begin(); it != events.end(); ++it) {
   dc1ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc1b0:	42ab      	cmp	r3, r5
   dc1b2:	d02b      	beq.n	dc20c <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x330>
            JSONValue obj = JSONValue::parseCopy(*it);
   dc1b4:	6829      	ldr	r1, [r5, #0]
   dc1b6:	a80a      	add	r0, sp, #40	; 0x28
   dc1b8:	f7fd fd6e 	bl	d9c98 <_ZN5spark9JSONValue9parseCopyEPKc>
            JSONObjectIterator iter(obj);
   dc1bc:	a90a      	add	r1, sp, #40	; 0x28
   dc1be:	a816      	add	r0, sp, #88	; 0x58
   dc1c0:	f7fb fd62 	bl	d7c88 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
            while(iter.next()) {
   dc1c4:	a816      	add	r0, sp, #88	; 0x58
   dc1c6:	f002 f90d 	bl	de3e4 <_ZN5spark18JSONObjectIterator4nextEv>
   dc1ca:	4681      	mov	r9, r0
   dc1cc:	b1b0      	cbz	r0, dc1fc <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x320>
                String key = (const char *)iter.name();
   dc1ce:	a916      	add	r1, sp, #88	; 0x58
   dc1d0:	a811      	add	r0, sp, #68	; 0x44
   dc1d2:	f7fb fd6a 	bl	d7caa <_ZNK5spark18JSONObjectIterator4nameEv>
   dc1d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   dc1d8:	a80d      	add	r0, sp, #52	; 0x34
   dc1da:	f003 fc90 	bl	dfafe <_ZN6StringC1EPKc>
   dc1de:	a812      	add	r0, sp, #72	; 0x48
   dc1e0:	f7f8 fa2e 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc1e4:	f104 0134 	add.w	r1, r4, #52	; 0x34
   dc1e8:	a80d      	add	r0, sp, #52	; 0x34
   dc1ea:	f003 fd56 	bl	dfc9a <_ZNK6String6equalsERKS_>
                    doRemoveEvents = true;
   dc1ee:	2800      	cmp	r0, #0
   dc1f0:	bf18      	it	ne
   dc1f2:	46cb      	movne	fp, r9
                String key = (const char *)iter.name();
   dc1f4:	a80d      	add	r0, sp, #52	; 0x34
   dc1f6:	f003 fc37 	bl	dfa68 <_ZN6StringD1Ev>
            while(iter.next()) {
   dc1fa:	e7e3      	b.n	dc1c4 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2e8>
   dc1fc:	a817      	add	r0, sp, #92	; 0x5c
   dc1fe:	f7f8 fa1f 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dc202:	a80b      	add	r0, sp, #44	; 0x2c
   dc204:	f7f8 fa1c 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   dc208:	3510      	adds	r5, #16
	return *this;
   dc20a:	e7cf      	b.n	dc1ac <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x2d0>
        if (doRemoveEvents) {
   dc20c:	f1bb 0f00 	cmp.w	fp, #0
   dc210:	d002      	beq.n	dc218 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x33c>
            eventHistory.removeEvents();
   dc212:	4650      	mov	r0, sl
   dc214:	f7fd fe04 	bl	d9e20 <_ZN11SleepHelper12EventHistory12removeEventsEv>
        n_(0) {
   dc218:	f8df 908c 	ldr.w	r9, [pc, #140]	; dc2a8 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3cc>
        memset(buf, 0, maxSize);
   dc21c:	2500      	movs	r5, #0
    while(eventHistory.getHasEvents()) {
   dc21e:	4650      	mov	r0, sl
   dc220:	f7fd fe76 	bl	d9f10 <_ZN11SleepHelper12EventHistory12getHasEventsEv>
   dc224:	b378      	cbz	r0, dc286 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3aa>
        memset(buf, 0, maxSize);
   dc226:	463a      	mov	r2, r7
   dc228:	2100      	movs	r1, #0
   dc22a:	4630      	mov	r0, r6
   dc22c:	f005 fa44 	bl	e16b8 <memset>
        writer.beginObject();
   dc230:	a816      	add	r0, sp, #88	; 0x58
   dc232:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
        state_(BEGIN) {
   dc236:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
        n_(0) {
   dc23a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
   dc23e:	951a      	str	r5, [sp, #104]	; 0x68
   dc240:	f002 f935 	bl	de4ae <_ZN5spark10JSONWriter11beginObjectEv>
    return this->name(name.c_str(), name.length());
   dc244:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dc246:	6b61      	ldr	r1, [r4, #52]	; 0x34
   dc248:	a816      	add	r0, sp, #88	; 0x58
   dc24a:	f002 fa13 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
        if (eventHistory.getEvents(writer, maxSize - eventHistoryKey.length() - 6, false)) {        
   dc24e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dc250:	1fba      	subs	r2, r7, #6
   dc252:	1a52      	subs	r2, r2, r1
   dc254:	2300      	movs	r3, #0
   dc256:	a916      	add	r1, sp, #88	; 0x58
   dc258:	4650      	mov	r0, sl
   dc25a:	f7fd ff47 	bl	da0ec <_ZN11SleepHelper12EventHistory9getEventsERN5spark10JSONWriterEjb>
   dc25e:	2800      	cmp	r0, #0
   dc260:	d0dd      	beq.n	dc21e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
            writer.endObject();
   dc262:	a816      	add	r0, sp, #88	; 0x58
   dc264:	f002 f901 	bl	de46a <_ZN5spark10JSONWriter9endObjectEv>
            events.push_back(buf);
   dc268:	4631      	mov	r1, r6
   dc26a:	a811      	add	r0, sp, #68	; 0x44
   dc26c:	f003 fc47 	bl	dfafe <_ZN6StringC1EPKc>
   dc270:	a911      	add	r1, sp, #68	; 0x44
   dc272:	4640      	mov	r0, r8
   dc274:	f7ff fb4e 	bl	db914 <_ZNSt6vectorI6StringSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
   dc278:	a811      	add	r0, sp, #68	; 0x44
   dc27a:	f003 fbf5 	bl	dfa68 <_ZN6StringD1Ev>
            eventHistory.removeEvents();
   dc27e:	4650      	mov	r0, sl
   dc280:	f7fd fdce 	bl	d9e20 <_ZN11SleepHelper12EventHistory12removeEventsEv>
    while(eventHistory.getHasEvents()) {
   dc284:	e7cb      	b.n	dc21e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x342>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   dc286:	e9d4 7803 	ldrd	r7, r8, [r4, #12]
   dc28a:	4547      	cmp	r7, r8
   dc28c:	d007      	beq.n	dc29e <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3c2>
   dc28e:	463d      	mov	r5, r7
   dc290:	4628      	mov	r0, r5
   dc292:	3510      	adds	r5, #16
   dc294:	f7f8 fbf2 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc298:	45a8      	cmp	r8, r5
   dc29a:	d1f9      	bne.n	dc290 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x3b4>
	    this->_M_impl._M_finish = __pos;
   dc29c:	6127      	str	r7, [r4, #16]
    free(buf);
   dc29e:	4630      	mov	r0, r6
   dc2a0:	f000 ff12 	bl	dd0c8 <free>
   dc2a4:	e62c      	b.n	dbf00 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj+0x24>
   dc2a6:	bf00      	nop
   dc2a8:	000e48e4 	.word	0x000e48e4
   dc2ac:	000e44eb 	.word	0x000e44eb

000dc2b0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>:
    generateEvents(events, maxSize);
   dc2b0:	f240 226e 	movw	r2, #622	; 0x26e
   dc2b4:	f7ff be12 	b.w	dbedc <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EEj>

000dc2b8 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv>:
void SleepHelper::stateHandlerConnectedWakeEvents() {
   dc2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   dc2ba:	f890 57d1 	ldrb.w	r5, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerConnectedWakeEvents() {
   dc2be:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   dc2c0:	b9dd      	cbnz	r5, dc2fa <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x42>
    wakeEventFunctions.generateEvents(wakeEventPayload);
   dc2c2:	f200 71d4 	addw	r1, r0, #2004	; 0x7d4
   dc2c6:	f500 60e7 	add.w	r0, r0, #1848	; 0x738
   dc2ca:	f7ff fff1 	bl	dc2b0 <_ZN11SleepHelper13EventCombiner14generateEventsERSt6vectorI6StringSaIS2_EE>
    lastEventHistoryCheckMillis = 0;
   dc2ce:	f8d4 36d4 	ldr.w	r3, [r4, #1748]	; 0x6d4
   dc2d2:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
                it->callbackState = newState;
   dc2d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   dc2da:	f8d4 16d8 	ldr.w	r1, [r4, #1752]	; 0x6d8
   dc2de:	4299      	cmp	r1, r3
   dc2e0:	d002      	beq.n	dc2e8 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x30>
                it->callbackState = newState;
   dc2e2:	f843 2b08 	str.w	r2, [r3], #8
   dc2e6:	e7f8      	b.n	dc2da <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x22>
    stateHandler = &SleepHelper::stateHandlerConnected;
   dc2e8:	4b05      	ldr	r3, [pc, #20]	; (dc300 <_ZN11SleepHelper31stateHandlerConnectedWakeEventsEv+0x48>)
   dc2ea:	9300      	str	r3, [sp, #0]
   dc2ec:	4669      	mov	r1, sp
   dc2ee:	2300      	movs	r3, #0
   dc2f0:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dc2f4:	9301      	str	r3, [sp, #4]
   dc2f6:	f7fe fabd 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dc2fa:	b003      	add	sp, #12
   dc2fc:	bd30      	pop	{r4, r5, pc}
   dc2fe:	bf00      	nop
   dc300:	000dbb8d 	.word	0x000dbb8d

000dc304 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE>:
}
   dc304:	b538      	push	{r3, r4, r5, lr}
};
   dc306:	4c16      	ldr	r4, [pc, #88]	; (dc360 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x5c>)
        val_(val) {
   dc308:	4b16      	ldr	r3, [pc, #88]	; (dc364 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x60>)
   dc30a:	4917      	ldr	r1, [pc, #92]	; (dc368 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x64>)
   dc30c:	2201      	movs	r2, #1
   dc30e:	701a      	strb	r2, [r3, #0]
   dc310:	4620      	mov	r0, r4
   dc312:	2201      	movs	r2, #1
   dc314:	2300      	movs	r3, #0
   dc316:	e8e0 2302 	strd	r2, r3, [r0], #8
   dc31a:	f003 fbf0 	bl	dfafe <_ZN6StringC1EPKc>
   dc31e:	2532      	movs	r5, #50	; 0x32
   dc320:	2202      	movs	r2, #2
   dc322:	2300      	movs	r3, #0
   dc324:	4911      	ldr	r1, [pc, #68]	; (dc36c <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x68>)
   dc326:	61a5      	str	r5, [r4, #24]
   dc328:	f104 0028 	add.w	r0, r4, #40	; 0x28
   dc32c:	e9c4 2308 	strd	r2, r3, [r4, #32]
   dc330:	f003 fbe5 	bl	dfafe <_ZN6StringC1EPKc>
   dc334:	2204      	movs	r2, #4
   dc336:	2300      	movs	r3, #0
   dc338:	490d      	ldr	r1, [pc, #52]	; (dc370 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x6c>)
   dc33a:	63a5      	str	r5, [r4, #56]	; 0x38
   dc33c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   dc340:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   dc344:	f003 fbdb 	bl	dfafe <_ZN6StringC1EPKc>
   dc348:	2208      	movs	r2, #8
   dc34a:	2300      	movs	r3, #0
   dc34c:	4909      	ldr	r1, [pc, #36]	; (dc374 <_GLOBAL__sub_I__ZN11SleepHelper9_instanceE+0x70>)
   dc34e:	65a5      	str	r5, [r4, #88]	; 0x58
   dc350:	f104 0068 	add.w	r0, r4, #104	; 0x68
   dc354:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
   dc358:	f003 fbd1 	bl	dfafe <_ZN6StringC1EPKc>
   dc35c:	67a5      	str	r5, [r4, #120]	; 0x78
}
   dc35e:	bd38      	pop	{r3, r4, r5, pc}
   dc360:	2003e490 	.word	0x2003e490
   dc364:	2003e510 	.word	0x2003e510
   dc368:	000e4643 	.word	0x000e4643
   dc36c:	000e4646 	.word	0x000e4646
   dc370:	000e464a 	.word	0x000e464a
   dc374:	000e464d 	.word	0x000e464d

000dc378 <_ZN11SleepHelperD1Ev>:
SleepHelper::~SleepHelper() {
   dc378:	4b7b      	ldr	r3, [pc, #492]	; (dc568 <_ZN11SleepHelperD1Ev+0x1f0>)
   dc37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc37e:	4604      	mov	r4, r0
   dc380:	6003      	str	r3, [r0, #0]
   dc382:	f200 70d4 	addw	r0, r0, #2004	; 0x7d4
   dc386:	f7ff f882 	bl	db48e <_ZNSt6vectorI6StringSaIS0_EED1Ev>
   dc38a:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dc38e:	f7f8 fb75 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc392:	f8d4 5780 	ldr.w	r5, [r4, #1920]	; 0x780
   dc396:	f8d4 6784 	ldr.w	r6, [r4, #1924]	; 0x784
   dc39a:	42ae      	cmp	r6, r5
   dc39c:	d004      	beq.n	dc3a8 <_ZN11SleepHelperD1Ev+0x30>
    { __pointer->~_Tp(); }
   dc39e:	4628      	mov	r0, r5
   dc3a0:	f7fd fd33 	bl	d9e0a <_ZN11SleepHelper11PublishDataD1Ev>
	  for (; __first != __last; ++__first)
   dc3a4:	3524      	adds	r5, #36	; 0x24
   dc3a6:	e7f8      	b.n	dc39a <_ZN11SleepHelperD1Ev+0x22>
	_M_deallocate(_M_impl._M_start,
   dc3a8:	f8d4 0780 	ldr.w	r0, [r4, #1920]	; 0x780
	if (__p)
   dc3ac:	b108      	cbz	r0, dc3b2 <_ZN11SleepHelperD1Ev+0x3a>
	::operator delete(__p);
   dc3ae:	f7f7 fe76 	bl	d409e <_ZdlPv>
    class EventCombiner {
   dc3b2:	f204 706c 	addw	r0, r4, #1900	; 0x76c
   dc3b6:	f003 fb57 	bl	dfa68 <_ZN6StringD1Ev>
    class EventHistory : public SleepHelperRecursiveMutex {
   dc3ba:	f204 7054 	addw	r0, r4, #1876	; 0x754
   dc3be:	f003 fb53 	bl	dfa68 <_ZN6StringD1Ev>
            if (handle_) {
   dc3c2:	f8d4 0750 	ldr.w	r0, [r4, #1872]	; 0x750
   dc3c6:	f504 65e7 	add.w	r5, r4, #1848	; 0x738
   dc3ca:	b108      	cbz	r0, dc3d0 <_ZN11SleepHelperD1Ev+0x58>
                os_mutex_recursive_destroy(handle_);
   dc3cc:	f000 faec 	bl	dc9a8 <os_mutex_recursive_destroy>
    class AppCallback {
   dc3d0:	f204 7044 	addw	r0, r4, #1860	; 0x744
   dc3d4:	f7fe f8fb 	bl	da5ce <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   dc3d8:	4628      	mov	r0, r5
   dc3da:	f7fe f8f8 	bl	da5ce <_ZNSt6vectorISt8functionIFbRN5spark10JSONWriterERiEESaIS6_EED1Ev>
   dc3de:	f504 60e5 	add.w	r0, r4, #1832	; 0x728
   dc3e2:	f003 fb41 	bl	dfa68 <_ZN6StringD1Ev>
   dc3e6:	f504 60e2 	add.w	r0, r4, #1808	; 0x710
   dc3ea:	f7fd fcf9 	bl	d9de0 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc3ee:	f8d4 5704 	ldr.w	r5, [r4, #1796]	; 0x704
   dc3f2:	f8d4 6708 	ldr.w	r6, [r4, #1800]	; 0x708
   dc3f6:	42ae      	cmp	r6, r5
   dc3f8:	d004      	beq.n	dc404 <_ZN11SleepHelperD1Ev+0x8c>
   dc3fa:	4628      	mov	r0, r5
   dc3fc:	f7f8 fb3e 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc400:	3510      	adds	r5, #16
   dc402:	e7f8      	b.n	dc3f6 <_ZN11SleepHelperD1Ev+0x7e>
	_M_deallocate(_M_impl._M_start,
   dc404:	f8d4 0704 	ldr.w	r0, [r4, #1796]	; 0x704
	if (__p)
   dc408:	b108      	cbz	r0, dc40e <_ZN11SleepHelperD1Ev+0x96>
   dc40a:	f7f7 fe48 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc40e:	f8d4 56f8 	ldr.w	r5, [r4, #1784]	; 0x6f8
   dc412:	f8d4 66fc 	ldr.w	r6, [r4, #1788]	; 0x6fc
   dc416:	42ae      	cmp	r6, r5
   dc418:	d004      	beq.n	dc424 <_ZN11SleepHelperD1Ev+0xac>
   dc41a:	4628      	mov	r0, r5
   dc41c:	f7f8 fb2e 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc420:	3510      	adds	r5, #16
   dc422:	e7f8      	b.n	dc416 <_ZN11SleepHelperD1Ev+0x9e>
	_M_deallocate(_M_impl._M_start,
   dc424:	f8d4 06f8 	ldr.w	r0, [r4, #1784]	; 0x6f8
	if (__p)
   dc428:	b108      	cbz	r0, dc42e <_ZN11SleepHelperD1Ev+0xb6>
   dc42a:	f7f7 fe38 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc42e:	f8d4 56ec 	ldr.w	r5, [r4, #1772]	; 0x6ec
   dc432:	f8d4 66f0 	ldr.w	r6, [r4, #1776]	; 0x6f0
   dc436:	42ae      	cmp	r6, r5
   dc438:	d004      	beq.n	dc444 <_ZN11SleepHelperD1Ev+0xcc>
   dc43a:	4628      	mov	r0, r5
   dc43c:	f7f8 fb1e 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc440:	3510      	adds	r5, #16
   dc442:	e7f8      	b.n	dc436 <_ZN11SleepHelperD1Ev+0xbe>
	_M_deallocate(_M_impl._M_start,
   dc444:	f8d4 06ec 	ldr.w	r0, [r4, #1772]	; 0x6ec
	if (__p)
   dc448:	b108      	cbz	r0, dc44e <_ZN11SleepHelperD1Ev+0xd6>
   dc44a:	f7f7 fe28 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc44e:	f8d4 56e0 	ldr.w	r5, [r4, #1760]	; 0x6e0
   dc452:	f8d4 66e4 	ldr.w	r6, [r4, #1764]	; 0x6e4
   dc456:	42ae      	cmp	r6, r5
   dc458:	d004      	beq.n	dc464 <_ZN11SleepHelperD1Ev+0xec>
   dc45a:	4628      	mov	r0, r5
   dc45c:	f7f8 fb0e 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc460:	3510      	adds	r5, #16
   dc462:	e7f8      	b.n	dc456 <_ZN11SleepHelperD1Ev+0xde>
	_M_deallocate(_M_impl._M_start,
   dc464:	f8d4 06e0 	ldr.w	r0, [r4, #1760]	; 0x6e0
	if (__p)
   dc468:	b108      	cbz	r0, dc46e <_ZN11SleepHelperD1Ev+0xf6>
   dc46a:	f7f7 fe18 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   dc46e:	f8d4 06d4 	ldr.w	r0, [r4, #1748]	; 0x6d4
	if (__p)
   dc472:	b108      	cbz	r0, dc478 <_ZN11SleepHelperD1Ev+0x100>
   dc474:	f7f7 fe13 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc478:	f8d4 56c8 	ldr.w	r5, [r4, #1736]	; 0x6c8
   dc47c:	f8d4 66cc 	ldr.w	r6, [r4, #1740]	; 0x6cc
   dc480:	42ae      	cmp	r6, r5
   dc482:	d004      	beq.n	dc48e <_ZN11SleepHelperD1Ev+0x116>
   dc484:	4628      	mov	r0, r5
   dc486:	f7f8 faf9 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc48a:	3510      	adds	r5, #16
   dc48c:	e7f8      	b.n	dc480 <_ZN11SleepHelperD1Ev+0x108>
	_M_deallocate(_M_impl._M_start,
   dc48e:	f8d4 06c8 	ldr.w	r0, [r4, #1736]	; 0x6c8
	if (__p)
   dc492:	b108      	cbz	r0, dc498 <_ZN11SleepHelperD1Ev+0x120>
   dc494:	f7f7 fe03 	bl	d409e <_ZdlPv>
   dc498:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   dc49c:	f7fd fca0 	bl	d9de0 <_ZN11SleepHelper20AppCallbackWithStateIJEED1Ev>
   dc4a0:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
   dc4a4:	f7fe f94c 	bl	da740 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   dc4a8:	f504 60d3 	add.w	r0, r4, #1688	; 0x698
   dc4ac:	f7fe f948 	bl	da740 <_ZNSt6vectorISt8functionIFbvEESaIS2_EED1Ev>
   dc4b0:	f204 605c 	addw	r0, r4, #1628	; 0x65c
   dc4b4:	f7fd fb80 	bl	d9bb8 <_ZN8particle24SystemSleepConfigurationD1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc4b8:	f8d4 5650 	ldr.w	r5, [r4, #1616]	; 0x650
   dc4bc:	f8d4 6654 	ldr.w	r6, [r4, #1620]	; 0x654
   dc4c0:	42ae      	cmp	r6, r5
   dc4c2:	d004      	beq.n	dc4ce <_ZN11SleepHelperD1Ev+0x156>
   dc4c4:	4628      	mov	r0, r5
   dc4c6:	f7f8 fad9 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc4ca:	3510      	adds	r5, #16
   dc4cc:	e7f8      	b.n	dc4c0 <_ZN11SleepHelperD1Ev+0x148>
	_M_deallocate(_M_impl._M_start,
   dc4ce:	f8d4 0650 	ldr.w	r0, [r4, #1616]	; 0x650
	if (__p)
   dc4d2:	b108      	cbz	r0, dc4d8 <_ZN11SleepHelperD1Ev+0x160>
   dc4d4:	f7f7 fde3 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc4d8:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   dc4dc:	f8d4 6648 	ldr.w	r6, [r4, #1608]	; 0x648
   dc4e0:	42ae      	cmp	r6, r5
   dc4e2:	d004      	beq.n	dc4ee <_ZN11SleepHelperD1Ev+0x176>
   dc4e4:	4628      	mov	r0, r5
   dc4e6:	f7f8 fac9 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dc4ea:	3510      	adds	r5, #16
   dc4ec:	e7f8      	b.n	dc4e0 <_ZN11SleepHelperD1Ev+0x168>
	_M_deallocate(_M_impl._M_start,
   dc4ee:	f8d4 0644 	ldr.w	r0, [r4, #1604]	; 0x644
	if (__p)
   dc4f2:	b108      	cbz	r0, dc4f8 <_ZN11SleepHelperD1Ev+0x180>
   dc4f4:	f7f7 fdd3 	bl	d409e <_ZdlPv>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   dc4f8:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
   dc4fc:	f8d4 763c 	ldr.w	r7, [r4, #1596]	; 0x63c
   dc500:	42b7      	cmp	r7, r6
   dc502:	d022      	beq.n	dc54a <_ZN11SleepHelperD1Ev+0x1d2>
   dc504:	e9d6 5808 	ldrd	r5, r8, [r6, #32]
   dc508:	45a8      	cmp	r8, r5
   dc50a:	d015      	beq.n	dc538 <_ZN11SleepHelperD1Ev+0x1c0>
class LocalTimeScheduleItem {
   dc50c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   dc510:	f003 faaa 	bl	dfa68 <_ZN6StringD1Ev>
class LocalTimeRange : public LocalTimeRestrictedDate {
   dc514:	f105 0024 	add.w	r0, r5, #36	; 0x24
   dc518:	f7fa fc52 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
   dc51c:	f105 001c 	add.w	r0, r5, #28
   dc520:	f7fa fc4e 	bl	d6dc0 <_ZN12LocalTimeHMSD1Ev>
	_M_deallocate(_M_impl._M_start,
   dc524:	6928      	ldr	r0, [r5, #16]
	if (__p)
   dc526:	b108      	cbz	r0, dc52c <_ZN11SleepHelperD1Ev+0x1b4>
   dc528:	f7f7 fdb9 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   dc52c:	6868      	ldr	r0, [r5, #4]
	if (__p)
   dc52e:	b108      	cbz	r0, dc534 <_ZN11SleepHelperD1Ev+0x1bc>
   dc530:	f7f7 fdb5 	bl	d409e <_ZdlPv>
   dc534:	354c      	adds	r5, #76	; 0x4c
   dc536:	e7e7      	b.n	dc508 <_ZN11SleepHelperD1Ev+0x190>
	_M_deallocate(_M_impl._M_start,
   dc538:	6a30      	ldr	r0, [r6, #32]
	if (__p)
   dc53a:	b108      	cbz	r0, dc540 <_ZN11SleepHelperD1Ev+0x1c8>
   dc53c:	f7f7 fdaf 	bl	d409e <_ZdlPv>
class LocalTimeSchedule {
   dc540:	4630      	mov	r0, r6
   dc542:	f003 fa91 	bl	dfa68 <_ZN6StringD1Ev>
   dc546:	3630      	adds	r6, #48	; 0x30
   dc548:	e7da      	b.n	dc500 <_ZN11SleepHelperD1Ev+0x188>
	_M_deallocate(_M_impl._M_start,
   dc54a:	f8d4 0638 	ldr.w	r0, [r4, #1592]	; 0x638
	if (__p)
   dc54e:	b108      	cbz	r0, dc554 <_ZN11SleepHelperD1Ev+0x1dc>
   dc550:	f7f7 fda5 	bl	d409e <_ZdlPv>
   dc554:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
   dc558:	f7fd face 	bl	d9af8 <_ZN11SleepHelper14PersistentDataD1Ev>
   dc55c:	1d20      	adds	r0, r4, #4
   dc55e:	f7fd fae9 	bl	d9b34 <_ZN11SleepHelper12SettingsFileD1Ev>
}
   dc562:	4620      	mov	r0, r4
   dc564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc568:	000e4750 	.word	0x000e4750

000dc56c <_ZN11SleepHelperD0Ev>:
SleepHelper::~SleepHelper() {
   dc56c:	b510      	push	{r4, lr}
   dc56e:	4604      	mov	r4, r0
}
   dc570:	f7ff ff02 	bl	dc378 <_ZN11SleepHelperD1Ev>
   dc574:	4620      	mov	r0, r4
   dc576:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
   dc57a:	f004 f8c1 	bl	e0700 <_ZdlPvj>
   dc57e:	4620      	mov	r0, r4
   dc580:	bd10      	pop	{r4, pc}
	...

000dc584 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dc584:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc586:	b0bd      	sub	sp, #244	; 0xf4
   dc588:	4604      	mov	r4, r0
   dc58a:	460d      	mov	r5, r1
        if (!Time.isValid()) {
   dc58c:	f003 fdb4 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   dc590:	b950      	cbnz	r0, dc5a8 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x24>
            appLog.info("no RTC time, doing full wake");
   dc592:	6820      	ldr	r0, [r4, #0]
   dc594:	491e      	ldr	r1, [pc, #120]	; (dc610 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x8c>)
   dc596:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dc59a:	f7f7 feff 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   dc59e:	2350      	movs	r3, #80	; 0x50
   dc5a0:	602b      	str	r3, [r5, #0]
      }
   dc5a2:	2001      	movs	r0, #1
   dc5a4:	b03d      	add	sp, #244	; 0xf4
   dc5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        time_t t = SleepHelper::instance().persistentData.getValue_lastFullWake();
   dc5a8:	f7fd ff4e 	bl	da448 <_ZN11SleepHelper8instanceEv>
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, lastFullWake));
   dc5ac:	2114      	movs	r1, #20
   dc5ae:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
   dc5b2:	f7fd ffe1 	bl	da578 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   dc5b6:	2700      	movs	r7, #0
   dc5b8:	4606      	mov	r6, r0
        if (t == 0) {
   dc5ba:	b918      	cbnz	r0, dc5c4 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x40>
            t = Time.now();
   dc5bc:	f003 fdb9 	bl	e0132 <_ZN9TimeClass3nowEv>
   dc5c0:	4606      	mov	r6, r0
   dc5c2:	17c7      	asrs	r7, r0, #31
class LocalTimeConvert {
   dc5c4:	2306      	movs	r3, #6
   dc5c6:	a801      	add	r0, sp, #4
   dc5c8:	9300      	str	r3, [sp, #0]
   dc5ca:	f7fa fed5 	bl	d7378 <_ZN22LocalTimePosixTimezoneC1Ev>
        conv.withTime(t).convert();
   dc5ce:	4668      	mov	r0, sp
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   dc5d0:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
   dc5d4:	f7fb f8d6 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
        t = scheduleManager.getNextFullWake(conv);
   dc5d8:	6820      	ldr	r0, [r4, #0]
   dc5da:	4669      	mov	r1, sp
   dc5dc:	f500 60c7 	add.w	r0, r0, #1592	; 0x638
   dc5e0:	f7fb fc63 	bl	d7eaa <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   dc5e4:	460f      	mov	r7, r1
   dc5e6:	4606      	mov	r6, r0
        if (t <= Time.now()) {
   dc5e8:	f003 fda3 	bl	e0132 <_ZN9TimeClass3nowEv>
   dc5ec:	17c1      	asrs	r1, r0, #31
   dc5ee:	42b0      	cmp	r0, r6
   dc5f0:	eb71 0307 	sbcs.w	r3, r1, r7
   dc5f4:	db07      	blt.n	dc606 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x82>
            appLog.info("time to do full wake");
   dc5f6:	6820      	ldr	r0, [r4, #0]
   dc5f8:	4906      	ldr	r1, [pc, #24]	; (dc614 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x90>)
   dc5fa:	f200 70e4 	addw	r0, r0, #2020	; 0x7e4
   dc5fe:	f7f7 fecd 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
            connectConviction = 80;
   dc602:	2350      	movs	r3, #80	; 0x50
   dc604:	602b      	str	r3, [r5, #0]
class LocalTimeConvert {
   dc606:	a801      	add	r0, sp, #4
   dc608:	f7fa fbf2 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
   dc60c:	e7c9      	b.n	dc5a2 <_ZNSt17_Function_handlerIFbRiS0_EZN11SleepHelper5setupEvEUlS0_S0_E1_E9_M_invokeERKSt9_Any_dataS0_S0_+0x1e>
   dc60e:	bf00      	nop
   dc610:	000e4651 	.word	0x000e4651
   dc614:	000e466e 	.word	0x000e466e

000dc618 <_ZN11SleepHelper22calculateSleepSettingsEb>:
void SleepHelper::calculateSleepSettings(bool isConnected) {
   dc618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc61c:	b0bf      	sub	sp, #252	; 0xfc
   dc61e:	4604      	mov	r4, r0
    sleepConfig = SystemSleepConfiguration();
   dc620:	f200 685c 	addw	r8, r0, #1628	; 0x65c
   dc624:	a802      	add	r0, sp, #8
void SleepHelper::calculateSleepSettings(bool isConnected) {
   dc626:	460e      	mov	r6, r1
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   dc628:	ad03      	add	r5, sp, #12
    sleepConfig = SystemSleepConfiguration();
   dc62a:	f7fd fab3 	bl	d9b94 <_ZN8particle24SystemSleepConfigurationC1Ev>
        valid_ = config.valid_;
   dc62e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   dc632:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
        memcpy(&config_, &config.config_, sizeof(hal_sleep_config_t));
   dc636:	f504 62cc 	add.w	r2, r4, #1632	; 0x660
   dc63a:	af07      	add	r7, sp, #28
   dc63c:	46a9      	mov	r9, r5
   dc63e:	462b      	mov	r3, r5
   dc640:	cb03      	ldmia	r3!, {r0, r1}
   dc642:	42bb      	cmp	r3, r7
   dc644:	6010      	str	r0, [r2, #0]
   dc646:	6051      	str	r1, [r2, #4]
   dc648:	461d      	mov	r5, r3
   dc64a:	f102 0208 	add.w	r2, r2, #8
   dc64e:	d1f6      	bne.n	dc63e <_ZN11SleepHelper22calculateSleepSettingsEb+0x26>
        config.config_.wakeup_sources = nullptr;
   dc650:	2300      	movs	r3, #0
   dc652:	a802      	add	r0, sp, #8
   dc654:	9306      	str	r3, [sp, #24]
   dc656:	f7fd faaf 	bl	d9bb8 <_ZN8particle24SystemSleepConfigurationD1Ev>
        if (valid_) {
   dc65a:	f894 3670 	ldrb.w	r3, [r4, #1648]	; 0x670
   dc65e:	b113      	cbz	r3, dc666 <_ZN11SleepHelper22calculateSleepSettingsEb+0x4e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   dc660:	2302      	movs	r3, #2
   dc662:	f884 3664 	strb.w	r3, [r4, #1636]	; 0x664
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   dc666:	4b3f      	ldr	r3, [pc, #252]	; (dc764 <_ZN11SleepHelper22calculateSleepSettingsEb+0x14c>)
    sleepParams.isConnected = isConnected;
   dc668:	f884 6678 	strb.w	r6, [r4, #1656]	; 0x678
    sleepParams.sleepTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(15min).count();
   dc66c:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
   dc670:	4648      	mov	r0, r9
   dc672:	2306      	movs	r3, #6
   dc674:	9302      	str	r3, [sp, #8]
   dc676:	f7fa fe7f 	bl	d7378 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   dc67a:	f003 fd5a 	bl	e0132 <_ZN9TimeClass3nowEv>
   dc67e:	17c1      	asrs	r1, r0, #31
   dc680:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    time_t nextWake = scheduleManager.getNextWake(conv);
   dc684:	f504 65c7 	add.w	r5, r4, #1592	; 0x638
    conv.withCurrentTime().convert();
   dc688:	a802      	add	r0, sp, #8
   dc68a:	f7fb f87b 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
    time_t nextWake = scheduleManager.getNextWake(conv);
   dc68e:	a902      	add	r1, sp, #8
   dc690:	4628      	mov	r0, r5
   dc692:	f7fb fbdd 	bl	d7e50 <_ZNK24LocalTimeScheduleManager11getNextWakeERK16LocalTimeConvert>
   dc696:	4606      	mov	r6, r0
   dc698:	460f      	mov	r7, r1
    if (nextWake != 0) {
   dc69a:	ea56 0307 	orrs.w	r3, r6, r7
   dc69e:	d007      	beq.n	dc6b0 <_ZN11SleepHelper22calculateSleepSettingsEb+0x98>
        sleepParams.sleepTimeMs = (nextWake - Time.now()) * 1000;
   dc6a0:	f003 fd47 	bl	e0132 <_ZN9TimeClass3nowEv>
   dc6a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc6a8:	1a36      	subs	r6, r6, r0
   dc6aa:	435e      	muls	r6, r3
   dc6ac:	f8c4 6690 	str.w	r6, [r4, #1680]	; 0x690
    sleepParams.nextFullWakeTime = scheduleManager.getNextFullWake(conv);
   dc6b0:	a902      	add	r1, sp, #8
   dc6b2:	4628      	mov	r0, r5
   dc6b4:	f7fb fbf9 	bl	d7eaa <_ZNK24LocalTimeScheduleManager15getNextFullWakeERK16LocalTimeConvert>
   dc6b8:	f504 63d0 	add.w	r3, r4, #1664	; 0x680
   dc6bc:	4606      	mov	r6, r0
   dc6be:	460f      	mov	r7, r1
   dc6c0:	e9c3 6700 	strd	r6, r7, [r3]
    if (sleepParams.nextFullWakeTime != 0) {
   dc6c4:	ea56 0307 	orrs.w	r3, r6, r7
   dc6c8:	d007      	beq.n	dc6da <_ZN11SleepHelper22calculateSleepSettingsEb+0xc2>
        sleepParams.timeUntilNextFullWakeMs = (sleepParams.nextFullWakeTime - Time.now()) * 1000;
   dc6ca:	f003 fd32 	bl	e0132 <_ZN9TimeClass3nowEv>
   dc6ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dc6d2:	1a36      	subs	r6, r6, r0
   dc6d4:	435e      	muls	r6, r3
   dc6d6:	f8c4 667c 	str.w	r6, [r4, #1660]	; 0x67c
    sleepParams.disconnectCellular = (sleepParams.timeUntilNextFullWakeMs >= minimumCellularOffTimeMs);
   dc6da:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
   dc6de:	f8d4 27a0 	ldr.w	r2, [r4, #1952]	; 0x7a0
      : _M_current(__i) { }
   dc6e2:	f8d4 5644 	ldr.w	r5, [r4, #1604]	; 0x644
   dc6e6:	4293      	cmp	r3, r2
   dc6e8:	bf34      	ite	cc
   dc6ea:	2300      	movcc	r3, #0
   dc6ec:	2301      	movcs	r3, #1
   dc6ee:	f884 3694 	strb.w	r3, [r4, #1684]	; 0x694
    sleepConfigurationFunctions.forEach(sleepConfig, sleepParams);
   dc6f2:	f504 66cf 	add.w	r6, r4, #1656	; 0x678
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dc6f6:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
   dc6fa:	42ab      	cmp	r3, r5
   dc6fc:	d00a      	beq.n	dc714 <_ZN11SleepHelper22calculateSleepSettingsEb+0xfc>
      if (_M_empty())
   dc6fe:	68ab      	ldr	r3, [r5, #8]
   dc700:	b90b      	cbnz	r3, dc706 <_ZN11SleepHelper22calculateSleepSettingsEb+0xee>
	__throw_bad_function_call();
   dc702:	f004 f83d 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc706:	68eb      	ldr	r3, [r5, #12]
   dc708:	4628      	mov	r0, r5
   dc70a:	4632      	mov	r2, r6
   dc70c:	4641      	mov	r1, r8
   dc70e:	4798      	blx	r3
	++_M_current;
   dc710:	3510      	adds	r5, #16
	return *this;
   dc712:	e7f0      	b.n	dc6f6 <_ZN11SleepHelper22calculateSleepSettingsEb+0xde>
    if (sleepParams.sleepTimeMs < 1000) {
   dc714:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
   dc718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        sleepParams.sleepTimeMs = 1000;
   dc71c:	bf3c      	itt	cc
   dc71e:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   dc722:	f8c4 3690 	strcc.w	r3, [r4, #1680]	; 0x690
        return hal_timer_millis(nullptr);
   dc726:	2000      	movs	r0, #0
   dc728:	f000 f996 	bl	dca58 <hal_timer_millis>
    sleepParams.calculatedMillis = System.millis();
   dc72c:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
   dc730:	e9c3 0100 	strd	r0, r1, [r3]
    if (sleepParams.isConnected && !sleepParams.disconnectCellular) {
   dc734:	f894 3678 	ldrb.w	r3, [r4, #1656]	; 0x678
   dc738:	b14b      	cbz	r3, dc74e <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
   dc73a:	f894 3694 	ldrb.w	r3, [r4, #1684]	; 0x694
   dc73e:	b933      	cbnz	r3, dc74e <_ZN11SleepHelper22calculateSleepSettingsEb+0x136>
        sleepConfig.network(NETWORK_INTERFACE_CELLULAR);
   dc740:	aa01      	add	r2, sp, #4
   dc742:	2104      	movs	r1, #4
   dc744:	4640      	mov	r0, r8
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   dc746:	f8ad 3004 	strh.w	r3, [sp, #4]
   dc74a:	f7fd fa6b 	bl	d9c24 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>
    sleepConfig.duration(sleepParams.sleepTimeMs);
   dc74e:	f8d4 1690 	ldr.w	r1, [r4, #1680]	; 0x690
   dc752:	4640      	mov	r0, r8
   dc754:	f7fd fa3c 	bl	d9bd0 <_ZN8particle24SystemSleepConfiguration8durationEm>
class LocalTimeConvert {
   dc758:	4648      	mov	r0, r9
   dc75a:	f7fa fb49 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   dc75e:	b03f      	add	sp, #252	; 0xfc
   dc760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc764:	000dbba0 	.word	0x000dbba0

000dc768 <_ZN11SleepHelper24stateHandlerNoConnectionEv>:
void SleepHelper::stateHandlerNoConnection() {
   dc768:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (dataCaptureActive) {
   dc76a:	f890 37d1 	ldrb.w	r3, [r0, #2001]	; 0x7d1
void SleepHelper::stateHandlerNoConnection() {
   dc76e:	4604      	mov	r4, r0
    if (dataCaptureActive) {
   dc770:	b9b3      	cbnz	r3, dc7a0 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
    if (!noConnectionFunctions.whileAnyTrue()) {
   dc772:	f500 60e2 	add.w	r0, r0, #1808	; 0x710
   dc776:	f7fe f82e 	bl	da7d6 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   dc77a:	4605      	mov	r5, r0
   dc77c:	b980      	cbnz	r0, dc7a0 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x38>
        appLog.info("done with no connection mode, preparing to sleep");
   dc77e:	4909      	ldr	r1, [pc, #36]	; (dc7a4 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x3c>)
   dc780:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dc784:	f7f7 fe0a 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        calculateSleepSettings(false);
   dc788:	4629      	mov	r1, r5
   dc78a:	4620      	mov	r0, r4
   dc78c:	f7ff ff44 	bl	dc618 <_ZN11SleepHelper22calculateSleepSettingsEb>
        stateHandler = &SleepHelper::stateHandlerSleep;
   dc790:	4b05      	ldr	r3, [pc, #20]	; (dc7a8 <_ZN11SleepHelper24stateHandlerNoConnectionEv+0x40>)
   dc792:	4669      	mov	r1, sp
   dc794:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
   dc798:	e9cd 3500 	strd	r3, r5, [sp]
   dc79c:	f7fe f86a 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dc7a0:	b003      	add	sp, #12
   dc7a2:	bd30      	pop	{r4, r5, pc}
   dc7a4:	000e4683 	.word	0x000e4683
   dc7a8:	000dabc1 	.word	0x000dabc1

000dc7ac <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv>:
void SleepHelper::stateHandlerDisconnectBeforeSleep() {
   dc7ac:	b530      	push	{r4, r5, lr}
   dc7ae:	4604      	mov	r4, r0
   dc7b0:	b085      	sub	sp, #20
    calculateSleepSettings(true);
   dc7b2:	2101      	movs	r1, #1
   dc7b4:	f7ff ff30 	bl	dc618 <_ZN11SleepHelper22calculateSleepSettingsEb>
    if (!sleepParams.disconnectCellular) {
   dc7b8:	f504 65f5 	add.w	r5, r4, #1960	; 0x7a8
   dc7bc:	f204 70e4 	addw	r0, r4, #2020	; 0x7e4
   dc7c0:	f894 4694 	ldrb.w	r4, [r4, #1684]	; 0x694
   dc7c4:	b95c      	cbnz	r4, dc7de <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x32>
        appLog.info("sleep cycle is short, using cellular standby");
   dc7c6:	490f      	ldr	r1, [pc, #60]	; (dc804 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x58>)
   dc7c8:	f7f7 fde8 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
        stateHandler = &SleepHelper::stateHandlerSleep;
   dc7cc:	4b0e      	ldr	r3, [pc, #56]	; (dc808 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x5c>)
   dc7ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   dc7d2:	a901      	add	r1, sp, #4
   dc7d4:	4628      	mov	r0, r5
   dc7d6:	f7fe f84d 	bl	da874 <_ZNSt8functionIFvR11SleepHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   dc7da:	b005      	add	sp, #20
   dc7dc:	bd30      	pop	{r4, r5, pc}
    appLog.info("disconnecting from cloud");
   dc7de:	490b      	ldr	r1, [pc, #44]	; (dc80c <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x60>)
   dc7e0:	f7f7 fddc 	bl	d439c <_ZNK5spark6Logger4infoEPKcz>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   dc7e4:	2203      	movs	r2, #3
   dc7e6:	f241 3388 	movw	r3, #5000	; 0x1388
   dc7ea:	e9cd 2301 	strd	r2, r3, [sp, #4]
    Particle.disconnect(CloudDisconnectOptions().graceful(true).timeout(5000)); // 5 seconds
   dc7ee:	a801      	add	r0, sp, #4
    graceful_ = enabled;
   dc7f0:	2301      	movs	r3, #1
   dc7f2:	f8ad 300c 	strh.w	r3, [sp, #12]
   dc7f6:	f000 fea6 	bl	dd546 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    stateHandler = &SleepHelper::stateHandlerDisconnectWait;
   dc7fa:	4b05      	ldr	r3, [pc, #20]	; (dc810 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x64>)
   dc7fc:	9301      	str	r3, [sp, #4]
   dc7fe:	2300      	movs	r3, #0
   dc800:	9302      	str	r3, [sp, #8]
   dc802:	e7e6      	b.n	dc7d2 <_ZN11SleepHelper33stateHandlerDisconnectBeforeSleepEv+0x26>
   dc804:	000e46b4 	.word	0x000e46b4
   dc808:	000dabc1 	.word	0x000dabc1
   dc80c:	000e46e1 	.word	0x000e46e1
   dc810:	000da915 	.word	0x000da915

000dc814 <_ZN11SleepHelper18dataCaptureHandlerEv>:
void SleepHelper::dataCaptureHandler() {
   dc814:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (dataCaptureFunctions.isEmpty()) {
   dc816:	f8d0 26b4 	ldr.w	r2, [r0, #1716]	; 0x6b4
   dc81a:	f8d0 36b0 	ldr.w	r3, [r0, #1712]	; 0x6b0
   dc81e:	429a      	cmp	r2, r3
void SleepHelper::dataCaptureHandler() {
   dc820:	b0bd      	sub	sp, #244	; 0xf4
   dc822:	4604      	mov	r4, r0
    if (dataCaptureFunctions.isEmpty()) {
   dc824:	d016      	beq.n	dc854 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
    if (!Time.isValid()) {
   dc826:	f003 fc67 	bl	e00f8 <_ZN9TimeClass7isValidEv>
   dc82a:	b198      	cbz	r0, dc854 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
    if (scheduleManager.getScheduleByName("data").isEmpty()) {
   dc82c:	f504 66c7 	add.w	r6, r4, #1592	; 0x638
   dc830:	4929      	ldr	r1, [pc, #164]	; (dc8d8 <_ZN11SleepHelper18dataCaptureHandlerEv+0xc4>)
   dc832:	4630      	mov	r0, r6
   dc834:	f7fb fd92 	bl	d835c <_ZN24LocalTimeScheduleManager17getScheduleByNameEPKc>
   dc838:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   dc83c:	429a      	cmp	r2, r3
   dc83e:	d009      	beq.n	dc854 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
    if (dataCaptureActive) {
   dc840:	f894 37d1 	ldrb.w	r3, [r4, #2001]	; 0x7d1
   dc844:	b143      	cbz	r3, dc858 <_ZN11SleepHelper18dataCaptureHandlerEv+0x44>
        if (!dataCaptureFunctions.whileAnyTrue()) {
   dc846:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
   dc84a:	f7fd ffc4 	bl	da7d6 <_ZN11SleepHelper20AppCallbackWithStateIJEE12whileAnyTrueEv>
   dc84e:	b908      	cbnz	r0, dc854 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
            dataCaptureActive = false;
   dc850:	f884 07d1 	strb.w	r0, [r4, #2001]	; 0x7d1
}
   dc854:	b03d      	add	sp, #244	; 0xf4
   dc856:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return (time_t) getValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture));
   dc858:	f504 67bd 	add.w	r7, r4, #1512	; 0x5e8
   dc85c:	211c      	movs	r1, #28
   dc85e:	4638      	mov	r0, r7
   dc860:	f7fd fe8a 	bl	da578 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
        if (!persistentData.getValue_nextDataCapture()) {
   dc864:	b1d0      	cbz	r0, dc89c <_ZN11SleepHelper18dataCaptureHandlerEv+0x88>
   dc866:	211c      	movs	r1, #28
   dc868:	4638      	mov	r0, r7
   dc86a:	f7fd fe85 	bl	da578 <_ZNK11SleepHelper18PersistentDataBase8getValueImEET_j>
   dc86e:	4605      	mov	r5, r0
            if (persistentData.getValue_nextDataCapture() <= Time.now()) {
   dc870:	f003 fc5f 	bl	e0132 <_ZN9TimeClass3nowEv>
   dc874:	2300      	movs	r3, #0
   dc876:	17c1      	asrs	r1, r0, #31
   dc878:	42a8      	cmp	r0, r5
   dc87a:	eb71 0303 	sbcs.w	r3, r1, r3
   dc87e:	dbe9      	blt.n	dc854 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   dc880:	f8d4 36bc 	ldr.w	r3, [r4, #1724]	; 0x6bc
                it->callbackState = newState;
   dc884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            for(auto it = callbackState.begin(); it != callbackState.end(); ++it) {
   dc888:	f8d4 16c0 	ldr.w	r1, [r4, #1728]	; 0x6c0
   dc88c:	4299      	cmp	r1, r3
   dc88e:	d002      	beq.n	dc896 <_ZN11SleepHelper18dataCaptureHandlerEv+0x82>
                it->callbackState = newState;
   dc890:	f843 2b08 	str.w	r2, [r3], #8
	return *this;
   dc894:	e7f8      	b.n	dc888 <_ZN11SleepHelper18dataCaptureHandlerEv+0x74>
                dataCaptureActive = true;
   dc896:	2301      	movs	r3, #1
   dc898:	f884 37d1 	strb.w	r3, [r4, #2001]	; 0x7d1
   dc89c:	2306      	movs	r3, #6
   dc89e:	a801      	add	r0, sp, #4
   dc8a0:	9300      	str	r3, [sp, #0]
   dc8a2:	f7fa fd69 	bl	d7378 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   dc8a6:	f003 fc44 	bl	e0132 <_ZN9TimeClass3nowEv>
   dc8aa:	17c1      	asrs	r1, r0, #31
   dc8ac:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
            conv.withCurrentTime().convert();
   dc8b0:	4668      	mov	r0, sp
   dc8b2:	f7fa ff67 	bl	d7784 <_ZN16LocalTimeConvert7convertEv>
            time_t t = scheduleManager.getNextDataCapture(conv);
   dc8b6:	4669      	mov	r1, sp
   dc8b8:	4630      	mov	r0, r6
   dc8ba:	f7fb fb25 	bl	d7f08 <_ZNK24LocalTimeScheduleManager18getNextDataCaptureERK16LocalTimeConvert>
   dc8be:	4602      	mov	r2, r0
   dc8c0:	460b      	mov	r3, r1
            if (t != 0) {
   dc8c2:	ea52 0103 	orrs.w	r1, r2, r3
   dc8c6:	d003      	beq.n	dc8d0 <_ZN11SleepHelper18dataCaptureHandlerEv+0xbc>
            setValue<uint32_t>(offsetof(SleepHelperData, nextDataCapture), (uint32_t)value);
   dc8c8:	211c      	movs	r1, #28
   dc8ca:	4638      	mov	r0, r7
   dc8cc:	f7fd fe66 	bl	da59c <_ZN11SleepHelper18PersistentDataBase8setValueImEEvjT_>
class LocalTimeConvert {
   dc8d0:	a801      	add	r0, sp, #4
   dc8d2:	f7fa fa8d 	bl	d6df0 <_ZN22LocalTimePosixTimezoneD1Ev>
   dc8d6:	e7bd      	b.n	dc854 <_ZN11SleepHelper18dataCaptureHandlerEv+0x40>
   dc8d8:	000e4153 	.word	0x000e4153

000dc8dc <_ZN11SleepHelper4loopEv>:
void SleepHelper::loop() {
   dc8dc:	b570      	push	{r4, r5, r6, lr}
   dc8de:	f8d0 56a4 	ldr.w	r5, [r0, #1700]	; 0x6a4
   dc8e2:	4604      	mov	r4, r0
            for(auto it = callbackFunctions.begin(); it != callbackFunctions.end(); ++it) {
   dc8e4:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
   dc8e8:	42ab      	cmp	r3, r5
   dc8ea:	d004      	beq.n	dc8f6 <_ZN11SleepHelper4loopEv+0x1a>
                (*it)(args...);
   dc8ec:	4628      	mov	r0, r5
   dc8ee:	f7fd ffac 	bl	da84a <_ZNKSt8functionIFbvEEclEv>
      operator++() _GLIBCXX_NOEXCEPT
   dc8f2:	3510      	adds	r5, #16
	return *this;
   dc8f4:	e7f6      	b.n	dc8e4 <_ZN11SleepHelper4loopEv+0x8>
    dataCaptureHandler();
   dc8f6:	4620      	mov	r0, r4
   dc8f8:	f7ff ff8c 	bl	dc814 <_ZN11SleepHelper18dataCaptureHandlerEv>
      if (_M_empty())
   dc8fc:	f8d4 37b0 	ldr.w	r3, [r4, #1968]	; 0x7b0
   dc900:	b90b      	cbnz	r3, dc906 <_ZN11SleepHelper4loopEv+0x2a>
	__throw_bad_function_call();
   dc902:	f003 ff3d 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dc906:	f8d4 37b4 	ldr.w	r3, [r4, #1972]	; 0x7b4
   dc90a:	4621      	mov	r1, r4
   dc90c:	f504 60f5 	add.w	r0, r4, #1960	; 0x7a8
}
   dc910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dc914:	4718      	bx	r3
	...

000dc918 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   dc918:	b508      	push	{r3, lr}
   dc91a:	4b02      	ldr	r3, [pc, #8]	; (dc924 <cellular_signal+0xc>)
   dc91c:	681b      	ldr	r3, [r3, #0]
   dc91e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc920:	9301      	str	r3, [sp, #4]
   dc922:	bd08      	pop	{r3, pc}
   dc924:	00030274 	.word	0x00030274

000dc928 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   dc928:	b508      	push	{r3, lr}
   dc92a:	4b02      	ldr	r3, [pc, #8]	; (dc934 <os_thread_create+0xc>)
   dc92c:	681b      	ldr	r3, [r3, #0]
   dc92e:	685b      	ldr	r3, [r3, #4]
   dc930:	9301      	str	r3, [sp, #4]
   dc932:	bd08      	pop	{r3, pc}
   dc934:	00030248 	.word	0x00030248

000dc938 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   dc938:	b508      	push	{r3, lr}
   dc93a:	4b02      	ldr	r3, [pc, #8]	; (dc944 <os_thread_is_current+0xc>)
   dc93c:	681b      	ldr	r3, [r3, #0]
   dc93e:	689b      	ldr	r3, [r3, #8]
   dc940:	9301      	str	r3, [sp, #4]
   dc942:	bd08      	pop	{r3, pc}
   dc944:	00030248 	.word	0x00030248

000dc948 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   dc948:	b508      	push	{r3, lr}
   dc94a:	4b02      	ldr	r3, [pc, #8]	; (dc954 <os_thread_join+0xc>)
   dc94c:	681b      	ldr	r3, [r3, #0]
   dc94e:	691b      	ldr	r3, [r3, #16]
   dc950:	9301      	str	r3, [sp, #4]
   dc952:	bd08      	pop	{r3, pc}
   dc954:	00030248 	.word	0x00030248

000dc958 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   dc958:	b508      	push	{r3, lr}
   dc95a:	4b02      	ldr	r3, [pc, #8]	; (dc964 <os_thread_cleanup+0xc>)
   dc95c:	681b      	ldr	r3, [r3, #0]
   dc95e:	695b      	ldr	r3, [r3, #20]
   dc960:	9301      	str	r3, [sp, #4]
   dc962:	bd08      	pop	{r3, pc}
   dc964:	00030248 	.word	0x00030248

000dc968 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   dc968:	b508      	push	{r3, lr}
   dc96a:	4b02      	ldr	r3, [pc, #8]	; (dc974 <os_mutex_create+0xc>)
   dc96c:	681b      	ldr	r3, [r3, #0]
   dc96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dc970:	9301      	str	r3, [sp, #4]
   dc972:	bd08      	pop	{r3, pc}
   dc974:	00030248 	.word	0x00030248

000dc978 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   dc978:	b508      	push	{r3, lr}
   dc97a:	4b02      	ldr	r3, [pc, #8]	; (dc984 <os_mutex_lock+0xc>)
   dc97c:	681b      	ldr	r3, [r3, #0]
   dc97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dc980:	9301      	str	r3, [sp, #4]
   dc982:	bd08      	pop	{r3, pc}
   dc984:	00030248 	.word	0x00030248

000dc988 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   dc988:	b508      	push	{r3, lr}
   dc98a:	4b02      	ldr	r3, [pc, #8]	; (dc994 <os_mutex_unlock+0xc>)
   dc98c:	681b      	ldr	r3, [r3, #0]
   dc98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dc990:	9301      	str	r3, [sp, #4]
   dc992:	bd08      	pop	{r3, pc}
   dc994:	00030248 	.word	0x00030248

000dc998 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   dc998:	b508      	push	{r3, lr}
   dc99a:	4b02      	ldr	r3, [pc, #8]	; (dc9a4 <os_mutex_recursive_create+0xc>)
   dc99c:	681b      	ldr	r3, [r3, #0]
   dc99e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dc9a0:	9301      	str	r3, [sp, #4]
   dc9a2:	bd08      	pop	{r3, pc}
   dc9a4:	00030248 	.word	0x00030248

000dc9a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   dc9a8:	b508      	push	{r3, lr}
   dc9aa:	4b02      	ldr	r3, [pc, #8]	; (dc9b4 <os_mutex_recursive_destroy+0xc>)
   dc9ac:	681b      	ldr	r3, [r3, #0]
   dc9ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dc9b0:	9301      	str	r3, [sp, #4]
   dc9b2:	bd08      	pop	{r3, pc}
   dc9b4:	00030248 	.word	0x00030248

000dc9b8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   dc9b8:	b508      	push	{r3, lr}
   dc9ba:	4b02      	ldr	r3, [pc, #8]	; (dc9c4 <os_mutex_recursive_lock+0xc>)
   dc9bc:	681b      	ldr	r3, [r3, #0]
   dc9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dc9c0:	9301      	str	r3, [sp, #4]
   dc9c2:	bd08      	pop	{r3, pc}
   dc9c4:	00030248 	.word	0x00030248

000dc9c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   dc9c8:	b508      	push	{r3, lr}
   dc9ca:	4b02      	ldr	r3, [pc, #8]	; (dc9d4 <os_mutex_recursive_unlock+0xc>)
   dc9cc:	681b      	ldr	r3, [r3, #0]
   dc9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dc9d0:	9301      	str	r3, [sp, #4]
   dc9d2:	bd08      	pop	{r3, pc}
   dc9d4:	00030248 	.word	0x00030248

000dc9d8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   dc9d8:	b508      	push	{r3, lr}
   dc9da:	4b02      	ldr	r3, [pc, #8]	; (dc9e4 <os_thread_exit+0xc>)
   dc9dc:	681b      	ldr	r3, [r3, #0]
   dc9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dc9e0:	9301      	str	r3, [sp, #4]
   dc9e2:	bd08      	pop	{r3, pc}
   dc9e4:	00030248 	.word	0x00030248

000dc9e8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   dc9e8:	b508      	push	{r3, lr}
   dc9ea:	4b02      	ldr	r3, [pc, #8]	; (dc9f4 <HAL_Feature_Set+0xc>)
   dc9ec:	681b      	ldr	r3, [r3, #0]
   dc9ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dc9f0:	9301      	str	r3, [sp, #4]
   dc9f2:	bd08      	pop	{r3, pc}
   dc9f4:	00030234 	.word	0x00030234

000dc9f8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   dc9f8:	b508      	push	{r3, lr}
   dc9fa:	4b02      	ldr	r3, [pc, #8]	; (dca04 <HAL_Core_Get_Last_Reset_Info+0xc>)
   dc9fc:	681b      	ldr	r3, [r3, #0]
   dc9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dca00:	9301      	str	r3, [sp, #4]
   dca02:	bd08      	pop	{r3, pc}
   dca04:	00030234 	.word	0x00030234

000dca08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   dca08:	b508      	push	{r3, lr}
   dca0a:	4b02      	ldr	r3, [pc, #8]	; (dca14 <HAL_RNG_GetRandomNumber+0xc>)
   dca0c:	681b      	ldr	r3, [r3, #0]
   dca0e:	685b      	ldr	r3, [r3, #4]
   dca10:	9301      	str	r3, [sp, #4]
   dca12:	bd08      	pop	{r3, pc}
   dca14:	00030218 	.word	0x00030218

000dca18 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   dca18:	b508      	push	{r3, lr}
   dca1a:	4b02      	ldr	r3, [pc, #8]	; (dca24 <HAL_Delay_Milliseconds+0xc>)
   dca1c:	681b      	ldr	r3, [r3, #0]
   dca1e:	689b      	ldr	r3, [r3, #8]
   dca20:	9301      	str	r3, [sp, #4]
   dca22:	bd08      	pop	{r3, pc}
   dca24:	00030218 	.word	0x00030218

000dca28 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   dca28:	b508      	push	{r3, lr}
   dca2a:	4b02      	ldr	r3, [pc, #8]	; (dca34 <HAL_Delay_Microseconds+0xc>)
   dca2c:	681b      	ldr	r3, [r3, #0]
   dca2e:	68db      	ldr	r3, [r3, #12]
   dca30:	9301      	str	r3, [sp, #4]
   dca32:	bd08      	pop	{r3, pc}
   dca34:	00030218 	.word	0x00030218

000dca38 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   dca38:	b508      	push	{r3, lr}
   dca3a:	4b02      	ldr	r3, [pc, #8]	; (dca44 <HAL_Timer_Get_Milli_Seconds+0xc>)
   dca3c:	681b      	ldr	r3, [r3, #0]
   dca3e:	695b      	ldr	r3, [r3, #20]
   dca40:	9301      	str	r3, [sp, #4]
   dca42:	bd08      	pop	{r3, pc}
   dca44:	00030218 	.word	0x00030218

000dca48 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   dca48:	b508      	push	{r3, lr}
   dca4a:	4b02      	ldr	r3, [pc, #8]	; (dca54 <hal_rtc_time_is_valid+0xc>)
   dca4c:	681b      	ldr	r3, [r3, #0]
   dca4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dca50:	9301      	str	r3, [sp, #4]
   dca52:	bd08      	pop	{r3, pc}
   dca54:	00030218 	.word	0x00030218

000dca58 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   dca58:	b508      	push	{r3, lr}
   dca5a:	4b02      	ldr	r3, [pc, #8]	; (dca64 <hal_timer_millis+0xc>)
   dca5c:	681b      	ldr	r3, [r3, #0]
   dca5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dca60:	9301      	str	r3, [sp, #4]
   dca62:	bd08      	pop	{r3, pc}
   dca64:	00030218 	.word	0x00030218

000dca68 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   dca68:	b508      	push	{r3, lr}
   dca6a:	4b02      	ldr	r3, [pc, #8]	; (dca74 <hal_rtc_get_time+0xc>)
   dca6c:	681b      	ldr	r3, [r3, #0]
   dca6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   dca70:	9301      	str	r3, [sp, #4]
   dca72:	bd08      	pop	{r3, pc}
   dca74:	00030218 	.word	0x00030218

000dca78 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   dca78:	b508      	push	{r3, lr}
   dca7a:	4b02      	ldr	r3, [pc, #8]	; (dca84 <hal_rtc_set_time+0xc>)
   dca7c:	681b      	ldr	r3, [r3, #0]
   dca7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   dca80:	9301      	str	r3, [sp, #4]
   dca82:	bd08      	pop	{r3, pc}
   dca84:	00030218 	.word	0x00030218

000dca88 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   dca88:	b508      	push	{r3, lr}
   dca8a:	4b02      	ldr	r3, [pc, #8]	; (dca94 <HAL_Validate_Pin_Function+0xc>)
   dca8c:	681b      	ldr	r3, [r3, #0]
   dca8e:	685b      	ldr	r3, [r3, #4]
   dca90:	9301      	str	r3, [sp, #4]
   dca92:	bd08      	pop	{r3, pc}
   dca94:	0003022c 	.word	0x0003022c

000dca98 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   dca98:	b508      	push	{r3, lr}
   dca9a:	4b02      	ldr	r3, [pc, #8]	; (dcaa4 <HAL_Pin_Mode+0xc>)
   dca9c:	681b      	ldr	r3, [r3, #0]
   dca9e:	689b      	ldr	r3, [r3, #8]
   dcaa0:	9301      	str	r3, [sp, #4]
   dcaa2:	bd08      	pop	{r3, pc}
   dcaa4:	0003022c 	.word	0x0003022c

000dcaa8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   dcaa8:	b508      	push	{r3, lr}
   dcaaa:	4b02      	ldr	r3, [pc, #8]	; (dcab4 <HAL_Get_Pin_Mode+0xc>)
   dcaac:	681b      	ldr	r3, [r3, #0]
   dcaae:	68db      	ldr	r3, [r3, #12]
   dcab0:	9301      	str	r3, [sp, #4]
   dcab2:	bd08      	pop	{r3, pc}
   dcab4:	0003022c 	.word	0x0003022c

000dcab8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   dcab8:	b508      	push	{r3, lr}
   dcaba:	4b02      	ldr	r3, [pc, #8]	; (dcac4 <HAL_GPIO_Write+0xc>)
   dcabc:	681b      	ldr	r3, [r3, #0]
   dcabe:	691b      	ldr	r3, [r3, #16]
   dcac0:	9301      	str	r3, [sp, #4]
   dcac2:	bd08      	pop	{r3, pc}
   dcac4:	0003022c 	.word	0x0003022c

000dcac8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   dcac8:	b508      	push	{r3, lr}
   dcaca:	4b02      	ldr	r3, [pc, #8]	; (dcad4 <HAL_GPIO_Read+0xc>)
   dcacc:	681b      	ldr	r3, [r3, #0]
   dcace:	695b      	ldr	r3, [r3, #20]
   dcad0:	9301      	str	r3, [sp, #4]
   dcad2:	bd08      	pop	{r3, pc}
   dcad4:	0003022c 	.word	0x0003022c

000dcad8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   dcad8:	b508      	push	{r3, lr}
   dcada:	4b02      	ldr	r3, [pc, #8]	; (dcae4 <hal_adc_read+0xc>)
   dcadc:	681b      	ldr	r3, [r3, #0]
   dcade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dcae0:	9301      	str	r3, [sp, #4]
   dcae2:	bd08      	pop	{r3, pc}
   dcae4:	0003022c 	.word	0x0003022c

000dcae8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   dcae8:	b508      	push	{r3, lr}
   dcaea:	4b02      	ldr	r3, [pc, #8]	; (dcaf4 <hal_i2c_begin+0xc>)
   dcaec:	681b      	ldr	r3, [r3, #0]
   dcaee:	68db      	ldr	r3, [r3, #12]
   dcaf0:	9301      	str	r3, [sp, #4]
   dcaf2:	bd08      	pop	{r3, pc}
   dcaf4:	00030228 	.word	0x00030228

000dcaf8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   dcaf8:	b508      	push	{r3, lr}
   dcafa:	4b02      	ldr	r3, [pc, #8]	; (dcb04 <hal_i2c_begin_transmission+0xc>)
   dcafc:	681b      	ldr	r3, [r3, #0]
   dcafe:	699b      	ldr	r3, [r3, #24]
   dcb00:	9301      	str	r3, [sp, #4]
   dcb02:	bd08      	pop	{r3, pc}
   dcb04:	00030228 	.word	0x00030228

000dcb08 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   dcb08:	b508      	push	{r3, lr}
   dcb0a:	4b02      	ldr	r3, [pc, #8]	; (dcb14 <hal_i2c_end_transmission+0xc>)
   dcb0c:	681b      	ldr	r3, [r3, #0]
   dcb0e:	69db      	ldr	r3, [r3, #28]
   dcb10:	9301      	str	r3, [sp, #4]
   dcb12:	bd08      	pop	{r3, pc}
   dcb14:	00030228 	.word	0x00030228

000dcb18 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   dcb18:	b508      	push	{r3, lr}
   dcb1a:	4b02      	ldr	r3, [pc, #8]	; (dcb24 <hal_i2c_write+0xc>)
   dcb1c:	681b      	ldr	r3, [r3, #0]
   dcb1e:	6a1b      	ldr	r3, [r3, #32]
   dcb20:	9301      	str	r3, [sp, #4]
   dcb22:	bd08      	pop	{r3, pc}
   dcb24:	00030228 	.word	0x00030228

000dcb28 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   dcb28:	b508      	push	{r3, lr}
   dcb2a:	4b02      	ldr	r3, [pc, #8]	; (dcb34 <hal_i2c_available+0xc>)
   dcb2c:	681b      	ldr	r3, [r3, #0]
   dcb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dcb30:	9301      	str	r3, [sp, #4]
   dcb32:	bd08      	pop	{r3, pc}
   dcb34:	00030228 	.word	0x00030228

000dcb38 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   dcb38:	b508      	push	{r3, lr}
   dcb3a:	4b02      	ldr	r3, [pc, #8]	; (dcb44 <hal_i2c_read+0xc>)
   dcb3c:	681b      	ldr	r3, [r3, #0]
   dcb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dcb40:	9301      	str	r3, [sp, #4]
   dcb42:	bd08      	pop	{r3, pc}
   dcb44:	00030228 	.word	0x00030228

000dcb48 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   dcb48:	b508      	push	{r3, lr}
   dcb4a:	4b02      	ldr	r3, [pc, #8]	; (dcb54 <hal_i2c_peek+0xc>)
   dcb4c:	681b      	ldr	r3, [r3, #0]
   dcb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dcb50:	9301      	str	r3, [sp, #4]
   dcb52:	bd08      	pop	{r3, pc}
   dcb54:	00030228 	.word	0x00030228

000dcb58 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   dcb58:	b508      	push	{r3, lr}
   dcb5a:	4b02      	ldr	r3, [pc, #8]	; (dcb64 <hal_i2c_flush+0xc>)
   dcb5c:	681b      	ldr	r3, [r3, #0]
   dcb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dcb60:	9301      	str	r3, [sp, #4]
   dcb62:	bd08      	pop	{r3, pc}
   dcb64:	00030228 	.word	0x00030228

000dcb68 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   dcb68:	b508      	push	{r3, lr}
   dcb6a:	4b02      	ldr	r3, [pc, #8]	; (dcb74 <hal_i2c_is_enabled+0xc>)
   dcb6c:	681b      	ldr	r3, [r3, #0]
   dcb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dcb70:	9301      	str	r3, [sp, #4]
   dcb72:	bd08      	pop	{r3, pc}
   dcb74:	00030228 	.word	0x00030228

000dcb78 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   dcb78:	b508      	push	{r3, lr}
   dcb7a:	4b02      	ldr	r3, [pc, #8]	; (dcb84 <hal_i2c_init+0xc>)
   dcb7c:	681b      	ldr	r3, [r3, #0]
   dcb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dcb80:	9301      	str	r3, [sp, #4]
   dcb82:	bd08      	pop	{r3, pc}
   dcb84:	00030228 	.word	0x00030228

000dcb88 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   dcb88:	b508      	push	{r3, lr}
   dcb8a:	4b02      	ldr	r3, [pc, #8]	; (dcb94 <hal_i2c_lock+0xc>)
   dcb8c:	681b      	ldr	r3, [r3, #0]
   dcb8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dcb90:	9301      	str	r3, [sp, #4]
   dcb92:	bd08      	pop	{r3, pc}
   dcb94:	00030228 	.word	0x00030228

000dcb98 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   dcb98:	b508      	push	{r3, lr}
   dcb9a:	4b02      	ldr	r3, [pc, #8]	; (dcba4 <hal_i2c_unlock+0xc>)
   dcb9c:	681b      	ldr	r3, [r3, #0]
   dcb9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dcba0:	9301      	str	r3, [sp, #4]
   dcba2:	bd08      	pop	{r3, pc}
   dcba4:	00030228 	.word	0x00030228

000dcba8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   dcba8:	b508      	push	{r3, lr}
   dcbaa:	4b02      	ldr	r3, [pc, #8]	; (dcbb4 <hal_i2c_request_ex+0xc>)
   dcbac:	681b      	ldr	r3, [r3, #0]
   dcbae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dcbb0:	9301      	str	r3, [sp, #4]
   dcbb2:	bd08      	pop	{r3, pc}
   dcbb4:	00030228 	.word	0x00030228

000dcbb8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   dcbb8:	b508      	push	{r3, lr}
   dcbba:	4b02      	ldr	r3, [pc, #8]	; (dcbc4 <inet_inet_ntop+0xc>)
   dcbbc:	681b      	ldr	r3, [r3, #0]
   dcbbe:	695b      	ldr	r3, [r3, #20]
   dcbc0:	9301      	str	r3, [sp, #4]
   dcbc2:	bd08      	pop	{r3, pc}
   dcbc4:	00030264 	.word	0x00030264

000dcbc8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   dcbc8:	b508      	push	{r3, lr}
   dcbca:	4b02      	ldr	r3, [pc, #8]	; (dcbd4 <netdb_freeaddrinfo+0xc>)
   dcbcc:	681b      	ldr	r3, [r3, #0]
   dcbce:	689b      	ldr	r3, [r3, #8]
   dcbd0:	9301      	str	r3, [sp, #4]
   dcbd2:	bd08      	pop	{r3, pc}
   dcbd4:	00030268 	.word	0x00030268

000dcbd8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   dcbd8:	b508      	push	{r3, lr}
   dcbda:	4b02      	ldr	r3, [pc, #8]	; (dcbe4 <netdb_getaddrinfo+0xc>)
   dcbdc:	681b      	ldr	r3, [r3, #0]
   dcbde:	68db      	ldr	r3, [r3, #12]
   dcbe0:	9301      	str	r3, [sp, #4]
   dcbe2:	bd08      	pop	{r3, pc}
   dcbe4:	00030268 	.word	0x00030268

000dcbe8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   dcbe8:	b508      	push	{r3, lr}
   dcbea:	4b02      	ldr	r3, [pc, #8]	; (dcbf4 <hal_spi_init+0xc>)
   dcbec:	681b      	ldr	r3, [r3, #0]
   dcbee:	69db      	ldr	r3, [r3, #28]
   dcbf0:	9301      	str	r3, [sp, #4]
   dcbf2:	bd08      	pop	{r3, pc}
   dcbf4:	00030230 	.word	0x00030230

000dcbf8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   dcbf8:	b508      	push	{r3, lr}
   dcbfa:	4b02      	ldr	r3, [pc, #8]	; (dcc04 <hal_spi_is_enabled+0xc>)
   dcbfc:	681b      	ldr	r3, [r3, #0]
   dcbfe:	6a1b      	ldr	r3, [r3, #32]
   dcc00:	9301      	str	r3, [sp, #4]
   dcc02:	bd08      	pop	{r3, pc}
   dcc04:	00030230 	.word	0x00030230

000dcc08 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   dcc08:	b508      	push	{r3, lr}
   dcc0a:	4b02      	ldr	r3, [pc, #8]	; (dcc14 <_open+0xc>)
   dcc0c:	681b      	ldr	r3, [r3, #0]
   dcc0e:	681b      	ldr	r3, [r3, #0]
   dcc10:	9301      	str	r3, [sp, #4]
   dcc12:	bd08      	pop	{r3, pc}
   dcc14:	00030284 	.word	0x00030284

000dcc18 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   dcc18:	b508      	push	{r3, lr}
   dcc1a:	4b02      	ldr	r3, [pc, #8]	; (dcc24 <_write+0xc>)
   dcc1c:	681b      	ldr	r3, [r3, #0]
   dcc1e:	685b      	ldr	r3, [r3, #4]
   dcc20:	9301      	str	r3, [sp, #4]
   dcc22:	bd08      	pop	{r3, pc}
   dcc24:	00030284 	.word	0x00030284

000dcc28 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   dcc28:	b508      	push	{r3, lr}
   dcc2a:	4b02      	ldr	r3, [pc, #8]	; (dcc34 <_read+0xc>)
   dcc2c:	681b      	ldr	r3, [r3, #0]
   dcc2e:	689b      	ldr	r3, [r3, #8]
   dcc30:	9301      	str	r3, [sp, #4]
   dcc32:	bd08      	pop	{r3, pc}
   dcc34:	00030284 	.word	0x00030284

000dcc38 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   dcc38:	b508      	push	{r3, lr}
   dcc3a:	4b02      	ldr	r3, [pc, #8]	; (dcc44 <_close+0xc>)
   dcc3c:	681b      	ldr	r3, [r3, #0]
   dcc3e:	68db      	ldr	r3, [r3, #12]
   dcc40:	9301      	str	r3, [sp, #4]
   dcc42:	bd08      	pop	{r3, pc}
   dcc44:	00030284 	.word	0x00030284

000dcc48 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   dcc48:	b508      	push	{r3, lr}
   dcc4a:	4b02      	ldr	r3, [pc, #8]	; (dcc54 <_fstat+0xc>)
   dcc4c:	681b      	ldr	r3, [r3, #0]
   dcc4e:	695b      	ldr	r3, [r3, #20]
   dcc50:	9301      	str	r3, [sp, #4]
   dcc52:	bd08      	pop	{r3, pc}
   dcc54:	00030284 	.word	0x00030284

000dcc58 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   dcc58:	b508      	push	{r3, lr}
   dcc5a:	4b02      	ldr	r3, [pc, #8]	; (dcc64 <_lseek+0xc>)
   dcc5c:	681b      	ldr	r3, [r3, #0]
   dcc5e:	6a1b      	ldr	r3, [r3, #32]
   dcc60:	9301      	str	r3, [sp, #4]
   dcc62:	bd08      	pop	{r3, pc}
   dcc64:	00030284 	.word	0x00030284

000dcc68 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   dcc68:	b508      	push	{r3, lr}
   dcc6a:	4b02      	ldr	r3, [pc, #8]	; (dcc74 <stat+0xc>)
   dcc6c:	681b      	ldr	r3, [r3, #0]
   dcc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dcc70:	9301      	str	r3, [sp, #4]
   dcc72:	bd08      	pop	{r3, pc}
   dcc74:	00030284 	.word	0x00030284

000dcc78 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   dcc78:	b508      	push	{r3, lr}
   dcc7a:	4b02      	ldr	r3, [pc, #8]	; (dcc84 <mkdir+0xc>)
   dcc7c:	681b      	ldr	r3, [r3, #0]
   dcc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dcc80:	9301      	str	r3, [sp, #4]
   dcc82:	bd08      	pop	{r3, pc}
   dcc84:	00030284 	.word	0x00030284

000dcc88 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   dcc88:	b508      	push	{r3, lr}
   dcc8a:	4b02      	ldr	r3, [pc, #8]	; (dcc94 <_unlink+0xc>)
   dcc8c:	681b      	ldr	r3, [r3, #0]
   dcc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dcc90:	9301      	str	r3, [sp, #4]
   dcc92:	bd08      	pop	{r3, pc}
   dcc94:	00030284 	.word	0x00030284

000dcc98 <_link>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
   dcc98:	b508      	push	{r3, lr}
   dcc9a:	4b02      	ldr	r3, [pc, #8]	; (dcca4 <_link+0xc>)
   dcc9c:	681b      	ldr	r3, [r3, #0]
   dcc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dcca0:	9301      	str	r3, [sp, #4]
   dcca2:	bd08      	pop	{r3, pc}
   dcca4:	00030284 	.word	0x00030284

000dcca8 <opendir>:
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   dcca8:	b508      	push	{r3, lr}
   dccaa:	4b02      	ldr	r3, [pc, #8]	; (dccb4 <opendir+0xc>)
   dccac:	681b      	ldr	r3, [r3, #0]
   dccae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dccb0:	9301      	str	r3, [sp, #4]
   dccb2:	bd08      	pop	{r3, pc}
   dccb4:	00030284 	.word	0x00030284

000dccb8 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   dccb8:	b508      	push	{r3, lr}
   dccba:	4b02      	ldr	r3, [pc, #8]	; (dccc4 <readdir+0xc>)
   dccbc:	681b      	ldr	r3, [r3, #0]
   dccbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dccc0:	9301      	str	r3, [sp, #4]
   dccc2:	bd08      	pop	{r3, pc}
   dccc4:	00030284 	.word	0x00030284

000dccc8 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   dccc8:	b508      	push	{r3, lr}
   dccca:	4b02      	ldr	r3, [pc, #8]	; (dccd4 <closedir+0xc>)
   dcccc:	681b      	ldr	r3, [r3, #0]
   dccce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dccd0:	9301      	str	r3, [sp, #4]
   dccd2:	bd08      	pop	{r3, pc}
   dccd4:	00030284 	.word	0x00030284

000dccd8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   dccd8:	b508      	push	{r3, lr}
   dccda:	4b02      	ldr	r3, [pc, #8]	; (dcce4 <hal_usart_init+0xc>)
   dccdc:	681b      	ldr	r3, [r3, #0]
   dccde:	681b      	ldr	r3, [r3, #0]
   dcce0:	9301      	str	r3, [sp, #4]
   dcce2:	bd08      	pop	{r3, pc}
   dcce4:	0003023c 	.word	0x0003023c

000dcce8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   dcce8:	b508      	push	{r3, lr}
   dccea:	4b02      	ldr	r3, [pc, #8]	; (dccf4 <hal_usart_end+0xc>)
   dccec:	681b      	ldr	r3, [r3, #0]
   dccee:	689b      	ldr	r3, [r3, #8]
   dccf0:	9301      	str	r3, [sp, #4]
   dccf2:	bd08      	pop	{r3, pc}
   dccf4:	0003023c 	.word	0x0003023c

000dccf8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   dccf8:	b508      	push	{r3, lr}
   dccfa:	4b02      	ldr	r3, [pc, #8]	; (dcd04 <hal_usart_write+0xc>)
   dccfc:	681b      	ldr	r3, [r3, #0]
   dccfe:	68db      	ldr	r3, [r3, #12]
   dcd00:	9301      	str	r3, [sp, #4]
   dcd02:	bd08      	pop	{r3, pc}
   dcd04:	0003023c 	.word	0x0003023c

000dcd08 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   dcd08:	b508      	push	{r3, lr}
   dcd0a:	4b02      	ldr	r3, [pc, #8]	; (dcd14 <hal_usart_available+0xc>)
   dcd0c:	681b      	ldr	r3, [r3, #0]
   dcd0e:	691b      	ldr	r3, [r3, #16]
   dcd10:	9301      	str	r3, [sp, #4]
   dcd12:	bd08      	pop	{r3, pc}
   dcd14:	0003023c 	.word	0x0003023c

000dcd18 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   dcd18:	b508      	push	{r3, lr}
   dcd1a:	4b02      	ldr	r3, [pc, #8]	; (dcd24 <hal_usart_read+0xc>)
   dcd1c:	681b      	ldr	r3, [r3, #0]
   dcd1e:	695b      	ldr	r3, [r3, #20]
   dcd20:	9301      	str	r3, [sp, #4]
   dcd22:	bd08      	pop	{r3, pc}
   dcd24:	0003023c 	.word	0x0003023c

000dcd28 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   dcd28:	b508      	push	{r3, lr}
   dcd2a:	4b02      	ldr	r3, [pc, #8]	; (dcd34 <hal_usart_peek+0xc>)
   dcd2c:	681b      	ldr	r3, [r3, #0]
   dcd2e:	699b      	ldr	r3, [r3, #24]
   dcd30:	9301      	str	r3, [sp, #4]
   dcd32:	bd08      	pop	{r3, pc}
   dcd34:	0003023c 	.word	0x0003023c

000dcd38 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   dcd38:	b508      	push	{r3, lr}
   dcd3a:	4b02      	ldr	r3, [pc, #8]	; (dcd44 <hal_usart_flush+0xc>)
   dcd3c:	681b      	ldr	r3, [r3, #0]
   dcd3e:	69db      	ldr	r3, [r3, #28]
   dcd40:	9301      	str	r3, [sp, #4]
   dcd42:	bd08      	pop	{r3, pc}
   dcd44:	0003023c 	.word	0x0003023c

000dcd48 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   dcd48:	b508      	push	{r3, lr}
   dcd4a:	4b02      	ldr	r3, [pc, #8]	; (dcd54 <hal_usart_is_enabled+0xc>)
   dcd4c:	681b      	ldr	r3, [r3, #0]
   dcd4e:	6a1b      	ldr	r3, [r3, #32]
   dcd50:	9301      	str	r3, [sp, #4]
   dcd52:	bd08      	pop	{r3, pc}
   dcd54:	0003023c 	.word	0x0003023c

000dcd58 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   dcd58:	b508      	push	{r3, lr}
   dcd5a:	4b02      	ldr	r3, [pc, #8]	; (dcd64 <hal_usart_available_data_for_write+0xc>)
   dcd5c:	681b      	ldr	r3, [r3, #0]
   dcd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dcd60:	9301      	str	r3, [sp, #4]
   dcd62:	bd08      	pop	{r3, pc}
   dcd64:	0003023c 	.word	0x0003023c

000dcd68 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   dcd68:	b508      	push	{r3, lr}
   dcd6a:	4b02      	ldr	r3, [pc, #8]	; (dcd74 <hal_usart_begin_config+0xc>)
   dcd6c:	681b      	ldr	r3, [r3, #0]
   dcd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dcd70:	9301      	str	r3, [sp, #4]
   dcd72:	bd08      	pop	{r3, pc}
   dcd74:	0003023c 	.word	0x0003023c

000dcd78 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   dcd78:	b508      	push	{r3, lr}
   dcd7a:	4b02      	ldr	r3, [pc, #8]	; (dcd84 <HAL_USB_USART_Init+0xc>)
   dcd7c:	681b      	ldr	r3, [r3, #0]
   dcd7e:	681b      	ldr	r3, [r3, #0]
   dcd80:	9301      	str	r3, [sp, #4]
   dcd82:	bd08      	pop	{r3, pc}
   dcd84:	0003024c 	.word	0x0003024c

000dcd88 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   dcd88:	b508      	push	{r3, lr}
   dcd8a:	4b02      	ldr	r3, [pc, #8]	; (dcd94 <HAL_USB_USART_Begin+0xc>)
   dcd8c:	681b      	ldr	r3, [r3, #0]
   dcd8e:	685b      	ldr	r3, [r3, #4]
   dcd90:	9301      	str	r3, [sp, #4]
   dcd92:	bd08      	pop	{r3, pc}
   dcd94:	0003024c 	.word	0x0003024c

000dcd98 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   dcd98:	b508      	push	{r3, lr}
   dcd9a:	4b02      	ldr	r3, [pc, #8]	; (dcda4 <HAL_USB_USART_End+0xc>)
   dcd9c:	681b      	ldr	r3, [r3, #0]
   dcd9e:	689b      	ldr	r3, [r3, #8]
   dcda0:	9301      	str	r3, [sp, #4]
   dcda2:	bd08      	pop	{r3, pc}
   dcda4:	0003024c 	.word	0x0003024c

000dcda8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   dcda8:	b508      	push	{r3, lr}
   dcdaa:	4b02      	ldr	r3, [pc, #8]	; (dcdb4 <HAL_USB_USART_Available_Data+0xc>)
   dcdac:	681b      	ldr	r3, [r3, #0]
   dcdae:	691b      	ldr	r3, [r3, #16]
   dcdb0:	9301      	str	r3, [sp, #4]
   dcdb2:	bd08      	pop	{r3, pc}
   dcdb4:	0003024c 	.word	0x0003024c

000dcdb8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   dcdb8:	b508      	push	{r3, lr}
   dcdba:	4b02      	ldr	r3, [pc, #8]	; (dcdc4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   dcdbc:	681b      	ldr	r3, [r3, #0]
   dcdbe:	695b      	ldr	r3, [r3, #20]
   dcdc0:	9301      	str	r3, [sp, #4]
   dcdc2:	bd08      	pop	{r3, pc}
   dcdc4:	0003024c 	.word	0x0003024c

000dcdc8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dcdc8:	b508      	push	{r3, lr}
   dcdca:	4b02      	ldr	r3, [pc, #8]	; (dcdd4 <HAL_USB_USART_Receive_Data+0xc>)
   dcdcc:	681b      	ldr	r3, [r3, #0]
   dcdce:	699b      	ldr	r3, [r3, #24]
   dcdd0:	9301      	str	r3, [sp, #4]
   dcdd2:	bd08      	pop	{r3, pc}
   dcdd4:	0003024c 	.word	0x0003024c

000dcdd8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dcdd8:	b508      	push	{r3, lr}
   dcdda:	4b02      	ldr	r3, [pc, #8]	; (dcde4 <HAL_USB_USART_Send_Data+0xc>)
   dcddc:	681b      	ldr	r3, [r3, #0]
   dcdde:	69db      	ldr	r3, [r3, #28]
   dcde0:	9301      	str	r3, [sp, #4]
   dcde2:	bd08      	pop	{r3, pc}
   dcde4:	0003024c 	.word	0x0003024c

000dcde8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   dcde8:	b508      	push	{r3, lr}
   dcdea:	4b02      	ldr	r3, [pc, #8]	; (dcdf4 <HAL_USB_USART_Flush_Data+0xc>)
   dcdec:	681b      	ldr	r3, [r3, #0]
   dcdee:	6a1b      	ldr	r3, [r3, #32]
   dcdf0:	9301      	str	r3, [sp, #4]
   dcdf2:	bd08      	pop	{r3, pc}
   dcdf4:	0003024c 	.word	0x0003024c

000dcdf8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   dcdf8:	b508      	push	{r3, lr}
   dcdfa:	4b02      	ldr	r3, [pc, #8]	; (dce04 <panic_+0xc>)
   dcdfc:	681b      	ldr	r3, [r3, #0]
   dcdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dce00:	9301      	str	r3, [sp, #4]
   dce02:	bd08      	pop	{r3, pc}
   dce04:	00030260 	.word	0x00030260

000dce08 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   dce08:	b508      	push	{r3, lr}
   dce0a:	4b02      	ldr	r3, [pc, #8]	; (dce14 <jsmn_init+0xc>)
   dce0c:	681b      	ldr	r3, [r3, #0]
   dce0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dce10:	9301      	str	r3, [sp, #4]
   dce12:	bd08      	pop	{r3, pc}
   dce14:	00030260 	.word	0x00030260

000dce18 <jsmn_parse_deprecated>:
DYNALIB_FN(15, services, jsmn_parse_deprecated, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   dce18:	b508      	push	{r3, lr}
   dce1a:	4b02      	ldr	r3, [pc, #8]	; (dce24 <jsmn_parse_deprecated+0xc>)
   dce1c:	681b      	ldr	r3, [r3, #0]
   dce1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dce20:	9301      	str	r3, [sp, #4]
   dce22:	bd08      	pop	{r3, pc}
   dce24:	00030260 	.word	0x00030260

000dce28 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   dce28:	b508      	push	{r3, lr}
   dce2a:	4b02      	ldr	r3, [pc, #8]	; (dce34 <log_message+0xc>)
   dce2c:	681b      	ldr	r3, [r3, #0]
   dce2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dce30:	9301      	str	r3, [sp, #4]
   dce32:	bd08      	pop	{r3, pc}
   dce34:	00030260 	.word	0x00030260

000dce38 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   dce38:	b508      	push	{r3, lr}
   dce3a:	4b02      	ldr	r3, [pc, #8]	; (dce44 <log_message_v+0xc>)
   dce3c:	681b      	ldr	r3, [r3, #0]
   dce3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dce40:	9301      	str	r3, [sp, #4]
   dce42:	bd08      	pop	{r3, pc}
   dce44:	00030260 	.word	0x00030260

000dce48 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   dce48:	b508      	push	{r3, lr}
   dce4a:	4b02      	ldr	r3, [pc, #8]	; (dce54 <log_write+0xc>)
   dce4c:	681b      	ldr	r3, [r3, #0]
   dce4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dce50:	9301      	str	r3, [sp, #4]
   dce52:	bd08      	pop	{r3, pc}
   dce54:	00030260 	.word	0x00030260

000dce58 <log_level_name>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   dce58:	b508      	push	{r3, lr}
   dce5a:	4b02      	ldr	r3, [pc, #8]	; (dce64 <log_level_name+0xc>)
   dce5c:	681b      	ldr	r3, [r3, #0]
   dce5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   dce60:	9301      	str	r3, [sp, #4]
   dce62:	bd08      	pop	{r3, pc}
   dce64:	00030260 	.word	0x00030260

000dce68 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   dce68:	b508      	push	{r3, lr}
   dce6a:	4b02      	ldr	r3, [pc, #8]	; (dce74 <log_set_callbacks+0xc>)
   dce6c:	681b      	ldr	r3, [r3, #0]
   dce6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   dce70:	9301      	str	r3, [sp, #4]
   dce72:	bd08      	pop	{r3, pc}
   dce74:	00030260 	.word	0x00030260

000dce78 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   dce78:	b508      	push	{r3, lr}
   dce7a:	4b03      	ldr	r3, [pc, #12]	; (dce88 <diag_get_source+0x10>)
   dce7c:	681b      	ldr	r3, [r3, #0]
   dce7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   dce82:	9301      	str	r3, [sp, #4]
   dce84:	bd08      	pop	{r3, pc}
   dce86:	0000      	.short	0x0000
   dce88:	00030260 	.word	0x00030260

000dce8c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   dce8c:	b508      	push	{r3, lr}
   dce8e:	4b02      	ldr	r3, [pc, #8]	; (dce98 <system_mode+0xc>)
   dce90:	681b      	ldr	r3, [r3, #0]
   dce92:	681b      	ldr	r3, [r3, #0]
   dce94:	9301      	str	r3, [sp, #4]
   dce96:	bd08      	pop	{r3, pc}
   dce98:	00030220 	.word	0x00030220

000dce9c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   dce9c:	b508      	push	{r3, lr}
   dce9e:	4b02      	ldr	r3, [pc, #8]	; (dcea8 <set_system_mode+0xc>)
   dcea0:	681b      	ldr	r3, [r3, #0]
   dcea2:	685b      	ldr	r3, [r3, #4]
   dcea4:	9301      	str	r3, [sp, #4]
   dcea6:	bd08      	pop	{r3, pc}
   dcea8:	00030220 	.word	0x00030220

000dceac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   dceac:	b508      	push	{r3, lr}
   dceae:	4b02      	ldr	r3, [pc, #8]	; (dceb8 <system_delay_ms+0xc>)
   dceb0:	681b      	ldr	r3, [r3, #0]
   dceb2:	695b      	ldr	r3, [r3, #20]
   dceb4:	9301      	str	r3, [sp, #4]
   dceb6:	bd08      	pop	{r3, pc}
   dceb8:	00030220 	.word	0x00030220

000dcebc <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   dcebc:	b508      	push	{r3, lr}
   dcebe:	4b02      	ldr	r3, [pc, #8]	; (dcec8 <system_subscribe_event+0xc>)
   dcec0:	681b      	ldr	r3, [r3, #0]
   dcec2:	6a1b      	ldr	r3, [r3, #32]
   dcec4:	9301      	str	r3, [sp, #4]
   dcec6:	bd08      	pop	{r3, pc}
   dcec8:	00030220 	.word	0x00030220

000dcecc <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   dcecc:	b508      	push	{r3, lr}
   dcece:	4b02      	ldr	r3, [pc, #8]	; (dced8 <system_thread_set_state+0xc>)
   dced0:	681b      	ldr	r3, [r3, #0]
   dced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dced4:	9301      	str	r3, [sp, #4]
   dced6:	bd08      	pop	{r3, pc}
   dced8:	00030220 	.word	0x00030220

000dcedc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   dcedc:	b508      	push	{r3, lr}
   dcede:	4b02      	ldr	r3, [pc, #8]	; (dcee8 <application_thread_current+0xc>)
   dcee0:	681b      	ldr	r3, [r3, #0]
   dcee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dcee4:	9301      	str	r3, [sp, #4]
   dcee6:	bd08      	pop	{r3, pc}
   dcee8:	00030220 	.word	0x00030220

000dceec <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   dceec:	b508      	push	{r3, lr}
   dceee:	4b02      	ldr	r3, [pc, #8]	; (dcef8 <application_thread_invoke+0xc>)
   dcef0:	681b      	ldr	r3, [r3, #0]
   dcef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dcef4:	9301      	str	r3, [sp, #4]
   dcef6:	bd08      	pop	{r3, pc}
   dcef8:	00030220 	.word	0x00030220

000dcefc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   dcefc:	b508      	push	{r3, lr}
   dcefe:	4b02      	ldr	r3, [pc, #8]	; (dcf08 <system_thread_get_state+0xc>)
   dcf00:	681b      	ldr	r3, [r3, #0]
   dcf02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dcf04:	9301      	str	r3, [sp, #4]
   dcf06:	bd08      	pop	{r3, pc}
   dcf08:	00030220 	.word	0x00030220

000dcf0c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   dcf0c:	b508      	push	{r3, lr}
   dcf0e:	4b02      	ldr	r3, [pc, #8]	; (dcf18 <system_notify_time_changed+0xc>)
   dcf10:	681b      	ldr	r3, [r3, #0]
   dcf12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dcf14:	9301      	str	r3, [sp, #4]
   dcf16:	bd08      	pop	{r3, pc}
   dcf18:	00030220 	.word	0x00030220

000dcf1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   dcf1c:	b508      	push	{r3, lr}
   dcf1e:	4b03      	ldr	r3, [pc, #12]	; (dcf2c <system_ctrl_set_app_request_handler+0x10>)
   dcf20:	681b      	ldr	r3, [r3, #0]
   dcf22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   dcf26:	9301      	str	r3, [sp, #4]
   dcf28:	bd08      	pop	{r3, pc}
   dcf2a:	0000      	.short	0x0000
   dcf2c:	00030220 	.word	0x00030220

000dcf30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   dcf30:	b508      	push	{r3, lr}
   dcf32:	4b03      	ldr	r3, [pc, #12]	; (dcf40 <system_ctrl_set_result+0x10>)
   dcf34:	681b      	ldr	r3, [r3, #0]
   dcf36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   dcf3a:	9301      	str	r3, [sp, #4]
   dcf3c:	bd08      	pop	{r3, pc}
   dcf3e:	0000      	.short	0x0000
   dcf40:	00030220 	.word	0x00030220

000dcf44 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   dcf44:	b508      	push	{r3, lr}
   dcf46:	4b03      	ldr	r3, [pc, #12]	; (dcf54 <system_sleep_ext+0x10>)
   dcf48:	681b      	ldr	r3, [r3, #0]
   dcf4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   dcf4e:	9301      	str	r3, [sp, #4]
   dcf50:	bd08      	pop	{r3, pc}
   dcf52:	0000      	.short	0x0000
   dcf54:	00030220 	.word	0x00030220

000dcf58 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   dcf58:	b508      	push	{r3, lr}
   dcf5a:	4b02      	ldr	r3, [pc, #8]	; (dcf64 <spark_variable+0xc>)
   dcf5c:	681b      	ldr	r3, [r3, #0]
   dcf5e:	681b      	ldr	r3, [r3, #0]
   dcf60:	9301      	str	r3, [sp, #4]
   dcf62:	bd08      	pop	{r3, pc}
   dcf64:	00030244 	.word	0x00030244

000dcf68 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   dcf68:	b508      	push	{r3, lr}
   dcf6a:	4b02      	ldr	r3, [pc, #8]	; (dcf74 <spark_function+0xc>)
   dcf6c:	681b      	ldr	r3, [r3, #0]
   dcf6e:	685b      	ldr	r3, [r3, #4]
   dcf70:	9301      	str	r3, [sp, #4]
   dcf72:	bd08      	pop	{r3, pc}
   dcf74:	00030244 	.word	0x00030244

000dcf78 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   dcf78:	b508      	push	{r3, lr}
   dcf7a:	4b02      	ldr	r3, [pc, #8]	; (dcf84 <spark_process+0xc>)
   dcf7c:	681b      	ldr	r3, [r3, #0]
   dcf7e:	689b      	ldr	r3, [r3, #8]
   dcf80:	9301      	str	r3, [sp, #4]
   dcf82:	bd08      	pop	{r3, pc}
   dcf84:	00030244 	.word	0x00030244

000dcf88 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   dcf88:	b508      	push	{r3, lr}
   dcf8a:	4b02      	ldr	r3, [pc, #8]	; (dcf94 <spark_cloud_flag_connect+0xc>)
   dcf8c:	681b      	ldr	r3, [r3, #0]
   dcf8e:	68db      	ldr	r3, [r3, #12]
   dcf90:	9301      	str	r3, [sp, #4]
   dcf92:	bd08      	pop	{r3, pc}
   dcf94:	00030244 	.word	0x00030244

000dcf98 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   dcf98:	b508      	push	{r3, lr}
   dcf9a:	4b02      	ldr	r3, [pc, #8]	; (dcfa4 <spark_cloud_flag_connected+0xc>)
   dcf9c:	681b      	ldr	r3, [r3, #0]
   dcf9e:	695b      	ldr	r3, [r3, #20]
   dcfa0:	9301      	str	r3, [sp, #4]
   dcfa2:	bd08      	pop	{r3, pc}
   dcfa4:	00030244 	.word	0x00030244

000dcfa8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   dcfa8:	b508      	push	{r3, lr}
   dcfaa:	4b02      	ldr	r3, [pc, #8]	; (dcfb4 <spark_send_event+0xc>)
   dcfac:	681b      	ldr	r3, [r3, #0]
   dcfae:	6a1b      	ldr	r3, [r3, #32]
   dcfb0:	9301      	str	r3, [sp, #4]
   dcfb2:	bd08      	pop	{r3, pc}
   dcfb4:	00030244 	.word	0x00030244

000dcfb8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   dcfb8:	b508      	push	{r3, lr}
   dcfba:	4b02      	ldr	r3, [pc, #8]	; (dcfc4 <spark_sync_time_pending+0xc>)
   dcfbc:	681b      	ldr	r3, [r3, #0]
   dcfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dcfc0:	9301      	str	r3, [sp, #4]
   dcfc2:	bd08      	pop	{r3, pc}
   dcfc4:	00030244 	.word	0x00030244

000dcfc8 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   dcfc8:	b508      	push	{r3, lr}
   dcfca:	4b02      	ldr	r3, [pc, #8]	; (dcfd4 <spark_sync_time_last+0xc>)
   dcfcc:	681b      	ldr	r3, [r3, #0]
   dcfce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dcfd0:	9301      	str	r3, [sp, #4]
   dcfd2:	bd08      	pop	{r3, pc}
   dcfd4:	00030244 	.word	0x00030244

000dcfd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   dcfd8:	b508      	push	{r3, lr}
   dcfda:	4b02      	ldr	r3, [pc, #8]	; (dcfe4 <spark_set_random_seed_from_cloud_handler+0xc>)
   dcfdc:	681b      	ldr	r3, [r3, #0]
   dcfde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dcfe0:	9301      	str	r3, [sp, #4]
   dcfe2:	bd08      	pop	{r3, pc}
   dcfe4:	00030244 	.word	0x00030244

000dcfe8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   dcfe8:	b508      	push	{r3, lr}
   dcfea:	4b02      	ldr	r3, [pc, #8]	; (dcff4 <spark_cloud_disconnect+0xc>)
   dcfec:	681b      	ldr	r3, [r3, #0]
   dcfee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dcff0:	9301      	str	r3, [sp, #4]
   dcff2:	bd08      	pop	{r3, pc}
   dcff4:	00030244 	.word	0x00030244

000dcff8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   dcff8:	b508      	push	{r3, lr}
   dcffa:	4b02      	ldr	r3, [pc, #8]	; (dd004 <network_connect+0xc>)
   dcffc:	681b      	ldr	r3, [r3, #0]
   dcffe:	685b      	ldr	r3, [r3, #4]
   dd000:	9301      	str	r3, [sp, #4]
   dd002:	bd08      	pop	{r3, pc}
   dd004:	00030240 	.word	0x00030240

000dd008 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   dd008:	b508      	push	{r3, lr}
   dd00a:	4b02      	ldr	r3, [pc, #8]	; (dd014 <network_connecting+0xc>)
   dd00c:	681b      	ldr	r3, [r3, #0]
   dd00e:	689b      	ldr	r3, [r3, #8]
   dd010:	9301      	str	r3, [sp, #4]
   dd012:	bd08      	pop	{r3, pc}
   dd014:	00030240 	.word	0x00030240

000dd018 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   dd018:	b508      	push	{r3, lr}
   dd01a:	4b02      	ldr	r3, [pc, #8]	; (dd024 <network_disconnect+0xc>)
   dd01c:	681b      	ldr	r3, [r3, #0]
   dd01e:	68db      	ldr	r3, [r3, #12]
   dd020:	9301      	str	r3, [sp, #4]
   dd022:	bd08      	pop	{r3, pc}
   dd024:	00030240 	.word	0x00030240

000dd028 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   dd028:	b508      	push	{r3, lr}
   dd02a:	4b02      	ldr	r3, [pc, #8]	; (dd034 <network_ready+0xc>)
   dd02c:	681b      	ldr	r3, [r3, #0]
   dd02e:	691b      	ldr	r3, [r3, #16]
   dd030:	9301      	str	r3, [sp, #4]
   dd032:	bd08      	pop	{r3, pc}
   dd034:	00030240 	.word	0x00030240

000dd038 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   dd038:	b508      	push	{r3, lr}
   dd03a:	4b02      	ldr	r3, [pc, #8]	; (dd044 <network_on+0xc>)
   dd03c:	681b      	ldr	r3, [r3, #0]
   dd03e:	695b      	ldr	r3, [r3, #20]
   dd040:	9301      	str	r3, [sp, #4]
   dd042:	bd08      	pop	{r3, pc}
   dd044:	00030240 	.word	0x00030240

000dd048 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   dd048:	b508      	push	{r3, lr}
   dd04a:	4b02      	ldr	r3, [pc, #8]	; (dd054 <network_off+0xc>)
   dd04c:	681b      	ldr	r3, [r3, #0]
   dd04e:	699b      	ldr	r3, [r3, #24]
   dd050:	9301      	str	r3, [sp, #4]
   dd052:	bd08      	pop	{r3, pc}
   dd054:	00030240 	.word	0x00030240

000dd058 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   dd058:	b508      	push	{r3, lr}
   dd05a:	4b02      	ldr	r3, [pc, #8]	; (dd064 <network_listen+0xc>)
   dd05c:	681b      	ldr	r3, [r3, #0]
   dd05e:	69db      	ldr	r3, [r3, #28]
   dd060:	9301      	str	r3, [sp, #4]
   dd062:	bd08      	pop	{r3, pc}
   dd064:	00030240 	.word	0x00030240

000dd068 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   dd068:	b508      	push	{r3, lr}
   dd06a:	4b02      	ldr	r3, [pc, #8]	; (dd074 <network_listening+0xc>)
   dd06c:	681b      	ldr	r3, [r3, #0]
   dd06e:	6a1b      	ldr	r3, [r3, #32]
   dd070:	9301      	str	r3, [sp, #4]
   dd072:	bd08      	pop	{r3, pc}
   dd074:	00030240 	.word	0x00030240

000dd078 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   dd078:	b508      	push	{r3, lr}
   dd07a:	4b02      	ldr	r3, [pc, #8]	; (dd084 <network_set_listen_timeout+0xc>)
   dd07c:	681b      	ldr	r3, [r3, #0]
   dd07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dd080:	9301      	str	r3, [sp, #4]
   dd082:	bd08      	pop	{r3, pc}
   dd084:	00030240 	.word	0x00030240

000dd088 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   dd088:	b508      	push	{r3, lr}
   dd08a:	4b02      	ldr	r3, [pc, #8]	; (dd094 <network_get_listen_timeout+0xc>)
   dd08c:	681b      	ldr	r3, [r3, #0]
   dd08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dd090:	9301      	str	r3, [sp, #4]
   dd092:	bd08      	pop	{r3, pc}
   dd094:	00030240 	.word	0x00030240

000dd098 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   dd098:	b508      	push	{r3, lr}
   dd09a:	4b02      	ldr	r3, [pc, #8]	; (dd0a4 <network_is_on+0xc>)
   dd09c:	681b      	ldr	r3, [r3, #0]
   dd09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dd0a0:	9301      	str	r3, [sp, #4]
   dd0a2:	bd08      	pop	{r3, pc}
   dd0a4:	00030240 	.word	0x00030240

000dd0a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   dd0a8:	b508      	push	{r3, lr}
   dd0aa:	4b02      	ldr	r3, [pc, #8]	; (dd0b4 <network_is_off+0xc>)
   dd0ac:	681b      	ldr	r3, [r3, #0]
   dd0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dd0b0:	9301      	str	r3, [sp, #4]
   dd0b2:	bd08      	pop	{r3, pc}
   dd0b4:	00030240 	.word	0x00030240

000dd0b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   dd0b8:	b508      	push	{r3, lr}
   dd0ba:	4b02      	ldr	r3, [pc, #8]	; (dd0c4 <malloc+0xc>)
   dd0bc:	681b      	ldr	r3, [r3, #0]
   dd0be:	681b      	ldr	r3, [r3, #0]
   dd0c0:	9301      	str	r3, [sp, #4]
   dd0c2:	bd08      	pop	{r3, pc}
   dd0c4:	0003021c 	.word	0x0003021c

000dd0c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   dd0c8:	b508      	push	{r3, lr}
   dd0ca:	4b02      	ldr	r3, [pc, #8]	; (dd0d4 <free+0xc>)
   dd0cc:	681b      	ldr	r3, [r3, #0]
   dd0ce:	685b      	ldr	r3, [r3, #4]
   dd0d0:	9301      	str	r3, [sp, #4]
   dd0d2:	bd08      	pop	{r3, pc}
   dd0d4:	0003021c 	.word	0x0003021c

000dd0d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   dd0d8:	b508      	push	{r3, lr}
   dd0da:	4b02      	ldr	r3, [pc, #8]	; (dd0e4 <realloc+0xc>)
   dd0dc:	681b      	ldr	r3, [r3, #0]
   dd0de:	689b      	ldr	r3, [r3, #8]
   dd0e0:	9301      	str	r3, [sp, #4]
   dd0e2:	bd08      	pop	{r3, pc}
   dd0e4:	0003021c 	.word	0x0003021c

000dd0e8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   dd0e8:	b508      	push	{r3, lr}
   dd0ea:	4b02      	ldr	r3, [pc, #8]	; (dd0f4 <siprintf+0xc>)
   dd0ec:	681b      	ldr	r3, [r3, #0]
   dd0ee:	691b      	ldr	r3, [r3, #16]
   dd0f0:	9301      	str	r3, [sp, #4]
   dd0f2:	bd08      	pop	{r3, pc}
   dd0f4:	0003021c 	.word	0x0003021c

000dd0f8 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   dd0f8:	b508      	push	{r3, lr}
   dd0fa:	4b02      	ldr	r3, [pc, #8]	; (dd104 <sscanf+0xc>)
   dd0fc:	681b      	ldr	r3, [r3, #0]
   dd0fe:	695b      	ldr	r3, [r3, #20]
   dd100:	9301      	str	r3, [sp, #4]
   dd102:	bd08      	pop	{r3, pc}
   dd104:	0003021c 	.word	0x0003021c

000dd108 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   dd108:	b508      	push	{r3, lr}
   dd10a:	4b02      	ldr	r3, [pc, #8]	; (dd114 <snprintf+0xc>)
   dd10c:	681b      	ldr	r3, [r3, #0]
   dd10e:	69db      	ldr	r3, [r3, #28]
   dd110:	9301      	str	r3, [sp, #4]
   dd112:	bd08      	pop	{r3, pc}
   dd114:	0003021c 	.word	0x0003021c

000dd118 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   dd118:	b508      	push	{r3, lr}
   dd11a:	4b02      	ldr	r3, [pc, #8]	; (dd124 <vsnprintf+0xc>)
   dd11c:	681b      	ldr	r3, [r3, #0]
   dd11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dd120:	9301      	str	r3, [sp, #4]
   dd122:	bd08      	pop	{r3, pc}
   dd124:	0003021c 	.word	0x0003021c

000dd128 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   dd128:	b508      	push	{r3, lr}
   dd12a:	4b02      	ldr	r3, [pc, #8]	; (dd134 <abort+0xc>)
   dd12c:	681b      	ldr	r3, [r3, #0]
   dd12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dd130:	9301      	str	r3, [sp, #4]
   dd132:	bd08      	pop	{r3, pc}
   dd134:	0003021c 	.word	0x0003021c

000dd138 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   dd138:	b508      	push	{r3, lr}
   dd13a:	4b02      	ldr	r3, [pc, #8]	; (dd144 <_malloc_r+0xc>)
   dd13c:	681b      	ldr	r3, [r3, #0]
   dd13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dd140:	9301      	str	r3, [sp, #4]
   dd142:	bd08      	pop	{r3, pc}
   dd144:	0003021c 	.word	0x0003021c

000dd148 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   dd148:	b508      	push	{r3, lr}
   dd14a:	4b02      	ldr	r3, [pc, #8]	; (dd154 <__errno+0xc>)
   dd14c:	681b      	ldr	r3, [r3, #0]
   dd14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   dd150:	9301      	str	r3, [sp, #4]
   dd152:	bd08      	pop	{r3, pc}
   dd154:	0003021c 	.word	0x0003021c

000dd158 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   dd158:	b508      	push	{r3, lr}
   dd15a:	4b02      	ldr	r3, [pc, #8]	; (dd164 <newlib_impure_ptr_callback+0xc>)
   dd15c:	681b      	ldr	r3, [r3, #0]
   dd15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dd160:	9301      	str	r3, [sp, #4]
   dd162:	bd08      	pop	{r3, pc}
   dd164:	0003021c 	.word	0x0003021c

000dd168 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   dd168:	b508      	push	{r3, lr}
   dd16a:	4b02      	ldr	r3, [pc, #8]	; (dd174 <strftime+0xc>)
   dd16c:	681b      	ldr	r3, [r3, #0]
   dd16e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dd170:	9301      	str	r3, [sp, #4]
   dd172:	bd08      	pop	{r3, pc}
   dd174:	0003021c 	.word	0x0003021c

000dd178 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dd178:	b508      	push	{r3, lr}
   dd17a:	4b02      	ldr	r3, [pc, #8]	; (dd184 <localtime_r+0xc>)
   dd17c:	681b      	ldr	r3, [r3, #0]
   dd17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dd180:	9301      	str	r3, [sp, #4]
   dd182:	bd08      	pop	{r3, pc}
   dd184:	0003021c 	.word	0x0003021c

000dd188 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   dd188:	b508      	push	{r3, lr}
   dd18a:	4b02      	ldr	r3, [pc, #8]	; (dd194 <gmtime_r+0xc>)
   dd18c:	681b      	ldr	r3, [r3, #0]
   dd18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   dd190:	9301      	str	r3, [sp, #4]
   dd192:	bd08      	pop	{r3, pc}
   dd194:	0003021c 	.word	0x0003021c

000dd198 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   dd198:	b508      	push	{r3, lr}
   dd19a:	4b02      	ldr	r3, [pc, #8]	; (dd1a4 <mktime+0xc>)
   dd19c:	681b      	ldr	r3, [r3, #0]
   dd19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dd1a0:	9301      	str	r3, [sp, #4]
   dd1a2:	bd08      	pop	{r3, pc}
   dd1a4:	0003021c 	.word	0x0003021c

000dd1a8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   dd1a8:	428a      	cmp	r2, r1
{
   dd1aa:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   dd1ac:	d007      	beq.n	dd1be <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   dd1ae:	9c02      	ldr	r4, [sp, #8]
   dd1b0:	1a40      	subs	r0, r0, r1
   dd1b2:	1ae4      	subs	r4, r4, r3
   dd1b4:	4360      	muls	r0, r4
   dd1b6:	1a52      	subs	r2, r2, r1
   dd1b8:	fb90 f0f2 	sdiv	r0, r0, r2
   dd1bc:	4418      	add	r0, r3
}
   dd1be:	bd10      	pop	{r4, pc}

000dd1c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dd1c0:	2100      	movs	r1, #0
   dd1c2:	f7ff be73 	b.w	dceac <system_delay_ms>

000dd1c6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dd1c6:	b510      	push	{r4, lr}
      if (_M_empty())
   dd1c8:	6883      	ldr	r3, [r0, #8]
   dd1ca:	4604      	mov	r4, r0
   dd1cc:	b90b      	cbnz	r3, dd1d2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dd1ce:	f003 fad7 	bl	e0780 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd1d2:	68c3      	ldr	r3, [r0, #12]
   dd1d4:	4798      	blx	r3
      if (_M_manager)
   dd1d6:	68a3      	ldr	r3, [r4, #8]
   dd1d8:	b11b      	cbz	r3, dd1e2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dd1da:	2203      	movs	r2, #3
   dd1dc:	4621      	mov	r1, r4
   dd1de:	4620      	mov	r0, r4
   dd1e0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dd1e2:	4620      	mov	r0, r4
   dd1e4:	2110      	movs	r1, #16
}
   dd1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   dd1ea:	f003 ba89 	b.w	e0700 <_ZdlPvj>
	...

000dd1f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dd1f0:	4802      	ldr	r0, [pc, #8]	; (dd1fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   dd1f2:	2300      	movs	r3, #0
   dd1f4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   dd1f6:	f7ff bbcf 	b.w	dc998 <os_mutex_recursive_create>
   dd1fa:	bf00      	nop
   dd1fc:	2003e518 	.word	0x2003e518

000dd200 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   dd200:	2200      	movs	r2, #0
   dd202:	6840      	ldr	r0, [r0, #4]
   dd204:	4611      	mov	r1, r2
   dd206:	f7ff bf0f 	b.w	dd028 <network_ready>

000dd20a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   dd20a:	2200      	movs	r2, #0
   dd20c:	6840      	ldr	r0, [r0, #4]
   dd20e:	4611      	mov	r1, r2
   dd210:	f7ff bf2a 	b.w	dd068 <network_listening>

000dd214 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dd214:	2200      	movs	r2, #0
   dd216:	6840      	ldr	r0, [r0, #4]
   dd218:	4611      	mov	r1, r2
   dd21a:	f7ff bf35 	b.w	dd088 <network_get_listen_timeout>

000dd21e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dd21e:	6840      	ldr	r0, [r0, #4]
   dd220:	2200      	movs	r2, #0
   dd222:	f7ff bf29 	b.w	dd078 <network_set_listen_timeout>

000dd226 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dd226:	6840      	ldr	r0, [r0, #4]
   dd228:	2200      	movs	r2, #0
   dd22a:	f081 0101 	eor.w	r1, r1, #1
   dd22e:	f7ff bf13 	b.w	dd058 <network_listen>

000dd232 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dd232:	2300      	movs	r3, #0
   dd234:	6840      	ldr	r0, [r0, #4]
   dd236:	461a      	mov	r2, r3
   dd238:	4619      	mov	r1, r3
   dd23a:	f7ff bf05 	b.w	dd048 <network_off>

000dd23e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dd23e:	2300      	movs	r3, #0
   dd240:	6840      	ldr	r0, [r0, #4]
   dd242:	461a      	mov	r2, r3
   dd244:	4619      	mov	r1, r3
   dd246:	f7ff bef7 	b.w	dd038 <network_on>

000dd24a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dd24a:	2200      	movs	r2, #0
   dd24c:	6840      	ldr	r0, [r0, #4]
   dd24e:	4611      	mov	r1, r2
   dd250:	f7ff beda 	b.w	dd008 <network_connecting>

000dd254 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dd254:	6840      	ldr	r0, [r0, #4]
   dd256:	2200      	movs	r2, #0
   dd258:	2102      	movs	r1, #2
   dd25a:	f7ff bedd 	b.w	dd018 <network_disconnect>

000dd25e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dd25e:	2300      	movs	r3, #0
   dd260:	6840      	ldr	r0, [r0, #4]
   dd262:	461a      	mov	r2, r3
   dd264:	f7ff bec8 	b.w	dcff8 <network_connect>

000dd268 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   dd268:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   dd26a:	4b1b      	ldr	r3, [pc, #108]	; (dd2d8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   dd26c:	6003      	str	r3, [r0, #0]
   dd26e:	2500      	movs	r5, #0
   dd270:	460f      	mov	r7, r1
   dd272:	3330      	adds	r3, #48	; 0x30
   dd274:	2618      	movs	r6, #24
   dd276:	e9c0 5502 	strd	r5, r5, [r0, #8]
   dd27a:	b089      	sub	sp, #36	; 0x24
   dd27c:	6043      	str	r3, [r0, #4]
   dd27e:	4632      	mov	r2, r6
   dd280:	4629      	mov	r1, r5
   dd282:	4604      	mov	r4, r0
   dd284:	3010      	adds	r0, #16
   dd286:	f004 fa17 	bl	e16b8 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   dd28a:	6878      	ldr	r0, [r7, #4]
   dd28c:	462a      	mov	r2, r5
   dd28e:	4629      	mov	r1, r5
   dd290:	f7ff feca 	bl	dd028 <network_ready>
   dd294:	b918      	cbnz	r0, dd29e <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   dd296:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   dd298:	4620      	mov	r0, r4
   dd29a:	b009      	add	sp, #36	; 0x24
   dd29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   dd29e:	4629      	mov	r1, r5
   dd2a0:	4632      	mov	r2, r6
   dd2a2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   dd2a4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   dd2a8:	f004 fa06 	bl	e16b8 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dd2ac:	a902      	add	r1, sp, #8
   dd2ae:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   dd2b0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   dd2b4:	f7ff fb30 	bl	dc918 <cellular_signal>
   dd2b8:	b110      	cbz	r0, dd2c0 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   dd2ba:	2301      	movs	r3, #1
   dd2bc:	60a3      	str	r3, [r4, #8]
            return sig;
   dd2be:	e7eb      	b.n	dd298 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   dd2c0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   dd2c2:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   dd2c4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   dd2c6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   dd2c8:	b90b      	cbnz	r3, dd2ce <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   dd2ca:	2302      	movs	r3, #2
   dd2cc:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   dd2ce:	a902      	add	r1, sp, #8
   dd2d0:	4620      	mov	r0, r4
   dd2d2:	f000 f8c0 	bl	dd456 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   dd2d6:	e7df      	b.n	dd298 <_ZN5spark13CellularClass4RSSIEv+0x30>
   dd2d8:	000e47e0 	.word	0x000e47e0

000dd2dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   dd2dc:	4b08      	ldr	r3, [pc, #32]	; (dd300 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   dd2de:	b510      	push	{r4, lr}
   dd2e0:	2428      	movs	r4, #40	; 0x28
   dd2e2:	4622      	mov	r2, r4
   dd2e4:	4618      	mov	r0, r3
   dd2e6:	2100      	movs	r1, #0
   dd2e8:	f004 f9e6 	bl	e16b8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   dd2ec:	4b05      	ldr	r3, [pc, #20]	; (dd304 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   dd2ee:	8004      	strh	r4, [r0, #0]
        cid = -1;
   dd2f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd2f4:	6042      	str	r2, [r0, #4]
   dd2f6:	2204      	movs	r2, #4
   dd2f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   dd2fa:	4a03      	ldr	r2, [pc, #12]	; (dd308 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   dd2fc:	601a      	str	r2, [r3, #0]
   dd2fe:	bd10      	pop	{r4, pc}
   dd300:	2003e524 	.word	0x2003e524
   dd304:	2003e51c 	.word	0x2003e51c
   dd308:	000e47a4 	.word	0x000e47a4

000dd30c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   dd30c:	4770      	bx	lr

000dd30e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   dd30e:	7d00      	ldrb	r0, [r0, #20]
   dd310:	4770      	bx	lr

000dd312 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   dd312:	7d03      	ldrb	r3, [r0, #20]
   dd314:	b14b      	cbz	r3, dd32a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   dd316:	6983      	ldr	r3, [r0, #24]
   dd318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dd31c:	d005      	beq.n	dd32a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   dd31e:	6a00      	ldr	r0, [r0, #32]
   dd320:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   dd324:	bf18      	it	ne
   dd326:	2001      	movne	r0, #1
   dd328:	4770      	bx	lr
   dd32a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   dd32c:	4770      	bx	lr

000dd32e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   dd32e:	6803      	ldr	r3, [r0, #0]
   dd330:	6a1b      	ldr	r3, [r3, #32]
   dd332:	4718      	bx	r3

000dd334 <_ZN14CellularSignalD0Ev>:
   dd334:	b510      	push	{r4, lr}
   dd336:	2128      	movs	r1, #40	; 0x28
   dd338:	4604      	mov	r4, r0
   dd33a:	f003 f9e1 	bl	e0700 <_ZdlPvj>
   dd33e:	4620      	mov	r0, r4
   dd340:	bd10      	pop	{r4, pc}
	...

000dd344 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   dd344:	7d03      	ldrb	r3, [r0, #20]
   dd346:	b17b      	cbz	r3, dd368 <_ZNK14CellularSignal11getStrengthEv+0x24>
   dd348:	69c3      	ldr	r3, [r0, #28]
   dd34a:	2b00      	cmp	r3, #0
   dd34c:	db0c      	blt.n	dd368 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   dd34e:	ee07 3a90 	vmov	s15, r3
   dd352:	ed9f 7a07 	vldr	s14, [pc, #28]	; dd370 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   dd356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd35a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd35e:	eddf 7a05 	vldr	s15, [pc, #20]	; dd374 <_ZNK14CellularSignal11getStrengthEv+0x30>
   dd362:	ee20 0a27 	vmul.f32	s0, s0, s15
   dd366:	4770      	bx	lr
    return -1.0f;
   dd368:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dd36c:	4770      	bx	lr
   dd36e:	bf00      	nop
   dd370:	477fff00 	.word	0x477fff00
   dd374:	42c80000 	.word	0x42c80000

000dd378 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   dd378:	7d03      	ldrb	r3, [r0, #20]
   dd37a:	b163      	cbz	r3, dd396 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   dd37c:	6983      	ldr	r3, [r0, #24]
   dd37e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dd382:	d008      	beq.n	dd396 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   dd384:	ee07 3a90 	vmov	s15, r3
   dd388:	ed9f 7a04 	vldr	s14, [pc, #16]	; dd39c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   dd38c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd390:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd394:	4770      	bx	lr
    return 0.0f;
   dd396:	ed9f 0a02 	vldr	s0, [pc, #8]	; dd3a0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   dd39a:	4770      	bx	lr
   dd39c:	42c80000 	.word	0x42c80000
   dd3a0:	00000000 	.word	0x00000000

000dd3a4 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   dd3a4:	7d03      	ldrb	r3, [r0, #20]
   dd3a6:	b17b      	cbz	r3, dd3c8 <_ZNK14CellularSignal10getQualityEv+0x24>
   dd3a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   dd3aa:	2b00      	cmp	r3, #0
   dd3ac:	db0c      	blt.n	dd3c8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   dd3ae:	ee07 3a90 	vmov	s15, r3
   dd3b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; dd3d0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   dd3b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd3ba:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd3be:	eddf 7a05 	vldr	s15, [pc, #20]	; dd3d4 <_ZNK14CellularSignal10getQualityEv+0x30>
   dd3c2:	ee20 0a27 	vmul.f32	s0, s0, s15
   dd3c6:	4770      	bx	lr
    return -1.0f;
   dd3c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   dd3cc:	4770      	bx	lr
   dd3ce:	bf00      	nop
   dd3d0:	477fff00 	.word	0x477fff00
   dd3d4:	42c80000 	.word	0x42c80000

000dd3d8 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   dd3d8:	7d03      	ldrb	r3, [r0, #20]
   dd3da:	b163      	cbz	r3, dd3f6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   dd3dc:	6a03      	ldr	r3, [r0, #32]
   dd3de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   dd3e2:	d008      	beq.n	dd3f6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   dd3e4:	ee07 3a90 	vmov	s15, r3
   dd3e8:	ed9f 7a04 	vldr	s14, [pc, #16]	; dd3fc <_ZNK14CellularSignal15getQualityValueEv+0x24>
   dd3ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   dd3f0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   dd3f4:	4770      	bx	lr
    return 0.0f;
   dd3f6:	ed9f 0a02 	vldr	s0, [pc, #8]	; dd400 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   dd3fa:	4770      	bx	lr
   dd3fc:	42c80000 	.word	0x42c80000
   dd400:	00000000 	.word	0x00000000

000dd404 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   dd404:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   dd406:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   dd408:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   dd40a:	da0a      	bge.n	dd422 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   dd40c:	212d      	movs	r1, #45	; 0x2d
   dd40e:	f002 fabc 	bl	df98a <_ZN5Print5printEc>
            val = -n;
   dd412:	4261      	negs	r1, r4
            t = print('-');
   dd414:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   dd416:	220a      	movs	r2, #10
   dd418:	4630      	mov	r0, r6
   dd41a:	f002 fac5 	bl	df9a8 <_ZN5Print11printNumberEmh>
    }
}
   dd41e:	4428      	add	r0, r5
   dd420:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   dd422:	4621      	mov	r1, r4
        size_t t = 0;
   dd424:	2500      	movs	r5, #0
   dd426:	e7f6      	b.n	dd416 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000dd428 <_ZNK14CellularSignal7printToER5Print>:
{
   dd428:	b570      	push	{r4, r5, r6, lr}
   dd42a:	460c      	mov	r4, r1
   dd42c:	4605      	mov	r5, r0
   dd42e:	6881      	ldr	r1, [r0, #8]
   dd430:	4620      	mov	r0, r4
   dd432:	f7ff ffe7 	bl	dd404 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   dd436:	212c      	movs	r1, #44	; 0x2c
   dd438:	4606      	mov	r6, r0
   dd43a:	4620      	mov	r0, r4
   dd43c:	f002 faa5 	bl	df98a <_ZN5Print5printEc>
   dd440:	68e9      	ldr	r1, [r5, #12]
   dd442:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   dd444:	4620      	mov	r0, r4
   dd446:	f7ff ffdd 	bl	dd404 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   dd44a:	4430      	add	r0, r6
   dd44c:	bd70      	pop	{r4, r5, r6, pc}

000dd44e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   dd44e:	f1a0 0004 	sub.w	r0, r0, #4
   dd452:	f7ff bfe9 	b.w	dd428 <_ZNK14CellularSignal7printToER5Print>

000dd456 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   dd456:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   dd458:	460d      	mov	r5, r1
   dd45a:	f100 0410 	add.w	r4, r0, #16
   dd45e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dd460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dd462:	e895 0003 	ldmia.w	r5, {r0, r1}
   dd466:	e884 0003 	stmia.w	r4, {r0, r1}
}
   dd46a:	2001      	movs	r0, #1
   dd46c:	bd30      	pop	{r4, r5, pc}

000dd46e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dd46e:	4770      	bx	lr

000dd470 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dd470:	2000      	movs	r0, #0
   dd472:	4770      	bx	lr

000dd474 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dd474:	b510      	push	{r4, lr}
   dd476:	2110      	movs	r1, #16
   dd478:	4604      	mov	r4, r0
   dd47a:	f003 f941 	bl	e0700 <_ZdlPvj>
   dd47e:	4620      	mov	r0, r4
   dd480:	bd10      	pop	{r4, pc}

000dd482 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   dd482:	b508      	push	{r3, lr}
      { delete this; }
   dd484:	f7ff fff6 	bl	dd474 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dd488:	bd08      	pop	{r3, pc}

000dd48a <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dd48a:	b530      	push	{r4, r5, lr}
        type_(type) {
   dd48c:	2200      	movs	r2, #0
   dd48e:	f64f 749c 	movw	r4, #65436	; 0xff9c
   dd492:	6002      	str	r2, [r0, #0]
   dd494:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   dd496:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dd498:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   dd49a:	680c      	ldr	r4, [r1, #0]
   dd49c:	8085      	strh	r5, [r0, #4]
   dd49e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dd4a0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   dd4a2:	bd30      	pop	{r4, r5, pc}

000dd4a4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dd4a4:	b510      	push	{r4, lr}
   dd4a6:	4604      	mov	r4, r0
    free((void*)msg_);
   dd4a8:	6800      	ldr	r0, [r0, #0]
   dd4aa:	f7ff fe0d 	bl	dd0c8 <free>
}
   dd4ae:	4620      	mov	r0, r4
   dd4b0:	bd10      	pop	{r4, pc}

000dd4b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   dd4b2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dd4b4:	68c4      	ldr	r4, [r0, #12]
   dd4b6:	b1f4      	cbz	r4, dd4f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   dd4b8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dd4ba:	2b02      	cmp	r3, #2
   dd4bc:	d103      	bne.n	dd4c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dd4be:	f104 000c 	add.w	r0, r4, #12
   dd4c2:	f7ff ffef 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   dd4c6:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   dd4c8:	b135      	cbz	r5, dd4d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   dd4ca:	4628      	mov	r0, r5
   dd4cc:	f7f7 fad6 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dd4d0:	2110      	movs	r1, #16
   dd4d2:	4628      	mov	r0, r5
   dd4d4:	f003 f914 	bl	e0700 <_ZdlPvj>
   dd4d8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dd4da:	b135      	cbz	r5, dd4ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dd4dc:	4628      	mov	r0, r5
   dd4de:	f7f7 facd 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
   dd4e2:	2110      	movs	r1, #16
   dd4e4:	4628      	mov	r0, r5
   dd4e6:	f003 f90b 	bl	e0700 <_ZdlPvj>
   dd4ea:	4620      	mov	r0, r4
   dd4ec:	2114      	movs	r1, #20
   dd4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dd4f2:	f003 b905 	b.w	e0700 <_ZdlPvj>
   dd4f6:	bd38      	pop	{r3, r4, r5, pc}

000dd4f8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   dd4f8:	b510      	push	{r4, lr}
   dd4fa:	b088      	sub	sp, #32
   dd4fc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   dd4fe:	4668      	mov	r0, sp
   dd500:	f002 fafd 	bl	dfafe <_ZN6StringC1EPKc>
    return (*fn)(p);
   dd504:	4669      	mov	r1, sp
   dd506:	a804      	add	r0, sp, #16
   dd508:	f002 fb44 	bl	dfb94 <_ZN6StringC1ERKS_>
   dd50c:	a804      	add	r0, sp, #16
   dd50e:	47a0      	blx	r4
   dd510:	4604      	mov	r4, r0
   dd512:	a804      	add	r0, sp, #16
   dd514:	f002 faa8 	bl	dfa68 <_ZN6StringD1Ev>
    String p(param);
   dd518:	4668      	mov	r0, sp
   dd51a:	f002 faa5 	bl	dfa68 <_ZN6StringD1Ev>
}
   dd51e:	4620      	mov	r0, r4
   dd520:	b008      	add	sp, #32
   dd522:	bd10      	pop	{r4, pc}

000dd524 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   dd524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   dd526:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   dd528:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   dd52c:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   dd52e:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   dd530:	461a      	mov	r2, r3
   dd532:	4669      	mov	r1, sp
   dd534:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   dd536:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   dd53a:	f8ad 4000 	strh.w	r4, [sp]
   dd53e:	f7ff fd13 	bl	dcf68 <spark_function>
}
   dd542:	b004      	add	sp, #16
   dd544:	bd10      	pop	{r4, pc}

000dd546 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   dd546:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   dd548:	230c      	movs	r3, #12
   dd54a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   dd54e:	6803      	ldr	r3, [r0, #0]
   dd550:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   dd554:	7a03      	ldrb	r3, [r0, #8]
   dd556:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   dd55a:	6843      	ldr	r3, [r0, #4]
   dd55c:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   dd55e:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   dd560:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   dd562:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dd566:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   dd568:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   dd56c:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   dd570:	f7ff fd3a 	bl	dcfe8 <spark_cloud_disconnect>
}
   dd574:	b005      	add	sp, #20
   dd576:	f85d fb04 	ldr.w	pc, [sp], #4

000dd57a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dd57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd57c:	460e      	mov	r6, r1
   dd57e:	4604      	mov	r4, r0
   dd580:	f856 3b04 	ldr.w	r3, [r6], #4
   dd584:	9300      	str	r3, [sp, #0]
   dd586:	460d      	mov	r5, r1
   dd588:	a801      	add	r0, sp, #4
   dd58a:	4631      	mov	r1, r6
   dd58c:	f7fc fcd5 	bl	d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dd590:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd592:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   dd594:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd596:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   dd598:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   dd59a:	2300      	movs	r3, #0
   dd59c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dd59e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   dd5a0:	f7f7 f84e 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd5a4:	4630      	mov	r0, r6
   dd5a6:	f7f7 f84b 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   dd5aa:	4628      	mov	r0, r5
   dd5ac:	2108      	movs	r1, #8
   dd5ae:	f003 f8a7 	bl	e0700 <_ZdlPvj>
        return p;
    }
   dd5b2:	4620      	mov	r0, r4
   dd5b4:	b002      	add	sp, #8
   dd5b6:	bd70      	pop	{r4, r5, r6, pc}

000dd5b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   dd5b8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dd5ba:	b510      	push	{r4, lr}
      if (_M_empty())
   dd5bc:	b90a      	cbnz	r2, dd5c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dd5be:	f003 f8df 	bl	e0780 <_ZSt25__throw_bad_function_callv>
    }
   dd5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd5c6:	68c3      	ldr	r3, [r0, #12]
   dd5c8:	4718      	bx	r3

000dd5ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dd5ca:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dd5cc:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   dd5ce:	f100 0110 	add.w	r1, r0, #16
   dd5d2:	f7ff fff1 	bl	dd5b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   dd5d6:	bd08      	pop	{r3, pc}

000dd5d8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   dd5d8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   dd5da:	b510      	push	{r4, lr}
      if (_M_empty())
   dd5dc:	b90a      	cbnz	r2, dd5e2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dd5de:	f003 f8cf 	bl	e0780 <_ZSt25__throw_bad_function_callv>
    }
   dd5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dd5e6:	68c3      	ldr	r3, [r0, #12]
   dd5e8:	4718      	bx	r3

000dd5ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dd5ea:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   dd5ec:	6800      	ldr	r0, [r0, #0]
   dd5ee:	f100 0110 	add.w	r1, r0, #16
   dd5f2:	f7ff fff1 	bl	dd5d8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   dd5f6:	bd08      	pop	{r3, pc}

000dd5f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   dd5f8:	b538      	push	{r3, r4, r5, lr}
   dd5fa:	2300      	movs	r3, #0
   dd5fc:	4604      	mov	r4, r0
   dd5fe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd600:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   dd602:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd604:	f7f6 fd47 	bl	d4096 <_Znwj>
   dd608:	b128      	cbz	r0, dd616 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   dd60a:	2301      	movs	r3, #1
   dd60c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   dd610:	4b02      	ldr	r3, [pc, #8]	; (dd61c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dd612:	6003      	str	r3, [r0, #0]
   dd614:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dd616:	6020      	str	r0, [r4, #0]
	}
   dd618:	4620      	mov	r0, r4
   dd61a:	bd38      	pop	{r3, r4, r5, pc}
   dd61c:	000e481c 	.word	0x000e481c

000dd620 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   dd620:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dd622:	2300      	movs	r3, #0
   dd624:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dd626:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dd628:	4604      	mov	r4, r0
   dd62a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dd62c:	b12b      	cbz	r3, dd63a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd62e:	2202      	movs	r2, #2
   dd630:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd632:	68eb      	ldr	r3, [r5, #12]
   dd634:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd636:	68ab      	ldr	r3, [r5, #8]
   dd638:	60a3      	str	r3, [r4, #8]
    }
   dd63a:	4620      	mov	r0, r4
   dd63c:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   dd640:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd642:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dd644:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dd646:	4668      	mov	r0, sp
   dd648:	f7ff ff1f 	bl	dd48a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dd64c:	f04f 0302 	mov.w	r3, #2
   dd650:	e8d4 2f4f 	ldrexb	r2, [r4]
   dd654:	2a00      	cmp	r2, #0
   dd656:	d103      	bne.n	dd660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   dd658:	e8c4 3f41 	strexb	r1, r3, [r4]
   dd65c:	2900      	cmp	r1, #0
   dd65e:	d1f7      	bne.n	dd650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   dd660:	d125      	bne.n	dd6ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   dd662:	f104 050c 	add.w	r5, r4, #12
   dd666:	4669      	mov	r1, sp
   dd668:	4628      	mov	r0, r5
   dd66a:	f7ff ff0e 	bl	dd48a <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   dd66e:	f3bf 8f5b 	dmb	ish
   dd672:	2301      	movs	r3, #1
   dd674:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dd676:	2000      	movs	r0, #0
   dd678:	f104 0308 	add.w	r3, r4, #8
   dd67c:	f3bf 8f5b 	dmb	ish
   dd680:	e853 6f00 	ldrex	r6, [r3]
   dd684:	e843 0200 	strex	r2, r0, [r3]
   dd688:	2a00      	cmp	r2, #0
   dd68a:	d1f9      	bne.n	dd680 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   dd68c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dd690:	b16e      	cbz	r6, dd6ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   dd692:	f7ff fc23 	bl	dcedc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dd696:	b178      	cbz	r0, dd6b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dd698:	4629      	mov	r1, r5
   dd69a:	4630      	mov	r0, r6
   dd69c:	f7ff ff8c 	bl	dd5b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   dd6a0:	4630      	mov	r0, r6
   dd6a2:	f7f7 f9eb 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dd6a6:	2110      	movs	r1, #16
   dd6a8:	4630      	mov	r0, r6
   dd6aa:	f003 f829 	bl	e0700 <_ZdlPvj>
        p_->setError(std::move(error));
   dd6ae:	4668      	mov	r0, sp
   dd6b0:	f7ff fef8 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
    }
   dd6b4:	b009      	add	sp, #36	; 0x24
   dd6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dd6b8:	4631      	mov	r1, r6
   dd6ba:	a802      	add	r0, sp, #8
   dd6bc:	f7ff ffb0 	bl	dd620 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dd6c0:	68e0      	ldr	r0, [r4, #12]
   dd6c2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dd6c6:	b108      	cbz	r0, dd6cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   dd6c8:	f004 f864 	bl	e1794 <strdup>
        type_(type) {
   dd6cc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dd6ce:	2010      	movs	r0, #16
   dd6d0:	f8ad 501c 	strh.w	r5, [sp, #28]
   dd6d4:	f7f6 fcdf 	bl	d4096 <_Znwj>
   dd6d8:	4605      	mov	r5, r0
   dd6da:	b1e8      	cbz	r0, dd718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   dd6dc:	2700      	movs	r7, #0
   dd6de:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd6e0:	2018      	movs	r0, #24
   dd6e2:	f7f6 fcd8 	bl	d4096 <_Znwj>
   dd6e6:	4604      	mov	r4, r0
   dd6e8:	b188      	cbz	r0, dd70e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   dd6ea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   dd6ec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dd6ee:	a802      	add	r0, sp, #8
   dd6f0:	f7f7 fb7d 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd6f4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dd6f6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dd6f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd6fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dd6fc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dd6fe:	a906      	add	r1, sp, #24
   dd700:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dd702:	60e3      	str	r3, [r4, #12]
   dd704:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   dd708:	9205      	str	r2, [sp, #20]
   dd70a:	f7ff febe 	bl	dd48a <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   dd70e:	4b08      	ldr	r3, [pc, #32]	; (dd730 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   dd710:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dd712:	4b08      	ldr	r3, [pc, #32]	; (dd734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd714:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dd716:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   dd718:	a806      	add	r0, sp, #24
   dd71a:	f7ff fec3 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dd71e:	a802      	add	r0, sp, #8
   dd720:	f7f7 f9ac 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dd724:	2200      	movs	r2, #0
   dd726:	4629      	mov	r1, r5
   dd728:	4803      	ldr	r0, [pc, #12]	; (dd738 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   dd72a:	f7ff fbdf 	bl	dceec <application_thread_invoke>
   dd72e:	e7b7      	b.n	dd6a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   dd730:	000dd5cb 	.word	0x000dd5cb
   dd734:	000dd861 	.word	0x000dd861
   dd738:	000dd1c7 	.word	0x000dd1c7

000dd73c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   dd73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd740:	b08a      	sub	sp, #40	; 0x28
   dd742:	4605      	mov	r5, r0
   dd744:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   dd748:	460c      	mov	r4, r1
   dd74a:	4617      	mov	r7, r2
   dd74c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dd74e:	f7ff fc23 	bl	dcf98 <spark_cloud_flag_connected>
   dd752:	ae07      	add	r6, sp, #28
    if (!connected()) {
   dd754:	4682      	mov	sl, r0
   dd756:	bb38      	cbnz	r0, dd7a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   dd758:	f64f 732e 	movw	r3, #65326	; 0xff2e
   dd75c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dd75e:	a905      	add	r1, sp, #20
   dd760:	4630      	mov	r0, r6
   dd762:	f8ad 3018 	strh.w	r3, [sp, #24]
   dd766:	f7ff fe90 	bl	dd48a <_ZN8particle5ErrorC1EOS0_>
   dd76a:	2014      	movs	r0, #20
   dd76c:	f7f6 fc93 	bl	d4096 <_Znwj>
   dd770:	4604      	mov	r4, r0
   dd772:	b148      	cbz	r0, dd788 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   dd774:	2302      	movs	r3, #2
   dd776:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd778:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dd77a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd77e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   dd780:	4631      	mov	r1, r6
   dd782:	300c      	adds	r0, #12
   dd784:	f7ff fe81 	bl	dd48a <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd788:	4628      	mov	r0, r5
	: __shared_count(__p)
   dd78a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd78c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   dd790:	f7ff ff32 	bl	dd5f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   dd794:	4630      	mov	r0, r6
   dd796:	f7ff fe85 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   dd79a:	a805      	add	r0, sp, #20
   dd79c:	f7ff fe82 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
}
   dd7a0:	4628      	mov	r0, r5
   dd7a2:	b00a      	add	sp, #40	; 0x28
   dd7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   dd7a8:	230c      	movs	r3, #12
   dd7aa:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   dd7ae:	2014      	movs	r0, #20
   dd7b0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   dd7b4:	9307      	str	r3, [sp, #28]
   dd7b6:	f7f6 fc6e 	bl	d4096 <_Znwj>
   dd7ba:	4601      	mov	r1, r0
   dd7bc:	b128      	cbz	r0, dd7ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   dd7be:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   dd7c2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   dd7c6:	f880 a001 	strb.w	sl, [r0, #1]
   dd7ca:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   dd7cc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   dd7ce:	f7ff ff13 	bl	dd5f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   dd7d2:	4b22      	ldr	r3, [pc, #136]	; (dd85c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   dd7d4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   dd7d6:	2008      	movs	r0, #8
   dd7d8:	f7f6 fc5d 	bl	d4096 <_Znwj>
   dd7dc:	4682      	mov	sl, r0
   dd7de:	b128      	cbz	r0, dd7ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd7e0:	9b03      	ldr	r3, [sp, #12]
   dd7e2:	f840 3b04 	str.w	r3, [r0], #4
   dd7e6:	a904      	add	r1, sp, #16
   dd7e8:	f7fc fba7 	bl	d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dd7ec:	9600      	str	r6, [sp, #0]
   dd7ee:	fa5f f389 	uxtb.w	r3, r9
   dd7f2:	4642      	mov	r2, r8
   dd7f4:	4639      	mov	r1, r7
   dd7f6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   dd7f8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   dd7fc:	f7ff fbd4 	bl	dcfa8 <spark_send_event>
   dd800:	b9b8      	cbnz	r0, dd832 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   dd802:	9b03      	ldr	r3, [sp, #12]
   dd804:	785b      	ldrb	r3, [r3, #1]
   dd806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   dd80a:	b993      	cbnz	r3, dd832 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   dd80c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   dd810:	a905      	add	r1, sp, #20
   dd812:	a803      	add	r0, sp, #12
   dd814:	9205      	str	r2, [sp, #20]
   dd816:	f8ad 3018 	strh.w	r3, [sp, #24]
   dd81a:	f7ff ff11 	bl	dd640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dd81e:	a805      	add	r0, sp, #20
   dd820:	f7ff fe40 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   dd824:	a805      	add	r0, sp, #20
   dd826:	9909      	ldr	r1, [sp, #36]	; 0x24
   dd828:	f7ff fea7 	bl	dd57a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   dd82c:	a806      	add	r0, sp, #24
   dd82e:	f7f6 ff07 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   dd832:	9b03      	ldr	r3, [sp, #12]
   dd834:	9305      	str	r3, [sp, #20]
   dd836:	a904      	add	r1, sp, #16
   dd838:	a806      	add	r0, sp, #24
   dd83a:	f7fc fb7e 	bl	d9f3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd83e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dd840:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   dd842:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   dd844:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   dd846:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   dd848:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   dd84a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   dd84c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   dd84e:	f7f6 fef7 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dd852:	a804      	add	r0, sp, #16
   dd854:	f7f6 fef4 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   dd858:	e7a2      	b.n	dd7a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   dd85a:	bf00      	nop
   dd85c:	000dd925 	.word	0x000dd925

000dd860 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   dd860:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dd862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd864:	4605      	mov	r5, r0
	  switch (__op)
   dd866:	d007      	beq.n	dd878 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   dd868:	2a03      	cmp	r2, #3
   dd86a:	d018      	beq.n	dd89e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   dd86c:	2a01      	cmp	r2, #1
   dd86e:	d101      	bne.n	dd874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dd870:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dd872:	6003      	str	r3, [r0, #0]
	}
   dd874:	2000      	movs	r0, #0
   dd876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dd878:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   dd87a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dd87c:	f7f6 fc0b 	bl	d4096 <_Znwj>
   dd880:	4604      	mov	r4, r0
   dd882:	b150      	cbz	r0, dd89a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   dd884:	4631      	mov	r1, r6
   dd886:	f7ff fecb 	bl	dd620 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   dd88a:	6930      	ldr	r0, [r6, #16]
   dd88c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dd890:	b108      	cbz	r0, dd896 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   dd892:	f003 ff7f 	bl	e1794 <strdup>
        type_(type) {
   dd896:	6120      	str	r0, [r4, #16]
   dd898:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   dd89a:	602c      	str	r4, [r5, #0]
	}
   dd89c:	e7ea      	b.n	dd874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dd89e:	6804      	ldr	r4, [r0, #0]
   dd8a0:	2c00      	cmp	r4, #0
   dd8a2:	d0e7      	beq.n	dd874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   dd8a4:	f104 0010 	add.w	r0, r4, #16
   dd8a8:	f7ff fdfc 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   dd8ac:	4620      	mov	r0, r4
   dd8ae:	f7f7 f8e5 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dd8b2:	2118      	movs	r1, #24
   dd8b4:	4620      	mov	r0, r4
   dd8b6:	f002 ff23 	bl	e0700 <_ZdlPvj>
   dd8ba:	e7db      	b.n	dd874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000dd8bc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   dd8bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   dd8be:	2300      	movs	r3, #0
   dd8c0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   dd8c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   dd8c4:	4604      	mov	r4, r0
   dd8c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   dd8c8:	b12b      	cbz	r3, dd8d6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dd8ca:	2202      	movs	r2, #2
   dd8cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dd8ce:	68eb      	ldr	r3, [r5, #12]
   dd8d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dd8d2:	68ab      	ldr	r3, [r5, #8]
   dd8d4:	60a3      	str	r3, [r4, #8]
    }
   dd8d6:	4620      	mov	r0, r4
   dd8d8:	bd38      	pop	{r3, r4, r5, pc}

000dd8da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   dd8da:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   dd8dc:	b570      	push	{r4, r5, r6, lr}
   dd8de:	4604      	mov	r4, r0
	  switch (__op)
   dd8e0:	d007      	beq.n	dd8f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   dd8e2:	2a03      	cmp	r2, #3
   dd8e4:	d012      	beq.n	dd90c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   dd8e6:	2a01      	cmp	r2, #1
   dd8e8:	d101      	bne.n	dd8ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   dd8ea:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   dd8ec:	6003      	str	r3, [r0, #0]
	}
   dd8ee:	2000      	movs	r0, #0
   dd8f0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   dd8f2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   dd8f4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   dd8f6:	f7f6 fbce 	bl	d4096 <_Znwj>
   dd8fa:	4605      	mov	r5, r0
   dd8fc:	b120      	cbz	r0, dd908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   dd8fe:	4631      	mov	r1, r6
   dd900:	f7ff ffdc 	bl	dd8bc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   dd904:	7c33      	ldrb	r3, [r6, #16]
   dd906:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   dd908:	6025      	str	r5, [r4, #0]
	}
   dd90a:	e7f0      	b.n	dd8ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   dd90c:	6804      	ldr	r4, [r0, #0]
   dd90e:	2c00      	cmp	r4, #0
   dd910:	d0ed      	beq.n	dd8ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   dd912:	4620      	mov	r0, r4
   dd914:	f7f7 f8b2 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   dd918:	2114      	movs	r1, #20
   dd91a:	4620      	mov	r0, r4
   dd91c:	f002 fef0 	bl	e0700 <_ZdlPvj>
   dd920:	e7e5      	b.n	dd8ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000dd924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   dd924:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd926:	b089      	sub	sp, #36	; 0x24
   dd928:	4604      	mov	r4, r0
   dd92a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   dd92c:	a801      	add	r0, sp, #4
   dd92e:	4611      	mov	r1, r2
   dd930:	f7ff fe23 	bl	dd57a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   dd934:	b1a4      	cbz	r4, dd960 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   dd936:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   dd938:	b11d      	cbz	r5, dd942 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   dd93a:	4628      	mov	r0, r5
   dd93c:	f003 ff2a 	bl	e1794 <strdup>
   dd940:	4605      	mov	r5, r0
   dd942:	a801      	add	r0, sp, #4
   dd944:	a903      	add	r1, sp, #12
        type_(type) {
   dd946:	9503      	str	r5, [sp, #12]
   dd948:	f8ad 4010 	strh.w	r4, [sp, #16]
   dd94c:	f7ff fe78 	bl	dd640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   dd950:	a803      	add	r0, sp, #12
   dd952:	f7ff fda7 	bl	dd4a4 <_ZN8particle5ErrorD1Ev>
   dd956:	a802      	add	r0, sp, #8
   dd958:	f7f6 fe72 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   dd95c:	b009      	add	sp, #36	; 0x24
   dd95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   dd960:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   dd962:	2301      	movs	r3, #1
   dd964:	e8d5 2f4f 	ldrexb	r2, [r5]
   dd968:	2a00      	cmp	r2, #0
   dd96a:	d103      	bne.n	dd974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   dd96c:	e8c5 3f41 	strexb	r1, r3, [r5]
   dd970:	2900      	cmp	r1, #0
   dd972:	d1f7      	bne.n	dd964 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   dd974:	d1ef      	bne.n	dd956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   dd976:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   dd978:	f3bf 8f5b 	dmb	ish
   dd97c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   dd97e:	1d2b      	adds	r3, r5, #4
   dd980:	f3bf 8f5b 	dmb	ish
   dd984:	e853 6f00 	ldrex	r6, [r3]
   dd988:	e843 4200 	strex	r2, r4, [r3]
   dd98c:	2a00      	cmp	r2, #0
   dd98e:	d1f9      	bne.n	dd984 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   dd990:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   dd994:	2e00      	cmp	r6, #0
   dd996:	d0de      	beq.n	dd956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   dd998:	4620      	mov	r0, r4
   dd99a:	f7ff fa9f 	bl	dcedc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   dd99e:	4607      	mov	r7, r0
   dd9a0:	b160      	cbz	r0, dd9bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dd9a2:	f105 010c 	add.w	r1, r5, #12
   dd9a6:	4630      	mov	r0, r6
   dd9a8:	f7ff fe16 	bl	dd5d8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   dd9ac:	4630      	mov	r0, r6
   dd9ae:	f7f7 f865 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   dd9b2:	2110      	movs	r1, #16
   dd9b4:	4630      	mov	r0, r6
   dd9b6:	f002 fea3 	bl	e0700 <_ZdlPvj>
   dd9ba:	e7cc      	b.n	dd956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dd9bc:	4631      	mov	r1, r6
   dd9be:	a803      	add	r0, sp, #12
   dd9c0:	f7ff ff7c 	bl	dd8bc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dd9c4:	7b2b      	ldrb	r3, [r5, #12]
   dd9c6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dd9ca:	2010      	movs	r0, #16
   dd9cc:	f7f6 fb63 	bl	d4096 <_Znwj>
   dd9d0:	4605      	mov	r5, r0
   dd9d2:	b1d0      	cbz	r0, dda0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   dd9d4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dd9d6:	2014      	movs	r0, #20
   dd9d8:	f7f6 fb5d 	bl	d4096 <_Znwj>
   dd9dc:	4604      	mov	r4, r0
   dd9de:	b178      	cbz	r0, dda00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   dd9e0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   dd9e2:	4601      	mov	r1, r0
   dd9e4:	a803      	add	r0, sp, #12
   dd9e6:	f7f7 fa02 	bl	d4dee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd9ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dd9ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dd9ee:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dd9f0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   dd9f2:	9205      	str	r2, [sp, #20]
   dd9f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dd9f6:	60e3      	str	r3, [r4, #12]
   dd9f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   dd9fc:	9206      	str	r2, [sp, #24]
   dd9fe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   dda00:	4b06      	ldr	r3, [pc, #24]	; (dda1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   dda02:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dda04:	4b06      	ldr	r3, [pc, #24]	; (dda20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dda06:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   dda08:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   dda0a:	a803      	add	r0, sp, #12
   dda0c:	f7f7 f836 	bl	d4a7c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dda10:	2200      	movs	r2, #0
   dda12:	4629      	mov	r1, r5
   dda14:	4803      	ldr	r0, [pc, #12]	; (dda24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   dda16:	f7ff fa69 	bl	dceec <application_thread_invoke>
   dda1a:	e7c7      	b.n	dd9ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   dda1c:	000dd5eb 	.word	0x000dd5eb
   dda20:	000dd8db 	.word	0x000dd8db
   dda24:	000dd1c7 	.word	0x000dd1c7

000dda28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dda28:	2200      	movs	r2, #0
   dda2a:	6840      	ldr	r0, [r0, #4]
   dda2c:	4611      	mov	r1, r2
   dda2e:	f7ff bb1b 	b.w	dd068 <network_listening>

000dda32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   dda32:	2200      	movs	r2, #0
   dda34:	6840      	ldr	r0, [r0, #4]
   dda36:	4611      	mov	r1, r2
   dda38:	f7ff bb26 	b.w	dd088 <network_get_listen_timeout>

000dda3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   dda3c:	6840      	ldr	r0, [r0, #4]
   dda3e:	2200      	movs	r2, #0
   dda40:	f7ff bb1a 	b.w	dd078 <network_set_listen_timeout>

000dda44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   dda44:	6840      	ldr	r0, [r0, #4]
   dda46:	2200      	movs	r2, #0
   dda48:	f081 0101 	eor.w	r1, r1, #1
   dda4c:	f7ff bb04 	b.w	dd058 <network_listen>

000dda50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   dda50:	2300      	movs	r3, #0
   dda52:	6840      	ldr	r0, [r0, #4]
   dda54:	461a      	mov	r2, r3
   dda56:	4619      	mov	r1, r3
   dda58:	f7ff baf6 	b.w	dd048 <network_off>

000dda5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   dda5c:	2300      	movs	r3, #0
   dda5e:	6840      	ldr	r0, [r0, #4]
   dda60:	461a      	mov	r2, r3
   dda62:	4619      	mov	r1, r3
   dda64:	f7ff bae8 	b.w	dd038 <network_on>

000dda68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dda68:	2200      	movs	r2, #0
   dda6a:	6840      	ldr	r0, [r0, #4]
   dda6c:	4611      	mov	r1, r2
   dda6e:	f7ff badb 	b.w	dd028 <network_ready>

000dda72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   dda72:	2200      	movs	r2, #0
   dda74:	6840      	ldr	r0, [r0, #4]
   dda76:	4611      	mov	r1, r2
   dda78:	f7ff bac6 	b.w	dd008 <network_connecting>

000dda7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dda7c:	6840      	ldr	r0, [r0, #4]
   dda7e:	2200      	movs	r2, #0
   dda80:	2102      	movs	r1, #2
   dda82:	f7ff bac9 	b.w	dd018 <network_disconnect>

000dda86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   dda86:	2300      	movs	r3, #0
   dda88:	6840      	ldr	r0, [r0, #4]
   dda8a:	461a      	mov	r2, r3
   dda8c:	f7ff bab4 	b.w	dcff8 <network_connect>

000dda90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   dda90:	4b02      	ldr	r3, [pc, #8]	; (dda9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   dda92:	2203      	movs	r2, #3
   dda94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   dda96:	4a02      	ldr	r2, [pc, #8]	; (ddaa0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   dda98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   dda9a:	4770      	bx	lr
   dda9c:	2003e54c 	.word	0x2003e54c
   ddaa0:	000e4838 	.word	0x000e4838

000ddaa4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   ddaa4:	6800      	ldr	r0, [r0, #0]
   ddaa6:	f000 b951 	b.w	ddd4c <_ZN7TwoWire4lockEv>

000ddaaa <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   ddaaa:	b510      	push	{r4, lr}
   ddaac:	4604      	mov	r4, r0
      lock_(_lock) {
   ddaae:	6001      	str	r1, [r0, #0]
   ddab0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   ddab2:	b10a      	cbz	r2, ddab8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   ddab4:	f7ff fff6 	bl	ddaa4 <_ZN9FuelGauge4lockEv>
}
   ddab8:	4620      	mov	r0, r4
   ddaba:	bd10      	pop	{r4, pc}

000ddabc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   ddabc:	b513      	push	{r0, r1, r4, lr}
   ddabe:	4604      	mov	r4, r0
   ddac0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   ddac2:	f002 fdf9 	bl	e06b8 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   ddac6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   ddac8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   ddaca:	4620      	mov	r0, r4
   ddacc:	f7ff ffed 	bl	ddaaa <_ZN9FuelGaugeC1ER7TwoWireb>
}
   ddad0:	4620      	mov	r0, r4
   ddad2:	b002      	add	sp, #8
   ddad4:	bd10      	pop	{r4, pc}

000ddad6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   ddad6:	6800      	ldr	r0, [r0, #0]
   ddad8:	f000 b941 	b.w	ddd5e <_ZN7TwoWire6unlockEv>

000ddadc <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   ddadc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   ddae0:	4604      	mov	r4, r0
   ddae2:	460d      	mov	r5, r1
   ddae4:	4617      	mov	r7, r2
   ddae6:	461e      	mov	r6, r3
   ddae8:	f7ff ffdc 	bl	ddaa4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddaec:	2336      	movs	r3, #54	; 0x36
   ddaee:	f88d 3000 	strb.w	r3, [sp]
   ddaf2:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   ddaf4:	6820      	ldr	r0, [r4, #0]
   ddaf6:	9301      	str	r3, [sp, #4]
   ddaf8:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   ddafc:	230a      	movs	r3, #10
   ddafe:	4669      	mov	r1, sp
   ddb00:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddb02:	f88d 8008 	strb.w	r8, [sp, #8]
   ddb06:	f000 f905 	bl	ddd14 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   ddb0a:	6820      	ldr	r0, [r4, #0]
   ddb0c:	6803      	ldr	r3, [r0, #0]
   ddb0e:	4629      	mov	r1, r5
   ddb10:	689b      	ldr	r3, [r3, #8]
   ddb12:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   ddb14:	6820      	ldr	r0, [r4, #0]
   ddb16:	4641      	mov	r1, r8
   ddb18:	f000 f914 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
   ddb1c:	4605      	mov	r5, r0
   ddb1e:	b140      	cbz	r0, ddb32 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   ddb20:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   ddb24:	4620      	mov	r0, r4
   ddb26:	f7ff ffd6 	bl	ddad6 <_ZN9FuelGauge6unlockEv>
}
   ddb2a:	4628      	mov	r0, r5
   ddb2c:	b004      	add	sp, #16
   ddb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   ddb32:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   ddb34:	6820      	ldr	r0, [r4, #0]
   ddb36:	9301      	str	r3, [sp, #4]
   ddb38:	4669      	mov	r1, sp
   ddb3a:	f000 f8bb 	bl	ddcb4 <_ZN7TwoWire11requestFromERK16WireTransmission>
   ddb3e:	2802      	cmp	r0, #2
   ddb40:	d1ee      	bne.n	ddb20 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   ddb42:	6820      	ldr	r0, [r4, #0]
   ddb44:	6803      	ldr	r3, [r0, #0]
   ddb46:	695b      	ldr	r3, [r3, #20]
   ddb48:	4798      	blx	r3
   ddb4a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   ddb4c:	6820      	ldr	r0, [r4, #0]
   ddb4e:	6803      	ldr	r3, [r0, #0]
   ddb50:	695b      	ldr	r3, [r3, #20]
   ddb52:	4798      	blx	r3
   ddb54:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   ddb56:	e7e5      	b.n	ddb24 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000ddb58 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   ddb58:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   ddb5a:	2300      	movs	r3, #0
   ddb5c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   ddb60:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   ddb64:	f10d 0206 	add.w	r2, sp, #6
   ddb68:	f10d 0307 	add.w	r3, sp, #7
   ddb6c:	2104      	movs	r1, #4
   ddb6e:	f7ff ffb5 	bl	ddadc <_ZN9FuelGauge12readRegisterEhRhS0_>
   ddb72:	b9b0      	cbnz	r0, ddba2 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   ddb74:	f89d 0007 	ldrb.w	r0, [sp, #7]
   ddb78:	f003 f968 	bl	e0e4c <__aeabi_i2d>
   ddb7c:	4b0a      	ldr	r3, [pc, #40]	; (ddba8 <_ZN9FuelGauge6getSoCEv+0x50>)
   ddb7e:	2200      	movs	r2, #0
   ddb80:	f003 f9ce 	bl	e0f20 <__aeabi_dmul>
   ddb84:	f003 fcc4 	bl	e1510 <__aeabi_d2f>
        return MSB + decimal;
   ddb88:	f89d 3006 	ldrb.w	r3, [sp, #6]
   ddb8c:	ee00 3a10 	vmov	s0, r3
   ddb90:	ee07 0a90 	vmov	s15, r0
   ddb94:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   ddb98:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   ddb9c:	b003      	add	sp, #12
   ddb9e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   ddba2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   ddba6:	e7f9      	b.n	ddb9c <_ZN9FuelGauge6getSoCEv+0x44>
   ddba8:	3f700000 	.word	0x3f700000

000ddbac <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   ddbac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   ddbb0:	4616      	mov	r6, r2
   ddbb2:	4604      	mov	r4, r0
   ddbb4:	461d      	mov	r5, r3
   ddbb6:	460f      	mov	r7, r1
      { _M_device.lock(); }
   ddbb8:	f7ff ff74 	bl	ddaa4 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddbbc:	2336      	movs	r3, #54	; 0x36
   ddbbe:	f88d 3000 	strb.w	r3, [sp]
   ddbc2:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   ddbc4:	6820      	ldr	r0, [r4, #0]
   ddbc6:	9301      	str	r3, [sp, #4]
   ddbc8:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   ddbcc:	230a      	movs	r3, #10
   ddbce:	4669      	mov	r1, sp
   ddbd0:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddbd2:	f88d 8008 	strb.w	r8, [sp, #8]
   ddbd6:	f000 f89d 	bl	ddd14 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   ddbda:	6820      	ldr	r0, [r4, #0]
   ddbdc:	6803      	ldr	r3, [r0, #0]
   ddbde:	4639      	mov	r1, r7
   ddbe0:	689b      	ldr	r3, [r3, #8]
   ddbe2:	4798      	blx	r3
    i2c_.write(MSB);
   ddbe4:	6820      	ldr	r0, [r4, #0]
   ddbe6:	6803      	ldr	r3, [r0, #0]
   ddbe8:	4631      	mov	r1, r6
   ddbea:	689b      	ldr	r3, [r3, #8]
   ddbec:	4798      	blx	r3
    i2c_.write(LSB);
   ddbee:	6820      	ldr	r0, [r4, #0]
   ddbf0:	6803      	ldr	r3, [r0, #0]
   ddbf2:	4629      	mov	r1, r5
   ddbf4:	689b      	ldr	r3, [r3, #8]
   ddbf6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   ddbf8:	4641      	mov	r1, r8
   ddbfa:	6820      	ldr	r0, [r4, #0]
   ddbfc:	f000 f8a2 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
   ddc00:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   ddc02:	4620      	mov	r0, r4
   ddc04:	bf0c      	ite	eq
   ddc06:	2500      	moveq	r5, #0
   ddc08:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   ddc0c:	f7ff ff63 	bl	ddad6 <_ZN9FuelGauge6unlockEv>
}
   ddc10:	4628      	mov	r0, r5
   ddc12:	b004      	add	sp, #16
   ddc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ddc18 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   ddc18:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   ddc1a:	2240      	movs	r2, #64	; 0x40
   ddc1c:	2300      	movs	r3, #0
   ddc1e:	2106      	movs	r1, #6
   ddc20:	f7ff ffc4 	bl	ddbac <_ZN9FuelGauge13writeRegisterEhhh>
}
   ddc24:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   ddc28:	bd08      	pop	{r3, pc}

000ddc2a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ddc2a:	4770      	bx	lr

000ddc2c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ddc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ddc2e:	4606      	mov	r6, r0
   ddc30:	4615      	mov	r5, r2
   ddc32:	460c      	mov	r4, r1
   ddc34:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ddc36:	42bc      	cmp	r4, r7
   ddc38:	d006      	beq.n	ddc48 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ddc3a:	6833      	ldr	r3, [r6, #0]
   ddc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
   ddc40:	689b      	ldr	r3, [r3, #8]
   ddc42:	4630      	mov	r0, r6
   ddc44:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ddc46:	e7f6      	b.n	ddc36 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ddc48:	4628      	mov	r0, r5
   ddc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ddc4c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ddc4c:	7c00      	ldrb	r0, [r0, #16]
   ddc4e:	2200      	movs	r2, #0
   ddc50:	f7fe bf62 	b.w	dcb18 <hal_i2c_write>

000ddc54 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ddc54:	7c00      	ldrb	r0, [r0, #16]
   ddc56:	2100      	movs	r1, #0
   ddc58:	f7fe bf66 	b.w	dcb28 <hal_i2c_available>

000ddc5c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ddc5c:	7c00      	ldrb	r0, [r0, #16]
   ddc5e:	2100      	movs	r1, #0
   ddc60:	f7fe bf6a 	b.w	dcb38 <hal_i2c_read>

000ddc64 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ddc64:	7c00      	ldrb	r0, [r0, #16]
   ddc66:	2100      	movs	r1, #0
   ddc68:	f7fe bf6e 	b.w	dcb48 <hal_i2c_peek>

000ddc6c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ddc6c:	7c00      	ldrb	r0, [r0, #16]
   ddc6e:	2100      	movs	r1, #0
   ddc70:	f7fe bf72 	b.w	dcb58 <hal_i2c_flush>

000ddc74 <_ZN7TwoWireD0Ev>:
   ddc74:	b510      	push	{r4, lr}
   ddc76:	2114      	movs	r1, #20
   ddc78:	4604      	mov	r4, r0
   ddc7a:	f002 fd41 	bl	e0700 <_ZdlPvj>
   ddc7e:	4620      	mov	r0, r4
   ddc80:	bd10      	pop	{r4, pc}
	...

000ddc84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ddc84:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ddc86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ddc8a:	4604      	mov	r4, r0
   ddc8c:	4608      	mov	r0, r1
   ddc8e:	2100      	movs	r1, #0
   ddc90:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ddc94:	4b03      	ldr	r3, [pc, #12]	; (ddca4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ddc96:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ddc98:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ddc9a:	4611      	mov	r1, r2
   ddc9c:	f7fe ff6c 	bl	dcb78 <hal_i2c_init>
}
   ddca0:	4620      	mov	r0, r4
   ddca2:	bd10      	pop	{r4, pc}
   ddca4:	000e4874 	.word	0x000e4874

000ddca8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ddca8:	2300      	movs	r3, #0
   ddcaa:	7c00      	ldrb	r0, [r0, #16]
   ddcac:	461a      	mov	r2, r3
   ddcae:	4619      	mov	r1, r3
   ddcb0:	f7fe bf1a 	b.w	dcae8 <hal_i2c_begin>

000ddcb4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   ddcb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ddcb6:	2200      	movs	r2, #0
   ddcb8:	2314      	movs	r3, #20
   ddcba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   ddcbe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   ddcc2:	780b      	ldrb	r3, [r1, #0]
   ddcc4:	f88d 3008 	strb.w	r3, [sp, #8]
   ddcc8:	684b      	ldr	r3, [r1, #4]
   ddcca:	9303      	str	r3, [sp, #12]
   ddccc:	68cb      	ldr	r3, [r1, #12]
   ddcce:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   ddcd0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ddcd2:	7a0b      	ldrb	r3, [r1, #8]
   ddcd4:	9305      	str	r3, [sp, #20]
   ddcd6:	a901      	add	r1, sp, #4
   ddcd8:	f7fe ff66 	bl	dcba8 <hal_i2c_request_ex>
}
   ddcdc:	b007      	add	sp, #28
   ddcde:	f85d fb04 	ldr.w	pc, [sp], #4

000ddce2 <_ZN7TwoWire11requestFromEhjh>:
{
   ddce2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   ddce4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ddce6:	f88d 1000 	strb.w	r1, [sp]
   ddcea:	f04f 0164 	mov.w	r1, #100	; 0x64
   ddcee:	9103      	str	r1, [sp, #12]
   ddcf0:	bf18      	it	ne
   ddcf2:	2301      	movne	r3, #1
   ddcf4:	4669      	mov	r1, sp
    size_ = size;
   ddcf6:	9201      	str	r2, [sp, #4]
   ddcf8:	f88d 3008 	strb.w	r3, [sp, #8]
   ddcfc:	f7ff ffda 	bl	ddcb4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   ddd00:	b005      	add	sp, #20
   ddd02:	f85d fb04 	ldr.w	pc, [sp], #4

000ddd06 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ddd06:	7c00      	ldrb	r0, [r0, #16]
   ddd08:	2200      	movs	r2, #0
   ddd0a:	f7fe bef5 	b.w	dcaf8 <hal_i2c_begin_transmission>

000ddd0e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   ddd0e:	b2c9      	uxtb	r1, r1
   ddd10:	f7ff bff9 	b.w	ddd06 <_ZN7TwoWire17beginTransmissionEh>

000ddd14 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   ddd14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ddd16:	2300      	movs	r3, #0
   ddd18:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   ddd1c:	684a      	ldr	r2, [r1, #4]
   ddd1e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   ddd20:	2314      	movs	r3, #20
    };
   ddd22:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   ddd24:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   ddd28:	780b      	ldrb	r3, [r1, #0]
    };
   ddd2a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ddd2c:	7a0a      	ldrb	r2, [r1, #8]
   ddd2e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   ddd30:	7c00      	ldrb	r0, [r0, #16]
    };
   ddd32:	f88d 3008 	strb.w	r3, [sp, #8]
   ddd36:	aa01      	add	r2, sp, #4
   ddd38:	4619      	mov	r1, r3
   ddd3a:	f7fe fedd 	bl	dcaf8 <hal_i2c_begin_transmission>
}
   ddd3e:	b007      	add	sp, #28
   ddd40:	f85d fb04 	ldr.w	pc, [sp], #4

000ddd44 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ddd44:	7c00      	ldrb	r0, [r0, #16]
   ddd46:	2200      	movs	r2, #0
   ddd48:	f7fe bede 	b.w	dcb08 <hal_i2c_end_transmission>

000ddd4c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   ddd4c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   ddd4e:	2100      	movs	r1, #0
   ddd50:	7c00      	ldrb	r0, [r0, #16]
   ddd52:	f7fe ff19 	bl	dcb88 <hal_i2c_lock>
}
   ddd56:	fab0 f080 	clz	r0, r0
   ddd5a:	0940      	lsrs	r0, r0, #5
   ddd5c:	bd08      	pop	{r3, pc}

000ddd5e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   ddd5e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   ddd60:	2100      	movs	r1, #0
   ddd62:	7c00      	ldrb	r0, [r0, #16]
   ddd64:	f7fe ff18 	bl	dcb98 <hal_i2c_unlock>
}
   ddd68:	fab0 f080 	clz	r0, r0
   ddd6c:	0940      	lsrs	r0, r0, #5
   ddd6e:	bd08      	pop	{r3, pc}

000ddd70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ddd70:	4770      	bx	lr

000ddd72 <_ZN9IPAddressD0Ev>:
   ddd72:	b510      	push	{r4, lr}
   ddd74:	2118      	movs	r1, #24
   ddd76:	4604      	mov	r4, r0
   ddd78:	f002 fcc2 	bl	e0700 <_ZdlPvj>
   ddd7c:	4620      	mov	r0, r4
   ddd7e:	bd10      	pop	{r4, pc}

000ddd80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ddd80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ddd82:	7d03      	ldrb	r3, [r0, #20]
   ddd84:	2b06      	cmp	r3, #6
{
   ddd86:	b08d      	sub	sp, #52	; 0x34
   ddd88:	460e      	mov	r6, r1
   ddd8a:	f100 0704 	add.w	r7, r0, #4
   ddd8e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ddd92:	d012      	beq.n	dddba <_ZNK9IPAddress7printToER5Print+0x3a>
   ddd94:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   ddd98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ddd9c:	220a      	movs	r2, #10
   ddd9e:	4630      	mov	r0, r6
   ddda0:	f001 fe02 	bl	df9a8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ddda4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ddda6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ddda8:	d019      	beq.n	dddde <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   dddaa:	2c00      	cmp	r4, #0
   dddac:	d0f4      	beq.n	ddd98 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   dddae:	212e      	movs	r1, #46	; 0x2e
   dddb0:	4630      	mov	r0, r6
   dddb2:	f001 fdea 	bl	df98a <_ZN5Print5printEc>
   dddb6:	4404      	add	r4, r0
   dddb8:	e7ee      	b.n	ddd98 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dddba:	232f      	movs	r3, #47	; 0x2f
   dddbc:	466a      	mov	r2, sp
   dddbe:	4639      	mov	r1, r7
   dddc0:	200a      	movs	r0, #10
		buf[0] = 0;
   dddc2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   dddc6:	f7fe fef7 	bl	dcbb8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   dddca:	4668      	mov	r0, sp
   dddcc:	f003 fcff 	bl	e17ce <strlen>
   dddd0:	6833      	ldr	r3, [r6, #0]
   dddd2:	4602      	mov	r2, r0
   dddd4:	68db      	ldr	r3, [r3, #12]
   dddd6:	4669      	mov	r1, sp
   dddd8:	4630      	mov	r0, r6
   dddda:	4798      	blx	r3
   ddddc:	4604      	mov	r4, r0
    }
    return n;
}
   dddde:	4620      	mov	r0, r4
   ddde0:	b00d      	add	sp, #52	; 0x34
   ddde2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ddde4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ddde4:	b510      	push	{r4, lr}
   ddde6:	4b05      	ldr	r3, [pc, #20]	; (dddfc <_ZN9IPAddressC1Ev+0x18>)
   ddde8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   dddea:	2211      	movs	r2, #17
   dddec:	f840 3b04 	str.w	r3, [r0], #4
   dddf0:	2100      	movs	r1, #0
   dddf2:	f003 fc61 	bl	e16b8 <memset>
}
   dddf6:	4620      	mov	r0, r4
   dddf8:	bd10      	pop	{r4, pc}
   dddfa:	bf00      	nop
   dddfc:	000e489c 	.word	0x000e489c

000dde00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   dde00:	4603      	mov	r3, r0
   dde02:	4a07      	ldr	r2, [pc, #28]	; (dde20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   dde04:	b510      	push	{r4, lr}
   dde06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   dde0a:	f101 0210 	add.w	r2, r1, #16
   dde0e:	f851 4b04 	ldr.w	r4, [r1], #4
   dde12:	f843 4b04 	str.w	r4, [r3], #4
   dde16:	4291      	cmp	r1, r2
   dde18:	d1f9      	bne.n	dde0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dde1a:	780a      	ldrb	r2, [r1, #0]
   dde1c:	701a      	strb	r2, [r3, #0]
}
   dde1e:	bd10      	pop	{r4, pc}
   dde20:	000e489c 	.word	0x000e489c

000dde24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   dde24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dde26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dde2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dde2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dde32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   dde36:	2304      	movs	r3, #4
   dde38:	6041      	str	r1, [r0, #4]
   dde3a:	7503      	strb	r3, [r0, #20]
}
   dde3c:	bd10      	pop	{r4, pc}

000dde3e <_ZN9IPAddressaSEPKh>:
{
   dde3e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dde40:	78cb      	ldrb	r3, [r1, #3]
   dde42:	9300      	str	r3, [sp, #0]
   dde44:	788b      	ldrb	r3, [r1, #2]
   dde46:	784a      	ldrb	r2, [r1, #1]
   dde48:	7809      	ldrb	r1, [r1, #0]
   dde4a:	f7ff ffeb 	bl	dde24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   dde4e:	b002      	add	sp, #8
   dde50:	bd10      	pop	{r4, pc}

000dde52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   dde52:	f100 0310 	add.w	r3, r0, #16
   dde56:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   dde58:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   dde5c:	2901      	cmp	r1, #1
   dde5e:	4618      	mov	r0, r3
   dde60:	d108      	bne.n	dde74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   dde62:	f853 1c04 	ldr.w	r1, [r3, #-4]
   dde66:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   dde6a:	3a01      	subs	r2, #1
   dde6c:	f103 0310 	add.w	r3, r3, #16
   dde70:	d1f2      	bne.n	dde58 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   dde72:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   dde74:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   dde76:	bf04      	itt	eq
   dde78:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   dde7c:	1852      	addeq	r2, r2, r1
   dde7e:	e7f4      	b.n	dde6a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000dde80 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dde80:	4770      	bx	lr

000dde82 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   dde82:	4770      	bx	lr

000dde84 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   dde84:	2000      	movs	r0, #0
   dde86:	4770      	bx	lr

000dde88 <_ZN5spark16JSONBufferWriterD0Ev>:
   dde88:	b510      	push	{r4, lr}
   dde8a:	2114      	movs	r1, #20
   dde8c:	4604      	mov	r4, r0
   dde8e:	f002 fc37 	bl	e0700 <_ZdlPvj>
   dde92:	4620      	mov	r0, r4
   dde94:	bd10      	pop	{r4, pc}

000dde96 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dde96:	b510      	push	{r4, lr}
   dde98:	2110      	movs	r1, #16
   dde9a:	4604      	mov	r4, r0
   dde9c:	f002 fc30 	bl	e0700 <_ZdlPvj>
   ddea0:	4620      	mov	r0, r4
   ddea2:	bd10      	pop	{r4, pc}

000ddea4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   ddea4:	b508      	push	{r3, lr}
      { delete this; }
   ddea6:	f7ff fff6 	bl	dde96 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   ddeaa:	bd08      	pop	{r3, pc}

000ddeac <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ddeac:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   ddeae:	68c4      	ldr	r4, [r0, #12]
   ddeb0:	b17c      	cbz	r4, dded2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   ddeb2:	6820      	ldr	r0, [r4, #0]
   ddeb4:	b108      	cbz	r0, ddeba <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   ddeb6:	f7f6 f8f4 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   ddeba:	7a23      	ldrb	r3, [r4, #8]
   ddebc:	b11b      	cbz	r3, ddec6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   ddebe:	6860      	ldr	r0, [r4, #4]
   ddec0:	b108      	cbz	r0, ddec6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   ddec2:	f7f6 f8ee 	bl	d40a2 <_ZdaPv>
   ddec6:	4620      	mov	r0, r4
   ddec8:	210c      	movs	r1, #12
   ddeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ddece:	f002 bc17 	b.w	e0700 <_ZdlPvj>
   dded2:	bd10      	pop	{r4, pc}

000dded4 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   dded4:	b538      	push	{r3, r4, r5, lr}
   dded6:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   dded8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   ddedc:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   ddede:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   ddee0:	d207      	bcs.n	ddef2 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   ddee2:	1ad2      	subs	r2, r2, r3
   ddee4:	6880      	ldr	r0, [r0, #8]
   ddee6:	42aa      	cmp	r2, r5
   ddee8:	bf28      	it	cs
   ddeea:	462a      	movcs	r2, r5
   ddeec:	4418      	add	r0, r3
   ddeee:	f003 fbbb 	bl	e1668 <memcpy>
    }
    n_ += size;
   ddef2:	6922      	ldr	r2, [r4, #16]
   ddef4:	442a      	add	r2, r5
   ddef6:	6122      	str	r2, [r4, #16]
}
   ddef8:	bd38      	pop	{r3, r4, r5, pc}

000ddefa <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   ddefa:	b40e      	push	{r1, r2, r3}
   ddefc:	b517      	push	{r0, r1, r2, r4, lr}
   ddefe:	ab05      	add	r3, sp, #20
   ddf00:	4604      	mov	r4, r0
   ddf02:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   ddf06:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   ddf08:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   ddf0a:	6903      	ldr	r3, [r0, #16]
   ddf0c:	6880      	ldr	r0, [r0, #8]
   ddf0e:	428b      	cmp	r3, r1
   ddf10:	bf38      	it	cc
   ddf12:	1ac9      	subcc	r1, r1, r3
   ddf14:	4418      	add	r0, r3
   ddf16:	bf28      	it	cs
   ddf18:	2100      	movcs	r1, #0
   ddf1a:	9b01      	ldr	r3, [sp, #4]
   ddf1c:	f7ff f8fc 	bl	dd118 <vsnprintf>
    va_end(args);
    n_ += n;
   ddf20:	6923      	ldr	r3, [r4, #16]
   ddf22:	4418      	add	r0, r3
   ddf24:	6120      	str	r0, [r4, #16]
}
   ddf26:	b003      	add	sp, #12
   ddf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ddf2c:	b003      	add	sp, #12
   ddf2e:	4770      	bx	lr

000ddf30 <_ZN5spark10JSONWriter6printfEPKcz>:
void spark::JSONWriter::printf(const char *fmt, ...) {
   ddf30:	b40e      	push	{r1, r2, r3}
   ddf32:	b5f0      	push	{r4, r5, r6, r7, lr}
   ddf34:	b088      	sub	sp, #32
   ddf36:	af00      	add	r7, sp, #0
   ddf38:	f107 0534 	add.w	r5, r7, #52	; 0x34
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf3c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   ddf3e:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf42:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   ddf44:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf46:	462b      	mov	r3, r5
   ddf48:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   ddf4a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf4c:	f7ff f8e4 	bl	dd118 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   ddf50:	280f      	cmp	r0, #15
   ddf52:	687a      	ldr	r2, [r7, #4]
   ddf54:	d91a      	bls.n	ddf8c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   ddf56:	f100 0308 	add.w	r3, r0, #8
   ddf5a:	f023 0307 	bic.w	r3, r3, #7
        }
   ddf5e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   ddf60:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf64:	1c41      	adds	r1, r0, #1
   ddf66:	462b      	mov	r3, r5
   ddf68:	4668      	mov	r0, sp
        va_start(args, fmt);
   ddf6a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   ddf6c:	f7ff f8d4 	bl	dd118 <vsnprintf>
        if (n > 0) {
   ddf70:	1e02      	subs	r2, r0, #0
   ddf72:	dd04      	ble.n	ddf7e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   ddf74:	6823      	ldr	r3, [r4, #0]
   ddf76:	4669      	mov	r1, sp
   ddf78:	689b      	ldr	r3, [r3, #8]
   ddf7a:	4620      	mov	r0, r4
   ddf7c:	4798      	blx	r3
   ddf7e:	46b5      	mov	sp, r6
}
   ddf80:	3720      	adds	r7, #32
   ddf82:	46bd      	mov	sp, r7
   ddf84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ddf88:	b003      	add	sp, #12
   ddf8a:	4770      	bx	lr
    } else if (n > 0) {
   ddf8c:	2800      	cmp	r0, #0
   ddf8e:	d0f7      	beq.n	ddf80 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   ddf90:	6823      	ldr	r3, [r4, #0]
   ddf92:	4602      	mov	r2, r0
   ddf94:	689b      	ldr	r3, [r3, #8]
   ddf96:	f107 0110 	add.w	r1, r7, #16
   ddf9a:	4620      	mov	r0, r4
   ddf9c:	4798      	blx	r3
}
   ddf9e:	e7ef      	b.n	ddf80 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000ddfa0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   ddfa0:	b510      	push	{r4, lr}
          _M_dispose();
   ddfa2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   ddfa4:	4604      	mov	r4, r0
          _M_dispose();
   ddfa6:	689b      	ldr	r3, [r3, #8]
   ddfa8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ddfaa:	68a3      	ldr	r3, [r4, #8]
   ddfac:	3b01      	subs	r3, #1
   ddfae:	60a3      	str	r3, [r4, #8]
   ddfb0:	b92b      	cbnz	r3, ddfbe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   ddfb2:	6823      	ldr	r3, [r4, #0]
   ddfb4:	4620      	mov	r0, r4
   ddfb6:	68db      	ldr	r3, [r3, #12]
    }
   ddfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   ddfbc:	4718      	bx	r3
    }
   ddfbe:	bd10      	pop	{r4, pc}

000ddfc0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   ddfc0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   ddfc2:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   ddfc4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   ddfc8:	689b      	ldr	r3, [r3, #8]
   ddfca:	2201      	movs	r2, #1
   ddfcc:	f10d 0107 	add.w	r1, sp, #7
   ddfd0:	4798      	blx	r3
}
   ddfd2:	b003      	add	sp, #12
   ddfd4:	f85d fb04 	ldr.w	pc, [sp], #4

000ddfd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   ddfd8:	b538      	push	{r3, r4, r5, lr}
   ddfda:	680b      	ldr	r3, [r1, #0]
   ddfdc:	6003      	str	r3, [r0, #0]
   ddfde:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   ddfe0:	6843      	ldr	r3, [r0, #4]
   ddfe2:	429d      	cmp	r5, r3
    class __shared_ptr
   ddfe4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   ddfe6:	d00c      	beq.n	de002 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   ddfe8:	b115      	cbz	r5, ddff0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   ddfea:	686b      	ldr	r3, [r5, #4]
   ddfec:	3301      	adds	r3, #1
   ddfee:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   ddff0:	6860      	ldr	r0, [r4, #4]
   ddff2:	b128      	cbz	r0, de000 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   ddff4:	6843      	ldr	r3, [r0, #4]
   ddff6:	3b01      	subs	r3, #1
   ddff8:	6043      	str	r3, [r0, #4]
   ddffa:	b90b      	cbnz	r3, de000 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   ddffc:	f7ff ffd0 	bl	ddfa0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   de000:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   de002:	4620      	mov	r0, r4
   de004:	bd38      	pop	{r3, r4, r5, pc}

000de006 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   de006:	460b      	mov	r3, r1
   de008:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   de00a:	2200      	movs	r2, #0
   de00c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   de00e:	e9c0 2200 	strd	r2, r2, [r0]
   de012:	4604      	mov	r4, r0
        t_ = t;
   de014:	6083      	str	r3, [r0, #8]
    if (t) {
   de016:	b90b      	cbnz	r3, de01c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   de018:	4620      	mov	r0, r4
   de01a:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   de01c:	f7ff ffdc 	bl	ddfd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   de020:	e7fa      	b.n	de018 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000de022 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   de022:	6883      	ldr	r3, [r0, #8]
   de024:	b1eb      	cbz	r3, de062 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   de026:	781a      	ldrb	r2, [r3, #0]
   de028:	2a03      	cmp	r2, #3
   de02a:	d81a      	bhi.n	de062 <_ZNK5spark9JSONValue4typeEv+0x40>
   de02c:	e8df f002 	tbb	[pc, r2]
   de030:	1b021704 	.word	0x1b021704
   de034:	2005      	movs	r0, #5
   de036:	4770      	bx	lr
        const char c = d_->json[t_->start];
   de038:	6802      	ldr	r2, [r0, #0]
   de03a:	685b      	ldr	r3, [r3, #4]
   de03c:	6852      	ldr	r2, [r2, #4]
   de03e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   de040:	282d      	cmp	r0, #45	; 0x2d
   de042:	d012      	beq.n	de06a <_ZNK5spark9JSONValue4typeEv+0x48>
   de044:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   de048:	2b09      	cmp	r3, #9
   de04a:	d90e      	bls.n	de06a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   de04c:	2874      	cmp	r0, #116	; 0x74
   de04e:	d00e      	beq.n	de06e <_ZNK5spark9JSONValue4typeEv+0x4c>
   de050:	2866      	cmp	r0, #102	; 0x66
   de052:	d00c      	beq.n	de06e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   de054:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   de058:	4258      	negs	r0, r3
   de05a:	4158      	adcs	r0, r3
   de05c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   de05e:	2006      	movs	r0, #6
   de060:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   de062:	2000      	movs	r0, #0
   de064:	4770      	bx	lr
        return JSON_TYPE_STRING;
   de066:	2004      	movs	r0, #4
   de068:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   de06a:	2003      	movs	r0, #3
   de06c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   de06e:	2002      	movs	r0, #2
}
   de070:	4770      	bx	lr
	...

000de074 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   de074:	b510      	push	{r4, lr}
   de076:	4604      	mov	r4, r0
    switch (type()) {
   de078:	f7ff ffd3 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
   de07c:	2803      	cmp	r0, #3
   de07e:	d00d      	beq.n	de09c <_ZNK5spark9JSONValue6toBoolEv+0x28>
   de080:	2804      	cmp	r0, #4
   de082:	d01e      	beq.n	de0c2 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   de084:	2802      	cmp	r0, #2
   de086:	d12b      	bne.n	de0e0 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   de088:	6822      	ldr	r2, [r4, #0]
   de08a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   de08c:	6852      	ldr	r2, [r2, #4]
   de08e:	685b      	ldr	r3, [r3, #4]
   de090:	5cd0      	ldrb	r0, [r2, r3]
   de092:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   de096:	4258      	negs	r0, r3
   de098:	4158      	adcs	r0, r3
}
   de09a:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   de09c:	68a3      	ldr	r3, [r4, #8]
   de09e:	6822      	ldr	r2, [r4, #0]
   de0a0:	685b      	ldr	r3, [r3, #4]
   de0a2:	6854      	ldr	r4, [r2, #4]
   de0a4:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   de0a6:	490f      	ldr	r1, [pc, #60]	; (de0e4 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   de0a8:	4620      	mov	r0, r4
   de0aa:	f003 fb61 	bl	e1770 <strcmp>
   de0ae:	2800      	cmp	r0, #0
   de0b0:	d0f3      	beq.n	de09a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   de0b2:	490d      	ldr	r1, [pc, #52]	; (de0e8 <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   de0b4:	4620      	mov	r0, r4
   de0b6:	f003 fb5b 	bl	e1770 <strcmp>
   de0ba:	3800      	subs	r0, #0
   de0bc:	bf18      	it	ne
   de0be:	2001      	movne	r0, #1
   de0c0:	e7eb      	b.n	de09a <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   de0c2:	6822      	ldr	r2, [r4, #0]
   de0c4:	68a3      	ldr	r3, [r4, #8]
   de0c6:	6852      	ldr	r2, [r2, #4]
   de0c8:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   de0ca:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   de0cc:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   de0ce:	2800      	cmp	r0, #0
   de0d0:	d0e3      	beq.n	de09a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   de0d2:	4906      	ldr	r1, [pc, #24]	; (de0ec <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   de0d4:	4620      	mov	r0, r4
   de0d6:	f003 fb4b 	bl	e1770 <strcmp>
   de0da:	2800      	cmp	r0, #0
   de0dc:	d1e3      	bne.n	de0a6 <_ZNK5spark9JSONValue6toBoolEv+0x32>
   de0de:	e7dc      	b.n	de09a <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   de0e0:	2000      	movs	r0, #0
   de0e2:	e7da      	b.n	de09a <_ZNK5spark9JSONValue6toBoolEv+0x26>
   de0e4:	000e48aa 	.word	0x000e48aa
   de0e8:	000e48a8 	.word	0x000e48a8
   de0ec:	000e3b14 	.word	0x000e3b14

000de0f0 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   de0f0:	b510      	push	{r4, lr}
   de0f2:	4604      	mov	r4, r0
    switch (type()) {
   de0f4:	f7ff ff95 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
   de0f8:	2802      	cmp	r0, #2
   de0fa:	d00e      	beq.n	de11a <_ZNK5spark9JSONValue5toIntEv+0x2a>
   de0fc:	1ec3      	subs	r3, r0, #3
   de0fe:	b2db      	uxtb	r3, r3
   de100:	2b01      	cmp	r3, #1
   de102:	d814      	bhi.n	de12e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   de104:	6822      	ldr	r2, [r4, #0]
   de106:	68a3      	ldr	r3, [r4, #8]
   de108:	6850      	ldr	r0, [r2, #4]
   de10a:	685b      	ldr	r3, [r3, #4]
}
   de10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   de110:	220a      	movs	r2, #10
   de112:	2100      	movs	r1, #0
   de114:	4418      	add	r0, r3
   de116:	f004 bacd 	b.w	e26b4 <strtol>
        const char* const s = d_->json + t_->start;
   de11a:	6822      	ldr	r2, [r4, #0]
   de11c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   de11e:	6852      	ldr	r2, [r2, #4]
   de120:	685b      	ldr	r3, [r3, #4]
   de122:	5cd0      	ldrb	r0, [r2, r3]
   de124:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   de128:	4258      	negs	r0, r3
   de12a:	4158      	adcs	r0, r3
}
   de12c:	bd10      	pop	{r4, pc}
    switch (type()) {
   de12e:	2000      	movs	r0, #0
   de130:	e7fc      	b.n	de12c <_ZNK5spark9JSONValue5toIntEv+0x3c>
   de132:	0000      	movs	r0, r0
   de134:	0000      	movs	r0, r0
	...

000de138 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   de138:	b510      	push	{r4, lr}
   de13a:	4604      	mov	r4, r0
    switch (type()) {
   de13c:	f7ff ff71 	bl	de022 <_ZNK5spark9JSONValue4typeEv>
   de140:	2802      	cmp	r0, #2
   de142:	d00d      	beq.n	de160 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   de144:	1ec3      	subs	r3, r0, #3
   de146:	b2db      	uxtb	r3, r3
   de148:	2b01      	cmp	r3, #1
   de14a:	d810      	bhi.n	de16e <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   de14c:	6822      	ldr	r2, [r4, #0]
   de14e:	68a3      	ldr	r3, [r4, #8]
   de150:	6850      	ldr	r0, [r2, #4]
   de152:	685b      	ldr	r3, [r3, #4]
}
   de154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   de158:	2100      	movs	r1, #0
   de15a:	4418      	add	r0, r3
   de15c:	f004 b99e 	b.w	e249c <strtod>
        const char* const s = d_->json + t_->start;
   de160:	6822      	ldr	r2, [r4, #0]
   de162:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   de164:	6852      	ldr	r2, [r2, #4]
   de166:	685b      	ldr	r3, [r3, #4]
   de168:	5cd3      	ldrb	r3, [r2, r3]
   de16a:	2b74      	cmp	r3, #116	; 0x74
   de16c:	d002      	beq.n	de174 <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   de16e:	ed9f 0b04 	vldr	d0, [pc, #16]	; de180 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   de172:	bd10      	pop	{r4, pc}
        return *s == 't';
   de174:	ed9f 0b04 	vldr	d0, [pc, #16]	; de188 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   de178:	e7fb      	b.n	de172 <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   de17a:	bf00      	nop
   de17c:	f3af 8000 	nop.w
	...
   de18c:	3ff00000 	.word	0x3ff00000

000de190 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   de190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de194:	4699      	mov	r9, r3
   de196:	b088      	sub	sp, #32
    parser.size = sizeof(jsmn_parser);
   de198:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   de19a:	4607      	mov	r7, r0
   de19c:	4688      	mov	r8, r1
    jsmn_init(&parser, nullptr);
   de19e:	eb0d 0003 	add.w	r0, sp, r3
   de1a2:	2100      	movs	r1, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   de1a4:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   de1a6:	9304      	str	r3, [sp, #16]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de1a8:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr);
   de1aa:	f7fe fe2d 	bl	dce08 <jsmn_init>
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de1ae:	ab03      	add	r3, sp, #12
   de1b0:	9301      	str	r3, [sp, #4]
    int nExt = -1;
   de1b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de1b6:	9400      	str	r4, [sp, #0]
   de1b8:	4623      	mov	r3, r4
   de1ba:	4642      	mov	r2, r8
   de1bc:	4639      	mov	r1, r7
   de1be:	a804      	add	r0, sp, #16
    int nExt = -1;
   de1c0:	9603      	str	r6, [sp, #12]
    int n = jsmn_parse_deprecated(&parser, json, size, nullptr, 0, &nExt); // Get number of tokens
   de1c2:	f7fe fe29 	bl	dce18 <jsmn_parse_deprecated>
    if (n <= 0) {
   de1c6:	1e05      	subs	r5, r0, #0
   de1c8:	dd27      	ble.n	de21a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x8a>
    if (nExt > n) {
   de1ca:	9803      	ldr	r0, [sp, #12]
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   de1cc:	4914      	ldr	r1, [pc, #80]	; (de220 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x90>)
   de1ce:	4285      	cmp	r5, r0
   de1d0:	bfb8      	it	lt
   de1d2:	4605      	movlt	r5, r0
   de1d4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
   de1d8:	bfac      	ite	ge
   de1da:	4630      	movge	r0, r6
   de1dc:	0128      	lsllt	r0, r5, #4
   de1de:	f002 fac7 	bl	e0770 <_ZnajRKSt9nothrow_t>
    if (!t) {
   de1e2:	4606      	mov	r6, r0
   de1e4:	b198      	cbz	r0, de20e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
    jsmn_init(&parser, nullptr); // Reset parser
   de1e6:	2100      	movs	r1, #0
   de1e8:	a804      	add	r0, sp, #16
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   de1ea:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   de1ec:	f7fe fe0c 	bl	dce08 <jsmn_init>
    if (jsmn_parse_deprecated(&parser, json, size, t.get(), n, nullptr) <= 0) {
   de1f0:	e9cd 5400 	strd	r5, r4, [sp]
   de1f4:	4633      	mov	r3, r6
   de1f6:	4642      	mov	r2, r8
   de1f8:	4639      	mov	r1, r7
   de1fa:	a804      	add	r0, sp, #16
   de1fc:	f7fe fe0c 	bl	dce18 <jsmn_parse_deprecated>
   de200:	42a0      	cmp	r0, r4
   de202:	dd07      	ble.n	de214 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x84>
    *tokens = t.release();
   de204:	f8ca 6000 	str.w	r6, [sl]
    return true;
   de208:	2001      	movs	r0, #1
    *count = n;
   de20a:	f8c9 5000 	str.w	r5, [r9]
}
   de20e:	b008      	add	sp, #32
   de210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	delete [] __ptr;
   de214:	4630      	mov	r0, r6
   de216:	f7f5 ff44 	bl	d40a2 <_ZdaPv>
      }
   de21a:	4620      	mov	r0, r4
   de21c:	e7f7      	b.n	de20e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7e>
   de21e:	bf00      	nop
   de220:	000e4ac8 	.word	0x000e4ac8

000de224 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   de224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   de228:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   de22a:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   de22c:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   de22e:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   de230:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   de232:	4607      	mov	r7, r0
    const char *s = s1;
   de234:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   de236:	4619      	mov	r1, r3
                    *str = 0x0d;
   de238:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   de23c:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   de240:	42b4      	cmp	r4, r6
   de242:	d063      	beq.n	de30c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   de244:	4625      	mov	r5, r4
   de246:	f815 2b01 	ldrb.w	r2, [r5], #1
   de24a:	2a5c      	cmp	r2, #92	; 0x5c
   de24c:	d12b      	bne.n	de2a6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   de24e:	42a1      	cmp	r1, r4
   de250:	d007      	beq.n	de262 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   de252:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   de256:	4618      	mov	r0, r3
   de258:	465a      	mov	r2, fp
   de25a:	f003 fa13 	bl	e1684 <memmove>
   de25e:	4603      	mov	r3, r0
                str += n;
   de260:	445b      	add	r3, fp
            if (s == end) {
   de262:	42b5      	cmp	r5, r6
   de264:	d039      	beq.n	de2da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   de266:	7862      	ldrb	r2, [r4, #1]
   de268:	2a75      	cmp	r2, #117	; 0x75
   de26a:	d12a      	bne.n	de2c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   de26c:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   de26e:	1ab2      	subs	r2, r6, r2
   de270:	2a03      	cmp	r2, #3
   de272:	dd32      	ble.n	de2da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   de274:	1da0      	adds	r0, r4, #6
   de276:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   de27a:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   de27e:	45ae      	cmp	lr, r5
   de280:	d053      	beq.n	de32a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   de282:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   de286:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   de28a:	fa5f fb82 	uxtb.w	fp, r2
   de28e:	f1bb 0f09 	cmp.w	fp, #9
   de292:	d905      	bls.n	de2a0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   de294:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   de298:	2a05      	cmp	r2, #5
   de29a:	d807      	bhi.n	de2ac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   de29c:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   de2a0:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   de2a4:	e7eb      	b.n	de27e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   de2a6:	4628      	mov	r0, r5
   de2a8:	4604      	mov	r4, r0
   de2aa:	e7c9      	b.n	de240 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   de2ac:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   de2b0:	2a05      	cmp	r2, #5
   de2b2:	d812      	bhi.n	de2da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   de2b4:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   de2b8:	e7f2      	b.n	de2a0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   de2ba:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   de2be:	4601      	mov	r1, r0
   de2c0:	e7f2      	b.n	de2a8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   de2c2:	2a6e      	cmp	r2, #110	; 0x6e
   de2c4:	d01c      	beq.n	de300 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   de2c6:	d80e      	bhi.n	de2e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   de2c8:	2a62      	cmp	r2, #98	; 0x62
   de2ca:	d013      	beq.n	de2f4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   de2cc:	d807      	bhi.n	de2de <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   de2ce:	2a2f      	cmp	r2, #47	; 0x2f
   de2d0:	d011      	beq.n	de2f6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   de2d2:	2a5c      	cmp	r2, #92	; 0x5c
   de2d4:	d00f      	beq.n	de2f6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   de2d6:	2a22      	cmp	r2, #34	; 0x22
   de2d8:	d00d      	beq.n	de2f6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   de2da:	2000      	movs	r0, #0
   de2dc:	e023      	b.n	de326 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   de2de:	2a66      	cmp	r2, #102	; 0x66
   de2e0:	d1fb      	bne.n	de2da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   de2e2:	220c      	movs	r2, #12
   de2e4:	e007      	b.n	de2f6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   de2e6:	2a72      	cmp	r2, #114	; 0x72
   de2e8:	d00d      	beq.n	de306 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   de2ea:	2a74      	cmp	r2, #116	; 0x74
   de2ec:	d1f5      	bne.n	de2da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   de2ee:	f883 a000 	strb.w	sl, [r3]
                    break;
   de2f2:	e001      	b.n	de2f8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   de2f4:	2208      	movs	r2, #8
   de2f6:	701a      	strb	r2, [r3, #0]
                ++s;
   de2f8:	1ca1      	adds	r1, r4, #2
                ++str;
   de2fa:	3301      	adds	r3, #1
                ++s;
   de2fc:	4608      	mov	r0, r1
   de2fe:	e7d3      	b.n	de2a8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   de300:	f04f 020a 	mov.w	r2, #10
   de304:	e7f7      	b.n	de2f6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   de306:	f883 9000 	strb.w	r9, [r3]
                    break;
   de30a:	e7f5      	b.n	de2f8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
    if (s != s1) {
   de30c:	42a1      	cmp	r1, r4
   de30e:	d006      	beq.n	de31e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   de310:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   de312:	4618      	mov	r0, r3
   de314:	4622      	mov	r2, r4
   de316:	f003 f9b5 	bl	e1684 <memmove>
   de31a:	4603      	mov	r3, r0
        str += n;
   de31c:	4423      	add	r3, r4
    t->end = str - json; // Update string length
   de31e:	eba3 0308 	sub.w	r3, r3, r8
   de322:	60bb      	str	r3, [r7, #8]
    return true;
   de324:	2001      	movs	r0, #1
}
   de326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   de32a:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   de32e:	d9c4      	bls.n	de2ba <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   de330:	4621      	mov	r1, r4
   de332:	e7b9      	b.n	de2a8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000de334 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   de334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de336:	4604      	mov	r4, r0
   de338:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   de33a:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   de33e:	2700      	movs	r7, #0
    while (t != end) {
   de340:	42b4      	cmp	r4, r6
   de342:	d010      	beq.n	de366 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   de344:	7823      	ldrb	r3, [r4, #0]
   de346:	2b03      	cmp	r3, #3
   de348:	d108      	bne.n	de35c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   de34a:	4629      	mov	r1, r5
   de34c:	4620      	mov	r0, r4
   de34e:	f7ff ff69 	bl	de224 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   de352:	b148      	cbz	r0, de368 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   de354:	68a3      	ldr	r3, [r4, #8]
   de356:	54ef      	strb	r7, [r5, r3]
        ++t;
   de358:	3410      	adds	r4, #16
    while (t != end) {
   de35a:	e7f1      	b.n	de340 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   de35c:	2b00      	cmp	r3, #0
   de35e:	d1fb      	bne.n	de358 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   de360:	68a2      	ldr	r2, [r4, #8]
   de362:	54ab      	strb	r3, [r5, r2]
   de364:	e7f8      	b.n	de358 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   de366:	2001      	movs	r0, #1
}
   de368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000de36c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   de36c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   de36e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   de370:	e9c0 3300 	strd	r3, r3, [r0]
   de374:	4604      	mov	r4, r0
        n_(0) {
   de376:	480e      	ldr	r0, [pc, #56]	; (de3b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   de378:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   de37c:	b1a9      	cbz	r1, de3aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   de37e:	780b      	ldrb	r3, [r1, #0]
   de380:	2b03      	cmp	r3, #3
   de382:	d006      	beq.n	de392 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   de384:	b98b      	cbnz	r3, de3aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   de386:	6813      	ldr	r3, [r2, #0]
   de388:	6858      	ldr	r0, [r3, #4]
   de38a:	684b      	ldr	r3, [r1, #4]
   de38c:	5cc3      	ldrb	r3, [r0, r3]
   de38e:	2b6e      	cmp	r3, #110	; 0x6e
   de390:	d007      	beq.n	de3a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   de392:	6813      	ldr	r3, [r2, #0]
   de394:	684d      	ldr	r5, [r1, #4]
   de396:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   de398:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   de39a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   de39c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   de39e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   de3a0:	60e3      	str	r3, [r4, #12]
   de3a2:	4611      	mov	r1, r2
   de3a4:	4620      	mov	r0, r4
   de3a6:	f7ff fe17 	bl	ddfd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   de3aa:	4620      	mov	r0, r4
   de3ac:	bd38      	pop	{r3, r4, r5, pc}
   de3ae:	bf00      	nop
   de3b0:	000e44eb 	.word	0x000e44eb

000de3b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   de3b4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   de3b6:	2500      	movs	r5, #0
   de3b8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   de3ba:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   de3be:	e9c0 5502 	strd	r5, r5, [r0, #8]
   de3c2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   de3c6:	4604      	mov	r4, r0
   de3c8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   de3ca:	b14b      	cbz	r3, de3e0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   de3cc:	781a      	ldrb	r2, [r3, #0]
   de3ce:	2a01      	cmp	r2, #1
   de3d0:	d106      	bne.n	de3e0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   de3d2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   de3d6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   de3d8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   de3da:	6143      	str	r3, [r0, #20]
   de3dc:	f7ff fdfc 	bl	ddfd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   de3e0:	4620      	mov	r0, r4
   de3e2:	bd38      	pop	{r3, r4, r5, pc}

000de3e4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   de3e4:	b510      	push	{r4, lr}
    if (!n_) {
   de3e6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   de3e8:	4604      	mov	r4, r0
    if (!n_) {
   de3ea:	b163      	cbz	r3, de406 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   de3ec:	6880      	ldr	r0, [r0, #8]
   de3ee:	60e0      	str	r0, [r4, #12]
    --n_;
   de3f0:	3b01      	subs	r3, #1
    ++t_;
   de3f2:	3010      	adds	r0, #16
   de3f4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   de3f6:	6120      	str	r0, [r4, #16]
    --n_;
   de3f8:	6163      	str	r3, [r4, #20]
    if (n_) {
   de3fa:	b113      	cbz	r3, de402 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   de3fc:	f7ff fd29 	bl	dde52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   de400:	60a0      	str	r0, [r4, #8]
    return true;
   de402:	2001      	movs	r0, #1
   de404:	e000      	b.n	de408 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   de406:	4618      	mov	r0, r3
}
   de408:	bd10      	pop	{r4, pc}

000de40a <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   de40a:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   de40c:	2500      	movs	r5, #0
   de40e:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   de410:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   de414:	e9c0 5502 	strd	r5, r5, [r0, #8]
   de418:	4604      	mov	r4, r0
   de41a:	4611      	mov	r1, r2
   de41c:	6105      	str	r5, [r0, #16]
    if (t && t->type == JSMN_ARRAY) {
   de41e:	b14b      	cbz	r3, de434 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
   de420:	781a      	ldrb	r2, [r3, #0]
   de422:	2a02      	cmp	r2, #2
   de424:	d106      	bne.n	de434 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
   de426:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
   de42a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
   de42c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
   de42e:	6103      	str	r3, [r0, #16]
   de430:	f7ff fdd2 	bl	ddfd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   de434:	4620      	mov	r0, r4
   de436:	bd38      	pop	{r3, r4, r5, pc}

000de438 <_ZN5spark17JSONArrayIterator4nextEv>:
bool spark::JSONArrayIterator::next() {
   de438:	b510      	push	{r4, lr}
    if (!n_) {
   de43a:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
   de43c:	4604      	mov	r4, r0
    if (!n_) {
   de43e:	b14b      	cbz	r3, de454 <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
    v_ = t_;
   de440:	6880      	ldr	r0, [r0, #8]
   de442:	60e0      	str	r0, [r4, #12]
    --n_;
   de444:	3b01      	subs	r3, #1
   de446:	6123      	str	r3, [r4, #16]
    if (n_) {
   de448:	b113      	cbz	r3, de450 <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
   de44a:	f7ff fd02 	bl	dde52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   de44e:	60a0      	str	r0, [r4, #8]
    return true;
   de450:	2001      	movs	r0, #1
   de452:	e000      	b.n	de456 <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
   de454:	4618      	mov	r0, r3
}
   de456:	bd10      	pop	{r4, pc}

000de458 <_ZN5spark10JSONWriter8endArrayEv>:
spark::JSONWriter& spark::JSONWriter::endArray() {
   de458:	b510      	push	{r4, lr}
    write(']');
   de45a:	215d      	movs	r1, #93	; 0x5d
spark::JSONWriter& spark::JSONWriter::endArray() {
   de45c:	4604      	mov	r4, r0
    write(']');
   de45e:	f7ff fdaf 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   de462:	2301      	movs	r3, #1
   de464:	7123      	strb	r3, [r4, #4]
}
   de466:	4620      	mov	r0, r4
   de468:	bd10      	pop	{r4, pc}

000de46a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   de46a:	b510      	push	{r4, lr}
    write('}');
   de46c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   de46e:	4604      	mov	r4, r0
    write('}');
   de470:	f7ff fda6 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   de474:	2301      	movs	r3, #1
   de476:	7123      	strb	r3, [r4, #4]
}
   de478:	4620      	mov	r0, r4
   de47a:	bd10      	pop	{r4, pc}

000de47c <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   de47c:	b508      	push	{r3, lr}
    switch (state_) {
   de47e:	7903      	ldrb	r3, [r0, #4]
   de480:	2b01      	cmp	r3, #1
   de482:	d002      	beq.n	de48a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   de484:	2b02      	cmp	r3, #2
   de486:	d004      	beq.n	de492 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   de488:	bd08      	pop	{r3, pc}
        write(',');
   de48a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   de48c:	f7ff fd98 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
}
   de490:	e7fa      	b.n	de488 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   de492:	213a      	movs	r1, #58	; 0x3a
   de494:	e7fa      	b.n	de48c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000de496 <_ZN5spark10JSONWriter10beginArrayEv>:
spark::JSONWriter& spark::JSONWriter::beginArray() {
   de496:	b510      	push	{r4, lr}
   de498:	4604      	mov	r4, r0
    writeSeparator();
   de49a:	f7ff ffef 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
   de49e:	4620      	mov	r0, r4
   de4a0:	215b      	movs	r1, #91	; 0x5b
   de4a2:	f7ff fd8d 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   de4a6:	2300      	movs	r3, #0
   de4a8:	7123      	strb	r3, [r4, #4]
}
   de4aa:	4620      	mov	r0, r4
   de4ac:	bd10      	pop	{r4, pc}

000de4ae <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   de4ae:	b510      	push	{r4, lr}
   de4b0:	4604      	mov	r4, r0
    writeSeparator();
   de4b2:	f7ff ffe3 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   de4b6:	4620      	mov	r0, r4
   de4b8:	217b      	movs	r1, #123	; 0x7b
   de4ba:	f7ff fd81 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   de4be:	2300      	movs	r3, #0
   de4c0:	7123      	strb	r3, [r4, #4]
}
   de4c2:	4620      	mov	r0, r4
   de4c4:	bd10      	pop	{r4, pc}
	...

000de4c8 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
   de4c8:	b538      	push	{r3, r4, r5, lr}
   de4ca:	4604      	mov	r4, r0
   de4cc:	460d      	mov	r5, r1
    writeSeparator();
   de4ce:	f7ff ffd5 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
   de4d2:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
   de4d4:	689b      	ldr	r3, [r3, #8]
    if (val) {
   de4d6:	b13d      	cbz	r5, de4e8 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
   de4d8:	4905      	ldr	r1, [pc, #20]	; (de4f0 <_ZN5spark10JSONWriter5valueEb+0x28>)
   de4da:	2204      	movs	r2, #4
        write("false", 5);
   de4dc:	4620      	mov	r0, r4
   de4de:	4798      	blx	r3
    state_ = NEXT;
   de4e0:	2301      	movs	r3, #1
   de4e2:	7123      	strb	r3, [r4, #4]
}
   de4e4:	4620      	mov	r0, r4
   de4e6:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
   de4e8:	4902      	ldr	r1, [pc, #8]	; (de4f4 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   de4ea:	2205      	movs	r2, #5
   de4ec:	e7f6      	b.n	de4dc <_ZN5spark10JSONWriter5valueEb+0x14>
   de4ee:	bf00      	nop
   de4f0:	000e3b0f 	.word	0x000e3b0f
   de4f4:	000e3b14 	.word	0x000e3b14

000de4f8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   de4f8:	b513      	push	{r0, r1, r4, lr}
   de4fa:	4604      	mov	r4, r0
   de4fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   de4fe:	f7ff ffbd 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   de502:	6823      	ldr	r3, [r4, #0]
   de504:	9a01      	ldr	r2, [sp, #4]
   de506:	68db      	ldr	r3, [r3, #12]
   de508:	4903      	ldr	r1, [pc, #12]	; (de518 <_ZN5spark10JSONWriter5valueEi+0x20>)
   de50a:	4620      	mov	r0, r4
   de50c:	4798      	blx	r3
    state_ = NEXT;
   de50e:	2301      	movs	r3, #1
}
   de510:	4620      	mov	r0, r4
    state_ = NEXT;
   de512:	7123      	strb	r3, [r4, #4]
}
   de514:	b002      	add	sp, #8
   de516:	bd10      	pop	{r4, pc}
   de518:	000e3e83 	.word	0x000e3e83

000de51c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   de51c:	b513      	push	{r0, r1, r4, lr}
   de51e:	4604      	mov	r4, r0
   de520:	9101      	str	r1, [sp, #4]
    writeSeparator();
   de522:	f7ff ffab 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   de526:	6823      	ldr	r3, [r4, #0]
   de528:	9a01      	ldr	r2, [sp, #4]
   de52a:	68db      	ldr	r3, [r3, #12]
   de52c:	4903      	ldr	r1, [pc, #12]	; (de53c <_ZN5spark10JSONWriter5valueEj+0x20>)
   de52e:	4620      	mov	r0, r4
   de530:	4798      	blx	r3
    state_ = NEXT;
   de532:	2301      	movs	r3, #1
}
   de534:	4620      	mov	r0, r4
    state_ = NEXT;
   de536:	7123      	strb	r3, [r4, #4]
}
   de538:	b002      	add	sp, #8
   de53a:	bd10      	pop	{r4, pc}
   de53c:	000e419a 	.word	0x000e419a

000de540 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
   de540:	b510      	push	{r4, lr}
   de542:	ed2d 8b02 	vpush	{d8}
   de546:	eeb0 8a40 	vmov.f32	s16, s0
   de54a:	eef0 8a60 	vmov.f32	s17, s1
   de54e:	b084      	sub	sp, #16
   de550:	4604      	mov	r4, r0
   de552:	9103      	str	r1, [sp, #12]
    writeSeparator();
   de554:	f7ff ff92 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, val);
   de558:	ed8d 8b00 	vstr	d8, [sp]
   de55c:	6823      	ldr	r3, [r4, #0]
   de55e:	9a03      	ldr	r2, [sp, #12]
   de560:	68db      	ldr	r3, [r3, #12]
   de562:	4905      	ldr	r1, [pc, #20]	; (de578 <_ZN5spark10JSONWriter5valueEdi+0x38>)
   de564:	4620      	mov	r0, r4
   de566:	4798      	blx	r3
    state_ = NEXT;
   de568:	2301      	movs	r3, #1
}
   de56a:	4620      	mov	r0, r4
    state_ = NEXT;
   de56c:	7123      	strb	r3, [r4, #4]
}
   de56e:	b004      	add	sp, #16
   de570:	ecbd 8b02 	vpop	{d8}
   de574:	bd10      	pop	{r4, pc}
   de576:	bf00      	nop
   de578:	000e48ac 	.word	0x000e48ac

000de57c <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
   de57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de57e:	4604      	mov	r4, r0
   de580:	ec57 6b10 	vmov	r6, r7, d0
    writeSeparator();
   de584:	f7ff ff7a 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", val);
   de588:	6823      	ldr	r3, [r4, #0]
   de58a:	4905      	ldr	r1, [pc, #20]	; (de5a0 <_ZN5spark10JSONWriter5valueEd+0x24>)
   de58c:	68dd      	ldr	r5, [r3, #12]
   de58e:	4620      	mov	r0, r4
   de590:	463b      	mov	r3, r7
   de592:	4632      	mov	r2, r6
   de594:	47a8      	blx	r5
    state_ = NEXT;
   de596:	2301      	movs	r3, #1
   de598:	7123      	strb	r3, [r4, #4]
}
   de59a:	4620      	mov	r0, r4
   de59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   de59e:	bf00      	nop
   de5a0:	000e48b2 	.word	0x000e48b2

000de5a4 <_ZN5spark10JSONWriter9nullValueEv>:
spark::JSONWriter& spark::JSONWriter::nullValue() {
   de5a4:	b510      	push	{r4, lr}
   de5a6:	4604      	mov	r4, r0
    writeSeparator();
   de5a8:	f7ff ff68 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write("null", 4);
   de5ac:	6823      	ldr	r3, [r4, #0]
   de5ae:	4904      	ldr	r1, [pc, #16]	; (de5c0 <_ZN5spark10JSONWriter9nullValueEv+0x1c>)
   de5b0:	689b      	ldr	r3, [r3, #8]
   de5b2:	4620      	mov	r0, r4
   de5b4:	2204      	movs	r2, #4
   de5b6:	4798      	blx	r3
    state_ = NEXT;
   de5b8:	2301      	movs	r3, #1
   de5ba:	7123      	strb	r3, [r4, #4]
}
   de5bc:	4620      	mov	r0, r4
   de5be:	bd10      	pop	{r4, pc}
   de5c0:	000e48b5 	.word	0x000e48b5

000de5c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   de5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de5c8:	460d      	mov	r5, r1
   de5ca:	4617      	mov	r7, r2
    write('"');
   de5cc:	2122      	movs	r1, #34	; 0x22
                printf("u%04x", (unsigned)c);
   de5ce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; de670 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   de5d2:	4604      	mov	r4, r0
    const char* const end = str + size;
   de5d4:	442f      	add	r7, r5
    write('"');
   de5d6:	f7ff fcf3 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   de5da:	4629      	mov	r1, r5
    while (s != end) {
   de5dc:	42bd      	cmp	r5, r7
   de5de:	462a      	mov	r2, r5
   de5e0:	d038      	beq.n	de654 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   de5e2:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   de5e6:	2e22      	cmp	r6, #34	; 0x22
   de5e8:	d003      	beq.n	de5f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   de5ea:	2e5c      	cmp	r6, #92	; 0x5c
   de5ec:	d001      	beq.n	de5f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   de5ee:	2e1f      	cmp	r6, #31
   de5f0:	d8f4      	bhi.n	de5dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   de5f2:	6823      	ldr	r3, [r4, #0]
   de5f4:	1a52      	subs	r2, r2, r1
   de5f6:	689b      	ldr	r3, [r3, #8]
   de5f8:	4620      	mov	r0, r4
   de5fa:	4798      	blx	r3
            write('\\');
   de5fc:	215c      	movs	r1, #92	; 0x5c
   de5fe:	4620      	mov	r0, r4
   de600:	f7ff fcde 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   de604:	2e0d      	cmp	r6, #13
   de606:	d80a      	bhi.n	de61e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   de608:	2e07      	cmp	r6, #7
   de60a:	d91c      	bls.n	de646 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   de60c:	f1a6 0308 	sub.w	r3, r6, #8
   de610:	2b05      	cmp	r3, #5
   de612:	d818      	bhi.n	de646 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   de614:	e8df f003 	tbb	[pc, r3]
   de618:	17110f0d 	.word	0x17110f0d
   de61c:	1513      	.short	0x1513
   de61e:	2e22      	cmp	r6, #34	; 0x22
   de620:	d001      	beq.n	de626 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   de622:	2e5c      	cmp	r6, #92	; 0x5c
   de624:	d10f      	bne.n	de646 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   de626:	4631      	mov	r1, r6
                write('b');
   de628:	4620      	mov	r0, r4
   de62a:	f7ff fcc9 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   de62e:	4629      	mov	r1, r5
    while (s != end) {
   de630:	e7d4      	b.n	de5dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   de632:	2162      	movs	r1, #98	; 0x62
   de634:	e7f8      	b.n	de628 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   de636:	2174      	movs	r1, #116	; 0x74
   de638:	e7f6      	b.n	de628 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   de63a:	216e      	movs	r1, #110	; 0x6e
   de63c:	e7f4      	b.n	de628 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   de63e:	2166      	movs	r1, #102	; 0x66
   de640:	e7f2      	b.n	de628 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   de642:	2172      	movs	r1, #114	; 0x72
   de644:	e7f0      	b.n	de628 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   de646:	6823      	ldr	r3, [r4, #0]
   de648:	4632      	mov	r2, r6
   de64a:	68db      	ldr	r3, [r3, #12]
   de64c:	4641      	mov	r1, r8
   de64e:	4620      	mov	r0, r4
   de650:	4798      	blx	r3
                break;
   de652:	e7ec      	b.n	de62e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
   de654:	428d      	cmp	r5, r1
   de656:	d004      	beq.n	de662 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   de658:	6823      	ldr	r3, [r4, #0]
   de65a:	1a6a      	subs	r2, r5, r1
   de65c:	689b      	ldr	r3, [r3, #8]
   de65e:	4620      	mov	r0, r4
   de660:	4798      	blx	r3
    write('"');
   de662:	2122      	movs	r1, #34	; 0x22
   de664:	4620      	mov	r0, r4
   de666:	f7ff fcab 	bl	ddfc0 <_ZN5spark10JSONWriter5writeEc>
}
   de66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de66e:	bf00      	nop
   de670:	000e48ba 	.word	0x000e48ba

000de674 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   de674:	b513      	push	{r0, r1, r4, lr}
   de676:	4604      	mov	r4, r0
   de678:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   de67c:	f7ff fefe 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   de680:	4620      	mov	r0, r4
   de682:	e9dd 2100 	ldrd	r2, r1, [sp]
   de686:	f7ff ff9d 	bl	de5c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   de68a:	2302      	movs	r3, #2
}
   de68c:	4620      	mov	r0, r4
    state_ = VALUE;
   de68e:	7123      	strb	r3, [r4, #4]
}
   de690:	b002      	add	sp, #8
   de692:	bd10      	pop	{r4, pc}

000de694 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   de694:	b513      	push	{r0, r1, r4, lr}
   de696:	4604      	mov	r4, r0
   de698:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   de69c:	f7ff feee 	bl	de47c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   de6a0:	4620      	mov	r0, r4
   de6a2:	e9dd 2100 	ldrd	r2, r1, [sp]
   de6a6:	f7ff ff8d 	bl	de5c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   de6aa:	2301      	movs	r3, #1
}
   de6ac:	4620      	mov	r0, r4
    state_ = NEXT;
   de6ae:	7123      	strb	r3, [r4, #4]
}
   de6b0:	b002      	add	sp, #8
   de6b2:	bd10      	pop	{r4, pc}

000de6b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   de6b4:	b538      	push	{r3, r4, r5, lr}
   de6b6:	2300      	movs	r3, #0
   de6b8:	4604      	mov	r4, r0
   de6ba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   de6bc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   de6be:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   de6c0:	f7f5 fce9 	bl	d4096 <_Znwj>
   de6c4:	b128      	cbz	r0, de6d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   de6c6:	2301      	movs	r3, #1
   de6c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   de6cc:	4b02      	ldr	r3, [pc, #8]	; (de6d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   de6ce:	6003      	str	r3, [r0, #0]
   de6d0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   de6d2:	6020      	str	r0, [r4, #0]
	}
   de6d4:	4620      	mov	r0, r4
   de6d6:	bd38      	pop	{r3, r4, r5, pc}
   de6d8:	000e48c8 	.word	0x000e48c8

000de6dc <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   de6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   de6de:	4604      	mov	r4, r0
   de6e0:	b087      	sub	sp, #28
   de6e2:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   de6e4:	200c      	movs	r0, #12
   de6e6:	4927      	ldr	r1, [pc, #156]	; (de784 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   de6e8:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   de6ea:	f002 f83f 	bl	e076c <_ZnwjRKSt9nothrow_t>
   de6ee:	4601      	mov	r1, r0
   de6f0:	b118      	cbz	r0, de6fa <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   de6f2:	2300      	movs	r3, #0
   de6f4:	e9c0 3300 	strd	r3, r3, [r0]
   de6f8:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   de6fa:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   de6fc:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   de6fe:	f7ff ffd9 	bl	de6b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   de702:	9a02      	ldr	r2, [sp, #8]
   de704:	b942      	cbnz	r2, de718 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   de706:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   de70a:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   de70c:	a803      	add	r0, sp, #12
   de70e:	f7f5 ff97 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   de712:	4620      	mov	r0, r4
   de714:	b007      	add	sp, #28
   de716:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   de718:	2300      	movs	r3, #0
   de71a:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   de71c:	4629      	mov	r1, r5
   de71e:	ab01      	add	r3, sp, #4
   de720:	4630      	mov	r0, r6
   de722:	f7ff fd35 	bl	de190 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   de726:	b918      	cbnz	r0, de730 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   de728:	e9c4 0000 	strd	r0, r0, [r4]
   de72c:	60a0      	str	r0, [r4, #8]
}
   de72e:	e7ed      	b.n	de70c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   de730:	4914      	ldr	r1, [pc, #80]	; (de784 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   de732:	9f02      	ldr	r7, [sp, #8]
   de734:	1c68      	adds	r0, r5, #1
   de736:	f002 f81b 	bl	e0770 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   de73a:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   de73c:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   de73e:	6858      	ldr	r0, [r3, #4]
   de740:	2800      	cmp	r0, #0
   de742:	d0f1      	beq.n	de728 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   de744:	462a      	mov	r2, r5
   de746:	4631      	mov	r1, r6
   de748:	f002 ff8e 	bl	e1668 <memcpy>
   de74c:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   de74e:	9901      	ldr	r1, [sp, #4]
   de750:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   de752:	2201      	movs	r2, #1
   de754:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   de756:	685a      	ldr	r2, [r3, #4]
   de758:	f7ff fdec 	bl	de334 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   de75c:	2800      	cmp	r0, #0
   de75e:	d0e3      	beq.n	de728 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   de760:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   de762:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   de764:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   de766:	9b03      	ldr	r3, [sp, #12]
   de768:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   de76a:	b113      	cbz	r3, de772 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   de76c:	685a      	ldr	r2, [r3, #4]
   de76e:	3201      	adds	r2, #1
   de770:	605a      	str	r2, [r3, #4]
   de772:	aa04      	add	r2, sp, #16
   de774:	4620      	mov	r0, r4
   de776:	f7ff fc46 	bl	de006 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   de77a:	a805      	add	r0, sp, #20
   de77c:	f7f5 ff60 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   de780:	e7c4      	b.n	de70c <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   de782:	bf00      	nop
   de784:	000e4ac8 	.word	0x000e4ac8

000de788 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   de788:	6880      	ldr	r0, [r0, #8]
   de78a:	6803      	ldr	r3, [r0, #0]
   de78c:	68db      	ldr	r3, [r3, #12]
   de78e:	4718      	bx	r3

000de790 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   de790:	4770      	bx	lr

000de792 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   de792:	4608      	mov	r0, r1
   de794:	b111      	cbz	r1, de79c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   de796:	680b      	ldr	r3, [r1, #0]
   de798:	685b      	ldr	r3, [r3, #4]
   de79a:	4718      	bx	r3
}
   de79c:	4770      	bx	lr

000de79e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   de79e:	4770      	bx	lr

000de7a0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   de7a0:	4770      	bx	lr

000de7a2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   de7a2:	4770      	bx	lr

000de7a4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   de7a4:	4770      	bx	lr

000de7a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   de7a6:	b538      	push	{r3, r4, r5, lr}
   de7a8:	4604      	mov	r4, r0
   de7aa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   de7ac:	6800      	ldr	r0, [r0, #0]
   de7ae:	212e      	movs	r1, #46	; 0x2e
   de7b0:	f002 ffd4 	bl	e175c <strchrnul>
    size = s - category;
   de7b4:	6823      	ldr	r3, [r4, #0]
   de7b6:	1ac3      	subs	r3, r0, r3
   de7b8:	602b      	str	r3, [r5, #0]
    if (size) {
   de7ba:	b123      	cbz	r3, de7c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   de7bc:	7803      	ldrb	r3, [r0, #0]
   de7be:	b103      	cbz	r3, de7c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   de7c0:	3001      	adds	r0, #1
   de7c2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   de7c4:	6020      	str	r0, [r4, #0]
}
   de7c6:	4618      	mov	r0, r3
   de7c8:	bd38      	pop	{r3, r4, r5, pc}

000de7ca <_ZN5spark16JSONStreamWriterD0Ev>:
   de7ca:	b510      	push	{r4, lr}
   de7cc:	210c      	movs	r1, #12
   de7ce:	4604      	mov	r4, r0
   de7d0:	f001 ff96 	bl	e0700 <_ZdlPvj>
   de7d4:	4620      	mov	r0, r4
   de7d6:	bd10      	pop	{r4, pc}

000de7d8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   de7d8:	b510      	push	{r4, lr}
   de7da:	2104      	movs	r1, #4
   de7dc:	4604      	mov	r4, r0
   de7de:	f001 ff8f 	bl	e0700 <_ZdlPvj>
   de7e2:	4620      	mov	r0, r4
   de7e4:	bd10      	pop	{r4, pc}

000de7e6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   de7e6:	b510      	push	{r4, lr}
   de7e8:	2104      	movs	r1, #4
   de7ea:	4604      	mov	r4, r0
   de7ec:	f001 ff88 	bl	e0700 <_ZdlPvj>
   de7f0:	4620      	mov	r0, r4
   de7f2:	bd10      	pop	{r4, pc}

000de7f4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   de7f4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   de7f6:	f002 ffbb 	bl	e1770 <strcmp>
}
   de7fa:	fab0 f080 	clz	r0, r0
   de7fe:	0940      	lsrs	r0, r0, #5
   de800:	bd08      	pop	{r3, pc}

000de802 <__tcf_1>:
   de802:	4770      	bx	lr

000de804 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   de804:	b510      	push	{r4, lr}
   de806:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   de808:	f001 fd94 	bl	e0334 <_Z16_fetch_usbserialv>
   de80c:	4284      	cmp	r4, r0
   de80e:	d010      	beq.n	de832 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   de810:	f001 fd08 	bl	e0224 <_Z22__fetch_global_Serial1v>
   de814:	4284      	cmp	r4, r0
   de816:	d105      	bne.n	de824 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   de818:	f001 fd04 	bl	e0224 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   de81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   de820:	f001 bcfd 	b.w	e021e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   de824:	b12c      	cbz	r4, de832 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   de826:	6823      	ldr	r3, [r4, #0]
   de828:	4620      	mov	r0, r4
   de82a:	685b      	ldr	r3, [r3, #4]
}
   de82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   de830:	4718      	bx	r3
   de832:	bd10      	pop	{r4, pc}

000de834 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   de834:	b513      	push	{r0, r1, r4, lr}
   de836:	4604      	mov	r4, r0
    return value(val, strlen(val));
   de838:	4608      	mov	r0, r1
   de83a:	9101      	str	r1, [sp, #4]
   de83c:	f002 ffc7 	bl	e17ce <strlen>
   de840:	9901      	ldr	r1, [sp, #4]
   de842:	4602      	mov	r2, r0
   de844:	4620      	mov	r0, r4
}
   de846:	b002      	add	sp, #8
   de848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   de84c:	f7ff bf22 	b.w	de694 <_ZN5spark10JSONWriter5valueEPKcj>

000de850 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   de850:	b513      	push	{r0, r1, r4, lr}
   de852:	4604      	mov	r4, r0
    write(str, strlen(str));
   de854:	4608      	mov	r0, r1
   de856:	9101      	str	r1, [sp, #4]
   de858:	f002 ffb9 	bl	e17ce <strlen>
   de85c:	6823      	ldr	r3, [r4, #0]
   de85e:	9901      	ldr	r1, [sp, #4]
   de860:	68db      	ldr	r3, [r3, #12]
   de862:	4602      	mov	r2, r0
   de864:	4620      	mov	r0, r4
}
   de866:	b002      	add	sp, #8
   de868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   de86c:	4718      	bx	r3

000de86e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   de86e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   de870:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   de872:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   de876:	68db      	ldr	r3, [r3, #12]
   de878:	2201      	movs	r2, #1
   de87a:	f10d 0107 	add.w	r1, sp, #7
   de87e:	4798      	blx	r3
}
   de880:	b003      	add	sp, #12
   de882:	f85d fb04 	ldr.w	pc, [sp], #4

000de886 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   de886:	b40e      	push	{r1, r2, r3}
   de888:	b503      	push	{r0, r1, lr}
   de88a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   de88c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   de88e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   de892:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   de894:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   de896:	f001 f8a5 	bl	df9e4 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   de89a:	b002      	add	sp, #8
   de89c:	f85d eb04 	ldr.w	lr, [sp], #4
   de8a0:	b003      	add	sp, #12
   de8a2:	4770      	bx	lr

000de8a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   de8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   de8a8:	e9d0 9500 	ldrd	r9, r5, [r0]
   de8ac:	f04f 0814 	mov.w	r8, #20
   de8b0:	fb08 f505 	mul.w	r5, r8, r5
   de8b4:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   de8b6:	10ab      	asrs	r3, r5, #2
   de8b8:	4d18      	ldr	r5, [pc, #96]	; (de91c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   de8ba:	4617      	mov	r7, r2
   de8bc:	435d      	muls	r5, r3
   de8be:	464c      	mov	r4, r9
      while (__len > 0)
   de8c0:	2d00      	cmp	r5, #0
   de8c2:	dd23      	ble.n	de90c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	  _DistanceType __half = __len >> 1;
   de8c4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   de8c6:	fb08 f006 	mul.w	r0, r8, r6
   de8ca:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   de8ce:	463a      	mov	r2, r7
   de8d0:	f8ba b004 	ldrh.w	fp, [sl, #4]
   de8d4:	5820      	ldr	r0, [r4, r0]
   de8d6:	9101      	str	r1, [sp, #4]
   de8d8:	455f      	cmp	r7, fp
   de8da:	bf28      	it	cs
   de8dc:	465a      	movcs	r2, fp
   de8de:	f002 ff7e 	bl	e17de <strncmp>
                if (cmp == 0) {
   de8e2:	9901      	ldr	r1, [sp, #4]
   de8e4:	2301      	movs	r3, #1
   de8e6:	b978      	cbnz	r0, de908 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   de8e8:	455f      	cmp	r7, fp
   de8ea:	d103      	bne.n	de8f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   de8ec:	9a00      	ldr	r2, [sp, #0]
   de8ee:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   de8f0:	4635      	mov	r5, r6
   de8f2:	e7e5      	b.n	de8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   de8f4:	bf8c      	ite	hi
   de8f6:	2001      	movhi	r0, #1
   de8f8:	2000      	movls	r0, #0
	  if (__comp(__middle, __val))
   de8fa:	2800      	cmp	r0, #0
   de8fc:	d0f8      	beq.n	de8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	      __len = __len - __half - 1;
   de8fe:	1bae      	subs	r6, r5, r6
	      ++__first;
   de900:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   de904:	3e01      	subs	r6, #1
   de906:	e7f3      	b.n	de8f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   de908:	0fc0      	lsrs	r0, r0, #31
   de90a:	e7f6      	b.n	de8fa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   de90c:	eba4 0409 	sub.w	r4, r4, r9
}
   de910:	4802      	ldr	r0, [pc, #8]	; (de91c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   de912:	10a4      	asrs	r4, r4, #2
   de914:	4360      	muls	r0, r4
   de916:	b003      	add	sp, #12
   de918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de91c:	cccccccd 	.word	0xcccccccd

000de920 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   de920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   de922:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   de924:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   de926:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   de928:	b30b      	cbz	r3, de96e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   de92a:	b301      	cbz	r1, de96e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   de92c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   de92e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   de932:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   de934:	a903      	add	r1, sp, #12
   de936:	a801      	add	r0, sp, #4
   de938:	f7ff ff35 	bl	de7a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   de93c:	4601      	mov	r1, r0
   de93e:	b1b0      	cbz	r0, de96e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   de940:	f10d 030b 	add.w	r3, sp, #11
   de944:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   de946:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   de94a:	4620      	mov	r0, r4
   de94c:	f7ff ffaa 	bl	de8a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   de950:	f89d 300b 	ldrb.w	r3, [sp, #11]
   de954:	b15b      	cbz	r3, de96e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   de956:	6824      	ldr	r4, [r4, #0]
   de958:	2314      	movs	r3, #20
   de95a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   de95e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   de962:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   de966:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   de968:	bfa8      	it	ge
   de96a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   de96c:	e7e2      	b.n	de934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   de96e:	4630      	mov	r0, r6
   de970:	b004      	add	sp, #16
   de972:	bd70      	pop	{r4, r5, r6, pc}

000de974 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   de974:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   de976:	4c09      	ldr	r4, [pc, #36]	; (de99c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   de978:	7823      	ldrb	r3, [r4, #0]
   de97a:	f3bf 8f5b 	dmb	ish
   de97e:	07db      	lsls	r3, r3, #31
   de980:	d409      	bmi.n	de996 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   de982:	4620      	mov	r0, r4
   de984:	f7f5 fb9a 	bl	d40bc <__cxa_guard_acquire>
   de988:	b128      	cbz	r0, de996 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   de98a:	4620      	mov	r0, r4
   de98c:	f7f5 fb9b 	bl	d40c6 <__cxa_guard_release>
   de990:	4803      	ldr	r0, [pc, #12]	; (de9a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   de992:	f002 fe51 	bl	e1638 <atexit>
}
   de996:	4803      	ldr	r0, [pc, #12]	; (de9a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   de998:	bd10      	pop	{r4, pc}
   de99a:	bf00      	nop
   de99c:	2003e558 	.word	0x2003e558
   de9a0:	000de79f 	.word	0x000de79f
   de9a4:	2003e1c8 	.word	0x2003e1c8

000de9a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   de9a8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   de9aa:	4c09      	ldr	r4, [pc, #36]	; (de9d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   de9ac:	7823      	ldrb	r3, [r4, #0]
   de9ae:	f3bf 8f5b 	dmb	ish
   de9b2:	07db      	lsls	r3, r3, #31
   de9b4:	d409      	bmi.n	de9ca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   de9b6:	4620      	mov	r0, r4
   de9b8:	f7f5 fb80 	bl	d40bc <__cxa_guard_acquire>
   de9bc:	b128      	cbz	r0, de9ca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   de9be:	4620      	mov	r0, r4
   de9c0:	f7f5 fb81 	bl	d40c6 <__cxa_guard_release>
   de9c4:	4803      	ldr	r0, [pc, #12]	; (de9d4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   de9c6:	f002 fe37 	bl	e1638 <atexit>
    return &factory;
}
   de9ca:	4803      	ldr	r0, [pc, #12]	; (de9d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   de9cc:	bd10      	pop	{r4, pc}
   de9ce:	bf00      	nop
   de9d0:	2003e55c 	.word	0x2003e55c
   de9d4:	000de803 	.word	0x000de803
   de9d8:	2003e1cc 	.word	0x2003e1cc

000de9dc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   de9dc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   de9de:	2500      	movs	r5, #0
   de9e0:	4604      	mov	r4, r0
   de9e2:	e9c0 5500 	strd	r5, r5, [r0]
   de9e6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   de9ea:	6085      	str	r5, [r0, #8]
   de9ec:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   de9ee:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   de9f2:	f7fd ffd1 	bl	dc998 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   de9f6:	f7ff ffbd 	bl	de974 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   de9fa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   de9fc:	f7ff ffd4 	bl	de9a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   dea00:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   dea02:	6220      	str	r0, [r4, #32]
}
   dea04:	4620      	mov	r0, r4
   dea06:	bd38      	pop	{r3, r4, r5, pc}

000dea08 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   dea08:	b510      	push	{r4, lr}
    static LogManager mgr;
   dea0a:	4c0a      	ldr	r4, [pc, #40]	; (dea34 <_ZN5spark10LogManager8instanceEv+0x2c>)
   dea0c:	7823      	ldrb	r3, [r4, #0]
   dea0e:	f3bf 8f5b 	dmb	ish
   dea12:	07db      	lsls	r3, r3, #31
   dea14:	d40c      	bmi.n	dea30 <_ZN5spark10LogManager8instanceEv+0x28>
   dea16:	4620      	mov	r0, r4
   dea18:	f7f5 fb50 	bl	d40bc <__cxa_guard_acquire>
   dea1c:	b140      	cbz	r0, dea30 <_ZN5spark10LogManager8instanceEv+0x28>
   dea1e:	4806      	ldr	r0, [pc, #24]	; (dea38 <_ZN5spark10LogManager8instanceEv+0x30>)
   dea20:	f7ff ffdc 	bl	de9dc <_ZN5spark10LogManagerC1Ev>
   dea24:	4620      	mov	r0, r4
   dea26:	f7f5 fb4e 	bl	d40c6 <__cxa_guard_release>
   dea2a:	4804      	ldr	r0, [pc, #16]	; (dea3c <_ZN5spark10LogManager8instanceEv+0x34>)
   dea2c:	f002 fe04 	bl	e1638 <atexit>
    return &mgr;
}
   dea30:	4801      	ldr	r0, [pc, #4]	; (dea38 <_ZN5spark10LogManager8instanceEv+0x30>)
   dea32:	bd10      	pop	{r4, pc}
   dea34:	2003e554 	.word	0x2003e554
   dea38:	2003e564 	.word	0x2003e564
   dea3c:	000dee71 	.word	0x000dee71

000dea40 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   dea40:	4a02      	ldr	r2, [pc, #8]	; (dea4c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   dea42:	4903      	ldr	r1, [pc, #12]	; (dea50 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   dea44:	4803      	ldr	r0, [pc, #12]	; (dea54 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   dea46:	2300      	movs	r3, #0
   dea48:	f7fe ba0e 	b.w	dce68 <log_set_callbacks>
   dea4c:	000decf9 	.word	0x000decf9
   dea50:	000dec85 	.word	0x000dec85
   dea54:	000dec05 	.word	0x000dec05

000dea58 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   dea58:	2300      	movs	r3, #0
   dea5a:	461a      	mov	r2, r3
   dea5c:	4619      	mov	r1, r3
   dea5e:	4618      	mov	r0, r3
   dea60:	f7fe ba02 	b.w	dce68 <log_set_callbacks>

000dea64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   dea64:	b570      	push	{r4, r5, r6, lr}
   dea66:	b08a      	sub	sp, #40	; 0x28
   dea68:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   dea6a:	4601      	mov	r1, r0
   dea6c:	a804      	add	r0, sp, #16
   dea6e:	f7f9 f90b 	bl	d7c88 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   dea72:	4e14      	ldr	r6, [pc, #80]	; (deac4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   dea74:	a804      	add	r0, sp, #16
   dea76:	f7ff fcb5 	bl	de3e4 <_ZN5spark18JSONObjectIterator4nextEv>
   dea7a:	b1e8      	cbz	r0, deab8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   dea7c:	a904      	add	r1, sp, #16
   dea7e:	4668      	mov	r0, sp
   dea80:	f7f9 f913 	bl	d7caa <_ZNK5spark18JSONObjectIterator4nameEv>
   dea84:	9802      	ldr	r0, [sp, #8]
   dea86:	4631      	mov	r1, r6
   dea88:	f7ff feb4 	bl	de7f4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   dea8c:	4604      	mov	r4, r0
   dea8e:	b110      	cbz	r0, dea96 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   dea90:	1e2c      	subs	r4, r5, #0
   dea92:	bf18      	it	ne
   dea94:	2401      	movne	r4, #1
   dea96:	a801      	add	r0, sp, #4
   dea98:	f7f5 fdd2 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dea9c:	2c00      	cmp	r4, #0
   dea9e:	d0e9      	beq.n	dea74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   deaa0:	a904      	add	r1, sp, #16
   deaa2:	4668      	mov	r0, sp
   deaa4:	f7f9 f912 	bl	d7ccc <_ZNK5spark18JSONObjectIterator5valueEv>
   deaa8:	4668      	mov	r0, sp
   deaaa:	f7ff fb21 	bl	de0f0 <_ZNK5spark9JSONValue5toIntEv>
   deaae:	6028      	str	r0, [r5, #0]
   deab0:	a801      	add	r0, sp, #4
   deab2:	f7f5 fdc5 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   deab6:	e7dd      	b.n	dea74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   deab8:	a805      	add	r0, sp, #20
   deaba:	f7f5 fdc1 	bl	d4640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   deabe:	b00a      	add	sp, #40	; 0x28
   deac0:	bd70      	pop	{r4, r5, r6, pc}
   deac2:	bf00      	nop
   deac4:	000e48f4 	.word	0x000e48f4

000deac8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   deac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   deaca:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   deacc:	4620      	mov	r0, r4
   deace:	4912      	ldr	r1, [pc, #72]	; (deb18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   dead0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   dead2:	f002 fe4d 	bl	e1770 <strcmp>
   dead6:	b948      	cbnz	r0, deaec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   dead8:	f001 fc2c 	bl	e0334 <_Z16_fetch_usbserialv>
   deadc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   deae0:	f001 fc18 	bl	e0314 <_ZN9USBSerial5beginEl>
        return &Serial;
   deae4:	f001 fc26 	bl	e0334 <_Z16_fetch_usbserialv>
}
   deae8:	b003      	add	sp, #12
   deaea:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   deaec:	490b      	ldr	r1, [pc, #44]	; (deb1c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   deaee:	4620      	mov	r0, r4
   deaf0:	f002 fe3e 	bl	e1770 <strcmp>
   deaf4:	b970      	cbnz	r0, deb14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   deaf6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   deafa:	a901      	add	r1, sp, #4
   deafc:	4628      	mov	r0, r5
        int baud = 9600;
   deafe:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   deb00:	f7ff ffb0 	bl	dea64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   deb04:	f001 fb8e 	bl	e0224 <_Z22__fetch_global_Serial1v>
   deb08:	9901      	ldr	r1, [sp, #4]
   deb0a:	f001 fb85 	bl	e0218 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   deb0e:	f001 fb89 	bl	e0224 <_Z22__fetch_global_Serial1v>
   deb12:	e7e9      	b.n	deae8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   deb14:	2000      	movs	r0, #0
   deb16:	e7e7      	b.n	deae8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   deb18:	000e48f9 	.word	0x000e48f9
   deb1c:	000e4900 	.word	0x000e4900

000deb20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb20:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   deb22:	e9d0 5300 	ldrd	r5, r3, [r0]
   deb26:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb28:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   deb2a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   deb2e:	42ae      	cmp	r6, r5
   deb30:	d005      	beq.n	deb3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   deb32:	f105 0008 	add.w	r0, r5, #8
   deb36:	f7ff fff3 	bl	deb20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   deb3a:	3514      	adds	r5, #20
   deb3c:	e7f7      	b.n	deb2e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   deb3e:	6820      	ldr	r0, [r4, #0]
   deb40:	f7fe fac2 	bl	dd0c8 <free>
}
   deb44:	4620      	mov	r0, r4
   deb46:	bd70      	pop	{r4, r5, r6, pc}

000deb48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   deb4a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   deb4e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   deb50:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   deb54:	42ae      	cmp	r6, r5
   deb56:	d004      	beq.n	deb62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   deb58:	4628      	mov	r0, r5
   deb5a:	f000 ff85 	bl	dfa68 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   deb5e:	3510      	adds	r5, #16
   deb60:	e7f8      	b.n	deb54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   deb62:	6820      	ldr	r0, [r4, #0]
   deb64:	f7fe fab0 	bl	dd0c8 <free>
}
   deb68:	4620      	mov	r0, r4
   deb6a:	bd70      	pop	{r4, r5, r6, pc}

000deb6c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   deb6c:	b510      	push	{r4, lr}
   deb6e:	4604      	mov	r4, r0
   deb70:	300c      	adds	r0, #12
   deb72:	f7ff ffd5 	bl	deb20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   deb76:	4620      	mov	r0, r4
   deb78:	f7ff ffe6 	bl	deb48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   deb7c:	4620      	mov	r0, r4
   deb7e:	bd10      	pop	{r4, pc}

000deb80 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   deb80:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   deb82:	4b04      	ldr	r3, [pc, #16]	; (deb94 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   deb84:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   deb86:	f840 3b04 	str.w	r3, [r0], #4
   deb8a:	f7ff ffef 	bl	deb6c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   deb8e:	4620      	mov	r0, r4
   deb90:	bd10      	pop	{r4, pc}
   deb92:	bf00      	nop
   deb94:	000e3930 	.word	0x000e3930

000deb98 <_ZN5spark16StreamLogHandlerD0Ev>:
   deb98:	b510      	push	{r4, lr}
   deb9a:	4604      	mov	r4, r0
   deb9c:	f7ff fff0 	bl	deb80 <_ZN5spark16StreamLogHandlerD1Ev>
   deba0:	4620      	mov	r0, r4
   deba2:	2124      	movs	r1, #36	; 0x24
   deba4:	f001 fdac 	bl	e0700 <_ZdlPvj>
   deba8:	4620      	mov	r0, r4
   debaa:	bd10      	pop	{r4, pc}

000debac <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   debac:	b510      	push	{r4, lr}
   debae:	4b03      	ldr	r3, [pc, #12]	; (debbc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   debb0:	6003      	str	r3, [r0, #0]
   debb2:	4604      	mov	r4, r0
   debb4:	f7ff ffe4 	bl	deb80 <_ZN5spark16StreamLogHandlerD1Ev>
   debb8:	4620      	mov	r0, r4
   debba:	bd10      	pop	{r4, pc}
   debbc:	000e4994 	.word	0x000e4994

000debc0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   debc0:	b510      	push	{r4, lr}
   debc2:	4604      	mov	r4, r0
   debc4:	f7ff fff2 	bl	debac <_ZN5spark20JSONStreamLogHandlerD1Ev>
   debc8:	4620      	mov	r0, r4
   debca:	2124      	movs	r1, #36	; 0x24
   debcc:	f001 fd98 	bl	e0700 <_ZdlPvj>
   debd0:	4620      	mov	r0, r4
   debd2:	bd10      	pop	{r4, pc}

000debd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   debd4:	2200      	movs	r2, #0
   debd6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   debda:	b510      	push	{r4, lr}
        capacity_(0) {
   debdc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   debde:	680c      	ldr	r4, [r1, #0]
   debe0:	6004      	str	r4, [r0, #0]
   debe2:	684c      	ldr	r4, [r1, #4]
   debe4:	6044      	str	r4, [r0, #4]
   debe6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   debe8:	600a      	str	r2, [r1, #0]
   debea:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   debec:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   debee:	608a      	str	r2, [r1, #8]
}
   debf0:	bd10      	pop	{r4, pc}

000debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   debf2:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   debf4:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   debf6:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   debf8:	6818      	ldr	r0, [r3, #0]
   debfa:	f7fd fee5 	bl	dc9c8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   debfe:	4620      	mov	r0, r4
   dec00:	bd10      	pop	{r4, pc}
	...

000dec04 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   dec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dec08:	b087      	sub	sp, #28
   dec0a:	4680      	mov	r8, r0
   dec0c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   dec0e:	4b1c      	ldr	r3, [pc, #112]	; (dec80 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   dec10:	685b      	ldr	r3, [r3, #4]
   dec12:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dec16:	4689      	mov	r9, r1
   dec18:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   dec1a:	b96b      	cbnz	r3, dec38 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   dec1c:	f7ff fef4 	bl	dea08 <_ZN5spark10LogManager8instanceEv>
   dec20:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   dec22:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   dec26:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   dec28:	9305      	str	r3, [sp, #20]
   dec2a:	f7fd fec5 	bl	dc9b8 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   dec2e:	7b23      	ldrb	r3, [r4, #12]
   dec30:	b12b      	cbz	r3, dec3e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   dec32:	a805      	add	r0, sp, #20
   dec34:	f7ff ffdd 	bl	debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   dec38:	b007      	add	sp, #28
   dec3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   dec3e:	2301      	movs	r3, #1
   dec40:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   dec42:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   dec46:	fa5f f989 	uxtb.w	r9, r9
   dec4a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   dec4e:	45aa      	cmp	sl, r5
   dec50:	d012      	beq.n	dec78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   dec52:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   dec56:	4631      	mov	r1, r6
   dec58:	1d38      	adds	r0, r7, #4
   dec5a:	f7ff fe61 	bl	de920 <_ZNK5spark6detail9LogFilter5levelEPKc>
   dec5e:	4581      	cmp	r9, r0
   dec60:	d3f5      	bcc.n	dec4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   dec62:	683b      	ldr	r3, [r7, #0]
   dec64:	9a03      	ldr	r2, [sp, #12]
   dec66:	9200      	str	r2, [sp, #0]
   dec68:	f8d3 b008 	ldr.w	fp, [r3, #8]
   dec6c:	464a      	mov	r2, r9
   dec6e:	4633      	mov	r3, r6
   dec70:	4641      	mov	r1, r8
   dec72:	4638      	mov	r0, r7
   dec74:	47d8      	blx	fp
   dec76:	e7ea      	b.n	dec4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   dec78:	2300      	movs	r3, #0
   dec7a:	7323      	strb	r3, [r4, #12]
   dec7c:	e7d9      	b.n	dec32 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   dec7e:	bf00      	nop
   dec80:	e000ed00 	.word	0xe000ed00

000dec84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   dec84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dec88:	469b      	mov	fp, r3
   dec8a:	4b1a      	ldr	r3, [pc, #104]	; (decf4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   dec8c:	685b      	ldr	r3, [r3, #4]
   dec8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   dec92:	4680      	mov	r8, r0
   dec94:	4689      	mov	r9, r1
   dec96:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   dec98:	b96b      	cbnz	r3, decb6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   dec9a:	f7ff feb5 	bl	dea08 <_ZN5spark10LogManager8instanceEv>
   dec9e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   deca0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   deca4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   deca6:	9301      	str	r3, [sp, #4]
   deca8:	f7fd fe86 	bl	dc9b8 <os_mutex_recursive_lock>
        if (that->isActive()) {
   decac:	7b23      	ldrb	r3, [r4, #12]
   decae:	b12b      	cbz	r3, decbc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   decb0:	a801      	add	r0, sp, #4
   decb2:	f7ff ff9e 	bl	debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   decb6:	b003      	add	sp, #12
   decb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   decbc:	2301      	movs	r3, #1
   decbe:	7323      	strb	r3, [r4, #12]
   decc0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   decc4:	b2f6      	uxtb	r6, r6
   decc6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   decca:	4555      	cmp	r5, sl
   deccc:	d00e      	beq.n	decec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   decce:	f855 7b04 	ldr.w	r7, [r5], #4
   decd2:	4659      	mov	r1, fp
   decd4:	1d38      	adds	r0, r7, #4
   decd6:	f7ff fe23 	bl	de920 <_ZNK5spark6detail9LogFilter5levelEPKc>
   decda:	4286      	cmp	r6, r0
   decdc:	d3f5      	bcc.n	decca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   decde:	683b      	ldr	r3, [r7, #0]
   dece0:	464a      	mov	r2, r9
   dece2:	68db      	ldr	r3, [r3, #12]
   dece4:	4641      	mov	r1, r8
   dece6:	4638      	mov	r0, r7
   dece8:	4798      	blx	r3
   decea:	e7ee      	b.n	decca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   decec:	2300      	movs	r3, #0
   decee:	7323      	strb	r3, [r4, #12]
   decf0:	e7de      	b.n	decb0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   decf2:	bf00      	nop
   decf4:	e000ed00 	.word	0xe000ed00

000decf8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   decf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   decfc:	4b16      	ldr	r3, [pc, #88]	; (ded58 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   decfe:	685b      	ldr	r3, [r3, #4]
   ded00:	f3c3 0308 	ubfx	r3, r3, #0, #9
   ded04:	4605      	mov	r5, r0
   ded06:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   ded08:	bb1b      	cbnz	r3, ded52 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   ded0a:	f7ff fe7d 	bl	dea08 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   ded0e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   ded12:	4604      	mov	r4, r0
   ded14:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ded16:	9301      	str	r3, [sp, #4]
   ded18:	f7fd fe4e 	bl	dc9b8 <os_mutex_recursive_lock>
   ded1c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   ded20:	2446      	movs	r4, #70	; 0x46
   ded22:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   ded26:	45b0      	cmp	r8, r6
   ded28:	d109      	bne.n	ded3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   ded2a:	a801      	add	r0, sp, #4
   ded2c:	f7ff ff61 	bl	debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   ded30:	42a5      	cmp	r5, r4
   ded32:	bfb4      	ite	lt
   ded34:	2000      	movlt	r0, #0
   ded36:	2001      	movge	r0, #1
}
   ded38:	b002      	add	sp, #8
   ded3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   ded3e:	f856 0b04 	ldr.w	r0, [r6], #4
   ded42:	4639      	mov	r1, r7
   ded44:	3004      	adds	r0, #4
   ded46:	f7ff fdeb 	bl	de920 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   ded4a:	4284      	cmp	r4, r0
   ded4c:	bfa8      	it	ge
   ded4e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   ded50:	e7e9      	b.n	ded26 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   ded52:	2000      	movs	r0, #0
   ded54:	e7f0      	b.n	ded38 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   ded56:	bf00      	nop
   ded58:	e000ed00 	.word	0xe000ed00

000ded5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ded5c:	b570      	push	{r4, r5, r6, lr}
   ded5e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ded60:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ded64:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ded66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ded6a:	4282      	cmp	r2, r0
   ded6c:	d007      	beq.n	ded7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   ded6e:	4601      	mov	r1, r0
            if (*p == value) {
   ded70:	681d      	ldr	r5, [r3, #0]
   ded72:	f851 6b04 	ldr.w	r6, [r1], #4
   ded76:	42ae      	cmp	r6, r5
   ded78:	d003      	beq.n	ded82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   ded7a:	4608      	mov	r0, r1
   ded7c:	e7f5      	b.n	ded6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ded7e:	2000      	movs	r0, #0
}
   ded80:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   ded82:	1a52      	subs	r2, r2, r1
   ded84:	f002 fc7e 	bl	e1684 <memmove>
    --size_;
   ded88:	6863      	ldr	r3, [r4, #4]
   ded8a:	3b01      	subs	r3, #1
   ded8c:	6063      	str	r3, [r4, #4]
    return true;
   ded8e:	2001      	movs	r0, #1
   ded90:	e7f6      	b.n	ded80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000ded92 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ded92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ded94:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ded98:	4604      	mov	r4, r0
   ded9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ded9c:	9101      	str	r1, [sp, #4]
   ded9e:	9303      	str	r3, [sp, #12]
   deda0:	f7fd fe0a 	bl	dc9b8 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   deda4:	a901      	add	r1, sp, #4
   deda6:	4620      	mov	r0, r4
   deda8:	f7ff ffd8 	bl	ded5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   dedac:	b118      	cbz	r0, dedb6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   dedae:	6863      	ldr	r3, [r4, #4]
   dedb0:	b90b      	cbnz	r3, dedb6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   dedb2:	f7ff fe51 	bl	dea58 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dedb6:	a803      	add	r0, sp, #12
   dedb8:	f7ff ff1b 	bl	debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   dedbc:	b004      	add	sp, #16
   dedbe:	bd10      	pop	{r4, pc}

000dedc0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   dedc0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   dedc2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   dedc6:	2318      	movs	r3, #24
   dedc8:	4604      	mov	r4, r0
   dedca:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   dedce:	42ae      	cmp	r6, r5
   dedd0:	d015      	beq.n	dedfe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   dedd2:	f105 0110 	add.w	r1, r5, #16
   dedd6:	4620      	mov	r0, r4
   dedd8:	f7ff ffc0 	bl	ded5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   deddc:	6863      	ldr	r3, [r4, #4]
   dedde:	b90b      	cbnz	r3, dede4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   dede0:	f7ff fe3a 	bl	dea58 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   dede4:	69e0      	ldr	r0, [r4, #28]
   dede6:	6929      	ldr	r1, [r5, #16]
   dede8:	6803      	ldr	r3, [r0, #0]
   dedea:	68db      	ldr	r3, [r3, #12]
   dedec:	4798      	blx	r3
        if (h.stream) {
   dedee:	6969      	ldr	r1, [r5, #20]
   dedf0:	b119      	cbz	r1, dedfa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   dedf2:	6a20      	ldr	r0, [r4, #32]
   dedf4:	6803      	ldr	r3, [r0, #0]
   dedf6:	68db      	ldr	r3, [r3, #12]
   dedf8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   dedfa:	3518      	adds	r5, #24
   dedfc:	e7e7      	b.n	dedce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   dedfe:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dee02:	2618      	movs	r6, #24
   dee04:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dee08:	42ae      	cmp	r6, r5
   dee0a:	d004      	beq.n	dee16 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   dee0c:	4628      	mov	r0, r5
   dee0e:	f000 fe2b 	bl	dfa68 <_ZN6StringD1Ev>
   dee12:	3518      	adds	r5, #24
   dee14:	e7f8      	b.n	dee08 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   dee16:	2300      	movs	r3, #0
   dee18:	6163      	str	r3, [r4, #20]
}
   dee1a:	bd70      	pop	{r4, r5, r6, pc}

000dee1c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   dee1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dee1e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   dee20:	f7ff fe1a 	bl	dea58 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   dee24:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dee28:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dee2a:	9301      	str	r3, [sp, #4]
   dee2c:	f7fd fdc4 	bl	dc9b8 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   dee30:	4620      	mov	r0, r4
   dee32:	f7ff ffc5 	bl	dedc0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   dee36:	a801      	add	r0, sp, #4
   dee38:	f7ff fedb 	bl	debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   dee3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   dee3e:	b108      	cbz	r0, dee44 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   dee40:	f7fd fdb2 	bl	dc9a8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   dee44:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   dee48:	2618      	movs	r6, #24
   dee4a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   dee4e:	42ae      	cmp	r6, r5
   dee50:	d004      	beq.n	dee5c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   dee52:	4628      	mov	r0, r5
   dee54:	f000 fe08 	bl	dfa68 <_ZN6StringD1Ev>
   dee58:	3518      	adds	r5, #24
   dee5a:	e7f8      	b.n	dee4e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   dee5c:	6920      	ldr	r0, [r4, #16]
   dee5e:	f7fe f933 	bl	dd0c8 <free>
   dee62:	6820      	ldr	r0, [r4, #0]
   dee64:	f7fe f930 	bl	dd0c8 <free>
}
   dee68:	4620      	mov	r0, r4
   dee6a:	b002      	add	sp, #8
   dee6c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dee70 <__tcf_2>:
    static LogManager mgr;
   dee70:	4801      	ldr	r0, [pc, #4]	; (dee78 <__tcf_2+0x8>)
   dee72:	f7ff bfd3 	b.w	dee1c <_ZN5spark10LogManagerD1Ev>
   dee76:	bf00      	nop
   dee78:	2003e564 	.word	0x2003e564

000dee7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   dee7c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   dee7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dee80:	4606      	mov	r6, r0
   dee82:	460c      	mov	r4, r1
   dee84:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   dee86:	d927      	bls.n	deed8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   dee88:	4290      	cmp	r0, r2
   dee8a:	d226      	bcs.n	deeda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   dee8c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   dee90:	1a6c      	subs	r4, r5, r1
   dee92:	f1a1 0714 	sub.w	r7, r1, #20
   dee96:	4404      	add	r4, r0
        capacity_(0) {
   dee98:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   dee9a:	42af      	cmp	r7, r5
   dee9c:	d03d      	beq.n	def1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   dee9e:	b1a4      	cbz	r4, deeca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   deea0:	682b      	ldr	r3, [r5, #0]
   deea2:	6023      	str	r3, [r4, #0]
   deea4:	88ab      	ldrh	r3, [r5, #4]
   deea6:	80a3      	strh	r3, [r4, #4]
   deea8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   deeac:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   deeae:	e9c4 6602 	strd	r6, r6, [r4, #8]
   deeb2:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   deeb4:	68ab      	ldr	r3, [r5, #8]
   deeb6:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   deeb8:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   deeba:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   deebc:	68ea      	ldr	r2, [r5, #12]
   deebe:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   deec0:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   deec2:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   deec4:	692a      	ldr	r2, [r5, #16]
   deec6:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   deec8:	612b      	str	r3, [r5, #16]
   deeca:	f105 0008 	add.w	r0, r5, #8
   deece:	f7ff fe27 	bl	deb20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   deed2:	3d14      	subs	r5, #20
   deed4:	3c14      	subs	r4, #20
   deed6:	e7e0      	b.n	dee9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   deed8:	d01f      	beq.n	def1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   deeda:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   deedc:	42ac      	cmp	r4, r5
   deede:	d01c      	beq.n	def1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   deee0:	b1a6      	cbz	r6, def0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   deee2:	6823      	ldr	r3, [r4, #0]
   deee4:	6033      	str	r3, [r6, #0]
   deee6:	88a3      	ldrh	r3, [r4, #4]
   deee8:	80b3      	strh	r3, [r6, #4]
   deeea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   deeee:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   deef0:	e9c6 7702 	strd	r7, r7, [r6, #8]
   deef4:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   deef6:	68a3      	ldr	r3, [r4, #8]
   deef8:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   deefa:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   deefc:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   deefe:	68e2      	ldr	r2, [r4, #12]
   def00:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   def02:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   def04:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   def06:	6922      	ldr	r2, [r4, #16]
   def08:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   def0a:	6123      	str	r3, [r4, #16]
   def0c:	f104 0008 	add.w	r0, r4, #8
   def10:	f7ff fe06 	bl	deb20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   def14:	3414      	adds	r4, #20
   def16:	3614      	adds	r6, #20
   def18:	e7e0      	b.n	deedc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   def1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000def1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   def1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   def1e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   def22:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   def24:	4604      	mov	r4, r0
   def26:	460e      	mov	r6, r1
   def28:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   def2a:	db0d      	blt.n	def48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   def2c:	3501      	adds	r5, #1
        if (n > 0) {
   def2e:	2d00      	cmp	r5, #0
   def30:	6800      	ldr	r0, [r0, #0]
   def32:	dd04      	ble.n	def3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   def34:	00a9      	lsls	r1, r5, #2
   def36:	f7fe f8cf 	bl	dd0d8 <realloc>
            if (!d) {
   def3a:	b918      	cbnz	r0, def44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   def3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   def3e:	f7fe f8c3 	bl	dd0c8 <free>
        T* d = nullptr;
   def42:	2000      	movs	r0, #0
        data_ = d;
   def44:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   def46:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   def48:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   def4a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   def4c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   def50:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   def52:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   def56:	1d08      	adds	r0, r1, #4
   def58:	f002 fb94 	bl	e1684 <memmove>
    new(p) T(std::move(value));
   def5c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   def60:	6863      	ldr	r3, [r4, #4]
   def62:	3301      	adds	r3, #1
   def64:	6063      	str	r3, [r4, #4]
    return true;
   def66:	2001      	movs	r0, #1
   def68:	e7e8      	b.n	def3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000def6a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   def6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   def6c:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   def70:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   def72:	6a40      	ldr	r0, [r0, #36]	; 0x24
   def74:	9301      	str	r3, [sp, #4]
   def76:	460d      	mov	r5, r1
   def78:	f7fd fd1e 	bl	dc9b8 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   def7c:	e9d4 3100 	ldrd	r3, r1, [r4]
   def80:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   def84:	4283      	cmp	r3, r0
   def86:	461a      	mov	r2, r3
   def88:	d00b      	beq.n	defa2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   def8a:	6812      	ldr	r2, [r2, #0]
   def8c:	42aa      	cmp	r2, r5
   def8e:	f103 0304 	add.w	r3, r3, #4
   def92:	d1f7      	bne.n	def84 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   def94:	a801      	add	r0, sp, #4
   def96:	f7ff fe2c 	bl	debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   def9a:	2500      	movs	r5, #0
}
   def9c:	4628      	mov	r0, r5
   def9e:	b003      	add	sp, #12
   defa0:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   defa2:	462a      	mov	r2, r5
   defa4:	4620      	mov	r0, r4
   defa6:	f7ff ffb9 	bl	def1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   defaa:	4605      	mov	r5, r0
   defac:	2800      	cmp	r0, #0
   defae:	d0f1      	beq.n	def94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   defb0:	6863      	ldr	r3, [r4, #4]
   defb2:	2b01      	cmp	r3, #1
   defb4:	d101      	bne.n	defba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   defb6:	f7ff fd43 	bl	dea40 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   defba:	a801      	add	r0, sp, #4
   defbc:	f7ff fe19 	bl	debf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   defc0:	e7ec      	b.n	def9c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000defc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   defc2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   defc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   defc6:	4604      	mov	r4, r0
   defc8:	460d      	mov	r5, r1
   defca:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   defcc:	d914      	bls.n	deff8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   defce:	4290      	cmp	r0, r2
   defd0:	d213      	bcs.n	deffa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   defd2:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   defd6:	1a75      	subs	r5, r6, r1
   defd8:	f1a1 0710 	sub.w	r7, r1, #16
   defdc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   defde:	42b7      	cmp	r7, r6
   defe0:	d018      	beq.n	df014 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   defe2:	b11c      	cbz	r4, defec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   defe4:	4631      	mov	r1, r6
   defe6:	4620      	mov	r0, r4
   defe8:	f000 fdba 	bl	dfb60 <_ZN6StringC1EOS_>
                end->~T();
   defec:	4630      	mov	r0, r6
   defee:	f000 fd3b 	bl	dfa68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   deff2:	3e10      	subs	r6, #16
   deff4:	3c10      	subs	r4, #16
   deff6:	e7f2      	b.n	defde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   deff8:	d00c      	beq.n	df014 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   deffa:	42b5      	cmp	r5, r6
   deffc:	d00a      	beq.n	df014 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   deffe:	b11c      	cbz	r4, df008 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   df000:	4629      	mov	r1, r5
   df002:	4620      	mov	r0, r4
   df004:	f000 fdac 	bl	dfb60 <_ZN6StringC1EOS_>
                p->~T();
   df008:	4628      	mov	r0, r5
   df00a:	f000 fd2d 	bl	dfa68 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   df00e:	3510      	adds	r5, #16
   df010:	3410      	adds	r4, #16
   df012:	e7f2      	b.n	deffa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   df014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df016 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   df016:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   df018:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   df01a:	4605      	mov	r5, r0
        if (n > 0) {
   df01c:	dd11      	ble.n	df042 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   df01e:	0130      	lsls	r0, r6, #4
   df020:	f7fe f84a 	bl	dd0b8 <malloc>
            if (!d) {
   df024:	4604      	mov	r4, r0
   df026:	b158      	cbz	r0, df040 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   df028:	e9d5 1200 	ldrd	r1, r2, [r5]
   df02c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   df030:	f7ff ffc7 	bl	defc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   df034:	6828      	ldr	r0, [r5, #0]
   df036:	f7fe f847 	bl	dd0c8 <free>
        data_ = d;
   df03a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   df03c:	60ae      	str	r6, [r5, #8]
        return true;
   df03e:	2001      	movs	r0, #1
    }
   df040:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   df042:	2400      	movs	r4, #0
   df044:	e7f6      	b.n	df034 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000df046 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   df046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df04a:	4691      	mov	r9, r2
   df04c:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   df04e:	2300      	movs	r3, #0
   df050:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   df052:	f8d9 1004 	ldr.w	r1, [r9, #4]
   df056:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   df058:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   df05a:	4299      	cmp	r1, r3
        capacity_(0) {
   df05c:	e9c0 3300 	strd	r3, r3, [r0]
   df060:	e9c0 3302 	strd	r3, r3, [r0, #8]
   df064:	e9c0 3304 	strd	r3, r3, [r0, #16]
   df068:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   df06c:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   df06e:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   df070:	dc23      	bgt.n	df0ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   df072:	e9d9 5700 	ldrd	r5, r7, [r9]
   df076:	2314      	movs	r3, #20
   df078:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   df07c:	42af      	cmp	r7, r5
   df07e:	d03b      	beq.n	df0f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   df080:	4629      	mov	r1, r5
   df082:	a80d      	add	r0, sp, #52	; 0x34
   df084:	f000 fd6c 	bl	dfb60 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   df088:	a90d      	add	r1, sp, #52	; 0x34
   df08a:	a811      	add	r0, sp, #68	; 0x44
   df08c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   df08e:	f000 fd67 	bl	dfb60 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   df092:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   df096:	4299      	cmp	r1, r3
   df098:	da1b      	bge.n	df0d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   df09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   df09c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   df09e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   df0a2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   df0a6:	4631      	mov	r1, r6
   df0a8:	f106 0010 	add.w	r0, r6, #16
   df0ac:	f7ff ff89 	bl	defc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   df0b0:	b9ee      	cbnz	r6, df0ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   df0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   df0b4:	3301      	adds	r3, #1
   df0b6:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   df0b8:	e011      	b.n	df0de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   df0ba:	a80a      	add	r0, sp, #40	; 0x28
   df0bc:	f7ff ffab 	bl	df016 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   df0c0:	2800      	cmp	r0, #0
   df0c2:	d1d6      	bne.n	df072 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   df0c4:	a80a      	add	r0, sp, #40	; 0x28
   df0c6:	f7ff fd3f 	bl	deb48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   df0ca:	4620      	mov	r0, r4
   df0cc:	b017      	add	sp, #92	; 0x5c
   df0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   df0d2:	3101      	adds	r1, #1
   df0d4:	a80a      	add	r0, sp, #40	; 0x28
   df0d6:	f7ff ff9e 	bl	df016 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   df0da:	2800      	cmp	r0, #0
   df0dc:	d1dd      	bne.n	df09a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   df0de:	a811      	add	r0, sp, #68	; 0x44
   df0e0:	f000 fcc2 	bl	dfa68 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   df0e4:	a80d      	add	r0, sp, #52	; 0x34
   df0e6:	f000 fcbf 	bl	dfa68 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   df0ea:	3514      	adds	r5, #20
   df0ec:	e7c6      	b.n	df07c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   df0ee:	a911      	add	r1, sp, #68	; 0x44
   df0f0:	4630      	mov	r0, r6
   df0f2:	f000 fd35 	bl	dfb60 <_ZN6StringC1EOS_>
   df0f6:	e7dc      	b.n	df0b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   df0f8:	2600      	movs	r6, #0
   df0fa:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   df0fe:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   df100:	4637      	mov	r7, r6
   df102:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   df106:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   df10a:	429e      	cmp	r6, r3
   df10c:	f280 8097 	bge.w	df23e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   df110:	0133      	lsls	r3, r6, #4
   df112:	58d3      	ldr	r3, [r2, r3]
   df114:	9308      	str	r3, [sp, #32]
        if (!category) {
   df116:	b90b      	cbnz	r3, df11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   df118:	3601      	adds	r6, #1
   df11a:	e7f4      	b.n	df106 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   df11c:	fb0a f306 	mul.w	r3, sl, r6
   df120:	9709      	str	r7, [sp, #36]	; 0x24
   df122:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   df124:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   df126:	a909      	add	r1, sp, #36	; 0x24
   df128:	a808      	add	r0, sp, #32
   df12a:	f7ff fb3c 	bl	de7a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   df12e:	4683      	mov	fp, r0
   df130:	2800      	cmp	r0, #0
   df132:	d0f1      	beq.n	df118 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   df134:	4601      	mov	r1, r0
   df136:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   df138:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   df13c:	f10d 031f 	add.w	r3, sp, #31
   df140:	4628      	mov	r0, r5
   df142:	f7ff fbaf 	bl	de8a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df146:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   df14a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df14c:	f1b8 0f00 	cmp.w	r8, #0
   df150:	d166      	bne.n	df220 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   df152:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   df156:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   df15a:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   df15e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   df162:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   df166:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   df16a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   df16e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   df172:	4293      	cmp	r3, r2
   df174:	db1a      	blt.n	df1ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   df176:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   df17a:	f1bb 0f00 	cmp.w	fp, #0
   df17e:	dd4a      	ble.n	df216 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   df180:	fb0a f00b 	mul.w	r0, sl, fp
   df184:	f7fd ff98 	bl	dd0b8 <malloc>
            if (!d) {
   df188:	9004      	str	r0, [sp, #16]
   df18a:	2800      	cmp	r0, #0
   df18c:	d045      	beq.n	df21a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   df18e:	e9d5 1200 	ldrd	r1, r2, [r5]
   df192:	fb0a 1202 	mla	r2, sl, r2, r1
   df196:	f7ff fe71 	bl	dee7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   df19a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   df19c:	6828      	ldr	r0, [r5, #0]
   df19e:	9304      	str	r3, [sp, #16]
   df1a0:	f7fd ff92 	bl	dd0c8 <free>
        data_ = d;
   df1a4:	9b04      	ldr	r3, [sp, #16]
   df1a6:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   df1a8:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   df1ac:	9b01      	ldr	r3, [sp, #4]
   df1ae:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   df1b2:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   df1b4:	fb0a f303 	mul.w	r3, sl, r3
   df1b8:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   df1bc:	f101 0014 	add.w	r0, r1, #20
   df1c0:	fb0a b202 	mla	r2, sl, r2, fp
   df1c4:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   df1c6:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   df1c8:	f7ff fe58 	bl	dee7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   df1cc:	9904      	ldr	r1, [sp, #16]
   df1ce:	b1a9      	cbz	r1, df1fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   df1d0:	9b05      	ldr	r3, [sp, #20]
   df1d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   df1d4:	f84b 2003 	str.w	r2, [fp, r3]
   df1d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   df1dc:	808b      	strh	r3, [r1, #4]
   df1de:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   df1e2:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   df1e4:	e9c1 7702 	strd	r7, r7, [r1, #8]
   df1e8:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   df1ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   df1ec:	608b      	str	r3, [r1, #8]
   df1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   df1f0:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   df1f2:	60cb      	str	r3, [r1, #12]
   df1f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   df1f6:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   df1f8:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   df1fa:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   df1fc:	686b      	ldr	r3, [r5, #4]
   df1fe:	3301      	adds	r3, #1
   df200:	606b      	str	r3, [r5, #4]
   df202:	a813      	add	r0, sp, #76	; 0x4c
   df204:	f7ff fc8c 	bl	deb20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df208:	f1b8 0f00 	cmp.w	r8, #0
   df20c:	d008      	beq.n	df220 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   df20e:	a80d      	add	r0, sp, #52	; 0x34
   df210:	f7ff fc86 	bl	deb20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   df214:	e756      	b.n	df0c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   df216:	4643      	mov	r3, r8
   df218:	e7c0      	b.n	df19c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   df21a:	f04f 0801 	mov.w	r8, #1
   df21e:	e7f0      	b.n	df202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   df220:	9b01      	ldr	r3, [sp, #4]
   df222:	682d      	ldr	r5, [r5, #0]
   df224:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   df228:	9b08      	ldr	r3, [sp, #32]
   df22a:	781b      	ldrb	r3, [r3, #0]
   df22c:	b92b      	cbnz	r3, df23a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   df22e:	f8d9 3000 	ldr.w	r3, [r9]
   df232:	9a02      	ldr	r2, [sp, #8]
   df234:	4413      	add	r3, r2
   df236:	7c1b      	ldrb	r3, [r3, #16]
   df238:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   df23a:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   df23c:	e773      	b.n	df126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df23e:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   df240:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df242:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   df244:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df246:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   df248:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   df24a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   df24c:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df24e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   df250:	60a2      	str	r2, [r4, #8]
   df252:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   df254:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df256:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   df258:	60e2      	str	r2, [r4, #12]
   df25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   df25c:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df25e:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   df260:	6122      	str	r2, [r4, #16]
   df262:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   df264:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   df266:	9b03      	ldr	r3, [sp, #12]
   df268:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   df26a:	6162      	str	r2, [r4, #20]
   df26c:	7623      	strb	r3, [r4, #24]
   df26e:	e7ce      	b.n	df20e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000df270 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   df270:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   df272:	4605      	mov	r5, r0
   df274:	4b09      	ldr	r3, [pc, #36]	; (df29c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   df276:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   df27a:	4604      	mov	r4, r0
   df27c:	460e      	mov	r6, r1
        filter_(level, filters) {
   df27e:	a801      	add	r0, sp, #4
   df280:	4611      	mov	r1, r2
   df282:	f7f4 ffd6 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   df286:	aa01      	add	r2, sp, #4
   df288:	4631      	mov	r1, r6
   df28a:	4628      	mov	r0, r5
   df28c:	f7ff fedb 	bl	df046 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   df290:	a801      	add	r0, sp, #4
   df292:	f7f4 ff8d 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   df296:	4620      	mov	r0, r4
   df298:	b004      	add	sp, #16
   df29a:	bd70      	pop	{r4, r5, r6, pc}
   df29c:	000e3930 	.word	0x000e3930

000df2a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   df2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   df2a2:	460f      	mov	r7, r1
   df2a4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   df2a6:	4926      	ldr	r1, [pc, #152]	; (df340 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   df2a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   df2aa:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   df2ac:	4616      	mov	r6, r2
   df2ae:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   df2b0:	f002 fa5e 	bl	e1770 <strcmp>
   df2b4:	bb00      	cbnz	r0, df2f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   df2b6:	b1e4      	cbz	r4, df2f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   df2b8:	4629      	mov	r1, r5
   df2ba:	4668      	mov	r0, sp
   df2bc:	f7ff fc8a 	bl	debd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   df2c0:	4920      	ldr	r1, [pc, #128]	; (df344 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   df2c2:	2024      	movs	r0, #36	; 0x24
   df2c4:	f001 fa52 	bl	e076c <_ZnwjRKSt9nothrow_t>
   df2c8:	4605      	mov	r5, r0
   df2ca:	b170      	cbz	r0, df2ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   df2cc:	4669      	mov	r1, sp
   df2ce:	a803      	add	r0, sp, #12
   df2d0:	f7f4 ffaf 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   df2d4:	aa03      	add	r2, sp, #12
   df2d6:	4631      	mov	r1, r6
   df2d8:	4628      	mov	r0, r5
   df2da:	f7ff ffc9 	bl	df270 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   df2de:	a803      	add	r0, sp, #12
   df2e0:	f7f4 ff66 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   df2e4:	4b18      	ldr	r3, [pc, #96]	; (df348 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   df2e6:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   df2e8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   df2ea:	4668      	mov	r0, sp
   df2ec:	f7f4 ff60 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   df2f0:	462c      	mov	r4, r5
}
   df2f2:	4620      	mov	r0, r4
   df2f4:	b007      	add	sp, #28
   df2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   df2f8:	4914      	ldr	r1, [pc, #80]	; (df34c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   df2fa:	4638      	mov	r0, r7
   df2fc:	f002 fa38 	bl	e1770 <strcmp>
   df300:	b9e0      	cbnz	r0, df33c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   df302:	2c00      	cmp	r4, #0
   df304:	d0f5      	beq.n	df2f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   df306:	4629      	mov	r1, r5
   df308:	4668      	mov	r0, sp
   df30a:	f7ff fc63 	bl	debd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   df30e:	490d      	ldr	r1, [pc, #52]	; (df344 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   df310:	2024      	movs	r0, #36	; 0x24
   df312:	f001 fa2b 	bl	e076c <_ZnwjRKSt9nothrow_t>
   df316:	4605      	mov	r5, r0
   df318:	2800      	cmp	r0, #0
   df31a:	d0e6      	beq.n	df2ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   df31c:	4669      	mov	r1, sp
   df31e:	a803      	add	r0, sp, #12
   df320:	f7f4 ff87 	bl	d4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   df324:	aa03      	add	r2, sp, #12
   df326:	4631      	mov	r1, r6
   df328:	4628      	mov	r0, r5
   df32a:	f7ff ffa1 	bl	df270 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   df32e:	a803      	add	r0, sp, #12
   df330:	f7f4 ff3e 	bl	d41b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   df334:	4b06      	ldr	r3, [pc, #24]	; (df350 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   df336:	602b      	str	r3, [r5, #0]
   df338:	622c      	str	r4, [r5, #32]
}
   df33a:	e7d6      	b.n	df2ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   df33c:	2400      	movs	r4, #0
   df33e:	e7d8      	b.n	df2f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   df340:	000e4908 	.word	0x000e4908
   df344:	000e4ac8 	.word	0x000e4ac8
   df348:	000e4994 	.word	0x000e4994
   df34c:	000e490c 	.word	0x000e490c
   df350:	000e497c 	.word	0x000e497c

000df354 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   df354:	4b01      	ldr	r3, [pc, #4]	; (df35c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   df356:	4a02      	ldr	r2, [pc, #8]	; (df360 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   df358:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   df35a:	4770      	bx	lr
   df35c:	2003e560 	.word	0x2003e560
   df360:	000e491d 	.word	0x000e491d

000df364 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   df368:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   df36a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df36e:	4604      	mov	r4, r0
   df370:	460e      	mov	r6, r1
   df372:	4617      	mov	r7, r2
   df374:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   df376:	f000 ffdd 	bl	e0334 <_Z16_fetch_usbserialv>
   df37a:	4581      	cmp	r9, r0
   df37c:	d04c      	beq.n	df418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   df37e:	792b      	ldrb	r3, [r5, #4]
   df380:	0719      	lsls	r1, r3, #28
   df382:	d504      	bpl.n	df38e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   df384:	696a      	ldr	r2, [r5, #20]
   df386:	4954      	ldr	r1, [pc, #336]	; (df4d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   df388:	4620      	mov	r0, r4
   df38a:	f7ff fa7c 	bl	de886 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   df38e:	f1b8 0f00 	cmp.w	r8, #0
   df392:	d00d      	beq.n	df3b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   df394:	215b      	movs	r1, #91	; 0x5b
   df396:	4620      	mov	r0, r4
   df398:	f7ff fa69 	bl	de86e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   df39c:	4641      	mov	r1, r8
   df39e:	4620      	mov	r0, r4
   df3a0:	f7ff fa56 	bl	de850 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   df3a4:	6823      	ldr	r3, [r4, #0]
   df3a6:	494d      	ldr	r1, [pc, #308]	; (df4dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   df3a8:	68db      	ldr	r3, [r3, #12]
   df3aa:	2202      	movs	r2, #2
   df3ac:	4620      	mov	r0, r4
   df3ae:	4798      	blx	r3
    if (attr.has_file) {
   df3b0:	792b      	ldrb	r3, [r5, #4]
   df3b2:	07da      	lsls	r2, r3, #31
   df3b4:	d523      	bpl.n	df3fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   df3b6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   df3ba:	212f      	movs	r1, #47	; 0x2f
   df3bc:	4640      	mov	r0, r8
   df3be:	f002 fa33 	bl	e1828 <strrchr>
    if (s1) {
   df3c2:	b108      	cbz	r0, df3c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   df3c4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   df3c8:	4641      	mov	r1, r8
   df3ca:	4620      	mov	r0, r4
   df3cc:	f7ff fa40 	bl	de850 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   df3d0:	792b      	ldrb	r3, [r5, #4]
   df3d2:	079b      	lsls	r3, r3, #30
   df3d4:	d508      	bpl.n	df3e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   df3d6:	213a      	movs	r1, #58	; 0x3a
   df3d8:	4620      	mov	r0, r4
   df3da:	f7ff fa48 	bl	de86e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   df3de:	68ea      	ldr	r2, [r5, #12]
   df3e0:	493f      	ldr	r1, [pc, #252]	; (df4e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   df3e2:	4620      	mov	r0, r4
   df3e4:	f7ff fa4f 	bl	de886 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   df3e8:	792a      	ldrb	r2, [r5, #4]
   df3ea:	6823      	ldr	r3, [r4, #0]
   df3ec:	f012 0f04 	tst.w	r2, #4
   df3f0:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   df3f2:	bf14      	ite	ne
   df3f4:	493b      	ldrne	r1, [pc, #236]	; (df4e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   df3f6:	493c      	ldreq	r1, [pc, #240]	; (df4e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   df3f8:	2202      	movs	r2, #2
            write(": ", 2);
   df3fa:	4620      	mov	r0, r4
   df3fc:	4798      	blx	r3
    if (attr.has_function) {
   df3fe:	792b      	ldrb	r3, [r5, #4]
   df400:	0758      	lsls	r0, r3, #29
   df402:	d51d      	bpl.n	df440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   df404:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   df406:	460b      	mov	r3, r1
   df408:	461a      	mov	r2, r3
    for (; *s; ++s) {
   df40a:	f813 0b01 	ldrb.w	r0, [r3], #1
   df40e:	b160      	cbz	r0, df42a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   df410:	2820      	cmp	r0, #32
   df412:	d108      	bne.n	df426 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   df414:	4619      	mov	r1, r3
   df416:	e7f7      	b.n	df408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   df418:	4834      	ldr	r0, [pc, #208]	; (df4ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   df41a:	f000 f966 	bl	df6ea <_ZN5spark12NetworkClass9listeningEv>
   df41e:	2800      	cmp	r0, #0
   df420:	d0ad      	beq.n	df37e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   df422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   df426:	2828      	cmp	r0, #40	; 0x28
   df428:	d1ee      	bne.n	df408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   df42a:	6823      	ldr	r3, [r4, #0]
   df42c:	1a52      	subs	r2, r2, r1
   df42e:	68db      	ldr	r3, [r3, #12]
   df430:	4620      	mov	r0, r4
   df432:	4798      	blx	r3
        write("(): ", 4);
   df434:	6823      	ldr	r3, [r4, #0]
   df436:	492e      	ldr	r1, [pc, #184]	; (df4f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   df438:	68db      	ldr	r3, [r3, #12]
   df43a:	2204      	movs	r2, #4
   df43c:	4620      	mov	r0, r4
   df43e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   df440:	2100      	movs	r1, #0
   df442:	4638      	mov	r0, r7
   df444:	f7fd fd08 	bl	dce58 <log_level_name>
   df448:	4601      	mov	r1, r0
    write(s);
   df44a:	4620      	mov	r0, r4
   df44c:	f7ff fa00 	bl	de850 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   df450:	6823      	ldr	r3, [r4, #0]
   df452:	4925      	ldr	r1, [pc, #148]	; (df4e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   df454:	68db      	ldr	r3, [r3, #12]
   df456:	2202      	movs	r2, #2
   df458:	4620      	mov	r0, r4
   df45a:	4798      	blx	r3
    if (msg) {
   df45c:	b11e      	cbz	r6, df466 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   df45e:	4631      	mov	r1, r6
   df460:	4620      	mov	r0, r4
   df462:	f7ff f9f5 	bl	de850 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   df466:	792b      	ldrb	r3, [r5, #4]
   df468:	f013 0f30 	tst.w	r3, #48	; 0x30
   df46c:	d02c      	beq.n	df4c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   df46e:	6823      	ldr	r3, [r4, #0]
   df470:	4920      	ldr	r1, [pc, #128]	; (df4f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   df472:	68db      	ldr	r3, [r3, #12]
   df474:	2202      	movs	r2, #2
   df476:	4620      	mov	r0, r4
   df478:	4798      	blx	r3
        if (attr.has_code) {
   df47a:	792b      	ldrb	r3, [r5, #4]
   df47c:	06d9      	lsls	r1, r3, #27
   df47e:	d50a      	bpl.n	df496 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   df480:	6823      	ldr	r3, [r4, #0]
   df482:	491d      	ldr	r1, [pc, #116]	; (df4f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   df484:	68db      	ldr	r3, [r3, #12]
   df486:	2207      	movs	r2, #7
   df488:	4620      	mov	r0, r4
   df48a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   df48c:	69aa      	ldr	r2, [r5, #24]
   df48e:	491b      	ldr	r1, [pc, #108]	; (df4fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   df490:	4620      	mov	r0, r4
   df492:	f7ff f9f8 	bl	de886 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   df496:	792b      	ldrb	r3, [r5, #4]
   df498:	069a      	lsls	r2, r3, #26
   df49a:	d511      	bpl.n	df4c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   df49c:	06db      	lsls	r3, r3, #27
   df49e:	d505      	bpl.n	df4ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   df4a0:	6823      	ldr	r3, [r4, #0]
   df4a2:	4910      	ldr	r1, [pc, #64]	; (df4e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   df4a4:	68db      	ldr	r3, [r3, #12]
   df4a6:	2202      	movs	r2, #2
   df4a8:	4620      	mov	r0, r4
   df4aa:	4798      	blx	r3
            write("details = ", 10);
   df4ac:	6823      	ldr	r3, [r4, #0]
   df4ae:	4914      	ldr	r1, [pc, #80]	; (df500 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   df4b0:	68db      	ldr	r3, [r3, #12]
   df4b2:	4620      	mov	r0, r4
   df4b4:	220a      	movs	r2, #10
   df4b6:	4798      	blx	r3
            write(attr.details);
   df4b8:	69e9      	ldr	r1, [r5, #28]
   df4ba:	4620      	mov	r0, r4
   df4bc:	f7ff f9c8 	bl	de850 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   df4c0:	215d      	movs	r1, #93	; 0x5d
   df4c2:	4620      	mov	r0, r4
   df4c4:	f7ff f9d3 	bl	de86e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   df4c8:	6823      	ldr	r3, [r4, #0]
   df4ca:	490e      	ldr	r1, [pc, #56]	; (df504 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   df4cc:	68db      	ldr	r3, [r3, #12]
   df4ce:	4620      	mov	r0, r4
   df4d0:	2202      	movs	r2, #2
}
   df4d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   df4d6:	4718      	bx	r3
   df4d8:	000e4921 	.word	0x000e4921
   df4dc:	000e4928 	.word	0x000e4928
   df4e0:	000e3e83 	.word	0x000e3e83
   df4e4:	000e492b 	.word	0x000e492b
   df4e8:	000e4930 	.word	0x000e4930
   df4ec:	2003e58c 	.word	0x2003e58c
   df4f0:	000e492e 	.word	0x000e492e
   df4f4:	000e4933 	.word	0x000e4933
   df4f8:	000e4936 	.word	0x000e4936
   df4fc:	000e3af7 	.word	0x000e3af7
   df500:	000e493e 	.word	0x000e493e
   df504:	000e44e9 	.word	0x000e44e9

000df508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   df50c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   df50e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   df512:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   df514:	4605      	mov	r5, r0
   df516:	460f      	mov	r7, r1
   df518:	4690      	mov	r8, r2
   df51a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   df51c:	f000 ff0a 	bl	e0334 <_Z16_fetch_usbserialv>
   df520:	4581      	cmp	r9, r0
   df522:	d105      	bne.n	df530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   df524:	4849      	ldr	r0, [pc, #292]	; (df64c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   df526:	f000 f8e0 	bl	df6ea <_ZN5spark12NetworkClass9listeningEv>
   df52a:	2800      	cmp	r0, #0
   df52c:	f040 808a 	bne.w	df644 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   df530:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   df532:	4a47      	ldr	r2, [pc, #284]	; (df650 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   df534:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   df536:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   df53a:	a801      	add	r0, sp, #4
        strm_(stream) {
   df53c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   df53e:	f88d 9008 	strb.w	r9, [sp, #8]
   df542:	f7fe ffb4 	bl	de4ae <_ZN5spark10JSONWriter11beginObjectEv>
   df546:	4649      	mov	r1, r9
   df548:	4640      	mov	r0, r8
   df54a:	f7fd fc85 	bl	dce58 <log_level_name>
    json.name("l", 1).value(s);
   df54e:	4941      	ldr	r1, [pc, #260]	; (df654 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   df550:	4680      	mov	r8, r0
   df552:	2201      	movs	r2, #1
   df554:	a801      	add	r0, sp, #4
   df556:	f7ff f88d 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df55a:	4641      	mov	r1, r8
   df55c:	f7ff f96a 	bl	de834 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   df560:	b13f      	cbz	r7, df572 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   df562:	493d      	ldr	r1, [pc, #244]	; (df658 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   df564:	2201      	movs	r2, #1
   df566:	a801      	add	r0, sp, #4
   df568:	f7ff f884 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df56c:	4639      	mov	r1, r7
   df56e:	f7ff f961 	bl	de834 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   df572:	b13e      	cbz	r6, df584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   df574:	4939      	ldr	r1, [pc, #228]	; (df65c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   df576:	2201      	movs	r2, #1
   df578:	a801      	add	r0, sp, #4
   df57a:	f7ff f87b 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df57e:	4631      	mov	r1, r6
   df580:	f7ff f958 	bl	de834 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   df584:	7923      	ldrb	r3, [r4, #4]
   df586:	07df      	lsls	r7, r3, #31
   df588:	d50e      	bpl.n	df5a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   df58a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   df58c:	212f      	movs	r1, #47	; 0x2f
   df58e:	4630      	mov	r0, r6
   df590:	f002 f94a 	bl	e1828 <strrchr>
    if (s1) {
   df594:	b100      	cbz	r0, df598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   df596:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   df598:	4931      	ldr	r1, [pc, #196]	; (df660 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   df59a:	2201      	movs	r2, #1
   df59c:	a801      	add	r0, sp, #4
   df59e:	f7ff f869 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df5a2:	4631      	mov	r1, r6
   df5a4:	f7ff f946 	bl	de834 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   df5a8:	7923      	ldrb	r3, [r4, #4]
   df5aa:	079e      	lsls	r6, r3, #30
   df5ac:	d507      	bpl.n	df5be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   df5ae:	492d      	ldr	r1, [pc, #180]	; (df664 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   df5b0:	2202      	movs	r2, #2
   df5b2:	a801      	add	r0, sp, #4
   df5b4:	f7ff f85e 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df5b8:	68e1      	ldr	r1, [r4, #12]
   df5ba:	f7fe ff9d 	bl	de4f8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   df5be:	7923      	ldrb	r3, [r4, #4]
   df5c0:	0758      	lsls	r0, r3, #29
   df5c2:	d514      	bpl.n	df5ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   df5c4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   df5c6:	4633      	mov	r3, r6
   df5c8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   df5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   df5ce:	b12a      	cbz	r2, df5dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   df5d0:	2a20      	cmp	r2, #32
   df5d2:	d101      	bne.n	df5d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   df5d4:	461e      	mov	r6, r3
   df5d6:	e7f7      	b.n	df5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   df5d8:	2a28      	cmp	r2, #40	; 0x28
   df5da:	d1f5      	bne.n	df5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   df5dc:	4922      	ldr	r1, [pc, #136]	; (df668 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   df5de:	2202      	movs	r2, #2
   df5e0:	a801      	add	r0, sp, #4
   df5e2:	f7ff f847 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df5e6:	1bba      	subs	r2, r7, r6
   df5e8:	4631      	mov	r1, r6
   df5ea:	f7ff f853 	bl	de694 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   df5ee:	7923      	ldrb	r3, [r4, #4]
   df5f0:	0719      	lsls	r1, r3, #28
   df5f2:	d507      	bpl.n	df604 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   df5f4:	491d      	ldr	r1, [pc, #116]	; (df66c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   df5f6:	2201      	movs	r2, #1
   df5f8:	a801      	add	r0, sp, #4
   df5fa:	f7ff f83b 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df5fe:	6961      	ldr	r1, [r4, #20]
   df600:	f7fe ff8c 	bl	de51c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   df604:	7923      	ldrb	r3, [r4, #4]
   df606:	06da      	lsls	r2, r3, #27
   df608:	d508      	bpl.n	df61c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   df60a:	2204      	movs	r2, #4
   df60c:	4918      	ldr	r1, [pc, #96]	; (df670 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   df60e:	eb0d 0002 	add.w	r0, sp, r2
   df612:	f7ff f82f 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df616:	69a1      	ldr	r1, [r4, #24]
   df618:	f7fe ff6e 	bl	de4f8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   df61c:	7923      	ldrb	r3, [r4, #4]
   df61e:	069b      	lsls	r3, r3, #26
   df620:	d507      	bpl.n	df632 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   df622:	4914      	ldr	r1, [pc, #80]	; (df674 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   df624:	2206      	movs	r2, #6
   df626:	a801      	add	r0, sp, #4
   df628:	f7ff f824 	bl	de674 <_ZN5spark10JSONWriter4nameEPKcj>
   df62c:	69e1      	ldr	r1, [r4, #28]
   df62e:	f7ff f901 	bl	de834 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   df632:	a801      	add	r0, sp, #4
   df634:	f7fe ff19 	bl	de46a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   df638:	6a28      	ldr	r0, [r5, #32]
   df63a:	490f      	ldr	r1, [pc, #60]	; (df678 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   df63c:	6803      	ldr	r3, [r0, #0]
   df63e:	2202      	movs	r2, #2
   df640:	68db      	ldr	r3, [r3, #12]
   df642:	4798      	blx	r3
}
   df644:	b005      	add	sp, #20
   df646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   df64a:	bf00      	nop
   df64c:	2003e58c 	.word	0x2003e58c
   df650:	000e4964 	.word	0x000e4964
   df654:	000e48fe 	.word	0x000e48fe
   df658:	000e41f9 	.word	0x000e41f9
   df65c:	000e39a5 	.word	0x000e39a5
   df660:	000e3d52 	.word	0x000e3d52
   df664:	000e4949 	.word	0x000e4949
   df668:	000e494c 	.word	0x000e494c
   df66c:	000e44d0 	.word	0x000e44d0
   df670:	000e494f 	.word	0x000e494f
   df674:	000e4954 	.word	0x000e4954
   df678:	000e44e9 	.word	0x000e44e9

000df67c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   df67c:	2300      	movs	r3, #0
   df67e:	6840      	ldr	r0, [r0, #4]
   df680:	461a      	mov	r2, r3
   df682:	f7fd bcb9 	b.w	dcff8 <network_connect>

000df686 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   df686:	6840      	ldr	r0, [r0, #4]
   df688:	2200      	movs	r2, #0
   df68a:	2102      	movs	r1, #2
   df68c:	f7fd bcc4 	b.w	dd018 <network_disconnect>

000df690 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   df690:	2200      	movs	r2, #0
   df692:	6840      	ldr	r0, [r0, #4]
   df694:	4611      	mov	r1, r2
   df696:	f7fd bcb7 	b.w	dd008 <network_connecting>

000df69a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   df69a:	2200      	movs	r2, #0
   df69c:	6840      	ldr	r0, [r0, #4]
   df69e:	4611      	mov	r1, r2
   df6a0:	f7fd bcc2 	b.w	dd028 <network_ready>

000df6a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   df6a4:	2300      	movs	r3, #0
   df6a6:	6840      	ldr	r0, [r0, #4]
   df6a8:	461a      	mov	r2, r3
   df6aa:	4619      	mov	r1, r3
   df6ac:	f7fd bcc4 	b.w	dd038 <network_on>

000df6b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   df6b0:	2300      	movs	r3, #0
   df6b2:	6840      	ldr	r0, [r0, #4]
   df6b4:	461a      	mov	r2, r3
   df6b6:	4619      	mov	r1, r3
   df6b8:	f7fd bcc6 	b.w	dd048 <network_off>

000df6bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   df6bc:	6840      	ldr	r0, [r0, #4]
   df6be:	2100      	movs	r1, #0
   df6c0:	f7fd bcea 	b.w	dd098 <network_is_on>

000df6c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   df6c4:	6840      	ldr	r0, [r0, #4]
   df6c6:	2100      	movs	r1, #0
   df6c8:	f7fd bcee 	b.w	dd0a8 <network_is_off>

000df6cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   df6cc:	6840      	ldr	r0, [r0, #4]
   df6ce:	2200      	movs	r2, #0
   df6d0:	f081 0101 	eor.w	r1, r1, #1
   df6d4:	f7fd bcc0 	b.w	dd058 <network_listen>

000df6d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   df6d8:	6840      	ldr	r0, [r0, #4]
   df6da:	2200      	movs	r2, #0
   df6dc:	f7fd bccc 	b.w	dd078 <network_set_listen_timeout>

000df6e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   df6e0:	2200      	movs	r2, #0
   df6e2:	6840      	ldr	r0, [r0, #4]
   df6e4:	4611      	mov	r1, r2
   df6e6:	f7fd bccf 	b.w	dd088 <network_get_listen_timeout>

000df6ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   df6ea:	2200      	movs	r2, #0
   df6ec:	6840      	ldr	r0, [r0, #4]
   df6ee:	4611      	mov	r1, r2
   df6f0:	f7fd bcba 	b.w	dd068 <network_listening>

000df6f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   df6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   df6f8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   df6fa:	b095      	sub	sp, #84	; 0x54
   df6fc:	4616      	mov	r6, r2
   df6fe:	460d      	mov	r5, r1
   df700:	4607      	mov	r7, r0
    IPAddress addr;
   df702:	f7fe fb6f 	bl	ddde4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   df706:	4621      	mov	r1, r4
   df708:	2218      	movs	r2, #24
   df70a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   df70c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   df70e:	f001 ffd3 	bl	e16b8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   df712:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   df714:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   df718:	4621      	mov	r1, r4
   df71a:	466b      	mov	r3, sp
   df71c:	aa0c      	add	r2, sp, #48	; 0x30
   df71e:	4630      	mov	r0, r6
   df720:	f7fd fa5a 	bl	dcbd8 <netdb_getaddrinfo>
    if (!r) {
   df724:	4604      	mov	r4, r0
   df726:	2800      	cmp	r0, #0
   df728:	d146      	bne.n	df7b8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   df72a:	4602      	mov	r2, r0
   df72c:	2101      	movs	r1, #1
   df72e:	6868      	ldr	r0, [r5, #4]
   df730:	f7fd fc7a 	bl	dd028 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   df734:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   df736:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   df738:	4622      	mov	r2, r4
   df73a:	6868      	ldr	r0, [r5, #4]
   df73c:	f7fd fc74 	bl	dd028 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   df740:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   df742:	4681      	mov	r9, r0
        bool ok = false;
   df744:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   df746:	2e00      	cmp	r6, #0
   df748:	d036      	beq.n	df7b8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   df74a:	2900      	cmp	r1, #0
   df74c:	d134      	bne.n	df7b8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   df74e:	6873      	ldr	r3, [r6, #4]
   df750:	2b02      	cmp	r3, #2
   df752:	d003      	beq.n	df75c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   df754:	2b0a      	cmp	r3, #10
   df756:	d00b      	beq.n	df770 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   df758:	69f6      	ldr	r6, [r6, #28]
   df75a:	e7f4      	b.n	df746 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   df75c:	f1b8 0f00 	cmp.w	r8, #0
   df760:	d004      	beq.n	df76c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   df762:	6971      	ldr	r1, [r6, #20]
   df764:	4638      	mov	r0, r7
   df766:	3104      	adds	r1, #4
   df768:	f7fe fb69 	bl	dde3e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   df76c:	4641      	mov	r1, r8
   df76e:	e7f3      	b.n	df758 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   df770:	f1b9 0f00 	cmp.w	r9, #0
   df774:	d101      	bne.n	df77a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   df776:	4649      	mov	r1, r9
   df778:	e7ee      	b.n	df758 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   df77a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   df77c:	2210      	movs	r2, #16
   df77e:	a801      	add	r0, sp, #4
   df780:	f001 ff9a 	bl	e16b8 <memset>
                    a.v = 6;
   df784:	2306      	movs	r3, #6
   df786:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   df78a:	ad01      	add	r5, sp, #4
   df78c:	f104 0308 	add.w	r3, r4, #8
   df790:	3418      	adds	r4, #24
   df792:	6818      	ldr	r0, [r3, #0]
   df794:	6859      	ldr	r1, [r3, #4]
   df796:	462a      	mov	r2, r5
   df798:	c203      	stmia	r2!, {r0, r1}
   df79a:	3308      	adds	r3, #8
   df79c:	42a3      	cmp	r3, r4
   df79e:	4615      	mov	r5, r2
   df7a0:	d1f7      	bne.n	df792 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   df7a2:	a901      	add	r1, sp, #4
   df7a4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   df7a6:	ad07      	add	r5, sp, #28
   df7a8:	f7fe fb2a 	bl	dde00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   df7ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df7ae:	1d3c      	adds	r4, r7, #4
   df7b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df7b2:	682b      	ldr	r3, [r5, #0]
   df7b4:	7023      	strb	r3, [r4, #0]
   df7b6:	e7de      	b.n	df776 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   df7b8:	9800      	ldr	r0, [sp, #0]
   df7ba:	f7fd fa05 	bl	dcbc8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   df7be:	4638      	mov	r0, r7
   df7c0:	b015      	add	sp, #84	; 0x54
   df7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000df7c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   df7c8:	4b02      	ldr	r3, [pc, #8]	; (df7d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   df7ca:	4a03      	ldr	r2, [pc, #12]	; (df7d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   df7cc:	601a      	str	r2, [r3, #0]
   df7ce:	2200      	movs	r2, #0
   df7d0:	605a      	str	r2, [r3, #4]

} // spark
   df7d2:	4770      	bx	lr
   df7d4:	2003e58c 	.word	0x2003e58c
   df7d8:	000e49dc 	.word	0x000e49dc

000df7dc <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   df7dc:	b508      	push	{r3, lr}
            return &Wire1;
   df7de:	f000 ff6b 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   df7e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   df7e6:	f7fe bab1 	b.w	ddd4c <_ZN7TwoWire4lockEv>

000df7ea <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   df7ea:	b510      	push	{r4, lr}
   df7ec:	4604      	mov	r4, r0
    lock_(_lock)
   df7ee:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   df7f0:	b109      	cbz	r1, df7f6 <_ZN4PMICC1Eb+0xc>
        lock();
   df7f2:	f7ff fff3 	bl	df7dc <_ZN4PMIC4lockEv.constprop.0>
}
   df7f6:	4620      	mov	r0, r4
   df7f8:	bd10      	pop	{r4, pc}

000df7fa <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   df7fa:	b508      	push	{r3, lr}
            return &Wire1;
   df7fc:	f000 ff5c 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   df800:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   df804:	f7fe baab 	b.w	ddd5e <_ZN7TwoWire6unlockEv>

000df808 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   df808:	b510      	push	{r4, lr}
    if (lock_) {
   df80a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   df80c:	4604      	mov	r4, r0
    if (lock_) {
   df80e:	b10b      	cbz	r3, df814 <_ZN4PMICD1Ev+0xc>
        unlock();
   df810:	f7ff fff3 	bl	df7fa <_ZN4PMIC6unlockEv>
}
   df814:	4620      	mov	r0, r4
   df816:	bd10      	pop	{r4, pc}

000df818 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   df818:	b510      	push	{r4, lr}
   df81a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   df81c:	6800      	ldr	r0, [r0, #0]
   df81e:	f7ff ffec 	bl	df7fa <_ZN4PMIC6unlockEv>
   df822:	4620      	mov	r0, r4
   df824:	bd10      	pop	{r4, pc}

000df826 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   df826:	b530      	push	{r4, r5, lr}
   df828:	b087      	sub	sp, #28
   df82a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df82c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df82e:	f7ff ffd5 	bl	df7dc <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df832:	236b      	movs	r3, #107	; 0x6b
   df834:	f88d 3008 	strb.w	r3, [sp, #8]
   df838:	2300      	movs	r3, #0
   df83a:	2401      	movs	r4, #1
   df83c:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   df83e:	230a      	movs	r3, #10
   df840:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df842:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   df846:	f000 ff37 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   df84a:	a902      	add	r1, sp, #8
   df84c:	f7fe fa62 	bl	ddd14 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   df850:	f000 ff32 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   df854:	6803      	ldr	r3, [r0, #0]
   df856:	4629      	mov	r1, r5
   df858:	689b      	ldr	r3, [r3, #8]
   df85a:	4798      	blx	r3
            return &Wire1;
   df85c:	f000 ff2c 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   df860:	4621      	mov	r1, r4
   df862:	f7fe fa6f 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   df866:	9403      	str	r4, [sp, #12]
            return &Wire1;
   df868:	f000 ff26 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   df86c:	a902      	add	r1, sp, #8
   df86e:	f7fe fa21 	bl	ddcb4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   df872:	f000 ff21 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   df876:	6803      	ldr	r3, [r0, #0]
   df878:	695b      	ldr	r3, [r3, #20]
   df87a:	4798      	blx	r3
   df87c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   df87e:	a801      	add	r0, sp, #4
   df880:	f7ff ffca 	bl	df818 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df884:	b2e0      	uxtb	r0, r4
   df886:	b007      	add	sp, #28
   df888:	bd30      	pop	{r4, r5, pc}

000df88a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   df88a:	b570      	push	{r4, r5, r6, lr}
   df88c:	b086      	sub	sp, #24
   df88e:	4614      	mov	r4, r2
   df890:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df892:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df894:	f7ff ffa2 	bl	df7dc <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df898:	236b      	movs	r3, #107	; 0x6b
   df89a:	f88d 3008 	strb.w	r3, [sp, #8]
   df89e:	2300      	movs	r3, #0
   df8a0:	9303      	str	r3, [sp, #12]
   df8a2:	2601      	movs	r6, #1
    timeout_ = ms;
   df8a4:	230a      	movs	r3, #10
   df8a6:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   df8a8:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   df8ac:	f000 ff04 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   df8b0:	a902      	add	r1, sp, #8
   df8b2:	f7fe fa2f 	bl	ddd14 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   df8b6:	f000 feff 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   df8ba:	6803      	ldr	r3, [r0, #0]
   df8bc:	4629      	mov	r1, r5
   df8be:	689b      	ldr	r3, [r3, #8]
   df8c0:	4798      	blx	r3
            return &Wire1;
   df8c2:	f000 fef9 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   df8c6:	6803      	ldr	r3, [r0, #0]
   df8c8:	4621      	mov	r1, r4
   df8ca:	689b      	ldr	r3, [r3, #8]
   df8cc:	4798      	blx	r3
            return &Wire1;
   df8ce:	f000 fef3 	bl	e06b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   df8d2:	4631      	mov	r1, r6
   df8d4:	f7fe fa36 	bl	ddd44 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   df8d8:	a801      	add	r0, sp, #4
   df8da:	f7ff ff9d 	bl	df818 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df8de:	b006      	add	sp, #24
   df8e0:	bd70      	pop	{r4, r5, r6, pc}

000df8e2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   df8e2:	b513      	push	{r0, r1, r4, lr}
   df8e4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df8e6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df8e8:	f7ff ff78 	bl	df7dc <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   df8ec:	2101      	movs	r1, #1
   df8ee:	4620      	mov	r0, r4
   df8f0:	f7ff ff99 	bl	df826 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   df8f4:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   df8f8:	f040 0210 	orr.w	r2, r0, #16
   df8fc:	2101      	movs	r1, #1
   df8fe:	4620      	mov	r0, r4
   df900:	f7ff ffc3 	bl	df88a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   df904:	a801      	add	r0, sp, #4
   df906:	f7ff ff87 	bl	df818 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df90a:	2001      	movs	r0, #1
   df90c:	b002      	add	sp, #8
   df90e:	bd10      	pop	{r4, pc}

000df910 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   df910:	b513      	push	{r0, r1, r4, lr}
   df912:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   df914:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   df916:	f7ff ff61 	bl	df7dc <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   df91a:	2101      	movs	r1, #1
   df91c:	4620      	mov	r0, r4
   df91e:	f7ff ff82 	bl	df826 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   df922:	2101      	movs	r1, #1
   df924:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   df928:	4620      	mov	r0, r4
   df92a:	f7ff ffae 	bl	df88a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   df92e:	a801      	add	r0, sp, #4
   df930:	f7ff ff72 	bl	df818 <_ZNSt10lock_guardI4PMICED1Ev>
}
   df934:	2001      	movs	r0, #1
   df936:	b002      	add	sp, #8
   df938:	bd10      	pop	{r4, pc}

000df93a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   df93a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df93c:	4606      	mov	r6, r0
   df93e:	460d      	mov	r5, r1
  size_t n = 0;
   df940:	188f      	adds	r7, r1, r2
   df942:	2400      	movs	r4, #0
  while (size--) {
   df944:	42bd      	cmp	r5, r7
   df946:	d00c      	beq.n	df962 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   df948:	6833      	ldr	r3, [r6, #0]
   df94a:	f815 1b01 	ldrb.w	r1, [r5], #1
   df94e:	689b      	ldr	r3, [r3, #8]
   df950:	4630      	mov	r0, r6
   df952:	4798      	blx	r3
     if (chunk>=0)
   df954:	1e03      	subs	r3, r0, #0
   df956:	db01      	blt.n	df95c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   df958:	441c      	add	r4, r3
  while (size--) {
   df95a:	e7f3      	b.n	df944 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   df95c:	2c00      	cmp	r4, #0
   df95e:	bf08      	it	eq
   df960:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   df962:	4620      	mov	r0, r4
   df964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df966 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   df966:	b513      	push	{r0, r1, r4, lr}
   df968:	4604      	mov	r4, r0
    }
   df96a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   df96c:	b159      	cbz	r1, df986 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   df96e:	9101      	str	r1, [sp, #4]
   df970:	f001 ff2d 	bl	e17ce <strlen>
   df974:	6823      	ldr	r3, [r4, #0]
   df976:	9901      	ldr	r1, [sp, #4]
   df978:	68db      	ldr	r3, [r3, #12]
   df97a:	4602      	mov	r2, r0
   df97c:	4620      	mov	r0, r4
    }
   df97e:	b002      	add	sp, #8
   df980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   df984:	4718      	bx	r3
    }
   df986:	b002      	add	sp, #8
   df988:	bd10      	pop	{r4, pc}

000df98a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   df98a:	6803      	ldr	r3, [r0, #0]
   df98c:	689b      	ldr	r3, [r3, #8]
   df98e:	4718      	bx	r3

000df990 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   df990:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   df992:	210d      	movs	r1, #13
{
   df994:	4605      	mov	r5, r0
  size_t n = print('\r');
   df996:	f7ff fff8 	bl	df98a <_ZN5Print5printEc>
  n += print('\n');
   df99a:	210a      	movs	r1, #10
  size_t n = print('\r');
   df99c:	4604      	mov	r4, r0
  n += print('\n');
   df99e:	4628      	mov	r0, r5
   df9a0:	f7ff fff3 	bl	df98a <_ZN5Print5printEc>
  return n;
}
   df9a4:	4420      	add	r0, r4
   df9a6:	bd38      	pop	{r3, r4, r5, pc}

000df9a8 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   df9a8:	b530      	push	{r4, r5, lr}
   df9aa:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   df9ac:	2300      	movs	r3, #0
   df9ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   df9b2:	2a01      	cmp	r2, #1
   df9b4:	bf98      	it	ls
   df9b6:	220a      	movls	r2, #10
   df9b8:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   df9ba:	460d      	mov	r5, r1
   df9bc:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   df9c0:	fb01 5312 	mls	r3, r1, r2, r5
   df9c4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   df9c8:	2b09      	cmp	r3, #9
   df9ca:	bf94      	ite	ls
   df9cc:	3330      	addls	r3, #48	; 0x30
   df9ce:	3337      	addhi	r3, #55	; 0x37
   df9d0:	b2db      	uxtb	r3, r3
  } while(n);
   df9d2:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   df9d4:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   df9d8:	d9ef      	bls.n	df9ba <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   df9da:	4621      	mov	r1, r4
   df9dc:	f7ff ffc3 	bl	df966 <_ZN5Print5writeEPKc>
}
   df9e0:	b00b      	add	sp, #44	; 0x2c
   df9e2:	bd30      	pop	{r4, r5, pc}

000df9e4 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   df9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df9e8:	b086      	sub	sp, #24
   df9ea:	af00      	add	r7, sp, #0
   df9ec:	4605      	mov	r5, r0
   df9ee:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   df9f0:	1d38      	adds	r0, r7, #4
   df9f2:	2114      	movs	r1, #20
{
   df9f4:	4614      	mov	r4, r2
    va_copy(args2, args);
   df9f6:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   df9f8:	f7fd fb8e 	bl	dd118 <vsnprintf>

    if (n<bufsize)
   df9fc:	2813      	cmp	r0, #19
   df9fe:	d80e      	bhi.n	dfa1e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   dfa00:	1d39      	adds	r1, r7, #4
   dfa02:	4628      	mov	r0, r5
   dfa04:	f7ff ffaf 	bl	df966 <_ZN5Print5writeEPKc>
   dfa08:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   dfa0a:	b11e      	cbz	r6, dfa14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   dfa0c:	4628      	mov	r0, r5
   dfa0e:	f7ff ffbf 	bl	df990 <_ZN5Print7printlnEv>
   dfa12:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   dfa14:	4620      	mov	r0, r4
   dfa16:	3718      	adds	r7, #24
   dfa18:	46bd      	mov	sp, r7
   dfa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   dfa1e:	f100 0308 	add.w	r3, r0, #8
   dfa22:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   dfa26:	46e8      	mov	r8, sp
        char bigger[n+1];
   dfa28:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   dfa2c:	4622      	mov	r2, r4
   dfa2e:	1c41      	adds	r1, r0, #1
   dfa30:	683b      	ldr	r3, [r7, #0]
   dfa32:	4668      	mov	r0, sp
   dfa34:	f7fd fb70 	bl	dd118 <vsnprintf>
  return write(str);
   dfa38:	4669      	mov	r1, sp
   dfa3a:	4628      	mov	r0, r5
   dfa3c:	f7ff ff93 	bl	df966 <_ZN5Print5writeEPKc>
   dfa40:	4604      	mov	r4, r0
   dfa42:	46c5      	mov	sp, r8
   dfa44:	e7e1      	b.n	dfa0a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000dfa48 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   dfa48:	4b01      	ldr	r3, [pc, #4]	; (dfa50 <_GLOBAL__sub_I_RGB+0x8>)
   dfa4a:	2200      	movs	r2, #0
   dfa4c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   dfa4e:	4770      	bx	lr
   dfa50:	2003e594 	.word	0x2003e594

000dfa54 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dfa54:	b510      	push	{r4, lr}
   dfa56:	4604      	mov	r4, r0
   dfa58:	4608      	mov	r0, r1
{
    _spi = spi;
   dfa5a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dfa5c:	f7fd f8c4 	bl	dcbe8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dfa60:	2300      	movs	r3, #0
   dfa62:	6063      	str	r3, [r4, #4]
}
   dfa64:	4620      	mov	r0, r4
   dfa66:	bd10      	pop	{r4, pc}

000dfa68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dfa68:	b510      	push	{r4, lr}
   dfa6a:	4604      	mov	r4, r0
{
	free(buffer);
   dfa6c:	6800      	ldr	r0, [r0, #0]
   dfa6e:	f7fd fb2b 	bl	dd0c8 <free>
}
   dfa72:	4620      	mov	r0, r4
   dfa74:	bd10      	pop	{r4, pc}

000dfa76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dfa76:	b510      	push	{r4, lr}
   dfa78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dfa7a:	6800      	ldr	r0, [r0, #0]
   dfa7c:	b108      	cbz	r0, dfa82 <_ZN6String10invalidateEv+0xc>
   dfa7e:	f7fd fb23 	bl	dd0c8 <free>
	buffer = NULL;
   dfa82:	2300      	movs	r3, #0
	capacity = len = 0;
   dfa84:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dfa88:	6023      	str	r3, [r4, #0]
}
   dfa8a:	bd10      	pop	{r4, pc}

000dfa8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dfa8c:	b538      	push	{r3, r4, r5, lr}
   dfa8e:	4604      	mov	r4, r0
   dfa90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dfa92:	6800      	ldr	r0, [r0, #0]
   dfa94:	3101      	adds	r1, #1
   dfa96:	f7fd fb1f 	bl	dd0d8 <realloc>
	if (newbuffer) {
   dfa9a:	b110      	cbz	r0, dfaa2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dfa9c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dfaa0:	2001      	movs	r0, #1
	}
	return 0;
}
   dfaa2:	bd38      	pop	{r3, r4, r5, pc}

000dfaa4 <_ZN6String7reserveEj>:
{
   dfaa4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dfaa6:	6803      	ldr	r3, [r0, #0]
{
   dfaa8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dfaaa:	b123      	cbz	r3, dfab6 <_ZN6String7reserveEj+0x12>
   dfaac:	6843      	ldr	r3, [r0, #4]
   dfaae:	428b      	cmp	r3, r1
   dfab0:	d301      	bcc.n	dfab6 <_ZN6String7reserveEj+0x12>
   dfab2:	2001      	movs	r0, #1
}
   dfab4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dfab6:	4620      	mov	r0, r4
   dfab8:	f7ff ffe8 	bl	dfa8c <_ZN6String12changeBufferEj>
   dfabc:	2800      	cmp	r0, #0
   dfabe:	d0f9      	beq.n	dfab4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dfac0:	68a3      	ldr	r3, [r4, #8]
   dfac2:	2b00      	cmp	r3, #0
   dfac4:	d1f5      	bne.n	dfab2 <_ZN6String7reserveEj+0xe>
   dfac6:	6822      	ldr	r2, [r4, #0]
   dfac8:	7013      	strb	r3, [r2, #0]
   dfaca:	e7f2      	b.n	dfab2 <_ZN6String7reserveEj+0xe>

000dfacc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dfacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dface:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dfad0:	4611      	mov	r1, r2
   dfad2:	9201      	str	r2, [sp, #4]
{
   dfad4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dfad6:	f7ff ffe5 	bl	dfaa4 <_ZN6String7reserveEj>
   dfada:	9a01      	ldr	r2, [sp, #4]
   dfadc:	b928      	cbnz	r0, dfaea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dfade:	4620      	mov	r0, r4
   dfae0:	f7ff ffc9 	bl	dfa76 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dfae4:	4620      	mov	r0, r4
   dfae6:	b003      	add	sp, #12
   dfae8:	bd30      	pop	{r4, r5, pc}
	len = length;
   dfaea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dfaec:	4629      	mov	r1, r5
   dfaee:	6820      	ldr	r0, [r4, #0]
   dfaf0:	f001 fdba 	bl	e1668 <memcpy>
	buffer[len] = 0;
   dfaf4:	6822      	ldr	r2, [r4, #0]
   dfaf6:	68a3      	ldr	r3, [r4, #8]
   dfaf8:	2100      	movs	r1, #0
   dfafa:	54d1      	strb	r1, [r2, r3]
	return *this;
   dfafc:	e7f2      	b.n	dfae4 <_ZN6String4copyEPKcj+0x18>

000dfafe <_ZN6StringC1EPKc>:
	buffer = NULL;
   dfafe:	2300      	movs	r3, #0
String::String(const char *cstr)
   dfb00:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dfb02:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dfb06:	4604      	mov	r4, r0
	len = 0;
   dfb08:	6083      	str	r3, [r0, #8]
	flags = 0;
   dfb0a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dfb0c:	b141      	cbz	r1, dfb20 <_ZN6StringC1EPKc+0x22>
   dfb0e:	4608      	mov	r0, r1
   dfb10:	9101      	str	r1, [sp, #4]
   dfb12:	f001 fe5c 	bl	e17ce <strlen>
   dfb16:	9901      	ldr	r1, [sp, #4]
   dfb18:	4602      	mov	r2, r0
   dfb1a:	4620      	mov	r0, r4
   dfb1c:	f7ff ffd6 	bl	dfacc <_ZN6String4copyEPKcj>
}
   dfb20:	4620      	mov	r0, r4
   dfb22:	b002      	add	sp, #8
   dfb24:	bd10      	pop	{r4, pc}

000dfb26 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dfb26:	b538      	push	{r3, r4, r5, lr}
   dfb28:	4605      	mov	r5, r0
	if (buffer) {
   dfb2a:	6800      	ldr	r0, [r0, #0]
{
   dfb2c:	460c      	mov	r4, r1
	if (buffer) {
   dfb2e:	b168      	cbz	r0, dfb4c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dfb30:	686a      	ldr	r2, [r5, #4]
   dfb32:	688b      	ldr	r3, [r1, #8]
   dfb34:	429a      	cmp	r2, r3
   dfb36:	d307      	bcc.n	dfb48 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   dfb38:	6809      	ldr	r1, [r1, #0]
   dfb3a:	f001 fe23 	bl	e1784 <strcpy>
			len = rhs.len;
   dfb3e:	68a3      	ldr	r3, [r4, #8]
   dfb40:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dfb42:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dfb44:	60a3      	str	r3, [r4, #8]
}
   dfb46:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dfb48:	f7fd fabe 	bl	dd0c8 <free>
	buffer = rhs.buffer;
   dfb4c:	6823      	ldr	r3, [r4, #0]
   dfb4e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dfb50:	6863      	ldr	r3, [r4, #4]
   dfb52:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dfb54:	68a3      	ldr	r3, [r4, #8]
   dfb56:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dfb58:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dfb5a:	e9c4 3300 	strd	r3, r3, [r4]
   dfb5e:	e7f1      	b.n	dfb44 <_ZN6String4moveERS_+0x1e>

000dfb60 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   dfb60:	b510      	push	{r4, lr}
	buffer = NULL;
   dfb62:	2300      	movs	r3, #0
	capacity = 0;
   dfb64:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dfb68:	4604      	mov	r4, r0
	len = 0;
   dfb6a:	6083      	str	r3, [r0, #8]
	flags = 0;
   dfb6c:	7303      	strb	r3, [r0, #12]
	move(rval);
   dfb6e:	f7ff ffda 	bl	dfb26 <_ZN6String4moveERS_>
}
   dfb72:	4620      	mov	r0, r4
   dfb74:	bd10      	pop	{r4, pc}

000dfb76 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dfb76:	4288      	cmp	r0, r1
{
   dfb78:	b510      	push	{r4, lr}
   dfb7a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dfb7c:	d005      	beq.n	dfb8a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dfb7e:	680b      	ldr	r3, [r1, #0]
   dfb80:	b12b      	cbz	r3, dfb8e <_ZN6StringaSERKS_+0x18>
   dfb82:	688a      	ldr	r2, [r1, #8]
   dfb84:	4619      	mov	r1, r3
   dfb86:	f7ff ffa1 	bl	dfacc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dfb8a:	4620      	mov	r0, r4
   dfb8c:	bd10      	pop	{r4, pc}
	else invalidate();
   dfb8e:	f7ff ff72 	bl	dfa76 <_ZN6String10invalidateEv>
   dfb92:	e7fa      	b.n	dfb8a <_ZN6StringaSERKS_+0x14>

000dfb94 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dfb94:	b510      	push	{r4, lr}
	buffer = NULL;
   dfb96:	2300      	movs	r3, #0
String::String(const String &value)
   dfb98:	4604      	mov	r4, r0
	capacity = 0;
   dfb9a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dfb9e:	6083      	str	r3, [r0, #8]
	flags = 0;
   dfba0:	7303      	strb	r3, [r0, #12]
	*this = value;
   dfba2:	f7ff ffe8 	bl	dfb76 <_ZN6StringaSERKS_>
}
   dfba6:	4620      	mov	r0, r4
   dfba8:	bd10      	pop	{r4, pc}

000dfbaa <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   dfbaa:	4288      	cmp	r0, r1
{
   dfbac:	b510      	push	{r4, lr}
   dfbae:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   dfbb0:	d001      	beq.n	dfbb6 <_ZN6StringaSEOS_+0xc>
   dfbb2:	f7ff ffb8 	bl	dfb26 <_ZN6String4moveERS_>
	return *this;
}
   dfbb6:	4620      	mov	r0, r4
   dfbb8:	bd10      	pop	{r4, pc}

000dfbba <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dfbba:	b513      	push	{r0, r1, r4, lr}
   dfbbc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dfbbe:	b159      	cbz	r1, dfbd8 <_ZN6StringaSEPKc+0x1e>
   dfbc0:	4608      	mov	r0, r1
   dfbc2:	9101      	str	r1, [sp, #4]
   dfbc4:	f001 fe03 	bl	e17ce <strlen>
   dfbc8:	9901      	ldr	r1, [sp, #4]
   dfbca:	4602      	mov	r2, r0
   dfbcc:	4620      	mov	r0, r4
   dfbce:	f7ff ff7d 	bl	dfacc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dfbd2:	4620      	mov	r0, r4
   dfbd4:	b002      	add	sp, #8
   dfbd6:	bd10      	pop	{r4, pc}
	else invalidate();
   dfbd8:	f7ff ff4d 	bl	dfa76 <_ZN6String10invalidateEv>
   dfbdc:	e7f9      	b.n	dfbd2 <_ZN6StringaSEPKc+0x18>

000dfbde <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dfbde:	b570      	push	{r4, r5, r6, lr}
   dfbe0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dfbe2:	460e      	mov	r6, r1
   dfbe4:	b909      	cbnz	r1, dfbea <_ZN6String6concatEPKcj+0xc>
   dfbe6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dfbe8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dfbea:	b16a      	cbz	r2, dfc08 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dfbec:	6884      	ldr	r4, [r0, #8]
   dfbee:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dfbf0:	4621      	mov	r1, r4
   dfbf2:	f7ff ff57 	bl	dfaa4 <_ZN6String7reserveEj>
   dfbf6:	2800      	cmp	r0, #0
   dfbf8:	d0f5      	beq.n	dfbe6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dfbfa:	6828      	ldr	r0, [r5, #0]
   dfbfc:	68ab      	ldr	r3, [r5, #8]
   dfbfe:	4631      	mov	r1, r6
   dfc00:	4418      	add	r0, r3
   dfc02:	f001 fdbf 	bl	e1784 <strcpy>
	len = newlen;
   dfc06:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dfc08:	2001      	movs	r0, #1
   dfc0a:	e7ed      	b.n	dfbe8 <_ZN6String6concatEPKcj+0xa>

000dfc0c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   dfc0c:	b513      	push	{r0, r1, r4, lr}
   dfc0e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   dfc10:	4608      	mov	r0, r1
	if (!cstr) return 0;
   dfc12:	b151      	cbz	r1, dfc2a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   dfc14:	9101      	str	r1, [sp, #4]
   dfc16:	f001 fdda 	bl	e17ce <strlen>
   dfc1a:	9901      	ldr	r1, [sp, #4]
   dfc1c:	4602      	mov	r2, r0
   dfc1e:	4620      	mov	r0, r4
}
   dfc20:	b002      	add	sp, #8
   dfc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   dfc26:	f7ff bfda 	b.w	dfbde <_ZN6String6concatEPKcj>
}
   dfc2a:	b002      	add	sp, #8
   dfc2c:	bd10      	pop	{r4, pc}

000dfc2e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dfc2e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dfc30:	688a      	ldr	r2, [r1, #8]
   dfc32:	6809      	ldr	r1, [r1, #0]
{
   dfc34:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dfc36:	f7ff ffd2 	bl	dfbde <_ZN6String6concatEPKcj>
   dfc3a:	b910      	cbnz	r0, dfc42 <_ZplRK15StringSumHelperRK6String+0x14>
   dfc3c:	4620      	mov	r0, r4
   dfc3e:	f7ff ff1a 	bl	dfa76 <_ZN6String10invalidateEv>
	return a;
}
   dfc42:	4620      	mov	r0, r4
   dfc44:	bd10      	pop	{r4, pc}

000dfc46 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dfc46:	b513      	push	{r0, r1, r4, lr}
   dfc48:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dfc4a:	b929      	cbnz	r1, dfc58 <_ZplRK15StringSumHelperPKc+0x12>
   dfc4c:	4620      	mov	r0, r4
   dfc4e:	f7ff ff12 	bl	dfa76 <_ZN6String10invalidateEv>
	return a;
}
   dfc52:	4620      	mov	r0, r4
   dfc54:	b002      	add	sp, #8
   dfc56:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dfc58:	4608      	mov	r0, r1
   dfc5a:	9101      	str	r1, [sp, #4]
   dfc5c:	f001 fdb7 	bl	e17ce <strlen>
   dfc60:	9901      	ldr	r1, [sp, #4]
   dfc62:	4602      	mov	r2, r0
   dfc64:	4620      	mov	r0, r4
   dfc66:	f7ff ffba 	bl	dfbde <_ZN6String6concatEPKcj>
   dfc6a:	2800      	cmp	r0, #0
   dfc6c:	d0ee      	beq.n	dfc4c <_ZplRK15StringSumHelperPKc+0x6>
   dfc6e:	e7f0      	b.n	dfc52 <_ZplRK15StringSumHelperPKc+0xc>

000dfc70 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   dfc70:	6802      	ldr	r2, [r0, #0]
{
   dfc72:	460b      	mov	r3, r1
   dfc74:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   dfc76:	b162      	cbz	r2, dfc92 <_ZNK6String9compareToERKS_+0x22>
   dfc78:	b941      	cbnz	r1, dfc8c <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   dfc7a:	6880      	ldr	r0, [r0, #8]
   dfc7c:	b160      	cbz	r0, dfc98 <_ZNK6String9compareToERKS_+0x28>
   dfc7e:	7810      	ldrb	r0, [r2, #0]
   dfc80:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   dfc82:	6898      	ldr	r0, [r3, #8]
   dfc84:	b140      	cbz	r0, dfc98 <_ZNK6String9compareToERKS_+0x28>
   dfc86:	7809      	ldrb	r1, [r1, #0]
   dfc88:	4248      	negs	r0, r1
   dfc8a:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   dfc8c:	4610      	mov	r0, r2
   dfc8e:	f001 bd6f 	b.w	e1770 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   dfc92:	2900      	cmp	r1, #0
   dfc94:	d1f5      	bne.n	dfc82 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   dfc96:	4608      	mov	r0, r1
}
   dfc98:	4770      	bx	lr

000dfc9a <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   dfc9a:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   dfc9c:	6882      	ldr	r2, [r0, #8]
   dfc9e:	688b      	ldr	r3, [r1, #8]
   dfca0:	429a      	cmp	r2, r3
   dfca2:	d105      	bne.n	dfcb0 <_ZNK6String6equalsERKS_+0x16>
   dfca4:	f7ff ffe4 	bl	dfc70 <_ZNK6String9compareToERKS_>
   dfca8:	fab0 f080 	clz	r0, r0
   dfcac:	0940      	lsrs	r0, r0, #5
}
   dfcae:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   dfcb0:	2000      	movs	r0, #0
   dfcb2:	e7fc      	b.n	dfcae <_ZNK6String6equalsERKS_+0x14>

000dfcb4 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   dfcb4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dfcb6:	6882      	ldr	r2, [r0, #8]
   dfcb8:	b93a      	cbnz	r2, dfcca <_ZNK6String6equalsEPKc+0x16>
   dfcba:	b121      	cbz	r1, dfcc6 <_ZNK6String6equalsEPKc+0x12>
   dfcbc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dfcbe:	fab0 f080 	clz	r0, r0
   dfcc2:	0940      	lsrs	r0, r0, #5
   dfcc4:	e000      	b.n	dfcc8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dfcc6:	2001      	movs	r0, #1
}
   dfcc8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dfcca:	6800      	ldr	r0, [r0, #0]
   dfccc:	b909      	cbnz	r1, dfcd2 <_ZNK6String6equalsEPKc+0x1e>
   dfcce:	7800      	ldrb	r0, [r0, #0]
   dfcd0:	e7f5      	b.n	dfcbe <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dfcd2:	f001 fd4d 	bl	e1770 <strcmp>
   dfcd6:	e7f2      	b.n	dfcbe <_ZNK6String6equalsEPKc+0xa>

000dfcd8 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   dfcd8:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dfcda:	6883      	ldr	r3, [r0, #8]
   dfcdc:	688a      	ldr	r2, [r1, #8]
   dfcde:	4293      	cmp	r3, r2
   dfce0:	d30b      	bcc.n	dfcfa <_ZNK6String8endsWithERKS_+0x22>
   dfce2:	6800      	ldr	r0, [r0, #0]
   dfce4:	b140      	cbz	r0, dfcf8 <_ZNK6String8endsWithERKS_+0x20>
   dfce6:	6809      	ldr	r1, [r1, #0]
   dfce8:	b149      	cbz	r1, dfcfe <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   dfcea:	1a9b      	subs	r3, r3, r2
   dfcec:	4418      	add	r0, r3
   dfcee:	f001 fd3f 	bl	e1770 <strcmp>
   dfcf2:	fab0 f080 	clz	r0, r0
   dfcf6:	0940      	lsrs	r0, r0, #5
}
   dfcf8:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   dfcfa:	2000      	movs	r0, #0
   dfcfc:	e7fc      	b.n	dfcf8 <_ZNK6String8endsWithERKS_+0x20>
   dfcfe:	4608      	mov	r0, r1
   dfd00:	e7fa      	b.n	dfcf8 <_ZNK6String8endsWithERKS_+0x20>
	...

000dfd04 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   dfd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   dfd06:	429a      	cmp	r2, r3
{
   dfd08:	460f      	mov	r7, r1
   dfd0a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   dfd0c:	490c      	ldr	r1, [pc, #48]	; (dfd40 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   dfd0e:	bf88      	it	hi
   dfd10:	4613      	movhi	r3, r2
{
   dfd12:	4614      	mov	r4, r2
   dfd14:	4606      	mov	r6, r0
	if (left > right) {
   dfd16:	bf84      	itt	hi
   dfd18:	462c      	movhi	r4, r5
   dfd1a:	461d      	movhi	r5, r3
	String out;
   dfd1c:	f7ff feef 	bl	dfafe <_ZN6StringC1EPKc>
	if (left > len) return out;
   dfd20:	68ba      	ldr	r2, [r7, #8]
   dfd22:	42a2      	cmp	r2, r4
   dfd24:	d30a      	bcc.n	dfd3c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   dfd26:	6839      	ldr	r1, [r7, #0]
   dfd28:	42aa      	cmp	r2, r5
   dfd2a:	bf94      	ite	ls
   dfd2c:	ebc4 0202 	rsbls	r2, r4, r2
   dfd30:	ebc4 0205 	rsbhi	r2, r4, r5
   dfd34:	4421      	add	r1, r4
   dfd36:	4630      	mov	r0, r6
   dfd38:	f7ff fec8 	bl	dfacc <_ZN6String4copyEPKcj>
	return out;
}
   dfd3c:	4630      	mov	r0, r6
   dfd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dfd40:	000e44eb 	.word	0x000e44eb

000dfd44 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dfd44:	b40e      	push	{r1, r2, r3}
   dfd46:	b570      	push	{r4, r5, r6, lr}
   dfd48:	b087      	sub	sp, #28
   dfd4a:	ad0b      	add	r5, sp, #44	; 0x2c
   dfd4c:	4604      	mov	r4, r0
   dfd4e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dfd52:	9201      	str	r2, [sp, #4]
   dfd54:	462b      	mov	r3, r5
   dfd56:	2105      	movs	r1, #5
   dfd58:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dfd5a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dfd5c:	f7fd f9dc 	bl	dd118 <vsnprintf>
    va_end(marker);

    String result;
   dfd60:	490b      	ldr	r1, [pc, #44]	; (dfd90 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dfd62:	4606      	mov	r6, r0
    String result;
   dfd64:	4620      	mov	r0, r4
   dfd66:	f7ff feca 	bl	dfafe <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dfd6a:	4631      	mov	r1, r6
   dfd6c:	4620      	mov	r0, r4
   dfd6e:	f7ff fe99 	bl	dfaa4 <_ZN6String7reserveEj>
    if (result.buffer) {
   dfd72:	6820      	ldr	r0, [r4, #0]
   dfd74:	b130      	cbz	r0, dfd84 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dfd76:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dfd78:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dfd7a:	462b      	mov	r3, r5
   dfd7c:	1c71      	adds	r1, r6, #1
   dfd7e:	f7fd f9cb 	bl	dd118 <vsnprintf>
        va_end(marker);
        result.len = n;
   dfd82:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dfd84:	4620      	mov	r0, r4
   dfd86:	b007      	add	sp, #28
   dfd88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dfd8c:	b003      	add	sp, #12
   dfd8e:	4770      	bx	lr
   dfd90:	000e44eb 	.word	0x000e44eb

000dfd94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dfd94:	b510      	push	{r4, lr}
   dfd96:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dfd98:	6800      	ldr	r0, [r0, #0]
   dfd9a:	b118      	cbz	r0, dfda4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dfd9c:	f7fd f994 	bl	dd0c8 <free>
            wakeupSource_ = nullptr;
   dfda0:	2300      	movs	r3, #0
   dfda2:	6023      	str	r3, [r4, #0]
        }
    }
   dfda4:	bd10      	pop	{r4, pc}

000dfda6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dfda6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dfda8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dfdac:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dfdae:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dfdb0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dfdb2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dfdb6:	f8c0 2006 	str.w	r2, [r0, #6]
   dfdba:	889b      	ldrh	r3, [r3, #4]
   dfdbc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dfdbe:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dfdc0:	f7ff ffe8 	bl	dfd94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dfdc4:	682b      	ldr	r3, [r5, #0]
   dfdc6:	b113      	cbz	r3, dfdce <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dfdc8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dfdca:	2300      	movs	r3, #0
   dfdcc:	602b      	str	r3, [r5, #0]
    }
   dfdce:	4620      	mov	r0, r4
   dfdd0:	bd38      	pop	{r3, r4, r5, pc}
	...

000dfdd4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dfdd4:	b538      	push	{r3, r4, r5, lr}
   dfdd6:	460c      	mov	r4, r1
   dfdd8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dfdda:	f7ff ffdb 	bl	dfd94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dfdde:	b144      	cbz	r4, dfdf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dfde0:	8820      	ldrh	r0, [r4, #0]
   dfde2:	f7fd f969 	bl	dd0b8 <malloc>
   dfde6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dfde8:	b128      	cbz	r0, dfdf6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dfdea:	8822      	ldrh	r2, [r4, #0]
   dfdec:	4621      	mov	r1, r4
   dfdee:	f001 fc3b 	bl	e1668 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dfdf2:	2000      	movs	r0, #0
    }
   dfdf4:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dfdf6:	4801      	ldr	r0, [pc, #4]	; (dfdfc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dfdf8:	e7fc      	b.n	dfdf4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dfdfa:	bf00      	nop
   dfdfc:	fffffefc 	.word	0xfffffefc

000dfe00 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dfe00:	b5f0      	push	{r4, r5, r6, r7, lr}
   dfe02:	4d2d      	ldr	r5, [pc, #180]	; (dfeb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dfe04:	7d0b      	ldrb	r3, [r1, #20]
   dfe06:	4604      	mov	r4, r0
   dfe08:	b08b      	sub	sp, #44	; 0x2c
   dfe0a:	4608      	mov	r0, r1
   dfe0c:	1daf      	adds	r7, r5, #6
   dfe0e:	2b00      	cmp	r3, #0
   dfe10:	d038      	beq.n	dfe84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dfe12:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dfe14:	791b      	ldrb	r3, [r3, #4]
   dfe16:	2b00      	cmp	r3, #0
   dfe18:	d034      	beq.n	dfe84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dfe1a:	2200      	movs	r2, #0
    SleepResult() {}
   dfe1c:	4b27      	ldr	r3, [pc, #156]	; (dfebc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dfe1e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dfe20:	a902      	add	r1, sp, #8
   dfe22:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dfe24:	9202      	str	r2, [sp, #8]
   dfe26:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dfe2a:	f88d 200e 	strb.w	r2, [sp, #14]
   dfe2e:	f7fd f889 	bl	dcf44 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dfe32:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dfe36:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dfe3a:	b200      	sxth	r0, r0
   dfe3c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dfe40:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dfe44:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dfe46:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dfe48:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dfe4a:	4628      	mov	r0, r5
   dfe4c:	f7ff ffc2 	bl	dfdd4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dfe50:	a802      	add	r0, sp, #8
   dfe52:	f7ff ff9f 	bl	dfd94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dfe56:	2300      	movs	r3, #0
   dfe58:	6023      	str	r3, [r4, #0]
   dfe5a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dfe5c:	71a3      	strb	r3, [r4, #6]
   dfe5e:	8123      	strh	r3, [r4, #8]
   dfe60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dfe64:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dfe66:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dfe6a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dfe6c:	683b      	ldr	r3, [r7, #0]
   dfe6e:	f8c4 3006 	str.w	r3, [r4, #6]
   dfe72:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dfe74:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dfe76:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dfe78:	4620      	mov	r0, r4
   dfe7a:	f7ff ffab 	bl	dfdd4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dfe7e:	4620      	mov	r0, r4
   dfe80:	b00b      	add	sp, #44	; 0x2c
   dfe82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dfe84:	2600      	movs	r6, #0
   dfe86:	2320      	movs	r3, #32
   dfe88:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dfe8c:	4b0c      	ldr	r3, [pc, #48]	; (dfec0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dfe8e:	9300      	str	r3, [sp, #0]
   dfe90:	490c      	ldr	r1, [pc, #48]	; (dfec4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dfe92:	4633      	mov	r3, r6
   dfe94:	aa02      	add	r2, sp, #8
   dfe96:	2032      	movs	r0, #50	; 0x32
   dfe98:	f7fc ffc6 	bl	dce28 <log_message>
    SleepResult() {}
   dfe9c:	4b07      	ldr	r3, [pc, #28]	; (dfebc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dfe9e:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dfea0:	a902      	add	r1, sp, #8
        error_ = error;
   dfea2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dfea6:	4804      	ldr	r0, [pc, #16]	; (dfeb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dfea8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dfeaa:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dfeae:	f8ad 300c 	strh.w	r3, [sp, #12]
   dfeb2:	f7ff ff78 	bl	dfda6 <_ZN17SystemSleepResultaSEOS_>
   dfeb6:	e7cb      	b.n	dfe50 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dfeb8:	2003e5a4 	.word	0x2003e5a4
   dfebc:	ffff0000 	.word	0xffff0000
   dfec0:	000e4a17 	.word	0x000e4a17
   dfec4:	000e4a10 	.word	0x000e4a10

000dfec8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dfec8:	4b05      	ldr	r3, [pc, #20]	; (dfee0 <_GLOBAL__sub_I_System+0x18>)
   dfeca:	2202      	movs	r2, #2
   dfecc:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dfece:	4b05      	ldr	r3, [pc, #20]	; (dfee4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dfed0:	4a05      	ldr	r2, [pc, #20]	; (dfee8 <_GLOBAL__sub_I_System+0x20>)
   dfed2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dfed4:	2000      	movs	r0, #0
   dfed6:	6018      	str	r0, [r3, #0]
   dfed8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dfeda:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dfedc:	f7fc bfde 	b.w	dce9c <set_system_mode>
   dfee0:	2003e5b0 	.word	0x2003e5b0
   dfee4:	2003e5a4 	.word	0x2003e5a4
   dfee8:	ffff0000 	.word	0xffff0000

000dfeec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dfeec:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dfeee:	2000      	movs	r0, #0
   dfef0:	f7fd f862 	bl	dcfb8 <spark_sync_time_pending>
   dfef4:	b128      	cbz	r0, dff02 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dfef6:	f7fd f84f 	bl	dcf98 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dfefa:	f080 0001 	eor.w	r0, r0, #1
   dfefe:	b2c0      	uxtb	r0, r0
    }
   dff00:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dff02:	2001      	movs	r0, #1
   dff04:	e7fc      	b.n	dff00 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000dff06 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dff06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dff08:	4602      	mov	r2, r0
   dff0a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dff0c:	4668      	mov	r0, sp
    struct timeval tv = {
   dff0e:	2100      	movs	r1, #0
    };
   dff10:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dff14:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dff18:	f7fc fdae 	bl	dca78 <hal_rtc_set_time>
   dff1c:	4602      	mov	r2, r0
   dff1e:	b910      	cbnz	r0, dff26 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dff20:	4601      	mov	r1, r0
   dff22:	f7fc fff3 	bl	dcf0c <system_notify_time_changed>
    }
}
   dff26:	b005      	add	sp, #20
   dff28:	f85d fb04 	ldr.w	pc, [sp], #4

000dff2c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dff2c:	b530      	push	{r4, r5, lr}
   dff2e:	4604      	mov	r4, r0
    t += time_zone_cache;
   dff30:	4818      	ldr	r0, [pc, #96]	; (dff94 <_ZN9TimeClass7timeStrEx+0x68>)
   dff32:	e9d0 1000 	ldrd	r1, r0, [r0]
   dff36:	1852      	adds	r2, r2, r1
   dff38:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dff3c:	4816      	ldr	r0, [pc, #88]	; (dff98 <_ZN9TimeClass7timeStrEx+0x6c>)
   dff3e:	e9d0 1000 	ldrd	r1, r0, [r0]
   dff42:	1852      	adds	r2, r2, r1
{
   dff44:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dff46:	eb40 0303 	adc.w	r3, r0, r3
   dff4a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dff4e:	2224      	movs	r2, #36	; 0x24
   dff50:	eb0d 0002 	add.w	r0, sp, r2
   dff54:	2100      	movs	r1, #0
   dff56:	f001 fbaf 	bl	e16b8 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dff5a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dff5c:	a909      	add	r1, sp, #36	; 0x24
   dff5e:	4668      	mov	r0, sp
   dff60:	f7fd f90a 	bl	dd178 <localtime_r>
    char ascstr[26] = {};
   dff64:	2216      	movs	r2, #22
   dff66:	4629      	mov	r1, r5
   dff68:	a803      	add	r0, sp, #12
   dff6a:	9502      	str	r5, [sp, #8]
   dff6c:	f001 fba4 	bl	e16b8 <memset>
    asctime_r(&calendar_time, ascstr);
   dff70:	a902      	add	r1, sp, #8
   dff72:	a809      	add	r0, sp, #36	; 0x24
   dff74:	f001 fb3a 	bl	e15ec <asctime_r>
    int len = strlen(ascstr);
   dff78:	a802      	add	r0, sp, #8
   dff7a:	f001 fc28 	bl	e17ce <strlen>
    ascstr[len-1] = 0; // remove final newline
   dff7e:	ab12      	add	r3, sp, #72	; 0x48
   dff80:	4418      	add	r0, r3
    return String(ascstr);
   dff82:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dff84:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dff88:	4620      	mov	r0, r4
   dff8a:	f7ff fdb8 	bl	dfafe <_ZN6StringC1EPKc>
}
   dff8e:	4620      	mov	r0, r4
   dff90:	b013      	add	sp, #76	; 0x4c
   dff92:	bd30      	pop	{r4, r5, pc}
   dff94:	2003e5c8 	.word	0x2003e5c8
   dff98:	2003e5c0 	.word	0x2003e5c0

000dff9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dffa0:	b0a5      	sub	sp, #148	; 0x94
   dffa2:	4607      	mov	r7, r0
   dffa4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dffa6:	a814      	add	r0, sp, #80	; 0x50
{
   dffa8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dffaa:	223f      	movs	r2, #63	; 0x3f
{
   dffac:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dffae:	f001 fc28 	bl	e1802 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dffb2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dffb4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dffb6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dffba:	f001 fc08 	bl	e17ce <strlen>
   dffbe:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dffc0:	bb5d      	cbnz	r5, e001a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dffc2:	492a      	ldr	r1, [pc, #168]	; (e006c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dffc4:	a803      	add	r0, sp, #12
   dffc6:	f001 fbdd 	bl	e1784 <strcpy>
   dffca:	ae14      	add	r6, sp, #80	; 0x50
{
   dffcc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dffce:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dffd2:	45ab      	cmp	fp, r5
   dffd4:	d936      	bls.n	e0044 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dffd6:	46b1      	mov	r9, r6
   dffd8:	f105 0a01 	add.w	sl, r5, #1
   dffdc:	f819 3b01 	ldrb.w	r3, [r9], #1
   dffe0:	2b25      	cmp	r3, #37	; 0x25
   dffe2:	d117      	bne.n	e0014 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dffe4:	7873      	ldrb	r3, [r6, #1]
   dffe6:	2b7a      	cmp	r3, #122	; 0x7a
   dffe8:	d114      	bne.n	e0014 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dffea:	a803      	add	r0, sp, #12
   dffec:	f001 fbef 	bl	e17ce <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dfff0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dfff2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dfff4:	1828      	adds	r0, r5, r0
   dfff6:	4418      	add	r0, r3
   dfff8:	ebab 0205 	sub.w	r2, fp, r5
   dfffc:	1cb1      	adds	r1, r6, #2
   dfffe:	f001 fb33 	bl	e1668 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   e0002:	4622      	mov	r2, r4
   e0004:	a903      	add	r1, sp, #12
   e0006:	4630      	mov	r0, r6
   e0008:	f001 fb2e 	bl	e1668 <memcpy>
            len = strlen(format_str);
   e000c:	a814      	add	r0, sp, #80	; 0x50
   e000e:	f001 fbde 	bl	e17ce <strlen>
   e0012:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   e0014:	464e      	mov	r6, r9
   e0016:	4655      	mov	r5, sl
   e0018:	e7d9      	b.n	dffce <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   e001a:	213c      	movs	r1, #60	; 0x3c
   e001c:	fb95 f3f1 	sdiv	r3, r5, r1
   e0020:	2b00      	cmp	r3, #0
   e0022:	bfb8      	it	lt
   e0024:	425b      	neglt	r3, r3
   e0026:	fbb3 f2f1 	udiv	r2, r3, r1
   e002a:	fb01 3312 	mls	r3, r1, r2, r3
   e002e:	9300      	str	r3, [sp, #0]
   e0030:	4a0f      	ldr	r2, [pc, #60]	; (e0070 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   e0032:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e0036:	2110      	movs	r1, #16
   e0038:	a803      	add	r0, sp, #12
   e003a:	fb95 f3f3 	sdiv	r3, r5, r3
   e003e:	f7fd f863 	bl	dd108 <snprintf>
   e0042:	e7c2      	b.n	dffca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   e0044:	2100      	movs	r1, #0
   e0046:	222e      	movs	r2, #46	; 0x2e
   e0048:	a808      	add	r0, sp, #32
   e004a:	9107      	str	r1, [sp, #28]
   e004c:	f001 fb34 	bl	e16b8 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   e0050:	4643      	mov	r3, r8
   e0052:	aa14      	add	r2, sp, #80	; 0x50
   e0054:	2132      	movs	r1, #50	; 0x32
   e0056:	a807      	add	r0, sp, #28
   e0058:	f7fd f886 	bl	dd168 <strftime>
    return String(buf);
   e005c:	a907      	add	r1, sp, #28
   e005e:	4638      	mov	r0, r7
   e0060:	f7ff fd4d 	bl	dfafe <_ZN6StringC1EPKc>
}
   e0064:	4638      	mov	r0, r7
   e0066:	b025      	add	sp, #148	; 0x94
   e0068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e006c:	000e4a3e 	.word	0x000e4a3e
   e0070:	000e4a40 	.word	0x000e4a40

000e0074 <_ZN9TimeClass6formatExPKc>:
{
   e0074:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0076:	b08d      	sub	sp, #52	; 0x34
   e0078:	e9cd 2300 	strd	r2, r3, [sp]
   e007c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   e007e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   e0080:	b915      	cbnz	r5, e0088 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   e0082:	4b19      	ldr	r3, [pc, #100]	; (e00e8 <_ZN9TimeClass6formatExPKc+0x74>)
   e0084:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   e0086:	b12d      	cbz	r5, e0094 <_ZN9TimeClass6formatExPKc+0x20>
   e0088:	4b18      	ldr	r3, [pc, #96]	; (e00ec <_ZN9TimeClass6formatExPKc+0x78>)
   e008a:	4628      	mov	r0, r5
   e008c:	6819      	ldr	r1, [r3, #0]
   e008e:	f001 fb6f 	bl	e1770 <strcmp>
   e0092:	b938      	cbnz	r0, e00a4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   e0094:	e9dd 2300 	ldrd	r2, r3, [sp]
   e0098:	4620      	mov	r0, r4
   e009a:	f7ff ff47 	bl	dff2c <_ZN9TimeClass7timeStrEx>
}
   e009e:	4620      	mov	r0, r4
   e00a0:	b00d      	add	sp, #52	; 0x34
   e00a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   e00a4:	4e12      	ldr	r6, [pc, #72]	; (e00f0 <_ZN9TimeClass6formatExPKc+0x7c>)
   e00a6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   e00a8:	4f12      	ldr	r7, [pc, #72]	; (e00f4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   e00aa:	e9d6 3200 	ldrd	r3, r2, [r6]
   e00ae:	185b      	adds	r3, r3, r1
   e00b0:	9901      	ldr	r1, [sp, #4]
   e00b2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   e00b6:	e9d7 0100 	ldrd	r0, r1, [r7]
   e00ba:	181b      	adds	r3, r3, r0
   e00bc:	eb41 0202 	adc.w	r2, r1, r2
   e00c0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   e00c4:	2100      	movs	r1, #0
   e00c6:	2224      	movs	r2, #36	; 0x24
   e00c8:	a803      	add	r0, sp, #12
   e00ca:	f001 faf5 	bl	e16b8 <memset>
    localtime_r(&t, &calendar_time);
   e00ce:	a903      	add	r1, sp, #12
   e00d0:	4668      	mov	r0, sp
   e00d2:	f7fd f851 	bl	dd178 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   e00d6:	6832      	ldr	r2, [r6, #0]
   e00d8:	683b      	ldr	r3, [r7, #0]
   e00da:	a903      	add	r1, sp, #12
   e00dc:	4413      	add	r3, r2
   e00de:	4620      	mov	r0, r4
   e00e0:	462a      	mov	r2, r5
   e00e2:	f7ff ff5b 	bl	dff9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   e00e6:	e7da      	b.n	e009e <_ZN9TimeClass6formatExPKc+0x2a>
   e00e8:	2003e5b8 	.word	0x2003e5b8
   e00ec:	2003e1d0 	.word	0x2003e1d0
   e00f0:	2003e5c8 	.word	0x2003e5c8
   e00f4:	2003e5c0 	.word	0x2003e5c0

000e00f8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   e00f8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   e00fa:	2000      	movs	r0, #0
   e00fc:	f7fc fca4 	bl	dca48 <hal_rtc_time_is_valid>
    if (rtcstate)
   e0100:	4604      	mov	r4, r0
   e0102:	b9a0      	cbnz	r0, e012e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   e0104:	f7fc fec2 	bl	dce8c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   e0108:	2801      	cmp	r0, #1
   e010a:	d110      	bne.n	e012e <_ZN9TimeClass7isValidEv+0x36>
   e010c:	4620      	mov	r0, r4
   e010e:	f7fc fef5 	bl	dcefc <system_thread_get_state>
   e0112:	b960      	cbnz	r0, e012e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   e0114:	f7ff feea 	bl	dfeec <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   e0118:	b910      	cbnz	r0, e0120 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   e011a:	f7fc ff2d 	bl	dcf78 <spark_process>
        while (_while() && !_condition()) {
   e011e:	e7f9      	b.n	e0114 <_ZN9TimeClass7isValidEv+0x1c>
   e0120:	f7ff fee4 	bl	dfeec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   e0124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   e0128:	2000      	movs	r0, #0
   e012a:	f7fc bc8d 	b.w	dca48 <hal_rtc_time_is_valid>
}
   e012e:	4620      	mov	r0, r4
   e0130:	bd10      	pop	{r4, pc}

000e0132 <_ZN9TimeClass3nowEv>:
{
   e0132:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   e0134:	f7ff ffe0 	bl	e00f8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   e0138:	2210      	movs	r2, #16
   e013a:	2100      	movs	r1, #0
   e013c:	4668      	mov	r0, sp
   e013e:	f001 fabb 	bl	e16b8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   e0142:	2100      	movs	r1, #0
   e0144:	4668      	mov	r0, sp
   e0146:	f7fc fc8f 	bl	dca68 <hal_rtc_get_time>
}
   e014a:	9800      	ldr	r0, [sp, #0]
   e014c:	b005      	add	sp, #20
   e014e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e0154 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e0154:	4b02      	ldr	r3, [pc, #8]	; (e0160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e0156:	681a      	ldr	r2, [r3, #0]
   e0158:	4b02      	ldr	r3, [pc, #8]	; (e0164 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e015a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   e015c:	4770      	bx	lr
   e015e:	bf00      	nop
   e0160:	2003e1d0 	.word	0x2003e1d0
   e0164:	2003e5b8 	.word	0x2003e5b8

000e0168 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   e0168:	4770      	bx	lr

000e016a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e016a:	7441      	strb	r1, [r0, #17]
}
   e016c:	4770      	bx	lr

000e016e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e016e:	4770      	bx	lr

000e0170 <_ZN11USARTSerial17availableForWriteEv>:
{
   e0170:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   e0172:	7c00      	ldrb	r0, [r0, #16]
   e0174:	f7fc fdf0 	bl	dcd58 <hal_usart_available_data_for_write>
}
   e0178:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e017c:	bd08      	pop	{r3, pc}

000e017e <_ZN11USARTSerial9availableEv>:
{
   e017e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   e0180:	7c00      	ldrb	r0, [r0, #16]
   e0182:	f7fc fdc1 	bl	dcd08 <hal_usart_available>
}
   e0186:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e018a:	bd08      	pop	{r3, pc}

000e018c <_ZN11USARTSerial4peekEv>:
{
   e018c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   e018e:	7c00      	ldrb	r0, [r0, #16]
   e0190:	f7fc fdca 	bl	dcd28 <hal_usart_peek>
}
   e0194:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e0198:	bd08      	pop	{r3, pc}

000e019a <_ZN11USARTSerial4readEv>:
{
   e019a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   e019c:	7c00      	ldrb	r0, [r0, #16]
   e019e:	f7fc fdbb 	bl	dcd18 <hal_usart_read>
}
   e01a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e01a6:	bd08      	pop	{r3, pc}

000e01a8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   e01a8:	7c00      	ldrb	r0, [r0, #16]
   e01aa:	f7fc bdc5 	b.w	dcd38 <hal_usart_flush>

000e01ae <_ZN11USARTSerial5writeEh>:
{
   e01ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e01b0:	7c45      	ldrb	r5, [r0, #17]
{
   e01b2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e01b4:	b12d      	cbz	r5, e01c2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   e01b6:	7c20      	ldrb	r0, [r4, #16]
}
   e01b8:	b003      	add	sp, #12
   e01ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   e01be:	f7fc bd9b 	b.w	dccf8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e01c2:	7c00      	ldrb	r0, [r0, #16]
   e01c4:	9101      	str	r1, [sp, #4]
   e01c6:	f7fc fdc7 	bl	dcd58 <hal_usart_available_data_for_write>
   e01ca:	2800      	cmp	r0, #0
   e01cc:	9901      	ldr	r1, [sp, #4]
   e01ce:	dcf2      	bgt.n	e01b6 <_ZN11USARTSerial5writeEh+0x8>
}
   e01d0:	4628      	mov	r0, r5
   e01d2:	b003      	add	sp, #12
   e01d4:	bd30      	pop	{r4, r5, pc}

000e01d6 <_ZN11USARTSerialD0Ev>:
   e01d6:	b510      	push	{r4, lr}
   e01d8:	2114      	movs	r1, #20
   e01da:	4604      	mov	r4, r0
   e01dc:	f000 fa90 	bl	e0700 <_ZdlPvj>
   e01e0:	4620      	mov	r0, r4
   e01e2:	bd10      	pop	{r4, pc}

000e01e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   e01e4:	b510      	push	{r4, lr}
   e01e6:	f04f 0c00 	mov.w	ip, #0
   e01ea:	4604      	mov	r4, r0
   e01ec:	4608      	mov	r0, r1
   e01ee:	4611      	mov	r1, r2
   e01f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e01f4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   e01f8:	4a04      	ldr	r2, [pc, #16]	; (e020c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   e01fa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   e01fc:	2201      	movs	r2, #1
  _serial = serial;
   e01fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e0200:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   e0202:	461a      	mov	r2, r3
   e0204:	f7fc fd68 	bl	dccd8 <hal_usart_init>
}
   e0208:	4620      	mov	r0, r4
   e020a:	bd10      	pop	{r4, pc}
   e020c:	000e4a70 	.word	0x000e4a70

000e0210 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   e0210:	7c00      	ldrb	r0, [r0, #16]
   e0212:	2300      	movs	r3, #0
   e0214:	f7fc bda8 	b.w	dcd68 <hal_usart_begin_config>

000e0218 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   e0218:	2200      	movs	r2, #0
   e021a:	f7ff bff9 	b.w	e0210 <_ZN11USARTSerial5beginEmm>

000e021e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   e021e:	7c00      	ldrb	r0, [r0, #16]
   e0220:	f7fc bd62 	b.w	dcce8 <hal_usart_end>

000e0224 <_Z22__fetch_global_Serial1v>:
{
   e0224:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e0226:	4c0d      	ldr	r4, [pc, #52]	; (e025c <_Z22__fetch_global_Serial1v+0x38>)
   e0228:	7821      	ldrb	r1, [r4, #0]
   e022a:	f3bf 8f5b 	dmb	ish
   e022e:	f011 0101 	ands.w	r1, r1, #1
   e0232:	d110      	bne.n	e0256 <_Z22__fetch_global_Serial1v+0x32>
   e0234:	4620      	mov	r0, r4
   e0236:	9101      	str	r1, [sp, #4]
   e0238:	f7f3 ff40 	bl	d40bc <__cxa_guard_acquire>
   e023c:	9901      	ldr	r1, [sp, #4]
   e023e:	b150      	cbz	r0, e0256 <_Z22__fetch_global_Serial1v+0x32>
   e0240:	4b07      	ldr	r3, [pc, #28]	; (e0260 <_Z22__fetch_global_Serial1v+0x3c>)
   e0242:	4a08      	ldr	r2, [pc, #32]	; (e0264 <_Z22__fetch_global_Serial1v+0x40>)
   e0244:	4808      	ldr	r0, [pc, #32]	; (e0268 <_Z22__fetch_global_Serial1v+0x44>)
   e0246:	f7ff ffcd 	bl	e01e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   e024a:	4620      	mov	r0, r4
   e024c:	f7f3 ff3b 	bl	d40c6 <__cxa_guard_release>
   e0250:	4806      	ldr	r0, [pc, #24]	; (e026c <_Z22__fetch_global_Serial1v+0x48>)
   e0252:	f001 f9f1 	bl	e1638 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e0256:	4804      	ldr	r0, [pc, #16]	; (e0268 <_Z22__fetch_global_Serial1v+0x44>)
   e0258:	b002      	add	sp, #8
   e025a:	bd10      	pop	{r4, pc}
   e025c:	2003e5d0 	.word	0x2003e5d0
   e0260:	2003e658 	.word	0x2003e658
   e0264:	2003e5d4 	.word	0x2003e5d4
   e0268:	2003e6dc 	.word	0x2003e6dc
   e026c:	000e016f 	.word	0x000e016f

000e0270 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e0270:	7441      	strb	r1, [r0, #17]
}
   e0272:	4770      	bx	lr

000e0274 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e0274:	4770      	bx	lr

000e0276 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e0276:	4770      	bx	lr

000e0278 <_ZN9USBSerial4readEv>:
{
   e0278:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e027a:	2100      	movs	r1, #0
   e027c:	7c00      	ldrb	r0, [r0, #16]
   e027e:	f7fc fda3 	bl	dcdc8 <HAL_USB_USART_Receive_Data>
}
   e0282:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e0286:	bd08      	pop	{r3, pc}

000e0288 <_ZN9USBSerial4peekEv>:
{
   e0288:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e028a:	2101      	movs	r1, #1
   e028c:	7c00      	ldrb	r0, [r0, #16]
   e028e:	f7fc fd9b 	bl	dcdc8 <HAL_USB_USART_Receive_Data>
}
   e0292:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e0296:	bd08      	pop	{r3, pc}

000e0298 <_ZN9USBSerial17availableForWriteEv>:
{
   e0298:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e029a:	7c00      	ldrb	r0, [r0, #16]
   e029c:	f7fc fd8c 	bl	dcdb8 <HAL_USB_USART_Available_Data_For_Write>
}
   e02a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e02a4:	bd08      	pop	{r3, pc}

000e02a6 <_ZN9USBSerial9availableEv>:
{
   e02a6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e02a8:	7c00      	ldrb	r0, [r0, #16]
   e02aa:	f7fc fd7d 	bl	dcda8 <HAL_USB_USART_Available_Data>
}
   e02ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e02b2:	bd08      	pop	{r3, pc}

000e02b4 <_ZN9USBSerial5writeEh>:
{
   e02b4:	b513      	push	{r0, r1, r4, lr}
   e02b6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e02b8:	7c00      	ldrb	r0, [r0, #16]
{
   e02ba:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e02bc:	f7fc fd7c 	bl	dcdb8 <HAL_USB_USART_Available_Data_For_Write>
   e02c0:	2800      	cmp	r0, #0
   e02c2:	9901      	ldr	r1, [sp, #4]
   e02c4:	dc01      	bgt.n	e02ca <_ZN9USBSerial5writeEh+0x16>
   e02c6:	7c60      	ldrb	r0, [r4, #17]
   e02c8:	b120      	cbz	r0, e02d4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e02ca:	7c20      	ldrb	r0, [r4, #16]
   e02cc:	f7fc fd84 	bl	dcdd8 <HAL_USB_USART_Send_Data>
   e02d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   e02d4:	b002      	add	sp, #8
   e02d6:	bd10      	pop	{r4, pc}

000e02d8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   e02d8:	7c00      	ldrb	r0, [r0, #16]
   e02da:	f7fc bd85 	b.w	dcde8 <HAL_USB_USART_Flush_Data>

000e02de <_ZN9USBSerialD0Ev>:
   e02de:	b510      	push	{r4, lr}
   e02e0:	2114      	movs	r1, #20
   e02e2:	4604      	mov	r4, r0
   e02e4:	f000 fa0c 	bl	e0700 <_ZdlPvj>
   e02e8:	4620      	mov	r0, r4
   e02ea:	bd10      	pop	{r4, pc}

000e02ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e02ec:	b510      	push	{r4, lr}
   e02ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e02f2:	4604      	mov	r4, r0
   e02f4:	4608      	mov	r0, r1
   e02f6:	2100      	movs	r1, #0
   e02f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e02fc:	4b04      	ldr	r3, [pc, #16]	; (e0310 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e02fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   e0300:	2301      	movs	r3, #1
  _serial = serial;
   e0302:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e0304:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   e0306:	4611      	mov	r1, r2
   e0308:	f7fc fd36 	bl	dcd78 <HAL_USB_USART_Init>
}
   e030c:	4620      	mov	r0, r4
   e030e:	bd10      	pop	{r4, pc}
   e0310:	000e4aa0 	.word	0x000e4aa0

000e0314 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   e0314:	7c00      	ldrb	r0, [r0, #16]
   e0316:	2200      	movs	r2, #0
   e0318:	f7fc bd36 	b.w	dcd88 <HAL_USB_USART_Begin>

000e031c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   e031c:	7c00      	ldrb	r0, [r0, #16]
   e031e:	f7fc bd3b 	b.w	dcd98 <HAL_USB_USART_End>

000e0322 <_Z19acquireSerialBufferv>:
{
   e0322:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e0324:	2214      	movs	r2, #20
{
   e0326:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e0328:	2100      	movs	r1, #0
   e032a:	f001 f9c5 	bl	e16b8 <memset>
}
   e032e:	4620      	mov	r0, r4
   e0330:	bd10      	pop	{r4, pc}
	...

000e0334 <_Z16_fetch_usbserialv>:
{
   e0334:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e0336:	4c0f      	ldr	r4, [pc, #60]	; (e0374 <_Z16_fetch_usbserialv+0x40>)
{
   e0338:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e033a:	a803      	add	r0, sp, #12
   e033c:	f7ff fff1 	bl	e0322 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e0340:	7821      	ldrb	r1, [r4, #0]
   e0342:	f3bf 8f5b 	dmb	ish
   e0346:	f011 0101 	ands.w	r1, r1, #1
   e034a:	d10f      	bne.n	e036c <_Z16_fetch_usbserialv+0x38>
   e034c:	4620      	mov	r0, r4
   e034e:	9101      	str	r1, [sp, #4]
   e0350:	f7f3 feb4 	bl	d40bc <__cxa_guard_acquire>
   e0354:	9901      	ldr	r1, [sp, #4]
   e0356:	b148      	cbz	r0, e036c <_Z16_fetch_usbserialv+0x38>
   e0358:	aa03      	add	r2, sp, #12
   e035a:	4807      	ldr	r0, [pc, #28]	; (e0378 <_Z16_fetch_usbserialv+0x44>)
   e035c:	f7ff ffc6 	bl	e02ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e0360:	4620      	mov	r0, r4
   e0362:	f7f3 feb0 	bl	d40c6 <__cxa_guard_release>
   e0366:	4805      	ldr	r0, [pc, #20]	; (e037c <_Z16_fetch_usbserialv+0x48>)
   e0368:	f001 f966 	bl	e1638 <atexit>
	return _usbserial;
}
   e036c:	4802      	ldr	r0, [pc, #8]	; (e0378 <_Z16_fetch_usbserialv+0x44>)
   e036e:	b008      	add	sp, #32
   e0370:	bd10      	pop	{r4, pc}
   e0372:	bf00      	nop
   e0374:	2003e6f0 	.word	0x2003e6f0
   e0378:	2003e6f4 	.word	0x2003e6f4
   e037c:	000e0275 	.word	0x000e0275

000e0380 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   e0380:	4b01      	ldr	r3, [pc, #4]	; (e0388 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   e0382:	6018      	str	r0, [r3, #0]
    }, nullptr);
   e0384:	4770      	bx	lr
   e0386:	bf00      	nop
   e0388:	2003e1d8 	.word	0x2003e1d8

000e038c <serialEventRun>:
{
   e038c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e038e:	4b0b      	ldr	r3, [pc, #44]	; (e03bc <serialEventRun+0x30>)
   e0390:	b143      	cbz	r3, e03a4 <serialEventRun+0x18>
   e0392:	f7ff ffcf 	bl	e0334 <_Z16_fetch_usbserialv>
   e0396:	6803      	ldr	r3, [r0, #0]
   e0398:	691b      	ldr	r3, [r3, #16]
   e039a:	4798      	blx	r3
   e039c:	2800      	cmp	r0, #0
   e039e:	dd01      	ble.n	e03a4 <serialEventRun+0x18>
        serialEvent();
   e03a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   e03a4:	4b06      	ldr	r3, [pc, #24]	; (e03c0 <serialEventRun+0x34>)
   e03a6:	b143      	cbz	r3, e03ba <serialEventRun+0x2e>
   e03a8:	f7ff ff3c 	bl	e0224 <_Z22__fetch_global_Serial1v>
   e03ac:	6803      	ldr	r3, [r0, #0]
   e03ae:	691b      	ldr	r3, [r3, #16]
   e03b0:	4798      	blx	r3
   e03b2:	2800      	cmp	r0, #0
   e03b4:	dd01      	ble.n	e03ba <serialEventRun+0x2e>
        serialEvent1();
   e03b6:	f3af 8000 	nop.w
}
   e03ba:	bd08      	pop	{r3, pc}
	...

000e03c4 <_post_loop>:
{
   e03c4:	b508      	push	{r3, lr}
	serialEventRun();
   e03c6:	f7ff ffe1 	bl	e038c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e03ca:	f7fc fb35 	bl	dca38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e03ce:	4b01      	ldr	r3, [pc, #4]	; (e03d4 <_post_loop+0x10>)
   e03d0:	6018      	str	r0, [r3, #0]
}
   e03d2:	bd08      	pop	{r3, pc}
   e03d4:	2003e71c 	.word	0x2003e71c

000e03d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e03d8:	4805      	ldr	r0, [pc, #20]	; (e03f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   e03da:	4a06      	ldr	r2, [pc, #24]	; (e03f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   e03dc:	4906      	ldr	r1, [pc, #24]	; (e03f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   e03de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e03e0:	1a12      	subs	r2, r2, r0
   e03e2:	f001 f941 	bl	e1668 <memcpy>
    __backup_sram_signature = signature;
   e03e6:	4b05      	ldr	r3, [pc, #20]	; (e03fc <_Z33system_initialize_user_backup_ramv+0x24>)
   e03e8:	4a05      	ldr	r2, [pc, #20]	; (e0400 <_Z33system_initialize_user_backup_ramv+0x28>)
   e03ea:	601a      	str	r2, [r3, #0]
}
   e03ec:	bd08      	pop	{r3, pc}
   e03ee:	bf00      	nop
   e03f0:	2003f400 	.word	0x2003f400
   e03f4:	2003f404 	.word	0x2003f404
   e03f8:	000e4de0 	.word	0x000e4de0
   e03fc:	2003f400 	.word	0x2003f400
   e0400:	9a271c1e 	.word	0x9a271c1e

000e0404 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e0404:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e0406:	2300      	movs	r3, #0
   e0408:	9300      	str	r3, [sp, #0]
   e040a:	461a      	mov	r2, r3
   e040c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e0410:	f7fc fd8e 	bl	dcf30 <system_ctrl_set_result>
}
   e0414:	b003      	add	sp, #12
   e0416:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e041c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   e041c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e041e:	8843      	ldrh	r3, [r0, #2]
   e0420:	2b0a      	cmp	r3, #10
   e0422:	d008      	beq.n	e0436 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e0424:	2b50      	cmp	r3, #80	; 0x50
   e0426:	d10b      	bne.n	e0440 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   e0428:	4b09      	ldr	r3, [pc, #36]	; (e0450 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e042a:	681b      	ldr	r3, [r3, #0]
   e042c:	b14b      	cbz	r3, e0442 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   e042e:	b003      	add	sp, #12
   e0430:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   e0434:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   e0436:	f7ff ffe5 	bl	e0404 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   e043a:	b003      	add	sp, #12
   e043c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e0440:	2300      	movs	r3, #0
   e0442:	9300      	str	r3, [sp, #0]
   e0444:	461a      	mov	r2, r3
   e0446:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e044a:	f7fc fd71 	bl	dcf30 <system_ctrl_set_result>
}
   e044e:	e7f4      	b.n	e043a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   e0450:	2003e70c 	.word	0x2003e70c

000e0454 <module_user_init_hook>:
{
   e0454:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e0456:	4812      	ldr	r0, [pc, #72]	; (e04a0 <module_user_init_hook+0x4c>)
   e0458:	2100      	movs	r1, #0
   e045a:	f7fc fe7d 	bl	dd158 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   e045e:	4b11      	ldr	r3, [pc, #68]	; (e04a4 <module_user_init_hook+0x50>)
   e0460:	681a      	ldr	r2, [r3, #0]
   e0462:	4b11      	ldr	r3, [pc, #68]	; (e04a8 <module_user_init_hook+0x54>)
   e0464:	429a      	cmp	r2, r3
   e0466:	4b11      	ldr	r3, [pc, #68]	; (e04ac <module_user_init_hook+0x58>)
   e0468:	bf0c      	ite	eq
   e046a:	2201      	moveq	r2, #1
   e046c:	2200      	movne	r2, #0
   e046e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e0470:	d001      	beq.n	e0476 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   e0472:	f7ff ffb1 	bl	e03d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e0476:	f7fc fac7 	bl	dca08 <HAL_RNG_GetRandomNumber>
   e047a:	4604      	mov	r4, r0
    srand(seed);
   e047c:	f001 f924 	bl	e16c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e0480:	4b0b      	ldr	r3, [pc, #44]	; (e04b0 <module_user_init_hook+0x5c>)
   e0482:	b113      	cbz	r3, e048a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   e0484:	4620      	mov	r0, r4
   e0486:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e048a:	2100      	movs	r1, #0
   e048c:	4808      	ldr	r0, [pc, #32]	; (e04b0 <module_user_init_hook+0x5c>)
   e048e:	f7fc fda3 	bl	dcfd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   e0492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e0496:	4807      	ldr	r0, [pc, #28]	; (e04b4 <module_user_init_hook+0x60>)
   e0498:	2100      	movs	r1, #0
   e049a:	f7fc bd3f 	b.w	dcf1c <system_ctrl_set_app_request_handler>
   e049e:	bf00      	nop
   e04a0:	000e0381 	.word	0x000e0381
   e04a4:	2003f400 	.word	0x2003f400
   e04a8:	9a271c1e 	.word	0x9a271c1e
   e04ac:	2003e708 	.word	0x2003e708
   e04b0:	00000000 	.word	0x00000000
   e04b4:	000e041d 	.word	0x000e041d

000e04b8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   e04b8:	b508      	push	{r3, lr}
   e04ba:	4b02      	ldr	r3, [pc, #8]	; (e04c4 <spark_protocol_instance+0xc>)
   e04bc:	681b      	ldr	r3, [r3, #0]
   e04be:	681b      	ldr	r3, [r3, #0]
   e04c0:	9301      	str	r3, [sp, #4]
   e04c2:	bd08      	pop	{r3, pc}
   e04c4:	0003025c 	.word	0x0003025c

000e04c8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   e04c8:	b508      	push	{r3, lr}
   e04ca:	4b02      	ldr	r3, [pc, #8]	; (e04d4 <spark_protocol_set_product_id+0xc>)
   e04cc:	681b      	ldr	r3, [r3, #0]
   e04ce:	685b      	ldr	r3, [r3, #4]
   e04d0:	9301      	str	r3, [sp, #4]
   e04d2:	bd08      	pop	{r3, pc}
   e04d4:	0003025c 	.word	0x0003025c

000e04d8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   e04d8:	b508      	push	{r3, lr}
   e04da:	4b02      	ldr	r3, [pc, #8]	; (e04e4 <spark_protocol_set_product_firmware_version+0xc>)
   e04dc:	681b      	ldr	r3, [r3, #0]
   e04de:	689b      	ldr	r3, [r3, #8]
   e04e0:	9301      	str	r3, [sp, #4]
   e04e2:	bd08      	pop	{r3, pc}
   e04e4:	0003025c 	.word	0x0003025c

000e04e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   e04e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   e04ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   e04ec:	d902      	bls.n	e04f4 <pinAvailable+0xc>
    return false;
   e04ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   e04f0:	b002      	add	sp, #8
   e04f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   e04f4:	f1a0 030b 	sub.w	r3, r0, #11
   e04f8:	2b02      	cmp	r3, #2
   e04fa:	d81a      	bhi.n	e0532 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e04fc:	4c17      	ldr	r4, [pc, #92]	; (e055c <pinAvailable+0x74>)
   e04fe:	7821      	ldrb	r1, [r4, #0]
   e0500:	f3bf 8f5b 	dmb	ish
   e0504:	f011 0101 	ands.w	r1, r1, #1
   e0508:	d10b      	bne.n	e0522 <pinAvailable+0x3a>
   e050a:	4620      	mov	r0, r4
   e050c:	9101      	str	r1, [sp, #4]
   e050e:	f7f3 fdd5 	bl	d40bc <__cxa_guard_acquire>
   e0512:	9901      	ldr	r1, [sp, #4]
   e0514:	b128      	cbz	r0, e0522 <pinAvailable+0x3a>
   e0516:	4812      	ldr	r0, [pc, #72]	; (e0560 <pinAvailable+0x78>)
   e0518:	f7ff fa9c 	bl	dfa54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   e051c:	4620      	mov	r0, r4
   e051e:	f7f3 fdd2 	bl	d40c6 <__cxa_guard_release>
   e0522:	4b0f      	ldr	r3, [pc, #60]	; (e0560 <pinAvailable+0x78>)
   e0524:	7818      	ldrb	r0, [r3, #0]
   e0526:	f7fc fb67 	bl	dcbf8 <hal_spi_is_enabled>
   e052a:	2800      	cmp	r0, #0
   e052c:	d1df      	bne.n	e04ee <pinAvailable+0x6>
  return true; // 'pin' is available
   e052e:	2001      	movs	r0, #1
   e0530:	e7de      	b.n	e04f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   e0532:	2801      	cmp	r0, #1
   e0534:	d809      	bhi.n	e054a <pinAvailable+0x62>
   e0536:	f000 f89b 	bl	e0670 <_Z19__fetch_global_Wirev>
   e053a:	2100      	movs	r1, #0
   e053c:	7c00      	ldrb	r0, [r0, #16]
   e053e:	f7fc fb13 	bl	dcb68 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   e0542:	f080 0001 	eor.w	r0, r0, #1
   e0546:	b2c0      	uxtb	r0, r0
   e0548:	e7d2      	b.n	e04f0 <pinAvailable+0x8>
   e054a:	3809      	subs	r0, #9
   e054c:	2801      	cmp	r0, #1
   e054e:	d8ee      	bhi.n	e052e <pinAvailable+0x46>
   e0550:	f7ff fe68 	bl	e0224 <_Z22__fetch_global_Serial1v>
   e0554:	7c00      	ldrb	r0, [r0, #16]
   e0556:	f7fc fbf7 	bl	dcd48 <hal_usart_is_enabled>
   e055a:	e7f2      	b.n	e0542 <pinAvailable+0x5a>
   e055c:	2003e710 	.word	0x2003e710
   e0560:	2003e714 	.word	0x2003e714

000e0564 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e0564:	2823      	cmp	r0, #35	; 0x23
{
   e0566:	b538      	push	{r3, r4, r5, lr}
   e0568:	4604      	mov	r4, r0
   e056a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e056c:	d80a      	bhi.n	e0584 <pinMode+0x20>
   e056e:	29ff      	cmp	r1, #255	; 0xff
   e0570:	d008      	beq.n	e0584 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   e0572:	f7ff ffb9 	bl	e04e8 <pinAvailable>
   e0576:	b128      	cbz	r0, e0584 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   e0578:	4629      	mov	r1, r5
   e057a:	4620      	mov	r0, r4
}
   e057c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   e0580:	f7fc ba8a 	b.w	dca98 <HAL_Pin_Mode>
}
   e0584:	bd38      	pop	{r3, r4, r5, pc}

000e0586 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   e0586:	b538      	push	{r3, r4, r5, lr}
   e0588:	4604      	mov	r4, r0
   e058a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e058c:	f7fc fa8c 	bl	dcaa8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   e0590:	28ff      	cmp	r0, #255	; 0xff
   e0592:	d010      	beq.n	e05b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   e0594:	2806      	cmp	r0, #6
   e0596:	d804      	bhi.n	e05a2 <digitalWrite+0x1c>
   e0598:	234d      	movs	r3, #77	; 0x4d
   e059a:	fa23 f000 	lsr.w	r0, r3, r0
   e059e:	07c3      	lsls	r3, r0, #31
   e05a0:	d409      	bmi.n	e05b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   e05a2:	4620      	mov	r0, r4
   e05a4:	f7ff ffa0 	bl	e04e8 <pinAvailable>
   e05a8:	b128      	cbz	r0, e05b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   e05aa:	4629      	mov	r1, r5
   e05ac:	4620      	mov	r0, r4
}
   e05ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   e05b2:	f7fc ba81 	b.w	dcab8 <HAL_GPIO_Write>
}
   e05b6:	bd38      	pop	{r3, r4, r5, pc}

000e05b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   e05b8:	b510      	push	{r4, lr}
   e05ba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e05bc:	f7fc fa74 	bl	dcaa8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   e05c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   e05c2:	b2db      	uxtb	r3, r3
   e05c4:	2b01      	cmp	r3, #1
   e05c6:	d908      	bls.n	e05da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   e05c8:	4620      	mov	r0, r4
   e05ca:	f7ff ff8d 	bl	e04e8 <pinAvailable>
   e05ce:	b120      	cbz	r0, e05da <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e05d0:	4620      	mov	r0, r4
}
   e05d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   e05d6:	f7fc ba77 	b.w	dcac8 <HAL_GPIO_Read>
}
   e05da:	2000      	movs	r0, #0
   e05dc:	bd10      	pop	{r4, pc}

000e05de <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   e05de:	280d      	cmp	r0, #13
{
   e05e0:	b510      	push	{r4, lr}
   e05e2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   e05e4:	bf9c      	itt	ls
   e05e6:	340e      	addls	r4, #14
   e05e8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e05ea:	4620      	mov	r0, r4
   e05ec:	f7ff ff7c 	bl	e04e8 <pinAvailable>
   e05f0:	b150      	cbz	r0, e0608 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   e05f2:	2103      	movs	r1, #3
   e05f4:	4620      	mov	r0, r4
   e05f6:	f7fc fa47 	bl	dca88 <HAL_Validate_Pin_Function>
   e05fa:	2803      	cmp	r0, #3
   e05fc:	d104      	bne.n	e0608 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   e05fe:	4620      	mov	r0, r4
}
   e0600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   e0604:	f7fc ba68 	b.w	dcad8 <hal_adc_read>
}
   e0608:	2000      	movs	r0, #0
   e060a:	bd10      	pop	{r4, pc}

000e060c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e060c:	4770      	bx	lr

000e060e <__tcf_1>:
   e060e:	4770      	bx	lr

000e0610 <_Z17acquireWireBufferv>:
{
   e0610:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   e0612:	2300      	movs	r3, #0
   e0614:	2520      	movs	r5, #32
   e0616:	8043      	strh	r3, [r0, #2]
   e0618:	2314      	movs	r3, #20
{
   e061a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   e061c:	8003      	strh	r3, [r0, #0]
   e061e:	6085      	str	r5, [r0, #8]
   e0620:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e0622:	4906      	ldr	r1, [pc, #24]	; (e063c <_Z17acquireWireBufferv+0x2c>)
   e0624:	4628      	mov	r0, r5
   e0626:	f000 f8a3 	bl	e0770 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e062a:	4904      	ldr	r1, [pc, #16]	; (e063c <_Z17acquireWireBufferv+0x2c>)
	};
   e062c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e062e:	4628      	mov	r0, r5
   e0630:	f000 f89e 	bl	e0770 <_ZnajRKSt9nothrow_t>
	};
   e0634:	60e0      	str	r0, [r4, #12]
}
   e0636:	4620      	mov	r0, r4
   e0638:	bd38      	pop	{r3, r4, r5, pc}
   e063a:	bf00      	nop
   e063c:	000e4ac8 	.word	0x000e4ac8

000e0640 <_Z18acquireWire1Bufferv>:
   e0640:	b538      	push	{r3, r4, r5, lr}
   e0642:	2300      	movs	r3, #0
   e0644:	2520      	movs	r5, #32
   e0646:	8043      	strh	r3, [r0, #2]
   e0648:	2314      	movs	r3, #20
   e064a:	4604      	mov	r4, r0
   e064c:	8003      	strh	r3, [r0, #0]
   e064e:	6085      	str	r5, [r0, #8]
   e0650:	6105      	str	r5, [r0, #16]
   e0652:	4906      	ldr	r1, [pc, #24]	; (e066c <_Z18acquireWire1Bufferv+0x2c>)
   e0654:	4628      	mov	r0, r5
   e0656:	f000 f88b 	bl	e0770 <_ZnajRKSt9nothrow_t>
   e065a:	4904      	ldr	r1, [pc, #16]	; (e066c <_Z18acquireWire1Bufferv+0x2c>)
   e065c:	6060      	str	r0, [r4, #4]
   e065e:	4628      	mov	r0, r5
   e0660:	f000 f886 	bl	e0770 <_ZnajRKSt9nothrow_t>
   e0664:	60e0      	str	r0, [r4, #12]
   e0666:	4620      	mov	r0, r4
   e0668:	bd38      	pop	{r3, r4, r5, pc}
   e066a:	bf00      	nop
   e066c:	000e4ac8 	.word	0x000e4ac8

000e0670 <_Z19__fetch_global_Wirev>:
{
   e0670:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e0672:	4d0e      	ldr	r5, [pc, #56]	; (e06ac <_Z19__fetch_global_Wirev+0x3c>)
   e0674:	7829      	ldrb	r1, [r5, #0]
   e0676:	f3bf 8f5b 	dmb	ish
   e067a:	f011 0401 	ands.w	r4, r1, #1
{
   e067e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e0680:	d111      	bne.n	e06a6 <_Z19__fetch_global_Wirev+0x36>
   e0682:	4628      	mov	r0, r5
   e0684:	f7f3 fd1a 	bl	d40bc <__cxa_guard_acquire>
   e0688:	b168      	cbz	r0, e06a6 <_Z19__fetch_global_Wirev+0x36>
   e068a:	a801      	add	r0, sp, #4
   e068c:	f7ff ffc0 	bl	e0610 <_Z17acquireWireBufferv>
   e0690:	aa01      	add	r2, sp, #4
   e0692:	4621      	mov	r1, r4
   e0694:	4806      	ldr	r0, [pc, #24]	; (e06b0 <_Z19__fetch_global_Wirev+0x40>)
   e0696:	f7fd faf5 	bl	ddc84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e069a:	4628      	mov	r0, r5
   e069c:	f7f3 fd13 	bl	d40c6 <__cxa_guard_release>
   e06a0:	4804      	ldr	r0, [pc, #16]	; (e06b4 <_Z19__fetch_global_Wirev+0x44>)
   e06a2:	f000 ffc9 	bl	e1638 <atexit>
	return wire;
}
   e06a6:	4802      	ldr	r0, [pc, #8]	; (e06b0 <_Z19__fetch_global_Wirev+0x40>)
   e06a8:	b007      	add	sp, #28
   e06aa:	bd30      	pop	{r4, r5, pc}
   e06ac:	2003e720 	.word	0x2003e720
   e06b0:	2003e728 	.word	0x2003e728
   e06b4:	000e060d 	.word	0x000e060d

000e06b8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   e06b8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   e06ba:	4c0e      	ldr	r4, [pc, #56]	; (e06f4 <_Z20__fetch_global_Wire1v+0x3c>)
   e06bc:	7823      	ldrb	r3, [r4, #0]
   e06be:	f3bf 8f5b 	dmb	ish
   e06c2:	07db      	lsls	r3, r3, #31
{
   e06c4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   e06c6:	d411      	bmi.n	e06ec <_Z20__fetch_global_Wire1v+0x34>
   e06c8:	4620      	mov	r0, r4
   e06ca:	f7f3 fcf7 	bl	d40bc <__cxa_guard_acquire>
   e06ce:	b168      	cbz	r0, e06ec <_Z20__fetch_global_Wire1v+0x34>
   e06d0:	a801      	add	r0, sp, #4
   e06d2:	f7ff ffb5 	bl	e0640 <_Z18acquireWire1Bufferv>
   e06d6:	aa01      	add	r2, sp, #4
   e06d8:	2101      	movs	r1, #1
   e06da:	4807      	ldr	r0, [pc, #28]	; (e06f8 <_Z20__fetch_global_Wire1v+0x40>)
   e06dc:	f7fd fad2 	bl	ddc84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e06e0:	4620      	mov	r0, r4
   e06e2:	f7f3 fcf0 	bl	d40c6 <__cxa_guard_release>
   e06e6:	4805      	ldr	r0, [pc, #20]	; (e06fc <_Z20__fetch_global_Wire1v+0x44>)
   e06e8:	f000 ffa6 	bl	e1638 <atexit>
	return wire;
}
   e06ec:	4802      	ldr	r0, [pc, #8]	; (e06f8 <_Z20__fetch_global_Wire1v+0x40>)
   e06ee:	b006      	add	sp, #24
   e06f0:	bd10      	pop	{r4, pc}
   e06f2:	bf00      	nop
   e06f4:	2003e724 	.word	0x2003e724
   e06f8:	2003e73c 	.word	0x2003e73c
   e06fc:	000e060f 	.word	0x000e060f

000e0700 <_ZdlPvj>:
   e0700:	f7f3 bccd 	b.w	d409e <_ZdlPv>

000e0704 <_ZSt11_Hash_bytesPKvjj>:
   e0704:	4b18      	ldr	r3, [pc, #96]	; (e0768 <_ZSt11_Hash_bytesPKvjj+0x64>)
   e0706:	b570      	push	{r4, r5, r6, lr}
   e0708:	404a      	eors	r2, r1
   e070a:	460d      	mov	r5, r1
   e070c:	1846      	adds	r6, r0, r1
   e070e:	2d03      	cmp	r5, #3
   e0710:	eba6 0405 	sub.w	r4, r6, r5
   e0714:	d908      	bls.n	e0728 <_ZSt11_Hash_bytesPKvjj+0x24>
   e0716:	6824      	ldr	r4, [r4, #0]
   e0718:	435c      	muls	r4, r3
   e071a:	ea84 6414 	eor.w	r4, r4, r4, lsr #24
   e071e:	435a      	muls	r2, r3
   e0720:	435c      	muls	r4, r3
   e0722:	4062      	eors	r2, r4
   e0724:	3d04      	subs	r5, #4
   e0726:	e7f2      	b.n	e070e <_ZSt11_Hash_bytesPKvjj+0xa>
   e0728:	088d      	lsrs	r5, r1, #2
   e072a:	f06f 0403 	mvn.w	r4, #3
   e072e:	fb04 1105 	mla	r1, r4, r5, r1
   e0732:	2902      	cmp	r1, #2
   e0734:	eb00 0485 	add.w	r4, r0, r5, lsl #2
   e0738:	d011      	beq.n	e075e <_ZSt11_Hash_bytesPKvjj+0x5a>
   e073a:	2903      	cmp	r1, #3
   e073c:	d00c      	beq.n	e0758 <_ZSt11_Hash_bytesPKvjj+0x54>
   e073e:	2901      	cmp	r1, #1
   e0740:	d103      	bne.n	e074a <_ZSt11_Hash_bytesPKvjj+0x46>
   e0742:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
   e0746:	4042      	eors	r2, r0
   e0748:	435a      	muls	r2, r3
   e074a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
   e074e:	fb03 f002 	mul.w	r0, r3, r2
   e0752:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
   e0756:	bd70      	pop	{r4, r5, r6, pc}
   e0758:	78a1      	ldrb	r1, [r4, #2]
   e075a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
   e075e:	7861      	ldrb	r1, [r4, #1]
   e0760:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
   e0764:	e7ed      	b.n	e0742 <_ZSt11_Hash_bytesPKvjj+0x3e>
   e0766:	bf00      	nop
   e0768:	5bd1e995 	.word	0x5bd1e995

000e076c <_ZnwjRKSt9nothrow_t>:
   e076c:	f7f3 bc93 	b.w	d4096 <_Znwj>

000e0770 <_ZnajRKSt9nothrow_t>:
   e0770:	f7f3 bc93 	b.w	d409a <_Znaj>

000e0774 <_ZSt17__throw_bad_allocv>:
   e0774:	b508      	push	{r3, lr}
   e0776:	f7fc fcd7 	bl	dd128 <abort>

000e077a <_ZSt20__throw_length_errorPKc>:
   e077a:	b508      	push	{r3, lr}
   e077c:	f7fc fcd4 	bl	dd128 <abort>

000e0780 <_ZSt25__throw_bad_function_callv>:
   e0780:	b508      	push	{r3, lr}
   e0782:	f7fc fcd1 	bl	dd128 <abort>
	...

000e0788 <floor>:
   e0788:	ec51 0b10 	vmov	r0, r1, d0
   e078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e078e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   e0792:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   e0796:	2d13      	cmp	r5, #19
   e0798:	ee10 6a10 	vmov	r6, s0
   e079c:	460c      	mov	r4, r1
   e079e:	dc20      	bgt.n	e07e2 <floor+0x5a>
   e07a0:	2d00      	cmp	r5, #0
   e07a2:	db3d      	blt.n	e0820 <floor+0x98>
   e07a4:	4f38      	ldr	r7, [pc, #224]	; (e0888 <floor+0x100>)
   e07a6:	412f      	asrs	r7, r5
   e07a8:	ea01 0307 	and.w	r3, r1, r7
   e07ac:	4303      	orrs	r3, r0
   e07ae:	d01d      	beq.n	e07ec <floor+0x64>
   e07b0:	a333      	add	r3, pc, #204	; (adr r3, e0880 <floor+0xf8>)
   e07b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e07b6:	f000 f9fd 	bl	e0bb4 <__adddf3>
   e07ba:	2200      	movs	r2, #0
   e07bc:	2300      	movs	r3, #0
   e07be:	f000 fe3f 	bl	e1440 <__aeabi_dcmpgt>
   e07c2:	b148      	cbz	r0, e07d8 <floor+0x50>
   e07c4:	2c00      	cmp	r4, #0
   e07c6:	da04      	bge.n	e07d2 <floor+0x4a>
   e07c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   e07cc:	fa43 f505 	asr.w	r5, r3, r5
   e07d0:	442c      	add	r4, r5
   e07d2:	ea24 0407 	bic.w	r4, r4, r7
   e07d6:	2600      	movs	r6, #0
   e07d8:	4623      	mov	r3, r4
   e07da:	4632      	mov	r2, r6
   e07dc:	ec43 2b10 	vmov	d0, r2, r3
   e07e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e07e2:	2d33      	cmp	r5, #51	; 0x33
   e07e4:	dd05      	ble.n	e07f2 <floor+0x6a>
   e07e6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   e07ea:	d029      	beq.n	e0840 <floor+0xb8>
   e07ec:	ec41 0b10 	vmov	d0, r0, r1
   e07f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e07f2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   e07f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   e07fa:	40df      	lsrs	r7, r3
   e07fc:	4207      	tst	r7, r0
   e07fe:	d0f5      	beq.n	e07ec <floor+0x64>
   e0800:	a31f      	add	r3, pc, #124	; (adr r3, e0880 <floor+0xf8>)
   e0802:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0806:	f000 f9d5 	bl	e0bb4 <__adddf3>
   e080a:	2200      	movs	r2, #0
   e080c:	2300      	movs	r3, #0
   e080e:	f000 fe17 	bl	e1440 <__aeabi_dcmpgt>
   e0812:	2800      	cmp	r0, #0
   e0814:	d0e0      	beq.n	e07d8 <floor+0x50>
   e0816:	2c00      	cmp	r4, #0
   e0818:	db23      	blt.n	e0862 <floor+0xda>
   e081a:	ea26 0607 	bic.w	r6, r6, r7
   e081e:	e7db      	b.n	e07d8 <floor+0x50>
   e0820:	a317      	add	r3, pc, #92	; (adr r3, e0880 <floor+0xf8>)
   e0822:	e9d3 2300 	ldrd	r2, r3, [r3]
   e0826:	f000 f9c5 	bl	e0bb4 <__adddf3>
   e082a:	2200      	movs	r2, #0
   e082c:	2300      	movs	r3, #0
   e082e:	f000 fe07 	bl	e1440 <__aeabi_dcmpgt>
   e0832:	2800      	cmp	r0, #0
   e0834:	d0d0      	beq.n	e07d8 <floor+0x50>
   e0836:	2c00      	cmp	r4, #0
   e0838:	db0a      	blt.n	e0850 <floor+0xc8>
   e083a:	2600      	movs	r6, #0
   e083c:	4634      	mov	r4, r6
   e083e:	e7cb      	b.n	e07d8 <floor+0x50>
   e0840:	ee10 2a10 	vmov	r2, s0
   e0844:	460b      	mov	r3, r1
   e0846:	f000 f9b5 	bl	e0bb4 <__adddf3>
   e084a:	ec41 0b10 	vmov	d0, r0, r1
   e084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0850:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   e0854:	4a0d      	ldr	r2, [pc, #52]	; (e088c <floor+0x104>)
   e0856:	431e      	orrs	r6, r3
   e0858:	2e00      	cmp	r6, #0
   e085a:	bf18      	it	ne
   e085c:	4614      	movne	r4, r2
   e085e:	2600      	movs	r6, #0
   e0860:	e7ba      	b.n	e07d8 <floor+0x50>
   e0862:	2d14      	cmp	r5, #20
   e0864:	d008      	beq.n	e0878 <floor+0xf0>
   e0866:	2301      	movs	r3, #1
   e0868:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   e086c:	fa03 f505 	lsl.w	r5, r3, r5
   e0870:	19ae      	adds	r6, r5, r6
   e0872:	bf28      	it	cs
   e0874:	18e4      	addcs	r4, r4, r3
   e0876:	e7d0      	b.n	e081a <floor+0x92>
   e0878:	3401      	adds	r4, #1
   e087a:	e7ce      	b.n	e081a <floor+0x92>
   e087c:	f3af 8000 	nop.w
   e0880:	8800759c 	.word	0x8800759c
   e0884:	7e37e43c 	.word	0x7e37e43c
   e0888:	000fffff 	.word	0x000fffff
   e088c:	bff00000 	.word	0xbff00000

000e0890 <logf>:
   e0890:	b510      	push	{r4, lr}
   e0892:	ed2d 8b02 	vpush	{d8}
   e0896:	b08a      	sub	sp, #40	; 0x28
   e0898:	eeb0 8a40 	vmov.f32	s16, s0
   e089c:	f000 f87a 	bl	e0994 <__ieee754_logf>
   e08a0:	4b37      	ldr	r3, [pc, #220]	; (e0980 <logf+0xf0>)
   e08a2:	f993 4000 	ldrsb.w	r4, [r3]
   e08a6:	1c63      	adds	r3, r4, #1
   e08a8:	d033      	beq.n	e0912 <logf+0x82>
   e08aa:	eeb4 8a48 	vcmp.f32	s16, s16
   e08ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e08b2:	d62e      	bvs.n	e0912 <logf+0x82>
   e08b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   e08b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e08bc:	dc29      	bgt.n	e0912 <logf+0x82>
   e08be:	4b31      	ldr	r3, [pc, #196]	; (e0984 <logf+0xf4>)
   e08c0:	9301      	str	r3, [sp, #4]
   e08c2:	ee18 0a10 	vmov	r0, s16
   e08c6:	2300      	movs	r3, #0
   e08c8:	9308      	str	r3, [sp, #32]
   e08ca:	f000 fad1 	bl	e0e70 <__aeabi_f2d>
   e08ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e08d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e08d6:	b304      	cbz	r4, e091a <logf+0x8a>
   e08d8:	4b2b      	ldr	r3, [pc, #172]	; (e0988 <logf+0xf8>)
   e08da:	eeb5 8a40 	vcmp.f32	s16, #0.0
   e08de:	2200      	movs	r2, #0
   e08e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e08e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   e08e8:	d141      	bne.n	e096e <logf+0xde>
   e08ea:	2302      	movs	r3, #2
   e08ec:	429c      	cmp	r4, r3
   e08ee:	9300      	str	r3, [sp, #0]
   e08f0:	d137      	bne.n	e0962 <logf+0xd2>
   e08f2:	f7fc fc29 	bl	dd148 <__errno>
   e08f6:	2322      	movs	r3, #34	; 0x22
   e08f8:	6003      	str	r3, [r0, #0]
   e08fa:	9b08      	ldr	r3, [sp, #32]
   e08fc:	b32b      	cbz	r3, e094a <logf+0xba>
   e08fe:	f7fc fc23 	bl	dd148 <__errno>
   e0902:	9b08      	ldr	r3, [sp, #32]
   e0904:	6003      	str	r3, [r0, #0]
   e0906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e090a:	f000 fe01 	bl	e1510 <__aeabi_d2f>
   e090e:	ee00 0a10 	vmov	s0, r0
   e0912:	b00a      	add	sp, #40	; 0x28
   e0914:	ecbd 8b02 	vpop	{d8}
   e0918:	bd10      	pop	{r4, pc}
   e091a:	4b1c      	ldr	r3, [pc, #112]	; (e098c <logf+0xfc>)
   e091c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   e0920:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   e0924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e0928:	e9cd 2306 	strd	r2, r3, [sp, #24]
   e092c:	d017      	beq.n	e095e <logf+0xce>
   e092e:	2301      	movs	r3, #1
   e0930:	9300      	str	r3, [sp, #0]
   e0932:	4668      	mov	r0, sp
   e0934:	f000 f92e 	bl	e0b94 <matherr>
   e0938:	b1e8      	cbz	r0, e0976 <logf+0xe6>
   e093a:	4815      	ldr	r0, [pc, #84]	; (e0990 <logf+0x100>)
   e093c:	f000 f92c 	bl	e0b98 <nan>
   e0940:	ed8d 0b06 	vstr	d0, [sp, #24]
   e0944:	9b08      	ldr	r3, [sp, #32]
   e0946:	2b00      	cmp	r3, #0
   e0948:	d1d9      	bne.n	e08fe <logf+0x6e>
   e094a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e094e:	f000 fddf 	bl	e1510 <__aeabi_d2f>
   e0952:	ee00 0a10 	vmov	s0, r0
   e0956:	b00a      	add	sp, #40	; 0x28
   e0958:	ecbd 8b02 	vpop	{d8}
   e095c:	bd10      	pop	{r4, pc}
   e095e:	2302      	movs	r3, #2
   e0960:	9300      	str	r3, [sp, #0]
   e0962:	4668      	mov	r0, sp
   e0964:	f000 f916 	bl	e0b94 <matherr>
   e0968:	2800      	cmp	r0, #0
   e096a:	d1eb      	bne.n	e0944 <logf+0xb4>
   e096c:	e7c1      	b.n	e08f2 <logf+0x62>
   e096e:	2301      	movs	r3, #1
   e0970:	2c02      	cmp	r4, #2
   e0972:	9300      	str	r3, [sp, #0]
   e0974:	d1dd      	bne.n	e0932 <logf+0xa2>
   e0976:	f7fc fbe7 	bl	dd148 <__errno>
   e097a:	2321      	movs	r3, #33	; 0x21
   e097c:	6003      	str	r3, [r0, #0]
   e097e:	e7dc      	b.n	e093a <logf+0xaa>
   e0980:	2003e1d4 	.word	0x2003e1d4
   e0984:	000e4acc 	.word	0x000e4acc
   e0988:	fff00000 	.word	0xfff00000
   e098c:	c7efffff 	.word	0xc7efffff
   e0990:	000e4ad0 	.word	0x000e4ad0

000e0994 <__ieee754_logf>:
   e0994:	ee10 3a10 	vmov	r3, s0
   e0998:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   e099c:	d02d      	beq.n	e09fa <__ieee754_logf+0x66>
   e099e:	2b00      	cmp	r3, #0
   e09a0:	db32      	blt.n	e0a08 <__ieee754_logf+0x74>
   e09a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   e09a6:	da3f      	bge.n	e0a28 <__ieee754_logf+0x94>
   e09a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   e09ac:	b430      	push	{r4, r5}
   e09ae:	db32      	blt.n	e0a16 <__ieee754_logf+0x82>
   e09b0:	2500      	movs	r5, #0
   e09b2:	4868      	ldr	r0, [pc, #416]	; (e0b54 <__ieee754_logf+0x1c0>)
   e09b4:	4c68      	ldr	r4, [pc, #416]	; (e0b58 <__ieee754_logf+0x1c4>)
   e09b6:	f3c3 0116 	ubfx	r1, r3, #0, #23
   e09ba:	4408      	add	r0, r1
   e09bc:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   e09c0:	15db      	asrs	r3, r3, #23
   e09c2:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   e09c6:	3b7f      	subs	r3, #127	; 0x7f
   e09c8:	430a      	orrs	r2, r1
   e09ca:	442b      	add	r3, r5
   e09cc:	ee00 2a10 	vmov	s0, r2
   e09d0:	f101 050f 	add.w	r5, r1, #15
   e09d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   e09d8:	402c      	ands	r4, r5
   e09da:	ee30 0a67 	vsub.f32	s0, s0, s15
   e09de:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   e09e2:	bb24      	cbnz	r4, e0a2e <__ieee754_logf+0x9a>
   e09e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
   e09e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e09ec:	d161      	bne.n	e0ab2 <__ieee754_logf+0x11e>
   e09ee:	2b00      	cmp	r3, #0
   e09f0:	f040 8093 	bne.w	e0b1a <__ieee754_logf+0x186>
   e09f4:	ed9f 0a59 	vldr	s0, [pc, #356]	; e0b5c <__ieee754_logf+0x1c8>
   e09f8:	e059      	b.n	e0aae <__ieee754_logf+0x11a>
   e09fa:	ed9f 7a59 	vldr	s14, [pc, #356]	; e0b60 <__ieee754_logf+0x1cc>
   e09fe:	eddf 7a57 	vldr	s15, [pc, #348]	; e0b5c <__ieee754_logf+0x1c8>
   e0a02:	ee87 0a27 	vdiv.f32	s0, s14, s15
   e0a06:	4770      	bx	lr
   e0a08:	ee70 7a40 	vsub.f32	s15, s0, s0
   e0a0c:	ed9f 7a53 	vldr	s14, [pc, #332]	; e0b5c <__ieee754_logf+0x1c8>
   e0a10:	ee87 0a87 	vdiv.f32	s0, s15, s14
   e0a14:	4770      	bx	lr
   e0a16:	eddf 7a53 	vldr	s15, [pc, #332]	; e0b64 <__ieee754_logf+0x1d0>
   e0a1a:	ee60 7a27 	vmul.f32	s15, s0, s15
   e0a1e:	f06f 0518 	mvn.w	r5, #24
   e0a22:	ee17 3a90 	vmov	r3, s15
   e0a26:	e7c4      	b.n	e09b2 <__ieee754_logf+0x1e>
   e0a28:	ee30 0a00 	vadd.f32	s0, s0, s0
   e0a2c:	4770      	bx	lr
   e0a2e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   e0a32:	ee30 7a07 	vadd.f32	s14, s0, s14
   e0a36:	ed9f 3a4c 	vldr	s6, [pc, #304]	; e0b68 <__ieee754_logf+0x1d4>
   e0a3a:	eddf 4a4c 	vldr	s9, [pc, #304]	; e0b6c <__ieee754_logf+0x1d8>
   e0a3e:	eddf 5a4c 	vldr	s11, [pc, #304]	; e0b70 <__ieee754_logf+0x1dc>
   e0a42:	eddf 3a4c 	vldr	s7, [pc, #304]	; e0b74 <__ieee754_logf+0x1e0>
   e0a46:	ed9f 5a4c 	vldr	s10, [pc, #304]	; e0b78 <__ieee754_logf+0x1e4>
   e0a4a:	eddf 7a4c 	vldr	s15, [pc, #304]	; e0b7c <__ieee754_logf+0x1e8>
   e0a4e:	eddf 6a4c 	vldr	s13, [pc, #304]	; e0b80 <__ieee754_logf+0x1ec>
   e0a52:	484c      	ldr	r0, [pc, #304]	; (e0b84 <__ieee754_logf+0x1f0>)
   e0a54:	ee80 4a07 	vdiv.f32	s8, s0, s14
   e0a58:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   e0a5c:	4408      	add	r0, r1
   e0a5e:	f502 7222 	add.w	r2, r2, #648	; 0x288
   e0a62:	4302      	orrs	r2, r0
   e0a64:	2a00      	cmp	r2, #0
   e0a66:	ee07 3a10 	vmov	s14, r3
   e0a6a:	ee24 6a04 	vmul.f32	s12, s8, s8
   e0a6e:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   e0a72:	ee26 7a06 	vmul.f32	s14, s12, s12
   e0a76:	eee7 4a03 	vfma.f32	s9, s14, s6
   e0a7a:	eea7 5a23 	vfma.f32	s10, s14, s7
   e0a7e:	eee4 5a87 	vfma.f32	s11, s9, s14
   e0a82:	eee5 6a07 	vfma.f32	s13, s10, s14
   e0a86:	eee5 7a87 	vfma.f32	s15, s11, s14
   e0a8a:	ee67 7a86 	vmul.f32	s15, s15, s12
   e0a8e:	eee6 7a87 	vfma.f32	s15, s13, s14
   e0a92:	dd2b      	ble.n	e0aec <__ieee754_logf+0x158>
   e0a94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   e0a98:	ee20 7a07 	vmul.f32	s14, s0, s14
   e0a9c:	ee27 7a00 	vmul.f32	s14, s14, s0
   e0aa0:	bb53      	cbnz	r3, e0af8 <__ieee754_logf+0x164>
   e0aa2:	ee77 7a87 	vadd.f32	s15, s15, s14
   e0aa6:	eea7 7ac4 	vfms.f32	s14, s15, s8
   e0aaa:	ee30 0a47 	vsub.f32	s0, s0, s14
   e0aae:	bc30      	pop	{r4, r5}
   e0ab0:	4770      	bx	lr
   e0ab2:	eddf 7a35 	vldr	s15, [pc, #212]	; e0b88 <__ieee754_logf+0x1f4>
   e0ab6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   e0aba:	eea0 7a67 	vfms.f32	s14, s0, s15
   e0abe:	eef0 7a47 	vmov.f32	s15, s14
   e0ac2:	ee20 7a00 	vmul.f32	s14, s0, s0
   e0ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
   e0aca:	2b00      	cmp	r3, #0
   e0acc:	d0ed      	beq.n	e0aaa <__ieee754_logf+0x116>
   e0ace:	ee07 3a90 	vmov	s15, r3
   e0ad2:	ed9f 6a2e 	vldr	s12, [pc, #184]	; e0b8c <__ieee754_logf+0x1f8>
   e0ad6:	eddf 6a2e 	vldr	s13, [pc, #184]	; e0b90 <__ieee754_logf+0x1fc>
   e0ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0ade:	eea7 7ac6 	vfms.f32	s14, s15, s12
   e0ae2:	ee37 0a40 	vsub.f32	s0, s14, s0
   e0ae6:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   e0aea:	e7e0      	b.n	e0aae <__ieee754_logf+0x11a>
   e0aec:	bb13      	cbnz	r3, e0b34 <__ieee754_logf+0x1a0>
   e0aee:	ee70 7a67 	vsub.f32	s15, s0, s15
   e0af2:	eea7 0ac4 	vfms.f32	s0, s15, s8
   e0af6:	e7da      	b.n	e0aae <__ieee754_logf+0x11a>
   e0af8:	eddf 6a24 	vldr	s13, [pc, #144]	; e0b8c <__ieee754_logf+0x1f8>
   e0afc:	ed9f 6a24 	vldr	s12, [pc, #144]	; e0b90 <__ieee754_logf+0x1fc>
   e0b00:	ee77 7a87 	vadd.f32	s15, s15, s14
   e0b04:	ee62 6aa6 	vmul.f32	s13, s5, s13
   e0b08:	eee7 6a84 	vfma.f32	s13, s15, s8
   e0b0c:	ee37 7a66 	vsub.f32	s14, s14, s13
   e0b10:	ee37 0a40 	vsub.f32	s0, s14, s0
   e0b14:	ee92 0a86 	vfnms.f32	s0, s5, s12
   e0b18:	e7c9      	b.n	e0aae <__ieee754_logf+0x11a>
   e0b1a:	ee07 3a90 	vmov	s15, r3
   e0b1e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; e0b8c <__ieee754_logf+0x1f8>
   e0b22:	ed9f 7a1b 	vldr	s14, [pc, #108]	; e0b90 <__ieee754_logf+0x1fc>
   e0b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0b2a:	ee27 0a80 	vmul.f32	s0, s15, s0
   e0b2e:	eea7 0a87 	vfma.f32	s0, s15, s14
   e0b32:	e7bc      	b.n	e0aae <__ieee754_logf+0x11a>
   e0b34:	ed9f 7a15 	vldr	s14, [pc, #84]	; e0b8c <__ieee754_logf+0x1f8>
   e0b38:	eddf 6a15 	vldr	s13, [pc, #84]	; e0b90 <__ieee754_logf+0x1fc>
   e0b3c:	ee70 7a67 	vsub.f32	s15, s0, s15
   e0b40:	ee27 7a62 	vnmul.f32	s14, s14, s5
   e0b44:	eea7 7a84 	vfma.f32	s14, s15, s8
   e0b48:	ee37 0a40 	vsub.f32	s0, s14, s0
   e0b4c:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   e0b50:	e7ad      	b.n	e0aae <__ieee754_logf+0x11a>
   e0b52:	bf00      	nop
   e0b54:	004afb20 	.word	0x004afb20
   e0b58:	007ffff0 	.word	0x007ffff0
   e0b5c:	00000000 	.word	0x00000000
   e0b60:	cc000000 	.word	0xcc000000
   e0b64:	4c000000 	.word	0x4c000000
   e0b68:	3e178897 	.word	0x3e178897
   e0b6c:	3e3a3325 	.word	0x3e3a3325
   e0b70:	3e924925 	.word	0x3e924925
   e0b74:	3e1cd04f 	.word	0x3e1cd04f
   e0b78:	3e638e29 	.word	0x3e638e29
   e0b7c:	3f2aaaab 	.word	0x3f2aaaab
   e0b80:	3ecccccd 	.word	0x3ecccccd
   e0b84:	ffcf5c30 	.word	0xffcf5c30
   e0b88:	3eaaaaab 	.word	0x3eaaaaab
   e0b8c:	3717f7d1 	.word	0x3717f7d1
   e0b90:	3f317180 	.word	0x3f317180

000e0b94 <matherr>:
   e0b94:	2000      	movs	r0, #0
   e0b96:	4770      	bx	lr

000e0b98 <nan>:
   e0b98:	ed9f 0b01 	vldr	d0, [pc, #4]	; e0ba0 <nan+0x8>
   e0b9c:	4770      	bx	lr
   e0b9e:	bf00      	nop
   e0ba0:	00000000 	.word	0x00000000
   e0ba4:	7ff80000 	.word	0x7ff80000

000e0ba8 <__aeabi_drsub>:
   e0ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e0bac:	e002      	b.n	e0bb4 <__adddf3>
   e0bae:	bf00      	nop

000e0bb0 <__aeabi_dsub>:
   e0bb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e0bb4 <__adddf3>:
   e0bb4:	b530      	push	{r4, r5, lr}
   e0bb6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e0bba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e0bbe:	ea94 0f05 	teq	r4, r5
   e0bc2:	bf08      	it	eq
   e0bc4:	ea90 0f02 	teqeq	r0, r2
   e0bc8:	bf1f      	itttt	ne
   e0bca:	ea54 0c00 	orrsne.w	ip, r4, r0
   e0bce:	ea55 0c02 	orrsne.w	ip, r5, r2
   e0bd2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e0bd6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0bda:	f000 80e2 	beq.w	e0da2 <__adddf3+0x1ee>
   e0bde:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e0be2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e0be6:	bfb8      	it	lt
   e0be8:	426d      	neglt	r5, r5
   e0bea:	dd0c      	ble.n	e0c06 <__adddf3+0x52>
   e0bec:	442c      	add	r4, r5
   e0bee:	ea80 0202 	eor.w	r2, r0, r2
   e0bf2:	ea81 0303 	eor.w	r3, r1, r3
   e0bf6:	ea82 0000 	eor.w	r0, r2, r0
   e0bfa:	ea83 0101 	eor.w	r1, r3, r1
   e0bfe:	ea80 0202 	eor.w	r2, r0, r2
   e0c02:	ea81 0303 	eor.w	r3, r1, r3
   e0c06:	2d36      	cmp	r5, #54	; 0x36
   e0c08:	bf88      	it	hi
   e0c0a:	bd30      	pophi	{r4, r5, pc}
   e0c0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e0c10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e0c14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e0c18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e0c1c:	d002      	beq.n	e0c24 <__adddf3+0x70>
   e0c1e:	4240      	negs	r0, r0
   e0c20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e0c24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e0c28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e0c2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e0c30:	d002      	beq.n	e0c38 <__adddf3+0x84>
   e0c32:	4252      	negs	r2, r2
   e0c34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e0c38:	ea94 0f05 	teq	r4, r5
   e0c3c:	f000 80a7 	beq.w	e0d8e <__adddf3+0x1da>
   e0c40:	f1a4 0401 	sub.w	r4, r4, #1
   e0c44:	f1d5 0e20 	rsbs	lr, r5, #32
   e0c48:	db0d      	blt.n	e0c66 <__adddf3+0xb2>
   e0c4a:	fa02 fc0e 	lsl.w	ip, r2, lr
   e0c4e:	fa22 f205 	lsr.w	r2, r2, r5
   e0c52:	1880      	adds	r0, r0, r2
   e0c54:	f141 0100 	adc.w	r1, r1, #0
   e0c58:	fa03 f20e 	lsl.w	r2, r3, lr
   e0c5c:	1880      	adds	r0, r0, r2
   e0c5e:	fa43 f305 	asr.w	r3, r3, r5
   e0c62:	4159      	adcs	r1, r3
   e0c64:	e00e      	b.n	e0c84 <__adddf3+0xd0>
   e0c66:	f1a5 0520 	sub.w	r5, r5, #32
   e0c6a:	f10e 0e20 	add.w	lr, lr, #32
   e0c6e:	2a01      	cmp	r2, #1
   e0c70:	fa03 fc0e 	lsl.w	ip, r3, lr
   e0c74:	bf28      	it	cs
   e0c76:	f04c 0c02 	orrcs.w	ip, ip, #2
   e0c7a:	fa43 f305 	asr.w	r3, r3, r5
   e0c7e:	18c0      	adds	r0, r0, r3
   e0c80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e0c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0c88:	d507      	bpl.n	e0c9a <__adddf3+0xe6>
   e0c8a:	f04f 0e00 	mov.w	lr, #0
   e0c8e:	f1dc 0c00 	rsbs	ip, ip, #0
   e0c92:	eb7e 0000 	sbcs.w	r0, lr, r0
   e0c96:	eb6e 0101 	sbc.w	r1, lr, r1
   e0c9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e0c9e:	d31b      	bcc.n	e0cd8 <__adddf3+0x124>
   e0ca0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e0ca4:	d30c      	bcc.n	e0cc0 <__adddf3+0x10c>
   e0ca6:	0849      	lsrs	r1, r1, #1
   e0ca8:	ea5f 0030 	movs.w	r0, r0, rrx
   e0cac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e0cb0:	f104 0401 	add.w	r4, r4, #1
   e0cb4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e0cb8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e0cbc:	f080 809a 	bcs.w	e0df4 <__adddf3+0x240>
   e0cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e0cc4:	bf08      	it	eq
   e0cc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e0cca:	f150 0000 	adcs.w	r0, r0, #0
   e0cce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0cd2:	ea41 0105 	orr.w	r1, r1, r5
   e0cd6:	bd30      	pop	{r4, r5, pc}
   e0cd8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e0cdc:	4140      	adcs	r0, r0
   e0cde:	eb41 0101 	adc.w	r1, r1, r1
   e0ce2:	3c01      	subs	r4, #1
   e0ce4:	bf28      	it	cs
   e0ce6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   e0cea:	d2e9      	bcs.n	e0cc0 <__adddf3+0x10c>
   e0cec:	f091 0f00 	teq	r1, #0
   e0cf0:	bf04      	itt	eq
   e0cf2:	4601      	moveq	r1, r0
   e0cf4:	2000      	moveq	r0, #0
   e0cf6:	fab1 f381 	clz	r3, r1
   e0cfa:	bf08      	it	eq
   e0cfc:	3320      	addeq	r3, #32
   e0cfe:	f1a3 030b 	sub.w	r3, r3, #11
   e0d02:	f1b3 0220 	subs.w	r2, r3, #32
   e0d06:	da0c      	bge.n	e0d22 <__adddf3+0x16e>
   e0d08:	320c      	adds	r2, #12
   e0d0a:	dd08      	ble.n	e0d1e <__adddf3+0x16a>
   e0d0c:	f102 0c14 	add.w	ip, r2, #20
   e0d10:	f1c2 020c 	rsb	r2, r2, #12
   e0d14:	fa01 f00c 	lsl.w	r0, r1, ip
   e0d18:	fa21 f102 	lsr.w	r1, r1, r2
   e0d1c:	e00c      	b.n	e0d38 <__adddf3+0x184>
   e0d1e:	f102 0214 	add.w	r2, r2, #20
   e0d22:	bfd8      	it	le
   e0d24:	f1c2 0c20 	rsble	ip, r2, #32
   e0d28:	fa01 f102 	lsl.w	r1, r1, r2
   e0d2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   e0d30:	bfdc      	itt	le
   e0d32:	ea41 010c 	orrle.w	r1, r1, ip
   e0d36:	4090      	lslle	r0, r2
   e0d38:	1ae4      	subs	r4, r4, r3
   e0d3a:	bfa2      	ittt	ge
   e0d3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e0d40:	4329      	orrge	r1, r5
   e0d42:	bd30      	popge	{r4, r5, pc}
   e0d44:	ea6f 0404 	mvn.w	r4, r4
   e0d48:	3c1f      	subs	r4, #31
   e0d4a:	da1c      	bge.n	e0d86 <__adddf3+0x1d2>
   e0d4c:	340c      	adds	r4, #12
   e0d4e:	dc0e      	bgt.n	e0d6e <__adddf3+0x1ba>
   e0d50:	f104 0414 	add.w	r4, r4, #20
   e0d54:	f1c4 0220 	rsb	r2, r4, #32
   e0d58:	fa20 f004 	lsr.w	r0, r0, r4
   e0d5c:	fa01 f302 	lsl.w	r3, r1, r2
   e0d60:	ea40 0003 	orr.w	r0, r0, r3
   e0d64:	fa21 f304 	lsr.w	r3, r1, r4
   e0d68:	ea45 0103 	orr.w	r1, r5, r3
   e0d6c:	bd30      	pop	{r4, r5, pc}
   e0d6e:	f1c4 040c 	rsb	r4, r4, #12
   e0d72:	f1c4 0220 	rsb	r2, r4, #32
   e0d76:	fa20 f002 	lsr.w	r0, r0, r2
   e0d7a:	fa01 f304 	lsl.w	r3, r1, r4
   e0d7e:	ea40 0003 	orr.w	r0, r0, r3
   e0d82:	4629      	mov	r1, r5
   e0d84:	bd30      	pop	{r4, r5, pc}
   e0d86:	fa21 f004 	lsr.w	r0, r1, r4
   e0d8a:	4629      	mov	r1, r5
   e0d8c:	bd30      	pop	{r4, r5, pc}
   e0d8e:	f094 0f00 	teq	r4, #0
   e0d92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e0d96:	bf06      	itte	eq
   e0d98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e0d9c:	3401      	addeq	r4, #1
   e0d9e:	3d01      	subne	r5, #1
   e0da0:	e74e      	b.n	e0c40 <__adddf3+0x8c>
   e0da2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e0da6:	bf18      	it	ne
   e0da8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0dac:	d029      	beq.n	e0e02 <__adddf3+0x24e>
   e0dae:	ea94 0f05 	teq	r4, r5
   e0db2:	bf08      	it	eq
   e0db4:	ea90 0f02 	teqeq	r0, r2
   e0db8:	d005      	beq.n	e0dc6 <__adddf3+0x212>
   e0dba:	ea54 0c00 	orrs.w	ip, r4, r0
   e0dbe:	bf04      	itt	eq
   e0dc0:	4619      	moveq	r1, r3
   e0dc2:	4610      	moveq	r0, r2
   e0dc4:	bd30      	pop	{r4, r5, pc}
   e0dc6:	ea91 0f03 	teq	r1, r3
   e0dca:	bf1e      	ittt	ne
   e0dcc:	2100      	movne	r1, #0
   e0dce:	2000      	movne	r0, #0
   e0dd0:	bd30      	popne	{r4, r5, pc}
   e0dd2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e0dd6:	d105      	bne.n	e0de4 <__adddf3+0x230>
   e0dd8:	0040      	lsls	r0, r0, #1
   e0dda:	4149      	adcs	r1, r1
   e0ddc:	bf28      	it	cs
   e0dde:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e0de2:	bd30      	pop	{r4, r5, pc}
   e0de4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e0de8:	bf3c      	itt	cc
   e0dea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e0dee:	bd30      	popcc	{r4, r5, pc}
   e0df0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0df4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e0df8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e0dfc:	f04f 0000 	mov.w	r0, #0
   e0e00:	bd30      	pop	{r4, r5, pc}
   e0e02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e0e06:	bf1a      	itte	ne
   e0e08:	4619      	movne	r1, r3
   e0e0a:	4610      	movne	r0, r2
   e0e0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e0e10:	bf1c      	itt	ne
   e0e12:	460b      	movne	r3, r1
   e0e14:	4602      	movne	r2, r0
   e0e16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e0e1a:	bf06      	itte	eq
   e0e1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e0e20:	ea91 0f03 	teqeq	r1, r3
   e0e24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e0e28:	bd30      	pop	{r4, r5, pc}
   e0e2a:	bf00      	nop

000e0e2c <__aeabi_ui2d>:
   e0e2c:	f090 0f00 	teq	r0, #0
   e0e30:	bf04      	itt	eq
   e0e32:	2100      	moveq	r1, #0
   e0e34:	4770      	bxeq	lr
   e0e36:	b530      	push	{r4, r5, lr}
   e0e38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0e3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0e40:	f04f 0500 	mov.w	r5, #0
   e0e44:	f04f 0100 	mov.w	r1, #0
   e0e48:	e750      	b.n	e0cec <__adddf3+0x138>
   e0e4a:	bf00      	nop

000e0e4c <__aeabi_i2d>:
   e0e4c:	f090 0f00 	teq	r0, #0
   e0e50:	bf04      	itt	eq
   e0e52:	2100      	moveq	r1, #0
   e0e54:	4770      	bxeq	lr
   e0e56:	b530      	push	{r4, r5, lr}
   e0e58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0e5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0e60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e0e64:	bf48      	it	mi
   e0e66:	4240      	negmi	r0, r0
   e0e68:	f04f 0100 	mov.w	r1, #0
   e0e6c:	e73e      	b.n	e0cec <__adddf3+0x138>
   e0e6e:	bf00      	nop

000e0e70 <__aeabi_f2d>:
   e0e70:	0042      	lsls	r2, r0, #1
   e0e72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e0e76:	ea4f 0131 	mov.w	r1, r1, rrx
   e0e7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e0e7e:	bf1f      	itttt	ne
   e0e80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e0e84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e0e88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e0e8c:	4770      	bxne	lr
   e0e8e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   e0e92:	bf08      	it	eq
   e0e94:	4770      	bxeq	lr
   e0e96:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   e0e9a:	bf04      	itt	eq
   e0e9c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   e0ea0:	4770      	bxeq	lr
   e0ea2:	b530      	push	{r4, r5, lr}
   e0ea4:	f44f 7460 	mov.w	r4, #896	; 0x380
   e0ea8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0eac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e0eb0:	e71c      	b.n	e0cec <__adddf3+0x138>
   e0eb2:	bf00      	nop

000e0eb4 <__aeabi_ul2d>:
   e0eb4:	ea50 0201 	orrs.w	r2, r0, r1
   e0eb8:	bf08      	it	eq
   e0eba:	4770      	bxeq	lr
   e0ebc:	b530      	push	{r4, r5, lr}
   e0ebe:	f04f 0500 	mov.w	r5, #0
   e0ec2:	e00a      	b.n	e0eda <__aeabi_l2d+0x16>

000e0ec4 <__aeabi_l2d>:
   e0ec4:	ea50 0201 	orrs.w	r2, r0, r1
   e0ec8:	bf08      	it	eq
   e0eca:	4770      	bxeq	lr
   e0ecc:	b530      	push	{r4, r5, lr}
   e0ece:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e0ed2:	d502      	bpl.n	e0eda <__aeabi_l2d+0x16>
   e0ed4:	4240      	negs	r0, r0
   e0ed6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e0eda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0ede:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0ee2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e0ee6:	f43f aed8 	beq.w	e0c9a <__adddf3+0xe6>
   e0eea:	f04f 0203 	mov.w	r2, #3
   e0eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0ef2:	bf18      	it	ne
   e0ef4:	3203      	addne	r2, #3
   e0ef6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0efa:	bf18      	it	ne
   e0efc:	3203      	addne	r2, #3
   e0efe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e0f02:	f1c2 0320 	rsb	r3, r2, #32
   e0f06:	fa00 fc03 	lsl.w	ip, r0, r3
   e0f0a:	fa20 f002 	lsr.w	r0, r0, r2
   e0f0e:	fa01 fe03 	lsl.w	lr, r1, r3
   e0f12:	ea40 000e 	orr.w	r0, r0, lr
   e0f16:	fa21 f102 	lsr.w	r1, r1, r2
   e0f1a:	4414      	add	r4, r2
   e0f1c:	e6bd      	b.n	e0c9a <__adddf3+0xe6>
   e0f1e:	bf00      	nop

000e0f20 <__aeabi_dmul>:
   e0f20:	b570      	push	{r4, r5, r6, lr}
   e0f22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e0f26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e0f2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e0f2e:	bf1d      	ittte	ne
   e0f30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e0f34:	ea94 0f0c 	teqne	r4, ip
   e0f38:	ea95 0f0c 	teqne	r5, ip
   e0f3c:	f000 f8de 	bleq	e10fc <__aeabi_dmul+0x1dc>
   e0f40:	442c      	add	r4, r5
   e0f42:	ea81 0603 	eor.w	r6, r1, r3
   e0f46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e0f4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e0f4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e0f52:	bf18      	it	ne
   e0f54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e0f58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e0f60:	d038      	beq.n	e0fd4 <__aeabi_dmul+0xb4>
   e0f62:	fba0 ce02 	umull	ip, lr, r0, r2
   e0f66:	f04f 0500 	mov.w	r5, #0
   e0f6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   e0f6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e0f72:	fbe0 e503 	umlal	lr, r5, r0, r3
   e0f76:	f04f 0600 	mov.w	r6, #0
   e0f7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e0f7e:	f09c 0f00 	teq	ip, #0
   e0f82:	bf18      	it	ne
   e0f84:	f04e 0e01 	orrne.w	lr, lr, #1
   e0f88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e0f8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e0f90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e0f94:	d204      	bcs.n	e0fa0 <__aeabi_dmul+0x80>
   e0f96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e0f9a:	416d      	adcs	r5, r5
   e0f9c:	eb46 0606 	adc.w	r6, r6, r6
   e0fa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e0fa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e0fa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e0fac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e0fb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e0fb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e0fb8:	bf88      	it	hi
   e0fba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e0fbe:	d81e      	bhi.n	e0ffe <__aeabi_dmul+0xde>
   e0fc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e0fc4:	bf08      	it	eq
   e0fc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e0fca:	f150 0000 	adcs.w	r0, r0, #0
   e0fce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0fd2:	bd70      	pop	{r4, r5, r6, pc}
   e0fd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e0fd8:	ea46 0101 	orr.w	r1, r6, r1
   e0fdc:	ea40 0002 	orr.w	r0, r0, r2
   e0fe0:	ea81 0103 	eor.w	r1, r1, r3
   e0fe4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e0fe8:	bfc2      	ittt	gt
   e0fea:	ebd4 050c 	rsbsgt	r5, r4, ip
   e0fee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e0ff2:	bd70      	popgt	{r4, r5, r6, pc}
   e0ff4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0ff8:	f04f 0e00 	mov.w	lr, #0
   e0ffc:	3c01      	subs	r4, #1
   e0ffe:	f300 80ab 	bgt.w	e1158 <__aeabi_dmul+0x238>
   e1002:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e1006:	bfde      	ittt	le
   e1008:	2000      	movle	r0, #0
   e100a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e100e:	bd70      	pople	{r4, r5, r6, pc}
   e1010:	f1c4 0400 	rsb	r4, r4, #0
   e1014:	3c20      	subs	r4, #32
   e1016:	da35      	bge.n	e1084 <__aeabi_dmul+0x164>
   e1018:	340c      	adds	r4, #12
   e101a:	dc1b      	bgt.n	e1054 <__aeabi_dmul+0x134>
   e101c:	f104 0414 	add.w	r4, r4, #20
   e1020:	f1c4 0520 	rsb	r5, r4, #32
   e1024:	fa00 f305 	lsl.w	r3, r0, r5
   e1028:	fa20 f004 	lsr.w	r0, r0, r4
   e102c:	fa01 f205 	lsl.w	r2, r1, r5
   e1030:	ea40 0002 	orr.w	r0, r0, r2
   e1034:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e1038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e103c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1040:	fa21 f604 	lsr.w	r6, r1, r4
   e1044:	eb42 0106 	adc.w	r1, r2, r6
   e1048:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e104c:	bf08      	it	eq
   e104e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1052:	bd70      	pop	{r4, r5, r6, pc}
   e1054:	f1c4 040c 	rsb	r4, r4, #12
   e1058:	f1c4 0520 	rsb	r5, r4, #32
   e105c:	fa00 f304 	lsl.w	r3, r0, r4
   e1060:	fa20 f005 	lsr.w	r0, r0, r5
   e1064:	fa01 f204 	lsl.w	r2, r1, r4
   e1068:	ea40 0002 	orr.w	r0, r0, r2
   e106c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1070:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1074:	f141 0100 	adc.w	r1, r1, #0
   e1078:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e107c:	bf08      	it	eq
   e107e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1082:	bd70      	pop	{r4, r5, r6, pc}
   e1084:	f1c4 0520 	rsb	r5, r4, #32
   e1088:	fa00 f205 	lsl.w	r2, r0, r5
   e108c:	ea4e 0e02 	orr.w	lr, lr, r2
   e1090:	fa20 f304 	lsr.w	r3, r0, r4
   e1094:	fa01 f205 	lsl.w	r2, r1, r5
   e1098:	ea43 0302 	orr.w	r3, r3, r2
   e109c:	fa21 f004 	lsr.w	r0, r1, r4
   e10a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e10a4:	fa21 f204 	lsr.w	r2, r1, r4
   e10a8:	ea20 0002 	bic.w	r0, r0, r2
   e10ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e10b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e10b4:	bf08      	it	eq
   e10b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e10ba:	bd70      	pop	{r4, r5, r6, pc}
   e10bc:	f094 0f00 	teq	r4, #0
   e10c0:	d10f      	bne.n	e10e2 <__aeabi_dmul+0x1c2>
   e10c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e10c6:	0040      	lsls	r0, r0, #1
   e10c8:	eb41 0101 	adc.w	r1, r1, r1
   e10cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e10d0:	bf08      	it	eq
   e10d2:	3c01      	subeq	r4, #1
   e10d4:	d0f7      	beq.n	e10c6 <__aeabi_dmul+0x1a6>
   e10d6:	ea41 0106 	orr.w	r1, r1, r6
   e10da:	f095 0f00 	teq	r5, #0
   e10de:	bf18      	it	ne
   e10e0:	4770      	bxne	lr
   e10e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e10e6:	0052      	lsls	r2, r2, #1
   e10e8:	eb43 0303 	adc.w	r3, r3, r3
   e10ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e10f0:	bf08      	it	eq
   e10f2:	3d01      	subeq	r5, #1
   e10f4:	d0f7      	beq.n	e10e6 <__aeabi_dmul+0x1c6>
   e10f6:	ea43 0306 	orr.w	r3, r3, r6
   e10fa:	4770      	bx	lr
   e10fc:	ea94 0f0c 	teq	r4, ip
   e1100:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1104:	bf18      	it	ne
   e1106:	ea95 0f0c 	teqne	r5, ip
   e110a:	d00c      	beq.n	e1126 <__aeabi_dmul+0x206>
   e110c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1110:	bf18      	it	ne
   e1112:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1116:	d1d1      	bne.n	e10bc <__aeabi_dmul+0x19c>
   e1118:	ea81 0103 	eor.w	r1, r1, r3
   e111c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1120:	f04f 0000 	mov.w	r0, #0
   e1124:	bd70      	pop	{r4, r5, r6, pc}
   e1126:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e112a:	bf06      	itte	eq
   e112c:	4610      	moveq	r0, r2
   e112e:	4619      	moveq	r1, r3
   e1130:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1134:	d019      	beq.n	e116a <__aeabi_dmul+0x24a>
   e1136:	ea94 0f0c 	teq	r4, ip
   e113a:	d102      	bne.n	e1142 <__aeabi_dmul+0x222>
   e113c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e1140:	d113      	bne.n	e116a <__aeabi_dmul+0x24a>
   e1142:	ea95 0f0c 	teq	r5, ip
   e1146:	d105      	bne.n	e1154 <__aeabi_dmul+0x234>
   e1148:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e114c:	bf1c      	itt	ne
   e114e:	4610      	movne	r0, r2
   e1150:	4619      	movne	r1, r3
   e1152:	d10a      	bne.n	e116a <__aeabi_dmul+0x24a>
   e1154:	ea81 0103 	eor.w	r1, r1, r3
   e1158:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e115c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1160:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1164:	f04f 0000 	mov.w	r0, #0
   e1168:	bd70      	pop	{r4, r5, r6, pc}
   e116a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e116e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e1172:	bd70      	pop	{r4, r5, r6, pc}

000e1174 <__aeabi_ddiv>:
   e1174:	b570      	push	{r4, r5, r6, lr}
   e1176:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e117a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e117e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1182:	bf1d      	ittte	ne
   e1184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e1188:	ea94 0f0c 	teqne	r4, ip
   e118c:	ea95 0f0c 	teqne	r5, ip
   e1190:	f000 f8a7 	bleq	e12e2 <__aeabi_ddiv+0x16e>
   e1194:	eba4 0405 	sub.w	r4, r4, r5
   e1198:	ea81 0e03 	eor.w	lr, r1, r3
   e119c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e11a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e11a4:	f000 8088 	beq.w	e12b8 <__aeabi_ddiv+0x144>
   e11a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e11ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e11b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e11b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e11b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e11bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e11c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e11c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e11c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e11cc:	429d      	cmp	r5, r3
   e11ce:	bf08      	it	eq
   e11d0:	4296      	cmpeq	r6, r2
   e11d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e11d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e11da:	d202      	bcs.n	e11e2 <__aeabi_ddiv+0x6e>
   e11dc:	085b      	lsrs	r3, r3, #1
   e11de:	ea4f 0232 	mov.w	r2, r2, rrx
   e11e2:	1ab6      	subs	r6, r6, r2
   e11e4:	eb65 0503 	sbc.w	r5, r5, r3
   e11e8:	085b      	lsrs	r3, r3, #1
   e11ea:	ea4f 0232 	mov.w	r2, r2, rrx
   e11ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e11f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e11f6:	ebb6 0e02 	subs.w	lr, r6, r2
   e11fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   e11fe:	bf22      	ittt	cs
   e1200:	1ab6      	subcs	r6, r6, r2
   e1202:	4675      	movcs	r5, lr
   e1204:	ea40 000c 	orrcs.w	r0, r0, ip
   e1208:	085b      	lsrs	r3, r3, #1
   e120a:	ea4f 0232 	mov.w	r2, r2, rrx
   e120e:	ebb6 0e02 	subs.w	lr, r6, r2
   e1212:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1216:	bf22      	ittt	cs
   e1218:	1ab6      	subcs	r6, r6, r2
   e121a:	4675      	movcs	r5, lr
   e121c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e1220:	085b      	lsrs	r3, r3, #1
   e1222:	ea4f 0232 	mov.w	r2, r2, rrx
   e1226:	ebb6 0e02 	subs.w	lr, r6, r2
   e122a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e122e:	bf22      	ittt	cs
   e1230:	1ab6      	subcs	r6, r6, r2
   e1232:	4675      	movcs	r5, lr
   e1234:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e1238:	085b      	lsrs	r3, r3, #1
   e123a:	ea4f 0232 	mov.w	r2, r2, rrx
   e123e:	ebb6 0e02 	subs.w	lr, r6, r2
   e1242:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1246:	bf22      	ittt	cs
   e1248:	1ab6      	subcs	r6, r6, r2
   e124a:	4675      	movcs	r5, lr
   e124c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e1250:	ea55 0e06 	orrs.w	lr, r5, r6
   e1254:	d018      	beq.n	e1288 <__aeabi_ddiv+0x114>
   e1256:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e125a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e125e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e1262:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e1266:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e126a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e126e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e1272:	d1c0      	bne.n	e11f6 <__aeabi_ddiv+0x82>
   e1274:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1278:	d10b      	bne.n	e1292 <__aeabi_ddiv+0x11e>
   e127a:	ea41 0100 	orr.w	r1, r1, r0
   e127e:	f04f 0000 	mov.w	r0, #0
   e1282:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e1286:	e7b6      	b.n	e11f6 <__aeabi_ddiv+0x82>
   e1288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e128c:	bf04      	itt	eq
   e128e:	4301      	orreq	r1, r0
   e1290:	2000      	moveq	r0, #0
   e1292:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1296:	bf88      	it	hi
   e1298:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e129c:	f63f aeaf 	bhi.w	e0ffe <__aeabi_dmul+0xde>
   e12a0:	ebb5 0c03 	subs.w	ip, r5, r3
   e12a4:	bf04      	itt	eq
   e12a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   e12aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e12ae:	f150 0000 	adcs.w	r0, r0, #0
   e12b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e12b6:	bd70      	pop	{r4, r5, r6, pc}
   e12b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e12bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e12c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e12c4:	bfc2      	ittt	gt
   e12c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   e12ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e12ce:	bd70      	popgt	{r4, r5, r6, pc}
   e12d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e12d4:	f04f 0e00 	mov.w	lr, #0
   e12d8:	3c01      	subs	r4, #1
   e12da:	e690      	b.n	e0ffe <__aeabi_dmul+0xde>
   e12dc:	ea45 0e06 	orr.w	lr, r5, r6
   e12e0:	e68d      	b.n	e0ffe <__aeabi_dmul+0xde>
   e12e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e12e6:	ea94 0f0c 	teq	r4, ip
   e12ea:	bf08      	it	eq
   e12ec:	ea95 0f0c 	teqeq	r5, ip
   e12f0:	f43f af3b 	beq.w	e116a <__aeabi_dmul+0x24a>
   e12f4:	ea94 0f0c 	teq	r4, ip
   e12f8:	d10a      	bne.n	e1310 <__aeabi_ddiv+0x19c>
   e12fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e12fe:	f47f af34 	bne.w	e116a <__aeabi_dmul+0x24a>
   e1302:	ea95 0f0c 	teq	r5, ip
   e1306:	f47f af25 	bne.w	e1154 <__aeabi_dmul+0x234>
   e130a:	4610      	mov	r0, r2
   e130c:	4619      	mov	r1, r3
   e130e:	e72c      	b.n	e116a <__aeabi_dmul+0x24a>
   e1310:	ea95 0f0c 	teq	r5, ip
   e1314:	d106      	bne.n	e1324 <__aeabi_ddiv+0x1b0>
   e1316:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e131a:	f43f aefd 	beq.w	e1118 <__aeabi_dmul+0x1f8>
   e131e:	4610      	mov	r0, r2
   e1320:	4619      	mov	r1, r3
   e1322:	e722      	b.n	e116a <__aeabi_dmul+0x24a>
   e1324:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1328:	bf18      	it	ne
   e132a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e132e:	f47f aec5 	bne.w	e10bc <__aeabi_dmul+0x19c>
   e1332:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e1336:	f47f af0d 	bne.w	e1154 <__aeabi_dmul+0x234>
   e133a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e133e:	f47f aeeb 	bne.w	e1118 <__aeabi_dmul+0x1f8>
   e1342:	e712      	b.n	e116a <__aeabi_dmul+0x24a>

000e1344 <__gedf2>:
   e1344:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   e1348:	e006      	b.n	e1358 <__cmpdf2+0x4>
   e134a:	bf00      	nop

000e134c <__ledf2>:
   e134c:	f04f 0c01 	mov.w	ip, #1
   e1350:	e002      	b.n	e1358 <__cmpdf2+0x4>
   e1352:	bf00      	nop

000e1354 <__cmpdf2>:
   e1354:	f04f 0c01 	mov.w	ip, #1
   e1358:	f84d cd04 	str.w	ip, [sp, #-4]!
   e135c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1364:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1368:	bf18      	it	ne
   e136a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e136e:	d01b      	beq.n	e13a8 <__cmpdf2+0x54>
   e1370:	b001      	add	sp, #4
   e1372:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e1376:	bf0c      	ite	eq
   e1378:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e137c:	ea91 0f03 	teqne	r1, r3
   e1380:	bf02      	ittt	eq
   e1382:	ea90 0f02 	teqeq	r0, r2
   e1386:	2000      	moveq	r0, #0
   e1388:	4770      	bxeq	lr
   e138a:	f110 0f00 	cmn.w	r0, #0
   e138e:	ea91 0f03 	teq	r1, r3
   e1392:	bf58      	it	pl
   e1394:	4299      	cmppl	r1, r3
   e1396:	bf08      	it	eq
   e1398:	4290      	cmpeq	r0, r2
   e139a:	bf2c      	ite	cs
   e139c:	17d8      	asrcs	r0, r3, #31
   e139e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e13a2:	f040 0001 	orr.w	r0, r0, #1
   e13a6:	4770      	bx	lr
   e13a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e13ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e13b0:	d102      	bne.n	e13b8 <__cmpdf2+0x64>
   e13b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e13b6:	d107      	bne.n	e13c8 <__cmpdf2+0x74>
   e13b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e13bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e13c0:	d1d6      	bne.n	e1370 <__cmpdf2+0x1c>
   e13c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e13c6:	d0d3      	beq.n	e1370 <__cmpdf2+0x1c>
   e13c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   e13cc:	4770      	bx	lr
   e13ce:	bf00      	nop

000e13d0 <__aeabi_cdrcmple>:
   e13d0:	4684      	mov	ip, r0
   e13d2:	4610      	mov	r0, r2
   e13d4:	4662      	mov	r2, ip
   e13d6:	468c      	mov	ip, r1
   e13d8:	4619      	mov	r1, r3
   e13da:	4663      	mov	r3, ip
   e13dc:	e000      	b.n	e13e0 <__aeabi_cdcmpeq>
   e13de:	bf00      	nop

000e13e0 <__aeabi_cdcmpeq>:
   e13e0:	b501      	push	{r0, lr}
   e13e2:	f7ff ffb7 	bl	e1354 <__cmpdf2>
   e13e6:	2800      	cmp	r0, #0
   e13e8:	bf48      	it	mi
   e13ea:	f110 0f00 	cmnmi.w	r0, #0
   e13ee:	bd01      	pop	{r0, pc}

000e13f0 <__aeabi_dcmpeq>:
   e13f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e13f4:	f7ff fff4 	bl	e13e0 <__aeabi_cdcmpeq>
   e13f8:	bf0c      	ite	eq
   e13fa:	2001      	moveq	r0, #1
   e13fc:	2000      	movne	r0, #0
   e13fe:	f85d fb08 	ldr.w	pc, [sp], #8
   e1402:	bf00      	nop

000e1404 <__aeabi_dcmplt>:
   e1404:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1408:	f7ff ffea 	bl	e13e0 <__aeabi_cdcmpeq>
   e140c:	bf34      	ite	cc
   e140e:	2001      	movcc	r0, #1
   e1410:	2000      	movcs	r0, #0
   e1412:	f85d fb08 	ldr.w	pc, [sp], #8
   e1416:	bf00      	nop

000e1418 <__aeabi_dcmple>:
   e1418:	f84d ed08 	str.w	lr, [sp, #-8]!
   e141c:	f7ff ffe0 	bl	e13e0 <__aeabi_cdcmpeq>
   e1420:	bf94      	ite	ls
   e1422:	2001      	movls	r0, #1
   e1424:	2000      	movhi	r0, #0
   e1426:	f85d fb08 	ldr.w	pc, [sp], #8
   e142a:	bf00      	nop

000e142c <__aeabi_dcmpge>:
   e142c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1430:	f7ff ffce 	bl	e13d0 <__aeabi_cdrcmple>
   e1434:	bf94      	ite	ls
   e1436:	2001      	movls	r0, #1
   e1438:	2000      	movhi	r0, #0
   e143a:	f85d fb08 	ldr.w	pc, [sp], #8
   e143e:	bf00      	nop

000e1440 <__aeabi_dcmpgt>:
   e1440:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1444:	f7ff ffc4 	bl	e13d0 <__aeabi_cdrcmple>
   e1448:	bf34      	ite	cc
   e144a:	2001      	movcc	r0, #1
   e144c:	2000      	movcs	r0, #0
   e144e:	f85d fb08 	ldr.w	pc, [sp], #8
   e1452:	bf00      	nop

000e1454 <__aeabi_dcmpun>:
   e1454:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1458:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e145c:	d102      	bne.n	e1464 <__aeabi_dcmpun+0x10>
   e145e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e1462:	d10a      	bne.n	e147a <__aeabi_dcmpun+0x26>
   e1464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1468:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e146c:	d102      	bne.n	e1474 <__aeabi_dcmpun+0x20>
   e146e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e1472:	d102      	bne.n	e147a <__aeabi_dcmpun+0x26>
   e1474:	f04f 0000 	mov.w	r0, #0
   e1478:	4770      	bx	lr
   e147a:	f04f 0001 	mov.w	r0, #1
   e147e:	4770      	bx	lr

000e1480 <__aeabi_d2iz>:
   e1480:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1484:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1488:	d215      	bcs.n	e14b6 <__aeabi_d2iz+0x36>
   e148a:	d511      	bpl.n	e14b0 <__aeabi_d2iz+0x30>
   e148c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e1490:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e1494:	d912      	bls.n	e14bc <__aeabi_d2iz+0x3c>
   e1496:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e149a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e149e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e14a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e14a6:	fa23 f002 	lsr.w	r0, r3, r2
   e14aa:	bf18      	it	ne
   e14ac:	4240      	negne	r0, r0
   e14ae:	4770      	bx	lr
   e14b0:	f04f 0000 	mov.w	r0, #0
   e14b4:	4770      	bx	lr
   e14b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e14ba:	d105      	bne.n	e14c8 <__aeabi_d2iz+0x48>
   e14bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e14c0:	bf08      	it	eq
   e14c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e14c6:	4770      	bx	lr
   e14c8:	f04f 0000 	mov.w	r0, #0
   e14cc:	4770      	bx	lr
   e14ce:	bf00      	nop

000e14d0 <__aeabi_d2uiz>:
   e14d0:	004a      	lsls	r2, r1, #1
   e14d2:	d211      	bcs.n	e14f8 <__aeabi_d2uiz+0x28>
   e14d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e14d8:	d211      	bcs.n	e14fe <__aeabi_d2uiz+0x2e>
   e14da:	d50d      	bpl.n	e14f8 <__aeabi_d2uiz+0x28>
   e14dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e14e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e14e4:	d40e      	bmi.n	e1504 <__aeabi_d2uiz+0x34>
   e14e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e14ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e14ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e14f2:	fa23 f002 	lsr.w	r0, r3, r2
   e14f6:	4770      	bx	lr
   e14f8:	f04f 0000 	mov.w	r0, #0
   e14fc:	4770      	bx	lr
   e14fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e1502:	d102      	bne.n	e150a <__aeabi_d2uiz+0x3a>
   e1504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e1508:	4770      	bx	lr
   e150a:	f04f 0000 	mov.w	r0, #0
   e150e:	4770      	bx	lr

000e1510 <__aeabi_d2f>:
   e1510:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1514:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e1518:	bf24      	itt	cs
   e151a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e151e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e1522:	d90d      	bls.n	e1540 <__aeabi_d2f+0x30>
   e1524:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e1528:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e152c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e1530:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e1534:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e1538:	bf08      	it	eq
   e153a:	f020 0001 	biceq.w	r0, r0, #1
   e153e:	4770      	bx	lr
   e1540:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e1544:	d121      	bne.n	e158a <__aeabi_d2f+0x7a>
   e1546:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e154a:	bfbc      	itt	lt
   e154c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e1550:	4770      	bxlt	lr
   e1552:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1556:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e155a:	f1c2 0218 	rsb	r2, r2, #24
   e155e:	f1c2 0c20 	rsb	ip, r2, #32
   e1562:	fa10 f30c 	lsls.w	r3, r0, ip
   e1566:	fa20 f002 	lsr.w	r0, r0, r2
   e156a:	bf18      	it	ne
   e156c:	f040 0001 	orrne.w	r0, r0, #1
   e1570:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1574:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e1578:	fa03 fc0c 	lsl.w	ip, r3, ip
   e157c:	ea40 000c 	orr.w	r0, r0, ip
   e1580:	fa23 f302 	lsr.w	r3, r3, r2
   e1584:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e1588:	e7cc      	b.n	e1524 <__aeabi_d2f+0x14>
   e158a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e158e:	d107      	bne.n	e15a0 <__aeabi_d2f+0x90>
   e1590:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e1594:	bf1e      	ittt	ne
   e1596:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e159a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e159e:	4770      	bxne	lr
   e15a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e15a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e15a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e15ac:	4770      	bx	lr
   e15ae:	bf00      	nop

000e15b0 <__aeabi_d2ulz>:
   e15b0:	b5d0      	push	{r4, r6, r7, lr}
   e15b2:	4b0c      	ldr	r3, [pc, #48]	; (e15e4 <__aeabi_d2ulz+0x34>)
   e15b4:	2200      	movs	r2, #0
   e15b6:	4606      	mov	r6, r0
   e15b8:	460f      	mov	r7, r1
   e15ba:	f7ff fcb1 	bl	e0f20 <__aeabi_dmul>
   e15be:	f7ff ff87 	bl	e14d0 <__aeabi_d2uiz>
   e15c2:	4604      	mov	r4, r0
   e15c4:	f7ff fc32 	bl	e0e2c <__aeabi_ui2d>
   e15c8:	4b07      	ldr	r3, [pc, #28]	; (e15e8 <__aeabi_d2ulz+0x38>)
   e15ca:	2200      	movs	r2, #0
   e15cc:	f7ff fca8 	bl	e0f20 <__aeabi_dmul>
   e15d0:	4602      	mov	r2, r0
   e15d2:	460b      	mov	r3, r1
   e15d4:	4630      	mov	r0, r6
   e15d6:	4639      	mov	r1, r7
   e15d8:	f7ff faea 	bl	e0bb0 <__aeabi_dsub>
   e15dc:	f7ff ff78 	bl	e14d0 <__aeabi_d2uiz>
   e15e0:	4621      	mov	r1, r4
   e15e2:	bdd0      	pop	{r4, r6, r7, pc}
   e15e4:	3df00000 	.word	0x3df00000
   e15e8:	41f00000 	.word	0x41f00000

000e15ec <asctime_r>:
   e15ec:	b510      	push	{r4, lr}
   e15ee:	460c      	mov	r4, r1
   e15f0:	6941      	ldr	r1, [r0, #20]
   e15f2:	6903      	ldr	r3, [r0, #16]
   e15f4:	6982      	ldr	r2, [r0, #24]
   e15f6:	b086      	sub	sp, #24
   e15f8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e15fc:	9104      	str	r1, [sp, #16]
   e15fe:	6801      	ldr	r1, [r0, #0]
   e1600:	9103      	str	r1, [sp, #12]
   e1602:	6841      	ldr	r1, [r0, #4]
   e1604:	9102      	str	r1, [sp, #8]
   e1606:	6881      	ldr	r1, [r0, #8]
   e1608:	9101      	str	r1, [sp, #4]
   e160a:	68c1      	ldr	r1, [r0, #12]
   e160c:	9100      	str	r1, [sp, #0]
   e160e:	4907      	ldr	r1, [pc, #28]	; (e162c <asctime_r+0x40>)
   e1610:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e1614:	440b      	add	r3, r1
   e1616:	4906      	ldr	r1, [pc, #24]	; (e1630 <asctime_r+0x44>)
   e1618:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e161c:	440a      	add	r2, r1
   e161e:	4620      	mov	r0, r4
   e1620:	4904      	ldr	r1, [pc, #16]	; (e1634 <asctime_r+0x48>)
   e1622:	f7fb fd61 	bl	dd0e8 <siprintf>
   e1626:	4620      	mov	r0, r4
   e1628:	b006      	add	sp, #24
   e162a:	bd10      	pop	{r4, pc}
   e162c:	000e4b06 	.word	0x000e4b06
   e1630:	000e4af1 	.word	0x000e4af1
   e1634:	000e4ad1 	.word	0x000e4ad1

000e1638 <atexit>:
   e1638:	2300      	movs	r3, #0
   e163a:	4601      	mov	r1, r0
   e163c:	461a      	mov	r2, r3
   e163e:	4618      	mov	r0, r3
   e1640:	f001 b8ae 	b.w	e27a0 <__register_exitproc>

000e1644 <gmtime>:
   e1644:	b538      	push	{r3, r4, r5, lr}
   e1646:	4b07      	ldr	r3, [pc, #28]	; (e1664 <gmtime+0x20>)
   e1648:	681d      	ldr	r5, [r3, #0]
   e164a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   e164c:	4604      	mov	r4, r0
   e164e:	b91b      	cbnz	r3, e1658 <gmtime+0x14>
   e1650:	2024      	movs	r0, #36	; 0x24
   e1652:	f7fb fd31 	bl	dd0b8 <malloc>
   e1656:	63e8      	str	r0, [r5, #60]	; 0x3c
   e1658:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   e165a:	4620      	mov	r0, r4
   e165c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e1660:	f7fb bd92 	b.w	dd188 <gmtime_r>
   e1664:	2003e1d8 	.word	0x2003e1d8

000e1668 <memcpy>:
   e1668:	440a      	add	r2, r1
   e166a:	4291      	cmp	r1, r2
   e166c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   e1670:	d100      	bne.n	e1674 <memcpy+0xc>
   e1672:	4770      	bx	lr
   e1674:	b510      	push	{r4, lr}
   e1676:	f811 4b01 	ldrb.w	r4, [r1], #1
   e167a:	f803 4f01 	strb.w	r4, [r3, #1]!
   e167e:	4291      	cmp	r1, r2
   e1680:	d1f9      	bne.n	e1676 <memcpy+0xe>
   e1682:	bd10      	pop	{r4, pc}

000e1684 <memmove>:
   e1684:	4288      	cmp	r0, r1
   e1686:	b510      	push	{r4, lr}
   e1688:	eb01 0402 	add.w	r4, r1, r2
   e168c:	d902      	bls.n	e1694 <memmove+0x10>
   e168e:	4284      	cmp	r4, r0
   e1690:	4623      	mov	r3, r4
   e1692:	d807      	bhi.n	e16a4 <memmove+0x20>
   e1694:	1e43      	subs	r3, r0, #1
   e1696:	42a1      	cmp	r1, r4
   e1698:	d008      	beq.n	e16ac <memmove+0x28>
   e169a:	f811 2b01 	ldrb.w	r2, [r1], #1
   e169e:	f803 2f01 	strb.w	r2, [r3, #1]!
   e16a2:	e7f8      	b.n	e1696 <memmove+0x12>
   e16a4:	4402      	add	r2, r0
   e16a6:	4601      	mov	r1, r0
   e16a8:	428a      	cmp	r2, r1
   e16aa:	d100      	bne.n	e16ae <memmove+0x2a>
   e16ac:	bd10      	pop	{r4, pc}
   e16ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e16b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   e16b6:	e7f7      	b.n	e16a8 <memmove+0x24>

000e16b8 <memset>:
   e16b8:	4402      	add	r2, r0
   e16ba:	4603      	mov	r3, r0
   e16bc:	4293      	cmp	r3, r2
   e16be:	d100      	bne.n	e16c2 <memset+0xa>
   e16c0:	4770      	bx	lr
   e16c2:	f803 1b01 	strb.w	r1, [r3], #1
   e16c6:	e7f9      	b.n	e16bc <memset+0x4>

000e16c8 <srand>:
   e16c8:	b538      	push	{r3, r4, r5, lr}
   e16ca:	4b0d      	ldr	r3, [pc, #52]	; (e1700 <srand+0x38>)
   e16cc:	681d      	ldr	r5, [r3, #0]
   e16ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e16d0:	4604      	mov	r4, r0
   e16d2:	b97b      	cbnz	r3, e16f4 <srand+0x2c>
   e16d4:	2018      	movs	r0, #24
   e16d6:	f7fb fcef 	bl	dd0b8 <malloc>
   e16da:	4a0a      	ldr	r2, [pc, #40]	; (e1704 <srand+0x3c>)
   e16dc:	4b0a      	ldr	r3, [pc, #40]	; (e1708 <srand+0x40>)
   e16de:	63a8      	str	r0, [r5, #56]	; 0x38
   e16e0:	e9c0 2300 	strd	r2, r3, [r0]
   e16e4:	4b09      	ldr	r3, [pc, #36]	; (e170c <srand+0x44>)
   e16e6:	6083      	str	r3, [r0, #8]
   e16e8:	230b      	movs	r3, #11
   e16ea:	8183      	strh	r3, [r0, #12]
   e16ec:	2201      	movs	r2, #1
   e16ee:	2300      	movs	r3, #0
   e16f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e16f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e16f6:	2200      	movs	r2, #0
   e16f8:	611c      	str	r4, [r3, #16]
   e16fa:	615a      	str	r2, [r3, #20]
   e16fc:	bd38      	pop	{r3, r4, r5, pc}
   e16fe:	bf00      	nop
   e1700:	2003e1d8 	.word	0x2003e1d8
   e1704:	abcd330e 	.word	0xabcd330e
   e1708:	e66d1234 	.word	0xe66d1234
   e170c:	0005deec 	.word	0x0005deec

000e1710 <rename>:
   e1710:	4b02      	ldr	r3, [pc, #8]	; (e171c <rename+0xc>)
   e1712:	460a      	mov	r2, r1
   e1714:	4601      	mov	r1, r0
   e1716:	6818      	ldr	r0, [r3, #0]
   e1718:	f000 b802 	b.w	e1720 <_rename_r>
   e171c:	2003e1d8 	.word	0x2003e1d8

000e1720 <_rename_r>:
   e1720:	b538      	push	{r3, r4, r5, lr}
   e1722:	4604      	mov	r4, r0
   e1724:	460d      	mov	r5, r1
   e1726:	f001 fc1d 	bl	e2f64 <_link_r>
   e172a:	1c43      	adds	r3, r0, #1
   e172c:	d008      	beq.n	e1740 <_rename_r+0x20>
   e172e:	4629      	mov	r1, r5
   e1730:	4620      	mov	r0, r4
   e1732:	f001 f813 	bl	e275c <_unlink_r>
   e1736:	3001      	adds	r0, #1
   e1738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e173c:	bf18      	it	ne
   e173e:	2000      	movne	r0, #0
   e1740:	bd38      	pop	{r3, r4, r5, pc}

000e1742 <strchr>:
   e1742:	b2c9      	uxtb	r1, r1
   e1744:	4603      	mov	r3, r0
   e1746:	f810 2b01 	ldrb.w	r2, [r0], #1
   e174a:	b11a      	cbz	r2, e1754 <strchr+0x12>
   e174c:	428a      	cmp	r2, r1
   e174e:	d1f9      	bne.n	e1744 <strchr+0x2>
   e1750:	4618      	mov	r0, r3
   e1752:	4770      	bx	lr
   e1754:	2900      	cmp	r1, #0
   e1756:	bf18      	it	ne
   e1758:	2300      	movne	r3, #0
   e175a:	e7f9      	b.n	e1750 <strchr+0xe>

000e175c <strchrnul>:
   e175c:	b510      	push	{r4, lr}
   e175e:	4604      	mov	r4, r0
   e1760:	f7ff ffef 	bl	e1742 <strchr>
   e1764:	b918      	cbnz	r0, e176e <strchrnul+0x12>
   e1766:	4620      	mov	r0, r4
   e1768:	f000 f831 	bl	e17ce <strlen>
   e176c:	4420      	add	r0, r4
   e176e:	bd10      	pop	{r4, pc}

000e1770 <strcmp>:
   e1770:	f810 2b01 	ldrb.w	r2, [r0], #1
   e1774:	f811 3b01 	ldrb.w	r3, [r1], #1
   e1778:	2a01      	cmp	r2, #1
   e177a:	bf28      	it	cs
   e177c:	429a      	cmpcs	r2, r3
   e177e:	d0f7      	beq.n	e1770 <strcmp>
   e1780:	1ad0      	subs	r0, r2, r3
   e1782:	4770      	bx	lr

000e1784 <strcpy>:
   e1784:	4603      	mov	r3, r0
   e1786:	f811 2b01 	ldrb.w	r2, [r1], #1
   e178a:	f803 2b01 	strb.w	r2, [r3], #1
   e178e:	2a00      	cmp	r2, #0
   e1790:	d1f9      	bne.n	e1786 <strcpy+0x2>
   e1792:	4770      	bx	lr

000e1794 <strdup>:
   e1794:	4b02      	ldr	r3, [pc, #8]	; (e17a0 <strdup+0xc>)
   e1796:	4601      	mov	r1, r0
   e1798:	6818      	ldr	r0, [r3, #0]
   e179a:	f000 b803 	b.w	e17a4 <_strdup_r>
   e179e:	bf00      	nop
   e17a0:	2003e1d8 	.word	0x2003e1d8

000e17a4 <_strdup_r>:
   e17a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e17a6:	4604      	mov	r4, r0
   e17a8:	4608      	mov	r0, r1
   e17aa:	460d      	mov	r5, r1
   e17ac:	f000 f80f 	bl	e17ce <strlen>
   e17b0:	1c42      	adds	r2, r0, #1
   e17b2:	4611      	mov	r1, r2
   e17b4:	4620      	mov	r0, r4
   e17b6:	9201      	str	r2, [sp, #4]
   e17b8:	f7fb fcbe 	bl	dd138 <_malloc_r>
   e17bc:	4604      	mov	r4, r0
   e17be:	b118      	cbz	r0, e17c8 <_strdup_r+0x24>
   e17c0:	9a01      	ldr	r2, [sp, #4]
   e17c2:	4629      	mov	r1, r5
   e17c4:	f7ff ff50 	bl	e1668 <memcpy>
   e17c8:	4620      	mov	r0, r4
   e17ca:	b003      	add	sp, #12
   e17cc:	bd30      	pop	{r4, r5, pc}

000e17ce <strlen>:
   e17ce:	4603      	mov	r3, r0
   e17d0:	f813 2b01 	ldrb.w	r2, [r3], #1
   e17d4:	2a00      	cmp	r2, #0
   e17d6:	d1fb      	bne.n	e17d0 <strlen+0x2>
   e17d8:	1a18      	subs	r0, r3, r0
   e17da:	3801      	subs	r0, #1
   e17dc:	4770      	bx	lr

000e17de <strncmp>:
   e17de:	b510      	push	{r4, lr}
   e17e0:	b16a      	cbz	r2, e17fe <strncmp+0x20>
   e17e2:	3901      	subs	r1, #1
   e17e4:	1884      	adds	r4, r0, r2
   e17e6:	f810 3b01 	ldrb.w	r3, [r0], #1
   e17ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   e17ee:	4293      	cmp	r3, r2
   e17f0:	d103      	bne.n	e17fa <strncmp+0x1c>
   e17f2:	42a0      	cmp	r0, r4
   e17f4:	d001      	beq.n	e17fa <strncmp+0x1c>
   e17f6:	2b00      	cmp	r3, #0
   e17f8:	d1f5      	bne.n	e17e6 <strncmp+0x8>
   e17fa:	1a98      	subs	r0, r3, r2
   e17fc:	bd10      	pop	{r4, pc}
   e17fe:	4610      	mov	r0, r2
   e1800:	e7fc      	b.n	e17fc <strncmp+0x1e>

000e1802 <strncpy>:
   e1802:	b510      	push	{r4, lr}
   e1804:	3901      	subs	r1, #1
   e1806:	4603      	mov	r3, r0
   e1808:	b132      	cbz	r2, e1818 <strncpy+0x16>
   e180a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e180e:	f803 4b01 	strb.w	r4, [r3], #1
   e1812:	3a01      	subs	r2, #1
   e1814:	2c00      	cmp	r4, #0
   e1816:	d1f7      	bne.n	e1808 <strncpy+0x6>
   e1818:	441a      	add	r2, r3
   e181a:	2100      	movs	r1, #0
   e181c:	4293      	cmp	r3, r2
   e181e:	d100      	bne.n	e1822 <strncpy+0x20>
   e1820:	bd10      	pop	{r4, pc}
   e1822:	f803 1b01 	strb.w	r1, [r3], #1
   e1826:	e7f9      	b.n	e181c <strncpy+0x1a>

000e1828 <strrchr>:
   e1828:	b538      	push	{r3, r4, r5, lr}
   e182a:	4603      	mov	r3, r0
   e182c:	460c      	mov	r4, r1
   e182e:	b969      	cbnz	r1, e184c <strrchr+0x24>
   e1830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e1834:	f7ff bf85 	b.w	e1742 <strchr>
   e1838:	1c43      	adds	r3, r0, #1
   e183a:	4605      	mov	r5, r0
   e183c:	4621      	mov	r1, r4
   e183e:	4618      	mov	r0, r3
   e1840:	f7ff ff7f 	bl	e1742 <strchr>
   e1844:	2800      	cmp	r0, #0
   e1846:	d1f7      	bne.n	e1838 <strrchr+0x10>
   e1848:	4628      	mov	r0, r5
   e184a:	bd38      	pop	{r3, r4, r5, pc}
   e184c:	2500      	movs	r5, #0
   e184e:	e7f5      	b.n	e183c <strrchr+0x14>

000e1850 <sulp>:
   e1850:	b570      	push	{r4, r5, r6, lr}
   e1852:	4604      	mov	r4, r0
   e1854:	460d      	mov	r5, r1
   e1856:	ec45 4b10 	vmov	d0, r4, r5
   e185a:	4616      	mov	r6, r2
   e185c:	f001 feb8 	bl	e35d0 <__ulp>
   e1860:	ec51 0b10 	vmov	r0, r1, d0
   e1864:	b17e      	cbz	r6, e1886 <sulp+0x36>
   e1866:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e186a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e186e:	2b00      	cmp	r3, #0
   e1870:	dd09      	ble.n	e1886 <sulp+0x36>
   e1872:	051b      	lsls	r3, r3, #20
   e1874:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e1878:	2400      	movs	r4, #0
   e187a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e187e:	4622      	mov	r2, r4
   e1880:	462b      	mov	r3, r5
   e1882:	f7ff fb4d 	bl	e0f20 <__aeabi_dmul>
   e1886:	bd70      	pop	{r4, r5, r6, pc}

000e1888 <_strtod_l>:
   e1888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e188c:	b0a3      	sub	sp, #140	; 0x8c
   e188e:	461f      	mov	r7, r3
   e1890:	2300      	movs	r3, #0
   e1892:	931e      	str	r3, [sp, #120]	; 0x78
   e1894:	4ba4      	ldr	r3, [pc, #656]	; (e1b28 <_strtod_l+0x2a0>)
   e1896:	9219      	str	r2, [sp, #100]	; 0x64
   e1898:	681b      	ldr	r3, [r3, #0]
   e189a:	9307      	str	r3, [sp, #28]
   e189c:	4604      	mov	r4, r0
   e189e:	4618      	mov	r0, r3
   e18a0:	4688      	mov	r8, r1
   e18a2:	f7ff ff94 	bl	e17ce <strlen>
   e18a6:	f04f 0a00 	mov.w	sl, #0
   e18aa:	4605      	mov	r5, r0
   e18ac:	f04f 0b00 	mov.w	fp, #0
   e18b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e18b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e18b6:	781a      	ldrb	r2, [r3, #0]
   e18b8:	2a2b      	cmp	r2, #43	; 0x2b
   e18ba:	d04c      	beq.n	e1956 <_strtod_l+0xce>
   e18bc:	d839      	bhi.n	e1932 <_strtod_l+0xaa>
   e18be:	2a0d      	cmp	r2, #13
   e18c0:	d832      	bhi.n	e1928 <_strtod_l+0xa0>
   e18c2:	2a08      	cmp	r2, #8
   e18c4:	d832      	bhi.n	e192c <_strtod_l+0xa4>
   e18c6:	2a00      	cmp	r2, #0
   e18c8:	d03c      	beq.n	e1944 <_strtod_l+0xbc>
   e18ca:	2300      	movs	r3, #0
   e18cc:	930e      	str	r3, [sp, #56]	; 0x38
   e18ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   e18d0:	7833      	ldrb	r3, [r6, #0]
   e18d2:	2b30      	cmp	r3, #48	; 0x30
   e18d4:	f040 80b4 	bne.w	e1a40 <_strtod_l+0x1b8>
   e18d8:	7873      	ldrb	r3, [r6, #1]
   e18da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e18de:	2b58      	cmp	r3, #88	; 0x58
   e18e0:	d16c      	bne.n	e19bc <_strtod_l+0x134>
   e18e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e18e4:	9301      	str	r3, [sp, #4]
   e18e6:	ab1e      	add	r3, sp, #120	; 0x78
   e18e8:	9702      	str	r7, [sp, #8]
   e18ea:	9300      	str	r3, [sp, #0]
   e18ec:	4a8f      	ldr	r2, [pc, #572]	; (e1b2c <_strtod_l+0x2a4>)
   e18ee:	ab1f      	add	r3, sp, #124	; 0x7c
   e18f0:	a91d      	add	r1, sp, #116	; 0x74
   e18f2:	4620      	mov	r0, r4
   e18f4:	f001 f840 	bl	e2978 <__gethex>
   e18f8:	f010 0707 	ands.w	r7, r0, #7
   e18fc:	4605      	mov	r5, r0
   e18fe:	d005      	beq.n	e190c <_strtod_l+0x84>
   e1900:	2f06      	cmp	r7, #6
   e1902:	d12a      	bne.n	e195a <_strtod_l+0xd2>
   e1904:	3601      	adds	r6, #1
   e1906:	2300      	movs	r3, #0
   e1908:	961d      	str	r6, [sp, #116]	; 0x74
   e190a:	930e      	str	r3, [sp, #56]	; 0x38
   e190c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e190e:	2b00      	cmp	r3, #0
   e1910:	f040 8596 	bne.w	e2440 <_strtod_l+0xbb8>
   e1914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e1916:	b1db      	cbz	r3, e1950 <_strtod_l+0xc8>
   e1918:	4652      	mov	r2, sl
   e191a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e191e:	ec43 2b10 	vmov	d0, r2, r3
   e1922:	b023      	add	sp, #140	; 0x8c
   e1924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1928:	2a20      	cmp	r2, #32
   e192a:	d1ce      	bne.n	e18ca <_strtod_l+0x42>
   e192c:	3301      	adds	r3, #1
   e192e:	931d      	str	r3, [sp, #116]	; 0x74
   e1930:	e7c0      	b.n	e18b4 <_strtod_l+0x2c>
   e1932:	2a2d      	cmp	r2, #45	; 0x2d
   e1934:	d1c9      	bne.n	e18ca <_strtod_l+0x42>
   e1936:	2201      	movs	r2, #1
   e1938:	920e      	str	r2, [sp, #56]	; 0x38
   e193a:	1c5a      	adds	r2, r3, #1
   e193c:	921d      	str	r2, [sp, #116]	; 0x74
   e193e:	785b      	ldrb	r3, [r3, #1]
   e1940:	2b00      	cmp	r3, #0
   e1942:	d1c4      	bne.n	e18ce <_strtod_l+0x46>
   e1944:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e1946:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e194a:	2b00      	cmp	r3, #0
   e194c:	f040 8576 	bne.w	e243c <_strtod_l+0xbb4>
   e1950:	4652      	mov	r2, sl
   e1952:	465b      	mov	r3, fp
   e1954:	e7e3      	b.n	e191e <_strtod_l+0x96>
   e1956:	2200      	movs	r2, #0
   e1958:	e7ee      	b.n	e1938 <_strtod_l+0xb0>
   e195a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e195c:	b13a      	cbz	r2, e196e <_strtod_l+0xe6>
   e195e:	2135      	movs	r1, #53	; 0x35
   e1960:	a820      	add	r0, sp, #128	; 0x80
   e1962:	f001 ff34 	bl	e37ce <__copybits>
   e1966:	991e      	ldr	r1, [sp, #120]	; 0x78
   e1968:	4620      	mov	r0, r4
   e196a:	f001 fb69 	bl	e3040 <_Bfree>
   e196e:	3f01      	subs	r7, #1
   e1970:	2f05      	cmp	r7, #5
   e1972:	d807      	bhi.n	e1984 <_strtod_l+0xfc>
   e1974:	e8df f007 	tbb	[pc, r7]
   e1978:	1d180b0e 	.word	0x1d180b0e
   e197c:	030e      	.short	0x030e
   e197e:	f04f 0b00 	mov.w	fp, #0
   e1982:	46da      	mov	sl, fp
   e1984:	0728      	lsls	r0, r5, #28
   e1986:	d5c1      	bpl.n	e190c <_strtod_l+0x84>
   e1988:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e198c:	e7be      	b.n	e190c <_strtod_l+0x84>
   e198e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   e1992:	e7f7      	b.n	e1984 <_strtod_l+0xfc>
   e1994:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   e1998:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   e199a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e199e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e19a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e19a6:	e7ed      	b.n	e1984 <_strtod_l+0xfc>
   e19a8:	f8df b184 	ldr.w	fp, [pc, #388]	; e1b30 <_strtod_l+0x2a8>
   e19ac:	f04f 0a00 	mov.w	sl, #0
   e19b0:	e7e8      	b.n	e1984 <_strtod_l+0xfc>
   e19b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e19b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e19ba:	e7e3      	b.n	e1984 <_strtod_l+0xfc>
   e19bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e19be:	1c5a      	adds	r2, r3, #1
   e19c0:	921d      	str	r2, [sp, #116]	; 0x74
   e19c2:	785b      	ldrb	r3, [r3, #1]
   e19c4:	2b30      	cmp	r3, #48	; 0x30
   e19c6:	d0f9      	beq.n	e19bc <_strtod_l+0x134>
   e19c8:	2b00      	cmp	r3, #0
   e19ca:	d09f      	beq.n	e190c <_strtod_l+0x84>
   e19cc:	2301      	movs	r3, #1
   e19ce:	f04f 0900 	mov.w	r9, #0
   e19d2:	9304      	str	r3, [sp, #16]
   e19d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e19d6:	930a      	str	r3, [sp, #40]	; 0x28
   e19d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   e19dc:	464f      	mov	r7, r9
   e19de:	220a      	movs	r2, #10
   e19e0:	981d      	ldr	r0, [sp, #116]	; 0x74
   e19e2:	7806      	ldrb	r6, [r0, #0]
   e19e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e19e8:	b2d9      	uxtb	r1, r3
   e19ea:	2909      	cmp	r1, #9
   e19ec:	d92a      	bls.n	e1a44 <_strtod_l+0x1bc>
   e19ee:	9907      	ldr	r1, [sp, #28]
   e19f0:	462a      	mov	r2, r5
   e19f2:	f7ff fef4 	bl	e17de <strncmp>
   e19f6:	b398      	cbz	r0, e1a60 <_strtod_l+0x1d8>
   e19f8:	2000      	movs	r0, #0
   e19fa:	4633      	mov	r3, r6
   e19fc:	463d      	mov	r5, r7
   e19fe:	9007      	str	r0, [sp, #28]
   e1a00:	4602      	mov	r2, r0
   e1a02:	2b65      	cmp	r3, #101	; 0x65
   e1a04:	d001      	beq.n	e1a0a <_strtod_l+0x182>
   e1a06:	2b45      	cmp	r3, #69	; 0x45
   e1a08:	d118      	bne.n	e1a3c <_strtod_l+0x1b4>
   e1a0a:	b91d      	cbnz	r5, e1a14 <_strtod_l+0x18c>
   e1a0c:	9b04      	ldr	r3, [sp, #16]
   e1a0e:	4303      	orrs	r3, r0
   e1a10:	d098      	beq.n	e1944 <_strtod_l+0xbc>
   e1a12:	2500      	movs	r5, #0
   e1a14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   e1a18:	f108 0301 	add.w	r3, r8, #1
   e1a1c:	931d      	str	r3, [sp, #116]	; 0x74
   e1a1e:	f898 3001 	ldrb.w	r3, [r8, #1]
   e1a22:	2b2b      	cmp	r3, #43	; 0x2b
   e1a24:	d075      	beq.n	e1b12 <_strtod_l+0x28a>
   e1a26:	2b2d      	cmp	r3, #45	; 0x2d
   e1a28:	d07b      	beq.n	e1b22 <_strtod_l+0x29a>
   e1a2a:	f04f 0c00 	mov.w	ip, #0
   e1a2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e1a32:	2909      	cmp	r1, #9
   e1a34:	f240 8082 	bls.w	e1b3c <_strtod_l+0x2b4>
   e1a38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e1a3c:	2600      	movs	r6, #0
   e1a3e:	e09d      	b.n	e1b7c <_strtod_l+0x2f4>
   e1a40:	2300      	movs	r3, #0
   e1a42:	e7c4      	b.n	e19ce <_strtod_l+0x146>
   e1a44:	2f08      	cmp	r7, #8
   e1a46:	bfd8      	it	le
   e1a48:	9909      	ldrle	r1, [sp, #36]	; 0x24
   e1a4a:	f100 0001 	add.w	r0, r0, #1
   e1a4e:	bfda      	itte	le
   e1a50:	fb02 3301 	mlale	r3, r2, r1, r3
   e1a54:	9309      	strle	r3, [sp, #36]	; 0x24
   e1a56:	fb02 3909 	mlagt	r9, r2, r9, r3
   e1a5a:	3701      	adds	r7, #1
   e1a5c:	901d      	str	r0, [sp, #116]	; 0x74
   e1a5e:	e7bf      	b.n	e19e0 <_strtod_l+0x158>
   e1a60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1a62:	195a      	adds	r2, r3, r5
   e1a64:	921d      	str	r2, [sp, #116]	; 0x74
   e1a66:	5d5b      	ldrb	r3, [r3, r5]
   e1a68:	2f00      	cmp	r7, #0
   e1a6a:	d037      	beq.n	e1adc <_strtod_l+0x254>
   e1a6c:	9007      	str	r0, [sp, #28]
   e1a6e:	463d      	mov	r5, r7
   e1a70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   e1a74:	2a09      	cmp	r2, #9
   e1a76:	d912      	bls.n	e1a9e <_strtod_l+0x216>
   e1a78:	2201      	movs	r2, #1
   e1a7a:	e7c2      	b.n	e1a02 <_strtod_l+0x17a>
   e1a7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1a7e:	1c5a      	adds	r2, r3, #1
   e1a80:	921d      	str	r2, [sp, #116]	; 0x74
   e1a82:	785b      	ldrb	r3, [r3, #1]
   e1a84:	3001      	adds	r0, #1
   e1a86:	2b30      	cmp	r3, #48	; 0x30
   e1a88:	d0f8      	beq.n	e1a7c <_strtod_l+0x1f4>
   e1a8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e1a8e:	2a08      	cmp	r2, #8
   e1a90:	f200 84db 	bhi.w	e244a <_strtod_l+0xbc2>
   e1a94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   e1a96:	9007      	str	r0, [sp, #28]
   e1a98:	2000      	movs	r0, #0
   e1a9a:	920a      	str	r2, [sp, #40]	; 0x28
   e1a9c:	4605      	mov	r5, r0
   e1a9e:	3b30      	subs	r3, #48	; 0x30
   e1aa0:	f100 0201 	add.w	r2, r0, #1
   e1aa4:	d014      	beq.n	e1ad0 <_strtod_l+0x248>
   e1aa6:	9907      	ldr	r1, [sp, #28]
   e1aa8:	4411      	add	r1, r2
   e1aaa:	9107      	str	r1, [sp, #28]
   e1aac:	462a      	mov	r2, r5
   e1aae:	eb00 0e05 	add.w	lr, r0, r5
   e1ab2:	210a      	movs	r1, #10
   e1ab4:	4572      	cmp	r2, lr
   e1ab6:	d113      	bne.n	e1ae0 <_strtod_l+0x258>
   e1ab8:	182a      	adds	r2, r5, r0
   e1aba:	2a08      	cmp	r2, #8
   e1abc:	f105 0501 	add.w	r5, r5, #1
   e1ac0:	4405      	add	r5, r0
   e1ac2:	dc1c      	bgt.n	e1afe <_strtod_l+0x276>
   e1ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1ac6:	220a      	movs	r2, #10
   e1ac8:	fb02 3301 	mla	r3, r2, r1, r3
   e1acc:	9309      	str	r3, [sp, #36]	; 0x24
   e1ace:	2200      	movs	r2, #0
   e1ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1ad2:	1c59      	adds	r1, r3, #1
   e1ad4:	911d      	str	r1, [sp, #116]	; 0x74
   e1ad6:	785b      	ldrb	r3, [r3, #1]
   e1ad8:	4610      	mov	r0, r2
   e1ada:	e7c9      	b.n	e1a70 <_strtod_l+0x1e8>
   e1adc:	4638      	mov	r0, r7
   e1ade:	e7d2      	b.n	e1a86 <_strtod_l+0x1fe>
   e1ae0:	2a08      	cmp	r2, #8
   e1ae2:	dc04      	bgt.n	e1aee <_strtod_l+0x266>
   e1ae4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e1ae6:	434e      	muls	r6, r1
   e1ae8:	9609      	str	r6, [sp, #36]	; 0x24
   e1aea:	3201      	adds	r2, #1
   e1aec:	e7e2      	b.n	e1ab4 <_strtod_l+0x22c>
   e1aee:	f102 0c01 	add.w	ip, r2, #1
   e1af2:	f1bc 0f10 	cmp.w	ip, #16
   e1af6:	bfd8      	it	le
   e1af8:	fb01 f909 	mulle.w	r9, r1, r9
   e1afc:	e7f5      	b.n	e1aea <_strtod_l+0x262>
   e1afe:	2d10      	cmp	r5, #16
   e1b00:	bfdc      	itt	le
   e1b02:	220a      	movle	r2, #10
   e1b04:	fb02 3909 	mlale	r9, r2, r9, r3
   e1b08:	e7e1      	b.n	e1ace <_strtod_l+0x246>
   e1b0a:	2300      	movs	r3, #0
   e1b0c:	9307      	str	r3, [sp, #28]
   e1b0e:	2201      	movs	r2, #1
   e1b10:	e77c      	b.n	e1a0c <_strtod_l+0x184>
   e1b12:	f04f 0c00 	mov.w	ip, #0
   e1b16:	f108 0302 	add.w	r3, r8, #2
   e1b1a:	931d      	str	r3, [sp, #116]	; 0x74
   e1b1c:	f898 3002 	ldrb.w	r3, [r8, #2]
   e1b20:	e785      	b.n	e1a2e <_strtod_l+0x1a6>
   e1b22:	f04f 0c01 	mov.w	ip, #1
   e1b26:	e7f6      	b.n	e1b16 <_strtod_l+0x28e>
   e1b28:	000e4c8c 	.word	0x000e4c8c
   e1b2c:	000e4b38 	.word	0x000e4b38
   e1b30:	7ff00000 	.word	0x7ff00000
   e1b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1b36:	1c59      	adds	r1, r3, #1
   e1b38:	911d      	str	r1, [sp, #116]	; 0x74
   e1b3a:	785b      	ldrb	r3, [r3, #1]
   e1b3c:	2b30      	cmp	r3, #48	; 0x30
   e1b3e:	d0f9      	beq.n	e1b34 <_strtod_l+0x2ac>
   e1b40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   e1b44:	2908      	cmp	r1, #8
   e1b46:	f63f af79 	bhi.w	e1a3c <_strtod_l+0x1b4>
   e1b4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e1b4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1b50:	9308      	str	r3, [sp, #32]
   e1b52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1b54:	1c59      	adds	r1, r3, #1
   e1b56:	911d      	str	r1, [sp, #116]	; 0x74
   e1b58:	785b      	ldrb	r3, [r3, #1]
   e1b5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e1b5e:	2e09      	cmp	r6, #9
   e1b60:	d937      	bls.n	e1bd2 <_strtod_l+0x34a>
   e1b62:	9e08      	ldr	r6, [sp, #32]
   e1b64:	1b89      	subs	r1, r1, r6
   e1b66:	2908      	cmp	r1, #8
   e1b68:	f644 661f 	movw	r6, #19999	; 0x4e1f
   e1b6c:	dc02      	bgt.n	e1b74 <_strtod_l+0x2ec>
   e1b6e:	4576      	cmp	r6, lr
   e1b70:	bfa8      	it	ge
   e1b72:	4676      	movge	r6, lr
   e1b74:	f1bc 0f00 	cmp.w	ip, #0
   e1b78:	d000      	beq.n	e1b7c <_strtod_l+0x2f4>
   e1b7a:	4276      	negs	r6, r6
   e1b7c:	2d00      	cmp	r5, #0
   e1b7e:	d14f      	bne.n	e1c20 <_strtod_l+0x398>
   e1b80:	9904      	ldr	r1, [sp, #16]
   e1b82:	4301      	orrs	r1, r0
   e1b84:	f47f aec2 	bne.w	e190c <_strtod_l+0x84>
   e1b88:	2a00      	cmp	r2, #0
   e1b8a:	f47f aedb 	bne.w	e1944 <_strtod_l+0xbc>
   e1b8e:	2b69      	cmp	r3, #105	; 0x69
   e1b90:	d027      	beq.n	e1be2 <_strtod_l+0x35a>
   e1b92:	dc24      	bgt.n	e1bde <_strtod_l+0x356>
   e1b94:	2b49      	cmp	r3, #73	; 0x49
   e1b96:	d024      	beq.n	e1be2 <_strtod_l+0x35a>
   e1b98:	2b4e      	cmp	r3, #78	; 0x4e
   e1b9a:	f47f aed3 	bne.w	e1944 <_strtod_l+0xbc>
   e1b9e:	499e      	ldr	r1, [pc, #632]	; (e1e18 <_strtod_l+0x590>)
   e1ba0:	a81d      	add	r0, sp, #116	; 0x74
   e1ba2:	f001 f92f 	bl	e2e04 <__match>
   e1ba6:	2800      	cmp	r0, #0
   e1ba8:	f43f aecc 	beq.w	e1944 <_strtod_l+0xbc>
   e1bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1bae:	781b      	ldrb	r3, [r3, #0]
   e1bb0:	2b28      	cmp	r3, #40	; 0x28
   e1bb2:	d12d      	bne.n	e1c10 <_strtod_l+0x388>
   e1bb4:	4999      	ldr	r1, [pc, #612]	; (e1e1c <_strtod_l+0x594>)
   e1bb6:	aa20      	add	r2, sp, #128	; 0x80
   e1bb8:	a81d      	add	r0, sp, #116	; 0x74
   e1bba:	f001 f937 	bl	e2e2c <__hexnan>
   e1bbe:	2805      	cmp	r0, #5
   e1bc0:	d126      	bne.n	e1c10 <_strtod_l+0x388>
   e1bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   e1bc4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   e1bc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e1bcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e1bd0:	e69c      	b.n	e190c <_strtod_l+0x84>
   e1bd2:	210a      	movs	r1, #10
   e1bd4:	fb01 3e0e 	mla	lr, r1, lr, r3
   e1bd8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e1bdc:	e7b9      	b.n	e1b52 <_strtod_l+0x2ca>
   e1bde:	2b6e      	cmp	r3, #110	; 0x6e
   e1be0:	e7db      	b.n	e1b9a <_strtod_l+0x312>
   e1be2:	498f      	ldr	r1, [pc, #572]	; (e1e20 <_strtod_l+0x598>)
   e1be4:	a81d      	add	r0, sp, #116	; 0x74
   e1be6:	f001 f90d 	bl	e2e04 <__match>
   e1bea:	2800      	cmp	r0, #0
   e1bec:	f43f aeaa 	beq.w	e1944 <_strtod_l+0xbc>
   e1bf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1bf2:	498c      	ldr	r1, [pc, #560]	; (e1e24 <_strtod_l+0x59c>)
   e1bf4:	3b01      	subs	r3, #1
   e1bf6:	a81d      	add	r0, sp, #116	; 0x74
   e1bf8:	931d      	str	r3, [sp, #116]	; 0x74
   e1bfa:	f001 f903 	bl	e2e04 <__match>
   e1bfe:	b910      	cbnz	r0, e1c06 <_strtod_l+0x37e>
   e1c00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e1c02:	3301      	adds	r3, #1
   e1c04:	931d      	str	r3, [sp, #116]	; 0x74
   e1c06:	f8df b22c 	ldr.w	fp, [pc, #556]	; e1e34 <_strtod_l+0x5ac>
   e1c0a:	f04f 0a00 	mov.w	sl, #0
   e1c0e:	e67d      	b.n	e190c <_strtod_l+0x84>
   e1c10:	4885      	ldr	r0, [pc, #532]	; (e1e28 <_strtod_l+0x5a0>)
   e1c12:	f7fe ffc1 	bl	e0b98 <nan>
   e1c16:	ed8d 0b04 	vstr	d0, [sp, #16]
   e1c1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e1c1e:	e675      	b.n	e190c <_strtod_l+0x84>
   e1c20:	9b07      	ldr	r3, [sp, #28]
   e1c22:	9809      	ldr	r0, [sp, #36]	; 0x24
   e1c24:	1af3      	subs	r3, r6, r3
   e1c26:	2f00      	cmp	r7, #0
   e1c28:	bf08      	it	eq
   e1c2a:	462f      	moveq	r7, r5
   e1c2c:	2d10      	cmp	r5, #16
   e1c2e:	9308      	str	r3, [sp, #32]
   e1c30:	46a8      	mov	r8, r5
   e1c32:	bfa8      	it	ge
   e1c34:	f04f 0810 	movge.w	r8, #16
   e1c38:	f7ff f8f8 	bl	e0e2c <__aeabi_ui2d>
   e1c3c:	2d09      	cmp	r5, #9
   e1c3e:	4682      	mov	sl, r0
   e1c40:	468b      	mov	fp, r1
   e1c42:	dd13      	ble.n	e1c6c <_strtod_l+0x3e4>
   e1c44:	4b79      	ldr	r3, [pc, #484]	; (e1e2c <_strtod_l+0x5a4>)
   e1c46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   e1c4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e1c4e:	f7ff f967 	bl	e0f20 <__aeabi_dmul>
   e1c52:	4682      	mov	sl, r0
   e1c54:	4648      	mov	r0, r9
   e1c56:	468b      	mov	fp, r1
   e1c58:	f7ff f8e8 	bl	e0e2c <__aeabi_ui2d>
   e1c5c:	4602      	mov	r2, r0
   e1c5e:	460b      	mov	r3, r1
   e1c60:	4650      	mov	r0, sl
   e1c62:	4659      	mov	r1, fp
   e1c64:	f7fe ffa6 	bl	e0bb4 <__adddf3>
   e1c68:	4682      	mov	sl, r0
   e1c6a:	468b      	mov	fp, r1
   e1c6c:	2d0f      	cmp	r5, #15
   e1c6e:	dc38      	bgt.n	e1ce2 <_strtod_l+0x45a>
   e1c70:	9b08      	ldr	r3, [sp, #32]
   e1c72:	2b00      	cmp	r3, #0
   e1c74:	f43f ae4a 	beq.w	e190c <_strtod_l+0x84>
   e1c78:	dd24      	ble.n	e1cc4 <_strtod_l+0x43c>
   e1c7a:	2b16      	cmp	r3, #22
   e1c7c:	dc0b      	bgt.n	e1c96 <_strtod_l+0x40e>
   e1c7e:	4d6b      	ldr	r5, [pc, #428]	; (e1e2c <_strtod_l+0x5a4>)
   e1c80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   e1c84:	e9d5 0100 	ldrd	r0, r1, [r5]
   e1c88:	4652      	mov	r2, sl
   e1c8a:	465b      	mov	r3, fp
   e1c8c:	f7ff f948 	bl	e0f20 <__aeabi_dmul>
   e1c90:	4682      	mov	sl, r0
   e1c92:	468b      	mov	fp, r1
   e1c94:	e63a      	b.n	e190c <_strtod_l+0x84>
   e1c96:	9a08      	ldr	r2, [sp, #32]
   e1c98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e1c9c:	4293      	cmp	r3, r2
   e1c9e:	db20      	blt.n	e1ce2 <_strtod_l+0x45a>
   e1ca0:	4c62      	ldr	r4, [pc, #392]	; (e1e2c <_strtod_l+0x5a4>)
   e1ca2:	f1c5 050f 	rsb	r5, r5, #15
   e1ca6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e1caa:	4652      	mov	r2, sl
   e1cac:	465b      	mov	r3, fp
   e1cae:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1cb2:	f7ff f935 	bl	e0f20 <__aeabi_dmul>
   e1cb6:	9b08      	ldr	r3, [sp, #32]
   e1cb8:	1b5d      	subs	r5, r3, r5
   e1cba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e1cbe:	e9d4 2300 	ldrd	r2, r3, [r4]
   e1cc2:	e7e3      	b.n	e1c8c <_strtod_l+0x404>
   e1cc4:	9b08      	ldr	r3, [sp, #32]
   e1cc6:	3316      	adds	r3, #22
   e1cc8:	db0b      	blt.n	e1ce2 <_strtod_l+0x45a>
   e1cca:	9b07      	ldr	r3, [sp, #28]
   e1ccc:	4a57      	ldr	r2, [pc, #348]	; (e1e2c <_strtod_l+0x5a4>)
   e1cce:	1b9e      	subs	r6, r3, r6
   e1cd0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   e1cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
   e1cd8:	4650      	mov	r0, sl
   e1cda:	4659      	mov	r1, fp
   e1cdc:	f7ff fa4a 	bl	e1174 <__aeabi_ddiv>
   e1ce0:	e7d6      	b.n	e1c90 <_strtod_l+0x408>
   e1ce2:	9b08      	ldr	r3, [sp, #32]
   e1ce4:	eba5 0808 	sub.w	r8, r5, r8
   e1ce8:	4498      	add	r8, r3
   e1cea:	f1b8 0f00 	cmp.w	r8, #0
   e1cee:	dd71      	ble.n	e1dd4 <_strtod_l+0x54c>
   e1cf0:	f018 030f 	ands.w	r3, r8, #15
   e1cf4:	d00a      	beq.n	e1d0c <_strtod_l+0x484>
   e1cf6:	494d      	ldr	r1, [pc, #308]	; (e1e2c <_strtod_l+0x5a4>)
   e1cf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   e1cfc:	4652      	mov	r2, sl
   e1cfe:	465b      	mov	r3, fp
   e1d00:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1d04:	f7ff f90c 	bl	e0f20 <__aeabi_dmul>
   e1d08:	4682      	mov	sl, r0
   e1d0a:	468b      	mov	fp, r1
   e1d0c:	f038 080f 	bics.w	r8, r8, #15
   e1d10:	d04d      	beq.n	e1dae <_strtod_l+0x526>
   e1d12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   e1d16:	dd22      	ble.n	e1d5e <_strtod_l+0x4d6>
   e1d18:	2500      	movs	r5, #0
   e1d1a:	462e      	mov	r6, r5
   e1d1c:	9509      	str	r5, [sp, #36]	; 0x24
   e1d1e:	9507      	str	r5, [sp, #28]
   e1d20:	2322      	movs	r3, #34	; 0x22
   e1d22:	f8df b110 	ldr.w	fp, [pc, #272]	; e1e34 <_strtod_l+0x5ac>
   e1d26:	6023      	str	r3, [r4, #0]
   e1d28:	f04f 0a00 	mov.w	sl, #0
   e1d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1d2e:	2b00      	cmp	r3, #0
   e1d30:	f43f adec 	beq.w	e190c <_strtod_l+0x84>
   e1d34:	991e      	ldr	r1, [sp, #120]	; 0x78
   e1d36:	4620      	mov	r0, r4
   e1d38:	f001 f982 	bl	e3040 <_Bfree>
   e1d3c:	9907      	ldr	r1, [sp, #28]
   e1d3e:	4620      	mov	r0, r4
   e1d40:	f001 f97e 	bl	e3040 <_Bfree>
   e1d44:	4631      	mov	r1, r6
   e1d46:	4620      	mov	r0, r4
   e1d48:	f001 f97a 	bl	e3040 <_Bfree>
   e1d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
   e1d4e:	4620      	mov	r0, r4
   e1d50:	f001 f976 	bl	e3040 <_Bfree>
   e1d54:	4629      	mov	r1, r5
   e1d56:	4620      	mov	r0, r4
   e1d58:	f001 f972 	bl	e3040 <_Bfree>
   e1d5c:	e5d6      	b.n	e190c <_strtod_l+0x84>
   e1d5e:	2300      	movs	r3, #0
   e1d60:	ea4f 1828 	mov.w	r8, r8, asr #4
   e1d64:	4650      	mov	r0, sl
   e1d66:	4659      	mov	r1, fp
   e1d68:	4699      	mov	r9, r3
   e1d6a:	f1b8 0f01 	cmp.w	r8, #1
   e1d6e:	dc21      	bgt.n	e1db4 <_strtod_l+0x52c>
   e1d70:	b10b      	cbz	r3, e1d76 <_strtod_l+0x4ee>
   e1d72:	4682      	mov	sl, r0
   e1d74:	468b      	mov	fp, r1
   e1d76:	4b2e      	ldr	r3, [pc, #184]	; (e1e30 <_strtod_l+0x5a8>)
   e1d78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e1d7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   e1d80:	4652      	mov	r2, sl
   e1d82:	465b      	mov	r3, fp
   e1d84:	e9d9 0100 	ldrd	r0, r1, [r9]
   e1d88:	f7ff f8ca 	bl	e0f20 <__aeabi_dmul>
   e1d8c:	4b29      	ldr	r3, [pc, #164]	; (e1e34 <_strtod_l+0x5ac>)
   e1d8e:	460a      	mov	r2, r1
   e1d90:	400b      	ands	r3, r1
   e1d92:	4929      	ldr	r1, [pc, #164]	; (e1e38 <_strtod_l+0x5b0>)
   e1d94:	428b      	cmp	r3, r1
   e1d96:	4682      	mov	sl, r0
   e1d98:	d8be      	bhi.n	e1d18 <_strtod_l+0x490>
   e1d9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e1d9e:	428b      	cmp	r3, r1
   e1da0:	bf86      	itte	hi
   e1da2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; e1e3c <_strtod_l+0x5b4>
   e1da6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   e1daa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e1dae:	2300      	movs	r3, #0
   e1db0:	9304      	str	r3, [sp, #16]
   e1db2:	e081      	b.n	e1eb8 <_strtod_l+0x630>
   e1db4:	f018 0f01 	tst.w	r8, #1
   e1db8:	d007      	beq.n	e1dca <_strtod_l+0x542>
   e1dba:	4b1d      	ldr	r3, [pc, #116]	; (e1e30 <_strtod_l+0x5a8>)
   e1dbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   e1dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1dc4:	f7ff f8ac 	bl	e0f20 <__aeabi_dmul>
   e1dc8:	2301      	movs	r3, #1
   e1dca:	f109 0901 	add.w	r9, r9, #1
   e1dce:	ea4f 0868 	mov.w	r8, r8, asr #1
   e1dd2:	e7ca      	b.n	e1d6a <_strtod_l+0x4e2>
   e1dd4:	d0eb      	beq.n	e1dae <_strtod_l+0x526>
   e1dd6:	f1c8 0800 	rsb	r8, r8, #0
   e1dda:	f018 020f 	ands.w	r2, r8, #15
   e1dde:	d00a      	beq.n	e1df6 <_strtod_l+0x56e>
   e1de0:	4b12      	ldr	r3, [pc, #72]	; (e1e2c <_strtod_l+0x5a4>)
   e1de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e1de6:	4650      	mov	r0, sl
   e1de8:	4659      	mov	r1, fp
   e1dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1dee:	f7ff f9c1 	bl	e1174 <__aeabi_ddiv>
   e1df2:	4682      	mov	sl, r0
   e1df4:	468b      	mov	fp, r1
   e1df6:	ea5f 1828 	movs.w	r8, r8, asr #4
   e1dfa:	d0d8      	beq.n	e1dae <_strtod_l+0x526>
   e1dfc:	f1b8 0f1f 	cmp.w	r8, #31
   e1e00:	dd1e      	ble.n	e1e40 <_strtod_l+0x5b8>
   e1e02:	2500      	movs	r5, #0
   e1e04:	462e      	mov	r6, r5
   e1e06:	9509      	str	r5, [sp, #36]	; 0x24
   e1e08:	9507      	str	r5, [sp, #28]
   e1e0a:	2322      	movs	r3, #34	; 0x22
   e1e0c:	f04f 0a00 	mov.w	sl, #0
   e1e10:	f04f 0b00 	mov.w	fp, #0
   e1e14:	6023      	str	r3, [r4, #0]
   e1e16:	e789      	b.n	e1d2c <_strtod_l+0x4a4>
   e1e18:	000e4b33 	.word	0x000e4b33
   e1e1c:	000e4b4c 	.word	0x000e4b4c
   e1e20:	000e4b2a 	.word	0x000e4b2a
   e1e24:	000e4b2d 	.word	0x000e4b2d
   e1e28:	000e44eb 	.word	0x000e44eb
   e1e2c:	000e4cc8 	.word	0x000e4cc8
   e1e30:	000e4ca0 	.word	0x000e4ca0
   e1e34:	7ff00000 	.word	0x7ff00000
   e1e38:	7ca00000 	.word	0x7ca00000
   e1e3c:	7fefffff 	.word	0x7fefffff
   e1e40:	f018 0310 	ands.w	r3, r8, #16
   e1e44:	bf18      	it	ne
   e1e46:	236a      	movne	r3, #106	; 0x6a
   e1e48:	f8df 93b4 	ldr.w	r9, [pc, #948]	; e2200 <_strtod_l+0x978>
   e1e4c:	9304      	str	r3, [sp, #16]
   e1e4e:	4650      	mov	r0, sl
   e1e50:	4659      	mov	r1, fp
   e1e52:	2300      	movs	r3, #0
   e1e54:	f018 0f01 	tst.w	r8, #1
   e1e58:	d004      	beq.n	e1e64 <_strtod_l+0x5dc>
   e1e5a:	e9d9 2300 	ldrd	r2, r3, [r9]
   e1e5e:	f7ff f85f 	bl	e0f20 <__aeabi_dmul>
   e1e62:	2301      	movs	r3, #1
   e1e64:	ea5f 0868 	movs.w	r8, r8, asr #1
   e1e68:	f109 0908 	add.w	r9, r9, #8
   e1e6c:	d1f2      	bne.n	e1e54 <_strtod_l+0x5cc>
   e1e6e:	b10b      	cbz	r3, e1e74 <_strtod_l+0x5ec>
   e1e70:	4682      	mov	sl, r0
   e1e72:	468b      	mov	fp, r1
   e1e74:	9b04      	ldr	r3, [sp, #16]
   e1e76:	b1bb      	cbz	r3, e1ea8 <_strtod_l+0x620>
   e1e78:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e1e7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e1e80:	2b00      	cmp	r3, #0
   e1e82:	4659      	mov	r1, fp
   e1e84:	dd10      	ble.n	e1ea8 <_strtod_l+0x620>
   e1e86:	2b1f      	cmp	r3, #31
   e1e88:	f340 8128 	ble.w	e20dc <_strtod_l+0x854>
   e1e8c:	2b34      	cmp	r3, #52	; 0x34
   e1e8e:	bfde      	ittt	le
   e1e90:	3b20      	suble	r3, #32
   e1e92:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   e1e96:	fa02 f303 	lslle.w	r3, r2, r3
   e1e9a:	f04f 0a00 	mov.w	sl, #0
   e1e9e:	bfcc      	ite	gt
   e1ea0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e1ea4:	ea03 0b01 	andle.w	fp, r3, r1
   e1ea8:	2200      	movs	r2, #0
   e1eaa:	2300      	movs	r3, #0
   e1eac:	4650      	mov	r0, sl
   e1eae:	4659      	mov	r1, fp
   e1eb0:	f7ff fa9e 	bl	e13f0 <__aeabi_dcmpeq>
   e1eb4:	2800      	cmp	r0, #0
   e1eb6:	d1a4      	bne.n	e1e02 <_strtod_l+0x57a>
   e1eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1eba:	9300      	str	r3, [sp, #0]
   e1ebc:	990a      	ldr	r1, [sp, #40]	; 0x28
   e1ebe:	462b      	mov	r3, r5
   e1ec0:	463a      	mov	r2, r7
   e1ec2:	4620      	mov	r0, r4
   e1ec4:	f001 f911 	bl	e30ea <__s2b>
   e1ec8:	9009      	str	r0, [sp, #36]	; 0x24
   e1eca:	2800      	cmp	r0, #0
   e1ecc:	f43f af24 	beq.w	e1d18 <_strtod_l+0x490>
   e1ed0:	9b07      	ldr	r3, [sp, #28]
   e1ed2:	1b9e      	subs	r6, r3, r6
   e1ed4:	9b08      	ldr	r3, [sp, #32]
   e1ed6:	2b00      	cmp	r3, #0
   e1ed8:	bfb4      	ite	lt
   e1eda:	4633      	movlt	r3, r6
   e1edc:	2300      	movge	r3, #0
   e1ede:	9310      	str	r3, [sp, #64]	; 0x40
   e1ee0:	9b08      	ldr	r3, [sp, #32]
   e1ee2:	2500      	movs	r5, #0
   e1ee4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   e1ee8:	9318      	str	r3, [sp, #96]	; 0x60
   e1eea:	462e      	mov	r6, r5
   e1eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1eee:	4620      	mov	r0, r4
   e1ef0:	6859      	ldr	r1, [r3, #4]
   e1ef2:	f001 f871 	bl	e2fd8 <_Balloc>
   e1ef6:	9007      	str	r0, [sp, #28]
   e1ef8:	2800      	cmp	r0, #0
   e1efa:	f43f af11 	beq.w	e1d20 <_strtod_l+0x498>
   e1efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1f00:	691a      	ldr	r2, [r3, #16]
   e1f02:	3202      	adds	r2, #2
   e1f04:	f103 010c 	add.w	r1, r3, #12
   e1f08:	0092      	lsls	r2, r2, #2
   e1f0a:	300c      	adds	r0, #12
   e1f0c:	f7ff fbac 	bl	e1668 <memcpy>
   e1f10:	ec4b ab10 	vmov	d0, sl, fp
   e1f14:	aa20      	add	r2, sp, #128	; 0x80
   e1f16:	a91f      	add	r1, sp, #124	; 0x7c
   e1f18:	4620      	mov	r0, r4
   e1f1a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   e1f1e:	f001 fbd3 	bl	e36c8 <__d2b>
   e1f22:	901e      	str	r0, [sp, #120]	; 0x78
   e1f24:	2800      	cmp	r0, #0
   e1f26:	f43f aefb 	beq.w	e1d20 <_strtod_l+0x498>
   e1f2a:	2101      	movs	r1, #1
   e1f2c:	4620      	mov	r0, r4
   e1f2e:	f001 f96a 	bl	e3206 <__i2b>
   e1f32:	4606      	mov	r6, r0
   e1f34:	2800      	cmp	r0, #0
   e1f36:	f43f aef3 	beq.w	e1d20 <_strtod_l+0x498>
   e1f3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   e1f3c:	9904      	ldr	r1, [sp, #16]
   e1f3e:	2b00      	cmp	r3, #0
   e1f40:	bfab      	itete	ge
   e1f42:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   e1f44:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   e1f46:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   e1f48:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   e1f4c:	bfac      	ite	ge
   e1f4e:	eb03 0902 	addge.w	r9, r3, r2
   e1f52:	1ad7      	sublt	r7, r2, r3
   e1f54:	9a20      	ldr	r2, [sp, #128]	; 0x80
   e1f56:	eba3 0801 	sub.w	r8, r3, r1
   e1f5a:	4490      	add	r8, r2
   e1f5c:	4ba3      	ldr	r3, [pc, #652]	; (e21ec <_strtod_l+0x964>)
   e1f5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   e1f62:	4598      	cmp	r8, r3
   e1f64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   e1f68:	f280 80cc 	bge.w	e2104 <_strtod_l+0x87c>
   e1f6c:	eba3 0308 	sub.w	r3, r3, r8
   e1f70:	2b1f      	cmp	r3, #31
   e1f72:	eba2 0203 	sub.w	r2, r2, r3
   e1f76:	f04f 0101 	mov.w	r1, #1
   e1f7a:	f300 80b6 	bgt.w	e20ea <_strtod_l+0x862>
   e1f7e:	fa01 f303 	lsl.w	r3, r1, r3
   e1f82:	9311      	str	r3, [sp, #68]	; 0x44
   e1f84:	2300      	movs	r3, #0
   e1f86:	930c      	str	r3, [sp, #48]	; 0x30
   e1f88:	eb09 0802 	add.w	r8, r9, r2
   e1f8c:	9b04      	ldr	r3, [sp, #16]
   e1f8e:	45c1      	cmp	r9, r8
   e1f90:	4417      	add	r7, r2
   e1f92:	441f      	add	r7, r3
   e1f94:	464b      	mov	r3, r9
   e1f96:	bfa8      	it	ge
   e1f98:	4643      	movge	r3, r8
   e1f9a:	42bb      	cmp	r3, r7
   e1f9c:	bfa8      	it	ge
   e1f9e:	463b      	movge	r3, r7
   e1fa0:	2b00      	cmp	r3, #0
   e1fa2:	bfc2      	ittt	gt
   e1fa4:	eba8 0803 	subgt.w	r8, r8, r3
   e1fa8:	1aff      	subgt	r7, r7, r3
   e1faa:	eba9 0903 	subgt.w	r9, r9, r3
   e1fae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e1fb0:	2b00      	cmp	r3, #0
   e1fb2:	dd17      	ble.n	e1fe4 <_strtod_l+0x75c>
   e1fb4:	4631      	mov	r1, r6
   e1fb6:	461a      	mov	r2, r3
   e1fb8:	4620      	mov	r0, r4
   e1fba:	f001 f9c9 	bl	e3350 <__pow5mult>
   e1fbe:	4606      	mov	r6, r0
   e1fc0:	2800      	cmp	r0, #0
   e1fc2:	f43f aead 	beq.w	e1d20 <_strtod_l+0x498>
   e1fc6:	4601      	mov	r1, r0
   e1fc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e1fca:	4620      	mov	r0, r4
   e1fcc:	f001 f924 	bl	e3218 <__multiply>
   e1fd0:	900f      	str	r0, [sp, #60]	; 0x3c
   e1fd2:	2800      	cmp	r0, #0
   e1fd4:	f43f aea4 	beq.w	e1d20 <_strtod_l+0x498>
   e1fd8:	991e      	ldr	r1, [sp, #120]	; 0x78
   e1fda:	4620      	mov	r0, r4
   e1fdc:	f001 f830 	bl	e3040 <_Bfree>
   e1fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e1fe2:	931e      	str	r3, [sp, #120]	; 0x78
   e1fe4:	f1b8 0f00 	cmp.w	r8, #0
   e1fe8:	f300 8091 	bgt.w	e210e <_strtod_l+0x886>
   e1fec:	9b08      	ldr	r3, [sp, #32]
   e1fee:	2b00      	cmp	r3, #0
   e1ff0:	dd08      	ble.n	e2004 <_strtod_l+0x77c>
   e1ff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e1ff4:	9907      	ldr	r1, [sp, #28]
   e1ff6:	4620      	mov	r0, r4
   e1ff8:	f001 f9aa 	bl	e3350 <__pow5mult>
   e1ffc:	9007      	str	r0, [sp, #28]
   e1ffe:	2800      	cmp	r0, #0
   e2000:	f43f ae8e 	beq.w	e1d20 <_strtod_l+0x498>
   e2004:	2f00      	cmp	r7, #0
   e2006:	dd08      	ble.n	e201a <_strtod_l+0x792>
   e2008:	9907      	ldr	r1, [sp, #28]
   e200a:	463a      	mov	r2, r7
   e200c:	4620      	mov	r0, r4
   e200e:	f001 f9ed 	bl	e33ec <__lshift>
   e2012:	9007      	str	r0, [sp, #28]
   e2014:	2800      	cmp	r0, #0
   e2016:	f43f ae83 	beq.w	e1d20 <_strtod_l+0x498>
   e201a:	f1b9 0f00 	cmp.w	r9, #0
   e201e:	dd08      	ble.n	e2032 <_strtod_l+0x7aa>
   e2020:	4631      	mov	r1, r6
   e2022:	464a      	mov	r2, r9
   e2024:	4620      	mov	r0, r4
   e2026:	f001 f9e1 	bl	e33ec <__lshift>
   e202a:	4606      	mov	r6, r0
   e202c:	2800      	cmp	r0, #0
   e202e:	f43f ae77 	beq.w	e1d20 <_strtod_l+0x498>
   e2032:	9a07      	ldr	r2, [sp, #28]
   e2034:	991e      	ldr	r1, [sp, #120]	; 0x78
   e2036:	4620      	mov	r0, r4
   e2038:	f001 fa53 	bl	e34e2 <__mdiff>
   e203c:	4605      	mov	r5, r0
   e203e:	2800      	cmp	r0, #0
   e2040:	f43f ae6e 	beq.w	e1d20 <_strtod_l+0x498>
   e2044:	68c3      	ldr	r3, [r0, #12]
   e2046:	930f      	str	r3, [sp, #60]	; 0x3c
   e2048:	2300      	movs	r3, #0
   e204a:	60c3      	str	r3, [r0, #12]
   e204c:	4631      	mov	r1, r6
   e204e:	f001 fa2c 	bl	e34aa <__mcmp>
   e2052:	2800      	cmp	r0, #0
   e2054:	da65      	bge.n	e2122 <_strtod_l+0x89a>
   e2056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e2058:	ea53 030a 	orrs.w	r3, r3, sl
   e205c:	f040 8087 	bne.w	e216e <_strtod_l+0x8e6>
   e2060:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2064:	2b00      	cmp	r3, #0
   e2066:	f040 8082 	bne.w	e216e <_strtod_l+0x8e6>
   e206a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e206e:	0d1b      	lsrs	r3, r3, #20
   e2070:	051b      	lsls	r3, r3, #20
   e2072:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2076:	d97a      	bls.n	e216e <_strtod_l+0x8e6>
   e2078:	696b      	ldr	r3, [r5, #20]
   e207a:	b913      	cbnz	r3, e2082 <_strtod_l+0x7fa>
   e207c:	692b      	ldr	r3, [r5, #16]
   e207e:	2b01      	cmp	r3, #1
   e2080:	dd75      	ble.n	e216e <_strtod_l+0x8e6>
   e2082:	4629      	mov	r1, r5
   e2084:	2201      	movs	r2, #1
   e2086:	4620      	mov	r0, r4
   e2088:	f001 f9b0 	bl	e33ec <__lshift>
   e208c:	4631      	mov	r1, r6
   e208e:	4605      	mov	r5, r0
   e2090:	f001 fa0b 	bl	e34aa <__mcmp>
   e2094:	2800      	cmp	r0, #0
   e2096:	dd6a      	ble.n	e216e <_strtod_l+0x8e6>
   e2098:	9904      	ldr	r1, [sp, #16]
   e209a:	4a55      	ldr	r2, [pc, #340]	; (e21f0 <_strtod_l+0x968>)
   e209c:	465b      	mov	r3, fp
   e209e:	2900      	cmp	r1, #0
   e20a0:	f000 8085 	beq.w	e21ae <_strtod_l+0x926>
   e20a4:	ea02 010b 	and.w	r1, r2, fp
   e20a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   e20ac:	dc7f      	bgt.n	e21ae <_strtod_l+0x926>
   e20ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   e20b2:	f77f aeaa 	ble.w	e1e0a <_strtod_l+0x582>
   e20b6:	4a4f      	ldr	r2, [pc, #316]	; (e21f4 <_strtod_l+0x96c>)
   e20b8:	2300      	movs	r3, #0
   e20ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   e20be:	4650      	mov	r0, sl
   e20c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   e20c4:	4659      	mov	r1, fp
   e20c6:	f7fe ff2b 	bl	e0f20 <__aeabi_dmul>
   e20ca:	460b      	mov	r3, r1
   e20cc:	4303      	orrs	r3, r0
   e20ce:	bf08      	it	eq
   e20d0:	2322      	moveq	r3, #34	; 0x22
   e20d2:	4682      	mov	sl, r0
   e20d4:	468b      	mov	fp, r1
   e20d6:	bf08      	it	eq
   e20d8:	6023      	streq	r3, [r4, #0]
   e20da:	e62b      	b.n	e1d34 <_strtod_l+0x4ac>
   e20dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e20e0:	fa02 f303 	lsl.w	r3, r2, r3
   e20e4:	ea03 0a0a 	and.w	sl, r3, sl
   e20e8:	e6de      	b.n	e1ea8 <_strtod_l+0x620>
   e20ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   e20ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   e20f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   e20f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   e20fa:	fa01 f308 	lsl.w	r3, r1, r8
   e20fe:	930c      	str	r3, [sp, #48]	; 0x30
   e2100:	9111      	str	r1, [sp, #68]	; 0x44
   e2102:	e741      	b.n	e1f88 <_strtod_l+0x700>
   e2104:	2300      	movs	r3, #0
   e2106:	930c      	str	r3, [sp, #48]	; 0x30
   e2108:	2301      	movs	r3, #1
   e210a:	9311      	str	r3, [sp, #68]	; 0x44
   e210c:	e73c      	b.n	e1f88 <_strtod_l+0x700>
   e210e:	991e      	ldr	r1, [sp, #120]	; 0x78
   e2110:	4642      	mov	r2, r8
   e2112:	4620      	mov	r0, r4
   e2114:	f001 f96a 	bl	e33ec <__lshift>
   e2118:	901e      	str	r0, [sp, #120]	; 0x78
   e211a:	2800      	cmp	r0, #0
   e211c:	f47f af66 	bne.w	e1fec <_strtod_l+0x764>
   e2120:	e5fe      	b.n	e1d20 <_strtod_l+0x498>
   e2122:	465f      	mov	r7, fp
   e2124:	d16e      	bne.n	e2204 <_strtod_l+0x97c>
   e2126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e2128:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e212c:	b342      	cbz	r2, e2180 <_strtod_l+0x8f8>
   e212e:	4a32      	ldr	r2, [pc, #200]	; (e21f8 <_strtod_l+0x970>)
   e2130:	4293      	cmp	r3, r2
   e2132:	d128      	bne.n	e2186 <_strtod_l+0x8fe>
   e2134:	9b04      	ldr	r3, [sp, #16]
   e2136:	4650      	mov	r0, sl
   e2138:	b1eb      	cbz	r3, e2176 <_strtod_l+0x8ee>
   e213a:	4a2d      	ldr	r2, [pc, #180]	; (e21f0 <_strtod_l+0x968>)
   e213c:	403a      	ands	r2, r7
   e213e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   e2142:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   e2146:	d819      	bhi.n	e217c <_strtod_l+0x8f4>
   e2148:	0d12      	lsrs	r2, r2, #20
   e214a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   e214e:	fa01 f303 	lsl.w	r3, r1, r3
   e2152:	4298      	cmp	r0, r3
   e2154:	d117      	bne.n	e2186 <_strtod_l+0x8fe>
   e2156:	4b29      	ldr	r3, [pc, #164]	; (e21fc <_strtod_l+0x974>)
   e2158:	429f      	cmp	r7, r3
   e215a:	d102      	bne.n	e2162 <_strtod_l+0x8da>
   e215c:	3001      	adds	r0, #1
   e215e:	f43f addf 	beq.w	e1d20 <_strtod_l+0x498>
   e2162:	4b23      	ldr	r3, [pc, #140]	; (e21f0 <_strtod_l+0x968>)
   e2164:	403b      	ands	r3, r7
   e2166:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e216a:	f04f 0a00 	mov.w	sl, #0
   e216e:	9b04      	ldr	r3, [sp, #16]
   e2170:	2b00      	cmp	r3, #0
   e2172:	d1a0      	bne.n	e20b6 <_strtod_l+0x82e>
   e2174:	e5de      	b.n	e1d34 <_strtod_l+0x4ac>
   e2176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   e217a:	e7ea      	b.n	e2152 <_strtod_l+0x8ca>
   e217c:	460b      	mov	r3, r1
   e217e:	e7e8      	b.n	e2152 <_strtod_l+0x8ca>
   e2180:	ea53 030a 	orrs.w	r3, r3, sl
   e2184:	d088      	beq.n	e2098 <_strtod_l+0x810>
   e2186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e2188:	b1db      	cbz	r3, e21c2 <_strtod_l+0x93a>
   e218a:	423b      	tst	r3, r7
   e218c:	d0ef      	beq.n	e216e <_strtod_l+0x8e6>
   e218e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e2190:	9a04      	ldr	r2, [sp, #16]
   e2192:	4650      	mov	r0, sl
   e2194:	4659      	mov	r1, fp
   e2196:	b1c3      	cbz	r3, e21ca <_strtod_l+0x942>
   e2198:	f7ff fb5a 	bl	e1850 <sulp>
   e219c:	4602      	mov	r2, r0
   e219e:	460b      	mov	r3, r1
   e21a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e21a4:	f7fe fd06 	bl	e0bb4 <__adddf3>
   e21a8:	4682      	mov	sl, r0
   e21aa:	468b      	mov	fp, r1
   e21ac:	e7df      	b.n	e216e <_strtod_l+0x8e6>
   e21ae:	4013      	ands	r3, r2
   e21b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e21b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e21b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e21bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e21c0:	e7d5      	b.n	e216e <_strtod_l+0x8e6>
   e21c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e21c4:	ea13 0f0a 	tst.w	r3, sl
   e21c8:	e7e0      	b.n	e218c <_strtod_l+0x904>
   e21ca:	f7ff fb41 	bl	e1850 <sulp>
   e21ce:	4602      	mov	r2, r0
   e21d0:	460b      	mov	r3, r1
   e21d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e21d6:	f7fe fceb 	bl	e0bb0 <__aeabi_dsub>
   e21da:	2200      	movs	r2, #0
   e21dc:	2300      	movs	r3, #0
   e21de:	4682      	mov	sl, r0
   e21e0:	468b      	mov	fp, r1
   e21e2:	f7ff f905 	bl	e13f0 <__aeabi_dcmpeq>
   e21e6:	2800      	cmp	r0, #0
   e21e8:	d0c1      	beq.n	e216e <_strtod_l+0x8e6>
   e21ea:	e60e      	b.n	e1e0a <_strtod_l+0x582>
   e21ec:	fffffc02 	.word	0xfffffc02
   e21f0:	7ff00000 	.word	0x7ff00000
   e21f4:	39500000 	.word	0x39500000
   e21f8:	000fffff 	.word	0x000fffff
   e21fc:	7fefffff 	.word	0x7fefffff
   e2200:	000e4b60 	.word	0x000e4b60
   e2204:	4631      	mov	r1, r6
   e2206:	4628      	mov	r0, r5
   e2208:	f001 faae 	bl	e3768 <__ratio>
   e220c:	ec59 8b10 	vmov	r8, r9, d0
   e2210:	ee10 0a10 	vmov	r0, s0
   e2214:	2200      	movs	r2, #0
   e2216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e221a:	4649      	mov	r1, r9
   e221c:	f7ff f8fc 	bl	e1418 <__aeabi_dcmple>
   e2220:	2800      	cmp	r0, #0
   e2222:	d07c      	beq.n	e231e <_strtod_l+0xa96>
   e2224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e2226:	2b00      	cmp	r3, #0
   e2228:	d04c      	beq.n	e22c4 <_strtod_l+0xa3c>
   e222a:	4b95      	ldr	r3, [pc, #596]	; (e2480 <_strtod_l+0xbf8>)
   e222c:	2200      	movs	r2, #0
   e222e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e2232:	f8df 924c 	ldr.w	r9, [pc, #588]	; e2480 <_strtod_l+0xbf8>
   e2236:	f04f 0800 	mov.w	r8, #0
   e223a:	4b92      	ldr	r3, [pc, #584]	; (e2484 <_strtod_l+0xbfc>)
   e223c:	403b      	ands	r3, r7
   e223e:	9311      	str	r3, [sp, #68]	; 0x44
   e2240:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e2242:	4b91      	ldr	r3, [pc, #580]	; (e2488 <_strtod_l+0xc00>)
   e2244:	429a      	cmp	r2, r3
   e2246:	f040 80b2 	bne.w	e23ae <_strtod_l+0xb26>
   e224a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e224e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e2252:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   e2256:	ec4b ab10 	vmov	d0, sl, fp
   e225a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   e225e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e2262:	f001 f9b5 	bl	e35d0 <__ulp>
   e2266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e226a:	ec53 2b10 	vmov	r2, r3, d0
   e226e:	f7fe fe57 	bl	e0f20 <__aeabi_dmul>
   e2272:	4652      	mov	r2, sl
   e2274:	465b      	mov	r3, fp
   e2276:	f7fe fc9d 	bl	e0bb4 <__adddf3>
   e227a:	460b      	mov	r3, r1
   e227c:	4981      	ldr	r1, [pc, #516]	; (e2484 <_strtod_l+0xbfc>)
   e227e:	4a83      	ldr	r2, [pc, #524]	; (e248c <_strtod_l+0xc04>)
   e2280:	4019      	ands	r1, r3
   e2282:	4291      	cmp	r1, r2
   e2284:	4682      	mov	sl, r0
   e2286:	d95e      	bls.n	e2346 <_strtod_l+0xabe>
   e2288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e228a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   e228e:	4293      	cmp	r3, r2
   e2290:	d103      	bne.n	e229a <_strtod_l+0xa12>
   e2292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2294:	3301      	adds	r3, #1
   e2296:	f43f ad43 	beq.w	e1d20 <_strtod_l+0x498>
   e229a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; e2498 <_strtod_l+0xc10>
   e229e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   e22a2:	991e      	ldr	r1, [sp, #120]	; 0x78
   e22a4:	4620      	mov	r0, r4
   e22a6:	f000 fecb 	bl	e3040 <_Bfree>
   e22aa:	9907      	ldr	r1, [sp, #28]
   e22ac:	4620      	mov	r0, r4
   e22ae:	f000 fec7 	bl	e3040 <_Bfree>
   e22b2:	4631      	mov	r1, r6
   e22b4:	4620      	mov	r0, r4
   e22b6:	f000 fec3 	bl	e3040 <_Bfree>
   e22ba:	4629      	mov	r1, r5
   e22bc:	4620      	mov	r0, r4
   e22be:	f000 febf 	bl	e3040 <_Bfree>
   e22c2:	e613      	b.n	e1eec <_strtod_l+0x664>
   e22c4:	f1ba 0f00 	cmp.w	sl, #0
   e22c8:	d11b      	bne.n	e2302 <_strtod_l+0xa7a>
   e22ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e22ce:	b9f3      	cbnz	r3, e230e <_strtod_l+0xa86>
   e22d0:	4b6b      	ldr	r3, [pc, #428]	; (e2480 <_strtod_l+0xbf8>)
   e22d2:	2200      	movs	r2, #0
   e22d4:	4640      	mov	r0, r8
   e22d6:	4649      	mov	r1, r9
   e22d8:	f7ff f894 	bl	e1404 <__aeabi_dcmplt>
   e22dc:	b9d0      	cbnz	r0, e2314 <_strtod_l+0xa8c>
   e22de:	4640      	mov	r0, r8
   e22e0:	4649      	mov	r1, r9
   e22e2:	4b6b      	ldr	r3, [pc, #428]	; (e2490 <_strtod_l+0xc08>)
   e22e4:	2200      	movs	r2, #0
   e22e6:	f7fe fe1b 	bl	e0f20 <__aeabi_dmul>
   e22ea:	4680      	mov	r8, r0
   e22ec:	4689      	mov	r9, r1
   e22ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e22f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   e22f6:	931b      	str	r3, [sp, #108]	; 0x6c
   e22f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   e22fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e2300:	e79b      	b.n	e223a <_strtod_l+0x9b2>
   e2302:	f1ba 0f01 	cmp.w	sl, #1
   e2306:	d102      	bne.n	e230e <_strtod_l+0xa86>
   e2308:	2f00      	cmp	r7, #0
   e230a:	f43f ad7e 	beq.w	e1e0a <_strtod_l+0x582>
   e230e:	4b61      	ldr	r3, [pc, #388]	; (e2494 <_strtod_l+0xc0c>)
   e2310:	2200      	movs	r2, #0
   e2312:	e78c      	b.n	e222e <_strtod_l+0x9a6>
   e2314:	f8df 9178 	ldr.w	r9, [pc, #376]	; e2490 <_strtod_l+0xc08>
   e2318:	f04f 0800 	mov.w	r8, #0
   e231c:	e7e7      	b.n	e22ee <_strtod_l+0xa66>
   e231e:	4b5c      	ldr	r3, [pc, #368]	; (e2490 <_strtod_l+0xc08>)
   e2320:	4640      	mov	r0, r8
   e2322:	4649      	mov	r1, r9
   e2324:	2200      	movs	r2, #0
   e2326:	f7fe fdfb 	bl	e0f20 <__aeabi_dmul>
   e232a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e232c:	4680      	mov	r8, r0
   e232e:	4689      	mov	r9, r1
   e2330:	b933      	cbnz	r3, e2340 <_strtod_l+0xab8>
   e2332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2336:	9012      	str	r0, [sp, #72]	; 0x48
   e2338:	9313      	str	r3, [sp, #76]	; 0x4c
   e233a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e233e:	e7dd      	b.n	e22fc <_strtod_l+0xa74>
   e2340:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   e2344:	e7f9      	b.n	e233a <_strtod_l+0xab2>
   e2346:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   e234a:	9b04      	ldr	r3, [sp, #16]
   e234c:	2b00      	cmp	r3, #0
   e234e:	d1a8      	bne.n	e22a2 <_strtod_l+0xa1a>
   e2350:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2354:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e2356:	0d1b      	lsrs	r3, r3, #20
   e2358:	051b      	lsls	r3, r3, #20
   e235a:	429a      	cmp	r2, r3
   e235c:	d1a1      	bne.n	e22a2 <_strtod_l+0xa1a>
   e235e:	4640      	mov	r0, r8
   e2360:	4649      	mov	r1, r9
   e2362:	f001 fabf 	bl	e38e4 <__aeabi_d2lz>
   e2366:	f7fe fdad 	bl	e0ec4 <__aeabi_l2d>
   e236a:	4602      	mov	r2, r0
   e236c:	460b      	mov	r3, r1
   e236e:	4640      	mov	r0, r8
   e2370:	4649      	mov	r1, r9
   e2372:	f7fe fc1d 	bl	e0bb0 <__aeabi_dsub>
   e2376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e2378:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e237c:	ea43 030a 	orr.w	r3, r3, sl
   e2380:	4313      	orrs	r3, r2
   e2382:	4680      	mov	r8, r0
   e2384:	4689      	mov	r9, r1
   e2386:	d053      	beq.n	e2430 <_strtod_l+0xba8>
   e2388:	a335      	add	r3, pc, #212	; (adr r3, e2460 <_strtod_l+0xbd8>)
   e238a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e238e:	f7ff f839 	bl	e1404 <__aeabi_dcmplt>
   e2392:	2800      	cmp	r0, #0
   e2394:	f47f acce 	bne.w	e1d34 <_strtod_l+0x4ac>
   e2398:	a333      	add	r3, pc, #204	; (adr r3, e2468 <_strtod_l+0xbe0>)
   e239a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e239e:	4640      	mov	r0, r8
   e23a0:	4649      	mov	r1, r9
   e23a2:	f7ff f84d 	bl	e1440 <__aeabi_dcmpgt>
   e23a6:	2800      	cmp	r0, #0
   e23a8:	f43f af7b 	beq.w	e22a2 <_strtod_l+0xa1a>
   e23ac:	e4c2      	b.n	e1d34 <_strtod_l+0x4ac>
   e23ae:	9b04      	ldr	r3, [sp, #16]
   e23b0:	b333      	cbz	r3, e2400 <_strtod_l+0xb78>
   e23b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e23b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e23b8:	d822      	bhi.n	e2400 <_strtod_l+0xb78>
   e23ba:	a32d      	add	r3, pc, #180	; (adr r3, e2470 <_strtod_l+0xbe8>)
   e23bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e23c0:	4640      	mov	r0, r8
   e23c2:	4649      	mov	r1, r9
   e23c4:	f7ff f828 	bl	e1418 <__aeabi_dcmple>
   e23c8:	b1a0      	cbz	r0, e23f4 <_strtod_l+0xb6c>
   e23ca:	4649      	mov	r1, r9
   e23cc:	4640      	mov	r0, r8
   e23ce:	f7ff f87f 	bl	e14d0 <__aeabi_d2uiz>
   e23d2:	2801      	cmp	r0, #1
   e23d4:	bf38      	it	cc
   e23d6:	2001      	movcc	r0, #1
   e23d8:	f7fe fd28 	bl	e0e2c <__aeabi_ui2d>
   e23dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e23de:	4680      	mov	r8, r0
   e23e0:	4689      	mov	r9, r1
   e23e2:	bb13      	cbnz	r3, e242a <_strtod_l+0xba2>
   e23e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e23e8:	9014      	str	r0, [sp, #80]	; 0x50
   e23ea:	9315      	str	r3, [sp, #84]	; 0x54
   e23ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   e23f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e23f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e23f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e23f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   e23fc:	1a9b      	subs	r3, r3, r2
   e23fe:	930d      	str	r3, [sp, #52]	; 0x34
   e2400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e2404:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   e2408:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e240c:	f001 f8e0 	bl	e35d0 <__ulp>
   e2410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e2414:	ec53 2b10 	vmov	r2, r3, d0
   e2418:	f7fe fd82 	bl	e0f20 <__aeabi_dmul>
   e241c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e2420:	f7fe fbc8 	bl	e0bb4 <__adddf3>
   e2424:	4682      	mov	sl, r0
   e2426:	468b      	mov	fp, r1
   e2428:	e78f      	b.n	e234a <_strtod_l+0xac2>
   e242a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   e242e:	e7dd      	b.n	e23ec <_strtod_l+0xb64>
   e2430:	a311      	add	r3, pc, #68	; (adr r3, e2478 <_strtod_l+0xbf0>)
   e2432:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2436:	f7fe ffe5 	bl	e1404 <__aeabi_dcmplt>
   e243a:	e7b4      	b.n	e23a6 <_strtod_l+0xb1e>
   e243c:	2300      	movs	r3, #0
   e243e:	930e      	str	r3, [sp, #56]	; 0x38
   e2440:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e2442:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e2444:	6013      	str	r3, [r2, #0]
   e2446:	f7ff ba65 	b.w	e1914 <_strtod_l+0x8c>
   e244a:	2b65      	cmp	r3, #101	; 0x65
   e244c:	f43f ab5d 	beq.w	e1b0a <_strtod_l+0x282>
   e2450:	2b45      	cmp	r3, #69	; 0x45
   e2452:	f43f ab5a 	beq.w	e1b0a <_strtod_l+0x282>
   e2456:	2201      	movs	r2, #1
   e2458:	f7ff bb92 	b.w	e1b80 <_strtod_l+0x2f8>
   e245c:	f3af 8000 	nop.w
   e2460:	94a03595 	.word	0x94a03595
   e2464:	3fdfffff 	.word	0x3fdfffff
   e2468:	35afe535 	.word	0x35afe535
   e246c:	3fe00000 	.word	0x3fe00000
   e2470:	ffc00000 	.word	0xffc00000
   e2474:	41dfffff 	.word	0x41dfffff
   e2478:	94a03595 	.word	0x94a03595
   e247c:	3fcfffff 	.word	0x3fcfffff
   e2480:	3ff00000 	.word	0x3ff00000
   e2484:	7ff00000 	.word	0x7ff00000
   e2488:	7fe00000 	.word	0x7fe00000
   e248c:	7c9fffff 	.word	0x7c9fffff
   e2490:	3fe00000 	.word	0x3fe00000
   e2494:	bff00000 	.word	0xbff00000
   e2498:	7fefffff 	.word	0x7fefffff

000e249c <strtod>:
   e249c:	460a      	mov	r2, r1
   e249e:	4601      	mov	r1, r0
   e24a0:	4802      	ldr	r0, [pc, #8]	; (e24ac <strtod+0x10>)
   e24a2:	4b03      	ldr	r3, [pc, #12]	; (e24b0 <strtod+0x14>)
   e24a4:	6800      	ldr	r0, [r0, #0]
   e24a6:	f7ff b9ef 	b.w	e1888 <_strtod_l>
   e24aa:	bf00      	nop
   e24ac:	2003e1d8 	.word	0x2003e1d8
   e24b0:	2003e244 	.word	0x2003e244

000e24b4 <strtof>:
   e24b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   e24b8:	4e26      	ldr	r6, [pc, #152]	; (e2554 <strtof+0xa0>)
   e24ba:	4b27      	ldr	r3, [pc, #156]	; (e2558 <strtof+0xa4>)
   e24bc:	460a      	mov	r2, r1
   e24be:	ed2d 8b02 	vpush	{d8}
   e24c2:	4601      	mov	r1, r0
   e24c4:	6830      	ldr	r0, [r6, #0]
   e24c6:	f7ff f9df 	bl	e1888 <_strtod_l>
   e24ca:	ec55 4b10 	vmov	r4, r5, d0
   e24ce:	ee10 2a10 	vmov	r2, s0
   e24d2:	ee10 0a10 	vmov	r0, s0
   e24d6:	462b      	mov	r3, r5
   e24d8:	4629      	mov	r1, r5
   e24da:	f7fe ffbb 	bl	e1454 <__aeabi_dcmpun>
   e24de:	b190      	cbz	r0, e2506 <strtof+0x52>
   e24e0:	2d00      	cmp	r5, #0
   e24e2:	481e      	ldr	r0, [pc, #120]	; (e255c <strtof+0xa8>)
   e24e4:	da09      	bge.n	e24fa <strtof+0x46>
   e24e6:	f001 f9e9 	bl	e38bc <nanf>
   e24ea:	eeb1 8a40 	vneg.f32	s16, s0
   e24ee:	eeb0 0a48 	vmov.f32	s0, s16
   e24f2:	ecbd 8b02 	vpop	{d8}
   e24f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   e24fa:	ecbd 8b02 	vpop	{d8}
   e24fe:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   e2502:	f001 b9db 	b.w	e38bc <nanf>
   e2506:	4620      	mov	r0, r4
   e2508:	4629      	mov	r1, r5
   e250a:	f7ff f801 	bl	e1510 <__aeabi_d2f>
   e250e:	ee08 0a10 	vmov	s16, r0
   e2512:	eddf 7a13 	vldr	s15, [pc, #76]	; e2560 <strtof+0xac>
   e2516:	eeb0 7ac8 	vabs.f32	s14, s16
   e251a:	eeb4 7a67 	vcmp.f32	s14, s15
   e251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   e2522:	dde4      	ble.n	e24ee <strtof+0x3a>
   e2524:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
   e2528:	4b0e      	ldr	r3, [pc, #56]	; (e2564 <strtof+0xb0>)
   e252a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e252e:	4620      	mov	r0, r4
   e2530:	4649      	mov	r1, r9
   e2532:	f7fe ff8f 	bl	e1454 <__aeabi_dcmpun>
   e2536:	b940      	cbnz	r0, e254a <strtof+0x96>
   e2538:	4b0a      	ldr	r3, [pc, #40]	; (e2564 <strtof+0xb0>)
   e253a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e253e:	4620      	mov	r0, r4
   e2540:	4649      	mov	r1, r9
   e2542:	f7fe ff69 	bl	e1418 <__aeabi_dcmple>
   e2546:	2800      	cmp	r0, #0
   e2548:	d0d1      	beq.n	e24ee <strtof+0x3a>
   e254a:	6833      	ldr	r3, [r6, #0]
   e254c:	2222      	movs	r2, #34	; 0x22
   e254e:	601a      	str	r2, [r3, #0]
   e2550:	e7cd      	b.n	e24ee <strtof+0x3a>
   e2552:	bf00      	nop
   e2554:	2003e1d8 	.word	0x2003e1d8
   e2558:	2003e244 	.word	0x2003e244
   e255c:	000e44eb 	.word	0x000e44eb
   e2560:	7f7fffff 	.word	0x7f7fffff
   e2564:	7fefffff 	.word	0x7fefffff

000e2568 <__strtok_r>:
   e2568:	b5f0      	push	{r4, r5, r6, r7, lr}
   e256a:	b908      	cbnz	r0, e2570 <__strtok_r+0x8>
   e256c:	6810      	ldr	r0, [r2, #0]
   e256e:	b188      	cbz	r0, e2594 <__strtok_r+0x2c>
   e2570:	4604      	mov	r4, r0
   e2572:	4620      	mov	r0, r4
   e2574:	f814 5b01 	ldrb.w	r5, [r4], #1
   e2578:	460f      	mov	r7, r1
   e257a:	f817 6b01 	ldrb.w	r6, [r7], #1
   e257e:	b91e      	cbnz	r6, e2588 <__strtok_r+0x20>
   e2580:	b965      	cbnz	r5, e259c <__strtok_r+0x34>
   e2582:	6015      	str	r5, [r2, #0]
   e2584:	4628      	mov	r0, r5
   e2586:	e005      	b.n	e2594 <__strtok_r+0x2c>
   e2588:	42b5      	cmp	r5, r6
   e258a:	d1f6      	bne.n	e257a <__strtok_r+0x12>
   e258c:	2b00      	cmp	r3, #0
   e258e:	d1f0      	bne.n	e2572 <__strtok_r+0xa>
   e2590:	6014      	str	r4, [r2, #0]
   e2592:	7003      	strb	r3, [r0, #0]
   e2594:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e2596:	461c      	mov	r4, r3
   e2598:	e00c      	b.n	e25b4 <__strtok_r+0x4c>
   e259a:	b915      	cbnz	r5, e25a2 <__strtok_r+0x3a>
   e259c:	f814 3b01 	ldrb.w	r3, [r4], #1
   e25a0:	460e      	mov	r6, r1
   e25a2:	f816 5b01 	ldrb.w	r5, [r6], #1
   e25a6:	42ab      	cmp	r3, r5
   e25a8:	d1f7      	bne.n	e259a <__strtok_r+0x32>
   e25aa:	2b00      	cmp	r3, #0
   e25ac:	d0f3      	beq.n	e2596 <__strtok_r+0x2e>
   e25ae:	2300      	movs	r3, #0
   e25b0:	f804 3c01 	strb.w	r3, [r4, #-1]
   e25b4:	6014      	str	r4, [r2, #0]
   e25b6:	e7ed      	b.n	e2594 <__strtok_r+0x2c>

000e25b8 <strtok_r>:
   e25b8:	2301      	movs	r3, #1
   e25ba:	f7ff bfd5 	b.w	e2568 <__strtok_r>
	...

000e25c0 <_strtol_l.isra.0>:
   e25c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e25c4:	4e3a      	ldr	r6, [pc, #232]	; (e26b0 <_strtol_l.isra.0+0xf0>)
   e25c6:	4686      	mov	lr, r0
   e25c8:	468c      	mov	ip, r1
   e25ca:	4660      	mov	r0, ip
   e25cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e25d0:	5da5      	ldrb	r5, [r4, r6]
   e25d2:	f015 0508 	ands.w	r5, r5, #8
   e25d6:	d1f8      	bne.n	e25ca <_strtol_l.isra.0+0xa>
   e25d8:	2c2d      	cmp	r4, #45	; 0x2d
   e25da:	d133      	bne.n	e2644 <_strtol_l.isra.0+0x84>
   e25dc:	f89c 4000 	ldrb.w	r4, [ip]
   e25e0:	f04f 0801 	mov.w	r8, #1
   e25e4:	f100 0c02 	add.w	ip, r0, #2
   e25e8:	2b00      	cmp	r3, #0
   e25ea:	d05c      	beq.n	e26a6 <_strtol_l.isra.0+0xe6>
   e25ec:	2b10      	cmp	r3, #16
   e25ee:	d10c      	bne.n	e260a <_strtol_l.isra.0+0x4a>
   e25f0:	2c30      	cmp	r4, #48	; 0x30
   e25f2:	d10a      	bne.n	e260a <_strtol_l.isra.0+0x4a>
   e25f4:	f89c 0000 	ldrb.w	r0, [ip]
   e25f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e25fc:	2858      	cmp	r0, #88	; 0x58
   e25fe:	d14d      	bne.n	e269c <_strtol_l.isra.0+0xdc>
   e2600:	f89c 4001 	ldrb.w	r4, [ip, #1]
   e2604:	2310      	movs	r3, #16
   e2606:	f10c 0c02 	add.w	ip, ip, #2
   e260a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   e260e:	3f01      	subs	r7, #1
   e2610:	2600      	movs	r6, #0
   e2612:	fbb7 f9f3 	udiv	r9, r7, r3
   e2616:	4630      	mov	r0, r6
   e2618:	fb03 7a19 	mls	sl, r3, r9, r7
   e261c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   e2620:	2d09      	cmp	r5, #9
   e2622:	d818      	bhi.n	e2656 <_strtol_l.isra.0+0x96>
   e2624:	462c      	mov	r4, r5
   e2626:	42a3      	cmp	r3, r4
   e2628:	dd24      	ble.n	e2674 <_strtol_l.isra.0+0xb4>
   e262a:	1c75      	adds	r5, r6, #1
   e262c:	d007      	beq.n	e263e <_strtol_l.isra.0+0x7e>
   e262e:	4581      	cmp	r9, r0
   e2630:	d31d      	bcc.n	e266e <_strtol_l.isra.0+0xae>
   e2632:	d101      	bne.n	e2638 <_strtol_l.isra.0+0x78>
   e2634:	45a2      	cmp	sl, r4
   e2636:	db1a      	blt.n	e266e <_strtol_l.isra.0+0xae>
   e2638:	fb00 4003 	mla	r0, r0, r3, r4
   e263c:	2601      	movs	r6, #1
   e263e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e2642:	e7eb      	b.n	e261c <_strtol_l.isra.0+0x5c>
   e2644:	2c2b      	cmp	r4, #43	; 0x2b
   e2646:	bf08      	it	eq
   e2648:	f89c 4000 	ldrbeq.w	r4, [ip]
   e264c:	46a8      	mov	r8, r5
   e264e:	bf08      	it	eq
   e2650:	f100 0c02 	addeq.w	ip, r0, #2
   e2654:	e7c8      	b.n	e25e8 <_strtol_l.isra.0+0x28>
   e2656:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   e265a:	2d19      	cmp	r5, #25
   e265c:	d801      	bhi.n	e2662 <_strtol_l.isra.0+0xa2>
   e265e:	3c37      	subs	r4, #55	; 0x37
   e2660:	e7e1      	b.n	e2626 <_strtol_l.isra.0+0x66>
   e2662:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   e2666:	2d19      	cmp	r5, #25
   e2668:	d804      	bhi.n	e2674 <_strtol_l.isra.0+0xb4>
   e266a:	3c57      	subs	r4, #87	; 0x57
   e266c:	e7db      	b.n	e2626 <_strtol_l.isra.0+0x66>
   e266e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   e2672:	e7e4      	b.n	e263e <_strtol_l.isra.0+0x7e>
   e2674:	1c73      	adds	r3, r6, #1
   e2676:	d106      	bne.n	e2686 <_strtol_l.isra.0+0xc6>
   e2678:	2322      	movs	r3, #34	; 0x22
   e267a:	f8ce 3000 	str.w	r3, [lr]
   e267e:	4638      	mov	r0, r7
   e2680:	b942      	cbnz	r2, e2694 <_strtol_l.isra.0+0xd4>
   e2682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2686:	f1b8 0f00 	cmp.w	r8, #0
   e268a:	d000      	beq.n	e268e <_strtol_l.isra.0+0xce>
   e268c:	4240      	negs	r0, r0
   e268e:	2a00      	cmp	r2, #0
   e2690:	d0f7      	beq.n	e2682 <_strtol_l.isra.0+0xc2>
   e2692:	b10e      	cbz	r6, e2698 <_strtol_l.isra.0+0xd8>
   e2694:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   e2698:	6011      	str	r1, [r2, #0]
   e269a:	e7f2      	b.n	e2682 <_strtol_l.isra.0+0xc2>
   e269c:	2430      	movs	r4, #48	; 0x30
   e269e:	2b00      	cmp	r3, #0
   e26a0:	d1b3      	bne.n	e260a <_strtol_l.isra.0+0x4a>
   e26a2:	2308      	movs	r3, #8
   e26a4:	e7b1      	b.n	e260a <_strtol_l.isra.0+0x4a>
   e26a6:	2c30      	cmp	r4, #48	; 0x30
   e26a8:	d0a4      	beq.n	e25f4 <_strtol_l.isra.0+0x34>
   e26aa:	230a      	movs	r3, #10
   e26ac:	e7ad      	b.n	e260a <_strtol_l.isra.0+0x4a>
   e26ae:	bf00      	nop
   e26b0:	000e4b89 	.word	0x000e4b89

000e26b4 <strtol>:
   e26b4:	4613      	mov	r3, r2
   e26b6:	460a      	mov	r2, r1
   e26b8:	4601      	mov	r1, r0
   e26ba:	4802      	ldr	r0, [pc, #8]	; (e26c4 <strtol+0x10>)
   e26bc:	6800      	ldr	r0, [r0, #0]
   e26be:	f7ff bf7f 	b.w	e25c0 <_strtol_l.isra.0>
   e26c2:	bf00      	nop
   e26c4:	2003e1d8 	.word	0x2003e1d8

000e26c8 <close>:
   e26c8:	4b02      	ldr	r3, [pc, #8]	; (e26d4 <close+0xc>)
   e26ca:	4601      	mov	r1, r0
   e26cc:	6818      	ldr	r0, [r3, #0]
   e26ce:	f000 b8c9 	b.w	e2864 <_close_r>
   e26d2:	bf00      	nop
   e26d4:	2003e1d8 	.word	0x2003e1d8

000e26d8 <fstat>:
   e26d8:	4b02      	ldr	r3, [pc, #8]	; (e26e4 <fstat+0xc>)
   e26da:	460a      	mov	r2, r1
   e26dc:	4601      	mov	r1, r0
   e26de:	6818      	ldr	r0, [r3, #0]
   e26e0:	f000 b8d0 	b.w	e2884 <_fstat_r>
   e26e4:	2003e1d8 	.word	0x2003e1d8

000e26e8 <lseek>:
   e26e8:	4613      	mov	r3, r2
   e26ea:	460a      	mov	r2, r1
   e26ec:	4601      	mov	r1, r0
   e26ee:	4802      	ldr	r0, [pc, #8]	; (e26f8 <lseek+0x10>)
   e26f0:	6800      	ldr	r0, [r0, #0]
   e26f2:	f000 bc4d 	b.w	e2f90 <_lseek_r>
   e26f6:	bf00      	nop
   e26f8:	2003e1d8 	.word	0x2003e1d8

000e26fc <open>:
   e26fc:	b40e      	push	{r1, r2, r3}
   e26fe:	b503      	push	{r0, r1, lr}
   e2700:	ab03      	add	r3, sp, #12
   e2702:	4601      	mov	r1, r0
   e2704:	4806      	ldr	r0, [pc, #24]	; (e2720 <open+0x24>)
   e2706:	f853 2b04 	ldr.w	r2, [r3], #4
   e270a:	9301      	str	r3, [sp, #4]
   e270c:	6800      	ldr	r0, [r0, #0]
   e270e:	9b04      	ldr	r3, [sp, #16]
   e2710:	f001 f8b0 	bl	e3874 <_open_r>
   e2714:	b002      	add	sp, #8
   e2716:	f85d eb04 	ldr.w	lr, [sp], #4
   e271a:	b003      	add	sp, #12
   e271c:	4770      	bx	lr
   e271e:	bf00      	nop
   e2720:	2003e1d8 	.word	0x2003e1d8

000e2724 <read>:
   e2724:	4613      	mov	r3, r2
   e2726:	460a      	mov	r2, r1
   e2728:	4601      	mov	r1, r0
   e272a:	4802      	ldr	r0, [pc, #8]	; (e2734 <read+0x10>)
   e272c:	6800      	ldr	r0, [r0, #0]
   e272e:	f001 b8b3 	b.w	e3898 <_read_r>
   e2732:	bf00      	nop
   e2734:	2003e1d8 	.word	0x2003e1d8

000e2738 <unlink>:
   e2738:	4b02      	ldr	r3, [pc, #8]	; (e2744 <unlink+0xc>)
   e273a:	4601      	mov	r1, r0
   e273c:	6818      	ldr	r0, [r3, #0]
   e273e:	f000 b80d 	b.w	e275c <_unlink_r>
   e2742:	bf00      	nop
   e2744:	2003e1d8 	.word	0x2003e1d8

000e2748 <write>:
   e2748:	4613      	mov	r3, r2
   e274a:	460a      	mov	r2, r1
   e274c:	4601      	mov	r1, r0
   e274e:	4802      	ldr	r0, [pc, #8]	; (e2758 <write+0x10>)
   e2750:	6800      	ldr	r0, [r0, #0]
   e2752:	f000 b813 	b.w	e277c <_write_r>
   e2756:	bf00      	nop
   e2758:	2003e1d8 	.word	0x2003e1d8

000e275c <_unlink_r>:
   e275c:	b538      	push	{r3, r4, r5, lr}
   e275e:	4d06      	ldr	r5, [pc, #24]	; (e2778 <_unlink_r+0x1c>)
   e2760:	2300      	movs	r3, #0
   e2762:	4604      	mov	r4, r0
   e2764:	4608      	mov	r0, r1
   e2766:	602b      	str	r3, [r5, #0]
   e2768:	f7fa fa8e 	bl	dcc88 <_unlink>
   e276c:	1c43      	adds	r3, r0, #1
   e276e:	d102      	bne.n	e2776 <_unlink_r+0x1a>
   e2770:	682b      	ldr	r3, [r5, #0]
   e2772:	b103      	cbz	r3, e2776 <_unlink_r+0x1a>
   e2774:	6023      	str	r3, [r4, #0]
   e2776:	bd38      	pop	{r3, r4, r5, pc}
   e2778:	2003e7ec 	.word	0x2003e7ec

000e277c <_write_r>:
   e277c:	b538      	push	{r3, r4, r5, lr}
   e277e:	4d07      	ldr	r5, [pc, #28]	; (e279c <_write_r+0x20>)
   e2780:	4604      	mov	r4, r0
   e2782:	4608      	mov	r0, r1
   e2784:	4611      	mov	r1, r2
   e2786:	2200      	movs	r2, #0
   e2788:	602a      	str	r2, [r5, #0]
   e278a:	461a      	mov	r2, r3
   e278c:	f7fa fa44 	bl	dcc18 <_write>
   e2790:	1c43      	adds	r3, r0, #1
   e2792:	d102      	bne.n	e279a <_write_r+0x1e>
   e2794:	682b      	ldr	r3, [r5, #0]
   e2796:	b103      	cbz	r3, e279a <_write_r+0x1e>
   e2798:	6023      	str	r3, [r4, #0]
   e279a:	bd38      	pop	{r3, r4, r5, pc}
   e279c:	2003e7ec 	.word	0x2003e7ec

000e27a0 <__register_exitproc>:
   e27a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e27a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; e2860 <__register_exitproc+0xc0>
   e27a8:	4606      	mov	r6, r0
   e27aa:	f8d8 0000 	ldr.w	r0, [r8]
   e27ae:	461f      	mov	r7, r3
   e27b0:	460d      	mov	r5, r1
   e27b2:	4691      	mov	r9, r2
   e27b4:	f000 fbe8 	bl	e2f88 <__retarget_lock_acquire_recursive>
   e27b8:	4b25      	ldr	r3, [pc, #148]	; (e2850 <__register_exitproc+0xb0>)
   e27ba:	681c      	ldr	r4, [r3, #0]
   e27bc:	b934      	cbnz	r4, e27cc <__register_exitproc+0x2c>
   e27be:	4c25      	ldr	r4, [pc, #148]	; (e2854 <__register_exitproc+0xb4>)
   e27c0:	601c      	str	r4, [r3, #0]
   e27c2:	4b25      	ldr	r3, [pc, #148]	; (e2858 <__register_exitproc+0xb8>)
   e27c4:	b113      	cbz	r3, e27cc <__register_exitproc+0x2c>
   e27c6:	681b      	ldr	r3, [r3, #0]
   e27c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   e27cc:	6863      	ldr	r3, [r4, #4]
   e27ce:	2b1f      	cmp	r3, #31
   e27d0:	dd07      	ble.n	e27e2 <__register_exitproc+0x42>
   e27d2:	f8d8 0000 	ldr.w	r0, [r8]
   e27d6:	f000 fbd9 	bl	e2f8c <__retarget_lock_release_recursive>
   e27da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   e27de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e27e2:	b34e      	cbz	r6, e2838 <__register_exitproc+0x98>
   e27e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   e27e8:	b988      	cbnz	r0, e280e <__register_exitproc+0x6e>
   e27ea:	4b1c      	ldr	r3, [pc, #112]	; (e285c <__register_exitproc+0xbc>)
   e27ec:	b923      	cbnz	r3, e27f8 <__register_exitproc+0x58>
   e27ee:	f8d8 0000 	ldr.w	r0, [r8]
   e27f2:	f000 fbca 	bl	e2f8a <__retarget_lock_release>
   e27f6:	e7f0      	b.n	e27da <__register_exitproc+0x3a>
   e27f8:	f44f 7084 	mov.w	r0, #264	; 0x108
   e27fc:	f7fa fc5c 	bl	dd0b8 <malloc>
   e2800:	2800      	cmp	r0, #0
   e2802:	d0f4      	beq.n	e27ee <__register_exitproc+0x4e>
   e2804:	2300      	movs	r3, #0
   e2806:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   e280a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   e280e:	6863      	ldr	r3, [r4, #4]
   e2810:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   e2814:	2201      	movs	r2, #1
   e2816:	409a      	lsls	r2, r3
   e2818:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   e281c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   e2820:	4313      	orrs	r3, r2
   e2822:	2e02      	cmp	r6, #2
   e2824:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   e2828:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   e282c:	bf02      	ittt	eq
   e282e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   e2832:	431a      	orreq	r2, r3
   e2834:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   e2838:	6863      	ldr	r3, [r4, #4]
   e283a:	f8d8 0000 	ldr.w	r0, [r8]
   e283e:	1c5a      	adds	r2, r3, #1
   e2840:	3302      	adds	r3, #2
   e2842:	6062      	str	r2, [r4, #4]
   e2844:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   e2848:	f000 fba0 	bl	e2f8c <__retarget_lock_release_recursive>
   e284c:	2000      	movs	r0, #0
   e284e:	e7c6      	b.n	e27de <__register_exitproc+0x3e>
   e2850:	2003e7dc 	.word	0x2003e7dc
   e2854:	2003e750 	.word	0x2003e750
   e2858:	00000000 	.word	0x00000000
   e285c:	000dd0b9 	.word	0x000dd0b9
   e2860:	2003e23c 	.word	0x2003e23c

000e2864 <_close_r>:
   e2864:	b538      	push	{r3, r4, r5, lr}
   e2866:	4d06      	ldr	r5, [pc, #24]	; (e2880 <_close_r+0x1c>)
   e2868:	2300      	movs	r3, #0
   e286a:	4604      	mov	r4, r0
   e286c:	4608      	mov	r0, r1
   e286e:	602b      	str	r3, [r5, #0]
   e2870:	f7fa f9e2 	bl	dcc38 <_close>
   e2874:	1c43      	adds	r3, r0, #1
   e2876:	d102      	bne.n	e287e <_close_r+0x1a>
   e2878:	682b      	ldr	r3, [r5, #0]
   e287a:	b103      	cbz	r3, e287e <_close_r+0x1a>
   e287c:	6023      	str	r3, [r4, #0]
   e287e:	bd38      	pop	{r3, r4, r5, pc}
   e2880:	2003e7ec 	.word	0x2003e7ec

000e2884 <_fstat_r>:
   e2884:	b538      	push	{r3, r4, r5, lr}
   e2886:	4d07      	ldr	r5, [pc, #28]	; (e28a4 <_fstat_r+0x20>)
   e2888:	2300      	movs	r3, #0
   e288a:	4604      	mov	r4, r0
   e288c:	4608      	mov	r0, r1
   e288e:	4611      	mov	r1, r2
   e2890:	602b      	str	r3, [r5, #0]
   e2892:	f7fa f9d9 	bl	dcc48 <_fstat>
   e2896:	1c43      	adds	r3, r0, #1
   e2898:	d102      	bne.n	e28a0 <_fstat_r+0x1c>
   e289a:	682b      	ldr	r3, [r5, #0]
   e289c:	b103      	cbz	r3, e28a0 <_fstat_r+0x1c>
   e289e:	6023      	str	r3, [r4, #0]
   e28a0:	bd38      	pop	{r3, r4, r5, pc}
   e28a2:	bf00      	nop
   e28a4:	2003e7ec 	.word	0x2003e7ec

000e28a8 <rshift>:
   e28a8:	6903      	ldr	r3, [r0, #16]
   e28aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   e28ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e28b2:	ea4f 1261 	mov.w	r2, r1, asr #5
   e28b6:	f100 0414 	add.w	r4, r0, #20
   e28ba:	dd45      	ble.n	e2948 <rshift+0xa0>
   e28bc:	f011 011f 	ands.w	r1, r1, #31
   e28c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   e28c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e28c8:	d10c      	bne.n	e28e4 <rshift+0x3c>
   e28ca:	f100 0710 	add.w	r7, r0, #16
   e28ce:	4629      	mov	r1, r5
   e28d0:	42b1      	cmp	r1, r6
   e28d2:	d334      	bcc.n	e293e <rshift+0x96>
   e28d4:	1a9b      	subs	r3, r3, r2
   e28d6:	009b      	lsls	r3, r3, #2
   e28d8:	1eea      	subs	r2, r5, #3
   e28da:	4296      	cmp	r6, r2
   e28dc:	bf38      	it	cc
   e28de:	2300      	movcc	r3, #0
   e28e0:	4423      	add	r3, r4
   e28e2:	e015      	b.n	e2910 <rshift+0x68>
   e28e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   e28e8:	f1c1 0820 	rsb	r8, r1, #32
   e28ec:	40cf      	lsrs	r7, r1
   e28ee:	f105 0e04 	add.w	lr, r5, #4
   e28f2:	46a1      	mov	r9, r4
   e28f4:	4576      	cmp	r6, lr
   e28f6:	46f4      	mov	ip, lr
   e28f8:	d815      	bhi.n	e2926 <rshift+0x7e>
   e28fa:	1a9b      	subs	r3, r3, r2
   e28fc:	009a      	lsls	r2, r3, #2
   e28fe:	3a04      	subs	r2, #4
   e2900:	3501      	adds	r5, #1
   e2902:	42ae      	cmp	r6, r5
   e2904:	bf38      	it	cc
   e2906:	2200      	movcc	r2, #0
   e2908:	18a3      	adds	r3, r4, r2
   e290a:	50a7      	str	r7, [r4, r2]
   e290c:	b107      	cbz	r7, e2910 <rshift+0x68>
   e290e:	3304      	adds	r3, #4
   e2910:	1b1a      	subs	r2, r3, r4
   e2912:	42a3      	cmp	r3, r4
   e2914:	ea4f 02a2 	mov.w	r2, r2, asr #2
   e2918:	bf08      	it	eq
   e291a:	2300      	moveq	r3, #0
   e291c:	6102      	str	r2, [r0, #16]
   e291e:	bf08      	it	eq
   e2920:	6143      	streq	r3, [r0, #20]
   e2922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e2926:	f8dc c000 	ldr.w	ip, [ip]
   e292a:	fa0c fc08 	lsl.w	ip, ip, r8
   e292e:	ea4c 0707 	orr.w	r7, ip, r7
   e2932:	f849 7b04 	str.w	r7, [r9], #4
   e2936:	f85e 7b04 	ldr.w	r7, [lr], #4
   e293a:	40cf      	lsrs	r7, r1
   e293c:	e7da      	b.n	e28f4 <rshift+0x4c>
   e293e:	f851 cb04 	ldr.w	ip, [r1], #4
   e2942:	f847 cf04 	str.w	ip, [r7, #4]!
   e2946:	e7c3      	b.n	e28d0 <rshift+0x28>
   e2948:	4623      	mov	r3, r4
   e294a:	e7e1      	b.n	e2910 <rshift+0x68>

000e294c <__hexdig_fun>:
   e294c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e2950:	2b09      	cmp	r3, #9
   e2952:	d802      	bhi.n	e295a <__hexdig_fun+0xe>
   e2954:	3820      	subs	r0, #32
   e2956:	b2c0      	uxtb	r0, r0
   e2958:	4770      	bx	lr
   e295a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e295e:	2b05      	cmp	r3, #5
   e2960:	d801      	bhi.n	e2966 <__hexdig_fun+0x1a>
   e2962:	3847      	subs	r0, #71	; 0x47
   e2964:	e7f7      	b.n	e2956 <__hexdig_fun+0xa>
   e2966:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e296a:	2b05      	cmp	r3, #5
   e296c:	d801      	bhi.n	e2972 <__hexdig_fun+0x26>
   e296e:	3827      	subs	r0, #39	; 0x27
   e2970:	e7f1      	b.n	e2956 <__hexdig_fun+0xa>
   e2972:	2000      	movs	r0, #0
   e2974:	4770      	bx	lr
	...

000e2978 <__gethex>:
   e2978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e297c:	ed2d 8b02 	vpush	{d8}
   e2980:	b089      	sub	sp, #36	; 0x24
   e2982:	ee08 0a10 	vmov	s16, r0
   e2986:	9304      	str	r3, [sp, #16]
   e2988:	4bbc      	ldr	r3, [pc, #752]	; (e2c7c <__gethex+0x304>)
   e298a:	681b      	ldr	r3, [r3, #0]
   e298c:	9301      	str	r3, [sp, #4]
   e298e:	4618      	mov	r0, r3
   e2990:	468b      	mov	fp, r1
   e2992:	4690      	mov	r8, r2
   e2994:	f7fe ff1b 	bl	e17ce <strlen>
   e2998:	9b01      	ldr	r3, [sp, #4]
   e299a:	f8db 2000 	ldr.w	r2, [fp]
   e299e:	4403      	add	r3, r0
   e29a0:	4682      	mov	sl, r0
   e29a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e29a6:	9305      	str	r3, [sp, #20]
   e29a8:	1c93      	adds	r3, r2, #2
   e29aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   e29ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   e29b2:	32fe      	adds	r2, #254	; 0xfe
   e29b4:	18d1      	adds	r1, r2, r3
   e29b6:	461f      	mov	r7, r3
   e29b8:	f813 0b01 	ldrb.w	r0, [r3], #1
   e29bc:	9100      	str	r1, [sp, #0]
   e29be:	2830      	cmp	r0, #48	; 0x30
   e29c0:	d0f8      	beq.n	e29b4 <__gethex+0x3c>
   e29c2:	f7ff ffc3 	bl	e294c <__hexdig_fun>
   e29c6:	4604      	mov	r4, r0
   e29c8:	2800      	cmp	r0, #0
   e29ca:	d13a      	bne.n	e2a42 <__gethex+0xca>
   e29cc:	9901      	ldr	r1, [sp, #4]
   e29ce:	4652      	mov	r2, sl
   e29d0:	4638      	mov	r0, r7
   e29d2:	f7fe ff04 	bl	e17de <strncmp>
   e29d6:	4605      	mov	r5, r0
   e29d8:	2800      	cmp	r0, #0
   e29da:	d168      	bne.n	e2aae <__gethex+0x136>
   e29dc:	f817 000a 	ldrb.w	r0, [r7, sl]
   e29e0:	eb07 060a 	add.w	r6, r7, sl
   e29e4:	f7ff ffb2 	bl	e294c <__hexdig_fun>
   e29e8:	2800      	cmp	r0, #0
   e29ea:	d062      	beq.n	e2ab2 <__gethex+0x13a>
   e29ec:	4633      	mov	r3, r6
   e29ee:	7818      	ldrb	r0, [r3, #0]
   e29f0:	2830      	cmp	r0, #48	; 0x30
   e29f2:	461f      	mov	r7, r3
   e29f4:	f103 0301 	add.w	r3, r3, #1
   e29f8:	d0f9      	beq.n	e29ee <__gethex+0x76>
   e29fa:	f7ff ffa7 	bl	e294c <__hexdig_fun>
   e29fe:	2301      	movs	r3, #1
   e2a00:	fab0 f480 	clz	r4, r0
   e2a04:	0964      	lsrs	r4, r4, #5
   e2a06:	4635      	mov	r5, r6
   e2a08:	9300      	str	r3, [sp, #0]
   e2a0a:	463a      	mov	r2, r7
   e2a0c:	4616      	mov	r6, r2
   e2a0e:	3201      	adds	r2, #1
   e2a10:	7830      	ldrb	r0, [r6, #0]
   e2a12:	f7ff ff9b 	bl	e294c <__hexdig_fun>
   e2a16:	2800      	cmp	r0, #0
   e2a18:	d1f8      	bne.n	e2a0c <__gethex+0x94>
   e2a1a:	9901      	ldr	r1, [sp, #4]
   e2a1c:	4652      	mov	r2, sl
   e2a1e:	4630      	mov	r0, r6
   e2a20:	f7fe fedd 	bl	e17de <strncmp>
   e2a24:	b980      	cbnz	r0, e2a48 <__gethex+0xd0>
   e2a26:	b94d      	cbnz	r5, e2a3c <__gethex+0xc4>
   e2a28:	eb06 050a 	add.w	r5, r6, sl
   e2a2c:	462a      	mov	r2, r5
   e2a2e:	4616      	mov	r6, r2
   e2a30:	3201      	adds	r2, #1
   e2a32:	7830      	ldrb	r0, [r6, #0]
   e2a34:	f7ff ff8a 	bl	e294c <__hexdig_fun>
   e2a38:	2800      	cmp	r0, #0
   e2a3a:	d1f8      	bne.n	e2a2e <__gethex+0xb6>
   e2a3c:	1bad      	subs	r5, r5, r6
   e2a3e:	00ad      	lsls	r5, r5, #2
   e2a40:	e004      	b.n	e2a4c <__gethex+0xd4>
   e2a42:	2400      	movs	r4, #0
   e2a44:	4625      	mov	r5, r4
   e2a46:	e7e0      	b.n	e2a0a <__gethex+0x92>
   e2a48:	2d00      	cmp	r5, #0
   e2a4a:	d1f7      	bne.n	e2a3c <__gethex+0xc4>
   e2a4c:	7833      	ldrb	r3, [r6, #0]
   e2a4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e2a52:	2b50      	cmp	r3, #80	; 0x50
   e2a54:	d13b      	bne.n	e2ace <__gethex+0x156>
   e2a56:	7873      	ldrb	r3, [r6, #1]
   e2a58:	2b2b      	cmp	r3, #43	; 0x2b
   e2a5a:	d02c      	beq.n	e2ab6 <__gethex+0x13e>
   e2a5c:	2b2d      	cmp	r3, #45	; 0x2d
   e2a5e:	d02e      	beq.n	e2abe <__gethex+0x146>
   e2a60:	1c71      	adds	r1, r6, #1
   e2a62:	f04f 0900 	mov.w	r9, #0
   e2a66:	7808      	ldrb	r0, [r1, #0]
   e2a68:	f7ff ff70 	bl	e294c <__hexdig_fun>
   e2a6c:	1e43      	subs	r3, r0, #1
   e2a6e:	b2db      	uxtb	r3, r3
   e2a70:	2b18      	cmp	r3, #24
   e2a72:	d82c      	bhi.n	e2ace <__gethex+0x156>
   e2a74:	f1a0 0210 	sub.w	r2, r0, #16
   e2a78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e2a7c:	f7ff ff66 	bl	e294c <__hexdig_fun>
   e2a80:	1e43      	subs	r3, r0, #1
   e2a82:	b2db      	uxtb	r3, r3
   e2a84:	2b18      	cmp	r3, #24
   e2a86:	d91d      	bls.n	e2ac4 <__gethex+0x14c>
   e2a88:	f1b9 0f00 	cmp.w	r9, #0
   e2a8c:	d000      	beq.n	e2a90 <__gethex+0x118>
   e2a8e:	4252      	negs	r2, r2
   e2a90:	4415      	add	r5, r2
   e2a92:	f8cb 1000 	str.w	r1, [fp]
   e2a96:	b1e4      	cbz	r4, e2ad2 <__gethex+0x15a>
   e2a98:	9b00      	ldr	r3, [sp, #0]
   e2a9a:	2b00      	cmp	r3, #0
   e2a9c:	bf14      	ite	ne
   e2a9e:	2700      	movne	r7, #0
   e2aa0:	2706      	moveq	r7, #6
   e2aa2:	4638      	mov	r0, r7
   e2aa4:	b009      	add	sp, #36	; 0x24
   e2aa6:	ecbd 8b02 	vpop	{d8}
   e2aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2aae:	463e      	mov	r6, r7
   e2ab0:	4625      	mov	r5, r4
   e2ab2:	2401      	movs	r4, #1
   e2ab4:	e7ca      	b.n	e2a4c <__gethex+0xd4>
   e2ab6:	f04f 0900 	mov.w	r9, #0
   e2aba:	1cb1      	adds	r1, r6, #2
   e2abc:	e7d3      	b.n	e2a66 <__gethex+0xee>
   e2abe:	f04f 0901 	mov.w	r9, #1
   e2ac2:	e7fa      	b.n	e2aba <__gethex+0x142>
   e2ac4:	230a      	movs	r3, #10
   e2ac6:	fb03 0202 	mla	r2, r3, r2, r0
   e2aca:	3a10      	subs	r2, #16
   e2acc:	e7d4      	b.n	e2a78 <__gethex+0x100>
   e2ace:	4631      	mov	r1, r6
   e2ad0:	e7df      	b.n	e2a92 <__gethex+0x11a>
   e2ad2:	1bf3      	subs	r3, r6, r7
   e2ad4:	3b01      	subs	r3, #1
   e2ad6:	4621      	mov	r1, r4
   e2ad8:	2b07      	cmp	r3, #7
   e2ada:	dc52      	bgt.n	e2b82 <__gethex+0x20a>
   e2adc:	ee18 0a10 	vmov	r0, s16
   e2ae0:	f000 fa7a 	bl	e2fd8 <_Balloc>
   e2ae4:	f04f 0b00 	mov.w	fp, #0
   e2ae8:	f100 0914 	add.w	r9, r0, #20
   e2aec:	f1ca 0301 	rsb	r3, sl, #1
   e2af0:	4604      	mov	r4, r0
   e2af2:	f8cd 9008 	str.w	r9, [sp, #8]
   e2af6:	f8cd b000 	str.w	fp, [sp]
   e2afa:	9306      	str	r3, [sp, #24]
   e2afc:	42b7      	cmp	r7, r6
   e2afe:	d343      	bcc.n	e2b88 <__gethex+0x210>
   e2b00:	9802      	ldr	r0, [sp, #8]
   e2b02:	9b00      	ldr	r3, [sp, #0]
   e2b04:	f840 3b04 	str.w	r3, [r0], #4
   e2b08:	eba0 0009 	sub.w	r0, r0, r9
   e2b0c:	1080      	asrs	r0, r0, #2
   e2b0e:	0146      	lsls	r6, r0, #5
   e2b10:	6120      	str	r0, [r4, #16]
   e2b12:	4618      	mov	r0, r3
   e2b14:	f000 fb27 	bl	e3166 <__hi0bits>
   e2b18:	1a30      	subs	r0, r6, r0
   e2b1a:	f8d8 6000 	ldr.w	r6, [r8]
   e2b1e:	42b0      	cmp	r0, r6
   e2b20:	dd66      	ble.n	e2bf0 <__gethex+0x278>
   e2b22:	1b87      	subs	r7, r0, r6
   e2b24:	4639      	mov	r1, r7
   e2b26:	4620      	mov	r0, r4
   e2b28:	f000 fe74 	bl	e3814 <__any_on>
   e2b2c:	4682      	mov	sl, r0
   e2b2e:	b1a8      	cbz	r0, e2b5c <__gethex+0x1e4>
   e2b30:	1e7b      	subs	r3, r7, #1
   e2b32:	1159      	asrs	r1, r3, #5
   e2b34:	f003 021f 	and.w	r2, r3, #31
   e2b38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   e2b3c:	f04f 0a01 	mov.w	sl, #1
   e2b40:	fa0a f202 	lsl.w	r2, sl, r2
   e2b44:	420a      	tst	r2, r1
   e2b46:	d009      	beq.n	e2b5c <__gethex+0x1e4>
   e2b48:	4553      	cmp	r3, sl
   e2b4a:	dd05      	ble.n	e2b58 <__gethex+0x1e0>
   e2b4c:	1eb9      	subs	r1, r7, #2
   e2b4e:	4620      	mov	r0, r4
   e2b50:	f000 fe60 	bl	e3814 <__any_on>
   e2b54:	2800      	cmp	r0, #0
   e2b56:	d148      	bne.n	e2bea <__gethex+0x272>
   e2b58:	f04f 0a02 	mov.w	sl, #2
   e2b5c:	4639      	mov	r1, r7
   e2b5e:	4620      	mov	r0, r4
   e2b60:	f7ff fea2 	bl	e28a8 <rshift>
   e2b64:	443d      	add	r5, r7
   e2b66:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e2b6a:	42ab      	cmp	r3, r5
   e2b6c:	da4f      	bge.n	e2c0e <__gethex+0x296>
   e2b6e:	ee18 0a10 	vmov	r0, s16
   e2b72:	4621      	mov	r1, r4
   e2b74:	f000 fa64 	bl	e3040 <_Bfree>
   e2b78:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e2b7a:	2300      	movs	r3, #0
   e2b7c:	6013      	str	r3, [r2, #0]
   e2b7e:	27a3      	movs	r7, #163	; 0xa3
   e2b80:	e78f      	b.n	e2aa2 <__gethex+0x12a>
   e2b82:	3101      	adds	r1, #1
   e2b84:	105b      	asrs	r3, r3, #1
   e2b86:	e7a7      	b.n	e2ad8 <__gethex+0x160>
   e2b88:	1e73      	subs	r3, r6, #1
   e2b8a:	9a05      	ldr	r2, [sp, #20]
   e2b8c:	9303      	str	r3, [sp, #12]
   e2b8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e2b92:	4293      	cmp	r3, r2
   e2b94:	d019      	beq.n	e2bca <__gethex+0x252>
   e2b96:	f1bb 0f20 	cmp.w	fp, #32
   e2b9a:	d107      	bne.n	e2bac <__gethex+0x234>
   e2b9c:	9b02      	ldr	r3, [sp, #8]
   e2b9e:	9a00      	ldr	r2, [sp, #0]
   e2ba0:	f843 2b04 	str.w	r2, [r3], #4
   e2ba4:	9302      	str	r3, [sp, #8]
   e2ba6:	2300      	movs	r3, #0
   e2ba8:	9300      	str	r3, [sp, #0]
   e2baa:	469b      	mov	fp, r3
   e2bac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e2bb0:	f7ff fecc 	bl	e294c <__hexdig_fun>
   e2bb4:	9b00      	ldr	r3, [sp, #0]
   e2bb6:	f000 000f 	and.w	r0, r0, #15
   e2bba:	fa00 f00b 	lsl.w	r0, r0, fp
   e2bbe:	4303      	orrs	r3, r0
   e2bc0:	9300      	str	r3, [sp, #0]
   e2bc2:	f10b 0b04 	add.w	fp, fp, #4
   e2bc6:	9b03      	ldr	r3, [sp, #12]
   e2bc8:	e00d      	b.n	e2be6 <__gethex+0x26e>
   e2bca:	9b03      	ldr	r3, [sp, #12]
   e2bcc:	9a06      	ldr	r2, [sp, #24]
   e2bce:	4413      	add	r3, r2
   e2bd0:	42bb      	cmp	r3, r7
   e2bd2:	d3e0      	bcc.n	e2b96 <__gethex+0x21e>
   e2bd4:	4618      	mov	r0, r3
   e2bd6:	9901      	ldr	r1, [sp, #4]
   e2bd8:	9307      	str	r3, [sp, #28]
   e2bda:	4652      	mov	r2, sl
   e2bdc:	f7fe fdff 	bl	e17de <strncmp>
   e2be0:	9b07      	ldr	r3, [sp, #28]
   e2be2:	2800      	cmp	r0, #0
   e2be4:	d1d7      	bne.n	e2b96 <__gethex+0x21e>
   e2be6:	461e      	mov	r6, r3
   e2be8:	e788      	b.n	e2afc <__gethex+0x184>
   e2bea:	f04f 0a03 	mov.w	sl, #3
   e2bee:	e7b5      	b.n	e2b5c <__gethex+0x1e4>
   e2bf0:	da0a      	bge.n	e2c08 <__gethex+0x290>
   e2bf2:	1a37      	subs	r7, r6, r0
   e2bf4:	4621      	mov	r1, r4
   e2bf6:	ee18 0a10 	vmov	r0, s16
   e2bfa:	463a      	mov	r2, r7
   e2bfc:	f000 fbf6 	bl	e33ec <__lshift>
   e2c00:	1bed      	subs	r5, r5, r7
   e2c02:	4604      	mov	r4, r0
   e2c04:	f100 0914 	add.w	r9, r0, #20
   e2c08:	f04f 0a00 	mov.w	sl, #0
   e2c0c:	e7ab      	b.n	e2b66 <__gethex+0x1ee>
   e2c0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e2c12:	42a8      	cmp	r0, r5
   e2c14:	dd6d      	ble.n	e2cf2 <__gethex+0x37a>
   e2c16:	1b45      	subs	r5, r0, r5
   e2c18:	42ae      	cmp	r6, r5
   e2c1a:	dc31      	bgt.n	e2c80 <__gethex+0x308>
   e2c1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2c20:	2b02      	cmp	r3, #2
   e2c22:	d023      	beq.n	e2c6c <__gethex+0x2f4>
   e2c24:	2b03      	cmp	r3, #3
   e2c26:	d025      	beq.n	e2c74 <__gethex+0x2fc>
   e2c28:	2b01      	cmp	r3, #1
   e2c2a:	d115      	bne.n	e2c58 <__gethex+0x2e0>
   e2c2c:	42ae      	cmp	r6, r5
   e2c2e:	d113      	bne.n	e2c58 <__gethex+0x2e0>
   e2c30:	2e01      	cmp	r6, #1
   e2c32:	d10b      	bne.n	e2c4c <__gethex+0x2d4>
   e2c34:	9a04      	ldr	r2, [sp, #16]
   e2c36:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e2c3a:	6013      	str	r3, [r2, #0]
   e2c3c:	2301      	movs	r3, #1
   e2c3e:	6123      	str	r3, [r4, #16]
   e2c40:	f8c9 3000 	str.w	r3, [r9]
   e2c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2c46:	2762      	movs	r7, #98	; 0x62
   e2c48:	601c      	str	r4, [r3, #0]
   e2c4a:	e72a      	b.n	e2aa2 <__gethex+0x12a>
   e2c4c:	1e71      	subs	r1, r6, #1
   e2c4e:	4620      	mov	r0, r4
   e2c50:	f000 fde0 	bl	e3814 <__any_on>
   e2c54:	2800      	cmp	r0, #0
   e2c56:	d1ed      	bne.n	e2c34 <__gethex+0x2bc>
   e2c58:	ee18 0a10 	vmov	r0, s16
   e2c5c:	4621      	mov	r1, r4
   e2c5e:	f000 f9ef 	bl	e3040 <_Bfree>
   e2c62:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e2c64:	2300      	movs	r3, #0
   e2c66:	6013      	str	r3, [r2, #0]
   e2c68:	2750      	movs	r7, #80	; 0x50
   e2c6a:	e71a      	b.n	e2aa2 <__gethex+0x12a>
   e2c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2c6e:	2b00      	cmp	r3, #0
   e2c70:	d1f2      	bne.n	e2c58 <__gethex+0x2e0>
   e2c72:	e7df      	b.n	e2c34 <__gethex+0x2bc>
   e2c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2c76:	2b00      	cmp	r3, #0
   e2c78:	d1dc      	bne.n	e2c34 <__gethex+0x2bc>
   e2c7a:	e7ed      	b.n	e2c58 <__gethex+0x2e0>
   e2c7c:	000e4c8c 	.word	0x000e4c8c
   e2c80:	1e6f      	subs	r7, r5, #1
   e2c82:	f1ba 0f00 	cmp.w	sl, #0
   e2c86:	d131      	bne.n	e2cec <__gethex+0x374>
   e2c88:	b127      	cbz	r7, e2c94 <__gethex+0x31c>
   e2c8a:	4639      	mov	r1, r7
   e2c8c:	4620      	mov	r0, r4
   e2c8e:	f000 fdc1 	bl	e3814 <__any_on>
   e2c92:	4682      	mov	sl, r0
   e2c94:	117b      	asrs	r3, r7, #5
   e2c96:	2101      	movs	r1, #1
   e2c98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   e2c9c:	f007 071f 	and.w	r7, r7, #31
   e2ca0:	fa01 f707 	lsl.w	r7, r1, r7
   e2ca4:	421f      	tst	r7, r3
   e2ca6:	4629      	mov	r1, r5
   e2ca8:	4620      	mov	r0, r4
   e2caa:	bf18      	it	ne
   e2cac:	f04a 0a02 	orrne.w	sl, sl, #2
   e2cb0:	1b76      	subs	r6, r6, r5
   e2cb2:	f7ff fdf9 	bl	e28a8 <rshift>
   e2cb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   e2cba:	2702      	movs	r7, #2
   e2cbc:	f1ba 0f00 	cmp.w	sl, #0
   e2cc0:	d048      	beq.n	e2d54 <__gethex+0x3dc>
   e2cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2cc6:	2b02      	cmp	r3, #2
   e2cc8:	d015      	beq.n	e2cf6 <__gethex+0x37e>
   e2cca:	2b03      	cmp	r3, #3
   e2ccc:	d017      	beq.n	e2cfe <__gethex+0x386>
   e2cce:	2b01      	cmp	r3, #1
   e2cd0:	d109      	bne.n	e2ce6 <__gethex+0x36e>
   e2cd2:	f01a 0f02 	tst.w	sl, #2
   e2cd6:	d006      	beq.n	e2ce6 <__gethex+0x36e>
   e2cd8:	f8d9 0000 	ldr.w	r0, [r9]
   e2cdc:	ea4a 0a00 	orr.w	sl, sl, r0
   e2ce0:	f01a 0f01 	tst.w	sl, #1
   e2ce4:	d10e      	bne.n	e2d04 <__gethex+0x38c>
   e2ce6:	f047 0710 	orr.w	r7, r7, #16
   e2cea:	e033      	b.n	e2d54 <__gethex+0x3dc>
   e2cec:	f04f 0a01 	mov.w	sl, #1
   e2cf0:	e7d0      	b.n	e2c94 <__gethex+0x31c>
   e2cf2:	2701      	movs	r7, #1
   e2cf4:	e7e2      	b.n	e2cbc <__gethex+0x344>
   e2cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2cf8:	f1c3 0301 	rsb	r3, r3, #1
   e2cfc:	9315      	str	r3, [sp, #84]	; 0x54
   e2cfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2d00:	2b00      	cmp	r3, #0
   e2d02:	d0f0      	beq.n	e2ce6 <__gethex+0x36e>
   e2d04:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e2d08:	f104 0314 	add.w	r3, r4, #20
   e2d0c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   e2d10:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   e2d14:	f04f 0c00 	mov.w	ip, #0
   e2d18:	4618      	mov	r0, r3
   e2d1a:	f853 2b04 	ldr.w	r2, [r3], #4
   e2d1e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   e2d22:	d01c      	beq.n	e2d5e <__gethex+0x3e6>
   e2d24:	3201      	adds	r2, #1
   e2d26:	6002      	str	r2, [r0, #0]
   e2d28:	2f02      	cmp	r7, #2
   e2d2a:	f104 0314 	add.w	r3, r4, #20
   e2d2e:	d13a      	bne.n	e2da6 <__gethex+0x42e>
   e2d30:	f8d8 2000 	ldr.w	r2, [r8]
   e2d34:	3a01      	subs	r2, #1
   e2d36:	42b2      	cmp	r2, r6
   e2d38:	d10a      	bne.n	e2d50 <__gethex+0x3d8>
   e2d3a:	1171      	asrs	r1, r6, #5
   e2d3c:	2201      	movs	r2, #1
   e2d3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e2d42:	f006 061f 	and.w	r6, r6, #31
   e2d46:	fa02 f606 	lsl.w	r6, r2, r6
   e2d4a:	421e      	tst	r6, r3
   e2d4c:	bf18      	it	ne
   e2d4e:	4617      	movne	r7, r2
   e2d50:	f047 0720 	orr.w	r7, r7, #32
   e2d54:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2d56:	601c      	str	r4, [r3, #0]
   e2d58:	9b04      	ldr	r3, [sp, #16]
   e2d5a:	601d      	str	r5, [r3, #0]
   e2d5c:	e6a1      	b.n	e2aa2 <__gethex+0x12a>
   e2d5e:	4299      	cmp	r1, r3
   e2d60:	f843 cc04 	str.w	ip, [r3, #-4]
   e2d64:	d8d8      	bhi.n	e2d18 <__gethex+0x3a0>
   e2d66:	68a3      	ldr	r3, [r4, #8]
   e2d68:	4599      	cmp	r9, r3
   e2d6a:	db14      	blt.n	e2d96 <__gethex+0x41e>
   e2d6c:	6861      	ldr	r1, [r4, #4]
   e2d6e:	ee18 0a10 	vmov	r0, s16
   e2d72:	3101      	adds	r1, #1
   e2d74:	f000 f930 	bl	e2fd8 <_Balloc>
   e2d78:	6922      	ldr	r2, [r4, #16]
   e2d7a:	3202      	adds	r2, #2
   e2d7c:	f104 010c 	add.w	r1, r4, #12
   e2d80:	4682      	mov	sl, r0
   e2d82:	0092      	lsls	r2, r2, #2
   e2d84:	300c      	adds	r0, #12
   e2d86:	f7fe fc6f 	bl	e1668 <memcpy>
   e2d8a:	4621      	mov	r1, r4
   e2d8c:	ee18 0a10 	vmov	r0, s16
   e2d90:	f000 f956 	bl	e3040 <_Bfree>
   e2d94:	4654      	mov	r4, sl
   e2d96:	6923      	ldr	r3, [r4, #16]
   e2d98:	1c5a      	adds	r2, r3, #1
   e2d9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   e2d9e:	6122      	str	r2, [r4, #16]
   e2da0:	2201      	movs	r2, #1
   e2da2:	615a      	str	r2, [r3, #20]
   e2da4:	e7c0      	b.n	e2d28 <__gethex+0x3b0>
   e2da6:	6922      	ldr	r2, [r4, #16]
   e2da8:	454a      	cmp	r2, r9
   e2daa:	dd0b      	ble.n	e2dc4 <__gethex+0x44c>
   e2dac:	2101      	movs	r1, #1
   e2dae:	4620      	mov	r0, r4
   e2db0:	f7ff fd7a 	bl	e28a8 <rshift>
   e2db4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e2db8:	3501      	adds	r5, #1
   e2dba:	42ab      	cmp	r3, r5
   e2dbc:	f6ff aed7 	blt.w	e2b6e <__gethex+0x1f6>
   e2dc0:	2701      	movs	r7, #1
   e2dc2:	e7c5      	b.n	e2d50 <__gethex+0x3d8>
   e2dc4:	f016 061f 	ands.w	r6, r6, #31
   e2dc8:	d0fa      	beq.n	e2dc0 <__gethex+0x448>
   e2dca:	449b      	add	fp, r3
   e2dcc:	f1c6 0620 	rsb	r6, r6, #32
   e2dd0:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   e2dd4:	f000 f9c7 	bl	e3166 <__hi0bits>
   e2dd8:	42b0      	cmp	r0, r6
   e2dda:	dbe7      	blt.n	e2dac <__gethex+0x434>
   e2ddc:	e7f0      	b.n	e2dc0 <__gethex+0x448>
   e2dde:	bf00      	nop

000e2de0 <L_shift>:
   e2de0:	f1c2 0208 	rsb	r2, r2, #8
   e2de4:	0092      	lsls	r2, r2, #2
   e2de6:	b570      	push	{r4, r5, r6, lr}
   e2de8:	f1c2 0620 	rsb	r6, r2, #32
   e2dec:	6843      	ldr	r3, [r0, #4]
   e2dee:	6804      	ldr	r4, [r0, #0]
   e2df0:	fa03 f506 	lsl.w	r5, r3, r6
   e2df4:	432c      	orrs	r4, r5
   e2df6:	40d3      	lsrs	r3, r2
   e2df8:	6004      	str	r4, [r0, #0]
   e2dfa:	f840 3f04 	str.w	r3, [r0, #4]!
   e2dfe:	4288      	cmp	r0, r1
   e2e00:	d3f4      	bcc.n	e2dec <L_shift+0xc>
   e2e02:	bd70      	pop	{r4, r5, r6, pc}

000e2e04 <__match>:
   e2e04:	b530      	push	{r4, r5, lr}
   e2e06:	6803      	ldr	r3, [r0, #0]
   e2e08:	3301      	adds	r3, #1
   e2e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   e2e0e:	b914      	cbnz	r4, e2e16 <__match+0x12>
   e2e10:	6003      	str	r3, [r0, #0]
   e2e12:	2001      	movs	r0, #1
   e2e14:	bd30      	pop	{r4, r5, pc}
   e2e16:	f813 2b01 	ldrb.w	r2, [r3], #1
   e2e1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e2e1e:	2d19      	cmp	r5, #25
   e2e20:	bf98      	it	ls
   e2e22:	3220      	addls	r2, #32
   e2e24:	42a2      	cmp	r2, r4
   e2e26:	d0f0      	beq.n	e2e0a <__match+0x6>
   e2e28:	2000      	movs	r0, #0
   e2e2a:	e7f3      	b.n	e2e14 <__match+0x10>

000e2e2c <__hexnan>:
   e2e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2e30:	680b      	ldr	r3, [r1, #0]
   e2e32:	6801      	ldr	r1, [r0, #0]
   e2e34:	115e      	asrs	r6, r3, #5
   e2e36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e2e3a:	f013 031f 	ands.w	r3, r3, #31
   e2e3e:	b087      	sub	sp, #28
   e2e40:	bf18      	it	ne
   e2e42:	3604      	addne	r6, #4
   e2e44:	2500      	movs	r5, #0
   e2e46:	1f37      	subs	r7, r6, #4
   e2e48:	4682      	mov	sl, r0
   e2e4a:	4690      	mov	r8, r2
   e2e4c:	9301      	str	r3, [sp, #4]
   e2e4e:	f846 5c04 	str.w	r5, [r6, #-4]
   e2e52:	46b9      	mov	r9, r7
   e2e54:	463c      	mov	r4, r7
   e2e56:	9502      	str	r5, [sp, #8]
   e2e58:	46ab      	mov	fp, r5
   e2e5a:	784a      	ldrb	r2, [r1, #1]
   e2e5c:	1c4b      	adds	r3, r1, #1
   e2e5e:	9303      	str	r3, [sp, #12]
   e2e60:	b342      	cbz	r2, e2eb4 <__hexnan+0x88>
   e2e62:	4610      	mov	r0, r2
   e2e64:	9105      	str	r1, [sp, #20]
   e2e66:	9204      	str	r2, [sp, #16]
   e2e68:	f7ff fd70 	bl	e294c <__hexdig_fun>
   e2e6c:	2800      	cmp	r0, #0
   e2e6e:	d14f      	bne.n	e2f10 <__hexnan+0xe4>
   e2e70:	9a04      	ldr	r2, [sp, #16]
   e2e72:	9905      	ldr	r1, [sp, #20]
   e2e74:	2a20      	cmp	r2, #32
   e2e76:	d818      	bhi.n	e2eaa <__hexnan+0x7e>
   e2e78:	9b02      	ldr	r3, [sp, #8]
   e2e7a:	459b      	cmp	fp, r3
   e2e7c:	dd13      	ble.n	e2ea6 <__hexnan+0x7a>
   e2e7e:	454c      	cmp	r4, r9
   e2e80:	d206      	bcs.n	e2e90 <__hexnan+0x64>
   e2e82:	2d07      	cmp	r5, #7
   e2e84:	dc04      	bgt.n	e2e90 <__hexnan+0x64>
   e2e86:	462a      	mov	r2, r5
   e2e88:	4649      	mov	r1, r9
   e2e8a:	4620      	mov	r0, r4
   e2e8c:	f7ff ffa8 	bl	e2de0 <L_shift>
   e2e90:	4544      	cmp	r4, r8
   e2e92:	d950      	bls.n	e2f36 <__hexnan+0x10a>
   e2e94:	2300      	movs	r3, #0
   e2e96:	f1a4 0904 	sub.w	r9, r4, #4
   e2e9a:	f844 3c04 	str.w	r3, [r4, #-4]
   e2e9e:	f8cd b008 	str.w	fp, [sp, #8]
   e2ea2:	464c      	mov	r4, r9
   e2ea4:	461d      	mov	r5, r3
   e2ea6:	9903      	ldr	r1, [sp, #12]
   e2ea8:	e7d7      	b.n	e2e5a <__hexnan+0x2e>
   e2eaa:	2a29      	cmp	r2, #41	; 0x29
   e2eac:	d156      	bne.n	e2f5c <__hexnan+0x130>
   e2eae:	3102      	adds	r1, #2
   e2eb0:	f8ca 1000 	str.w	r1, [sl]
   e2eb4:	f1bb 0f00 	cmp.w	fp, #0
   e2eb8:	d050      	beq.n	e2f5c <__hexnan+0x130>
   e2eba:	454c      	cmp	r4, r9
   e2ebc:	d206      	bcs.n	e2ecc <__hexnan+0xa0>
   e2ebe:	2d07      	cmp	r5, #7
   e2ec0:	dc04      	bgt.n	e2ecc <__hexnan+0xa0>
   e2ec2:	462a      	mov	r2, r5
   e2ec4:	4649      	mov	r1, r9
   e2ec6:	4620      	mov	r0, r4
   e2ec8:	f7ff ff8a 	bl	e2de0 <L_shift>
   e2ecc:	4544      	cmp	r4, r8
   e2ece:	d934      	bls.n	e2f3a <__hexnan+0x10e>
   e2ed0:	f1a8 0204 	sub.w	r2, r8, #4
   e2ed4:	4623      	mov	r3, r4
   e2ed6:	f853 1b04 	ldr.w	r1, [r3], #4
   e2eda:	f842 1f04 	str.w	r1, [r2, #4]!
   e2ede:	429f      	cmp	r7, r3
   e2ee0:	d2f9      	bcs.n	e2ed6 <__hexnan+0xaa>
   e2ee2:	1b3b      	subs	r3, r7, r4
   e2ee4:	f023 0303 	bic.w	r3, r3, #3
   e2ee8:	3304      	adds	r3, #4
   e2eea:	3401      	adds	r4, #1
   e2eec:	3e03      	subs	r6, #3
   e2eee:	42b4      	cmp	r4, r6
   e2ef0:	bf88      	it	hi
   e2ef2:	2304      	movhi	r3, #4
   e2ef4:	4443      	add	r3, r8
   e2ef6:	2200      	movs	r2, #0
   e2ef8:	f843 2b04 	str.w	r2, [r3], #4
   e2efc:	429f      	cmp	r7, r3
   e2efe:	d2fb      	bcs.n	e2ef8 <__hexnan+0xcc>
   e2f00:	683b      	ldr	r3, [r7, #0]
   e2f02:	b91b      	cbnz	r3, e2f0c <__hexnan+0xe0>
   e2f04:	4547      	cmp	r7, r8
   e2f06:	d127      	bne.n	e2f58 <__hexnan+0x12c>
   e2f08:	2301      	movs	r3, #1
   e2f0a:	603b      	str	r3, [r7, #0]
   e2f0c:	2005      	movs	r0, #5
   e2f0e:	e026      	b.n	e2f5e <__hexnan+0x132>
   e2f10:	3501      	adds	r5, #1
   e2f12:	2d08      	cmp	r5, #8
   e2f14:	f10b 0b01 	add.w	fp, fp, #1
   e2f18:	dd06      	ble.n	e2f28 <__hexnan+0xfc>
   e2f1a:	4544      	cmp	r4, r8
   e2f1c:	d9c3      	bls.n	e2ea6 <__hexnan+0x7a>
   e2f1e:	2300      	movs	r3, #0
   e2f20:	f844 3c04 	str.w	r3, [r4, #-4]
   e2f24:	2501      	movs	r5, #1
   e2f26:	3c04      	subs	r4, #4
   e2f28:	6822      	ldr	r2, [r4, #0]
   e2f2a:	f000 000f 	and.w	r0, r0, #15
   e2f2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   e2f32:	6022      	str	r2, [r4, #0]
   e2f34:	e7b7      	b.n	e2ea6 <__hexnan+0x7a>
   e2f36:	2508      	movs	r5, #8
   e2f38:	e7b5      	b.n	e2ea6 <__hexnan+0x7a>
   e2f3a:	9b01      	ldr	r3, [sp, #4]
   e2f3c:	2b00      	cmp	r3, #0
   e2f3e:	d0df      	beq.n	e2f00 <__hexnan+0xd4>
   e2f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e2f44:	f1c3 0320 	rsb	r3, r3, #32
   e2f48:	fa22 f303 	lsr.w	r3, r2, r3
   e2f4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e2f50:	401a      	ands	r2, r3
   e2f52:	f846 2c04 	str.w	r2, [r6, #-4]
   e2f56:	e7d3      	b.n	e2f00 <__hexnan+0xd4>
   e2f58:	3f04      	subs	r7, #4
   e2f5a:	e7d1      	b.n	e2f00 <__hexnan+0xd4>
   e2f5c:	2004      	movs	r0, #4
   e2f5e:	b007      	add	sp, #28
   e2f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e2f64 <_link_r>:
   e2f64:	b538      	push	{r3, r4, r5, lr}
   e2f66:	4d07      	ldr	r5, [pc, #28]	; (e2f84 <_link_r+0x20>)
   e2f68:	2300      	movs	r3, #0
   e2f6a:	4604      	mov	r4, r0
   e2f6c:	4608      	mov	r0, r1
   e2f6e:	4611      	mov	r1, r2
   e2f70:	602b      	str	r3, [r5, #0]
   e2f72:	f7f9 fe91 	bl	dcc98 <_link>
   e2f76:	1c43      	adds	r3, r0, #1
   e2f78:	d102      	bne.n	e2f80 <_link_r+0x1c>
   e2f7a:	682b      	ldr	r3, [r5, #0]
   e2f7c:	b103      	cbz	r3, e2f80 <_link_r+0x1c>
   e2f7e:	6023      	str	r3, [r4, #0]
   e2f80:	bd38      	pop	{r3, r4, r5, pc}
   e2f82:	bf00      	nop
   e2f84:	2003e7ec 	.word	0x2003e7ec

000e2f88 <__retarget_lock_acquire_recursive>:
   e2f88:	4770      	bx	lr

000e2f8a <__retarget_lock_release>:
   e2f8a:	4770      	bx	lr

000e2f8c <__retarget_lock_release_recursive>:
   e2f8c:	4770      	bx	lr
	...

000e2f90 <_lseek_r>:
   e2f90:	b538      	push	{r3, r4, r5, lr}
   e2f92:	4d07      	ldr	r5, [pc, #28]	; (e2fb0 <_lseek_r+0x20>)
   e2f94:	4604      	mov	r4, r0
   e2f96:	4608      	mov	r0, r1
   e2f98:	4611      	mov	r1, r2
   e2f9a:	2200      	movs	r2, #0
   e2f9c:	602a      	str	r2, [r5, #0]
   e2f9e:	461a      	mov	r2, r3
   e2fa0:	f7f9 fe5a 	bl	dcc58 <_lseek>
   e2fa4:	1c43      	adds	r3, r0, #1
   e2fa6:	d102      	bne.n	e2fae <_lseek_r+0x1e>
   e2fa8:	682b      	ldr	r3, [r5, #0]
   e2faa:	b103      	cbz	r3, e2fae <_lseek_r+0x1e>
   e2fac:	6023      	str	r3, [r4, #0]
   e2fae:	bd38      	pop	{r3, r4, r5, pc}
   e2fb0:	2003e7ec 	.word	0x2003e7ec

000e2fb4 <__ascii_mbtowc>:
   e2fb4:	b082      	sub	sp, #8
   e2fb6:	b901      	cbnz	r1, e2fba <__ascii_mbtowc+0x6>
   e2fb8:	a901      	add	r1, sp, #4
   e2fba:	b142      	cbz	r2, e2fce <__ascii_mbtowc+0x1a>
   e2fbc:	b14b      	cbz	r3, e2fd2 <__ascii_mbtowc+0x1e>
   e2fbe:	7813      	ldrb	r3, [r2, #0]
   e2fc0:	600b      	str	r3, [r1, #0]
   e2fc2:	7812      	ldrb	r2, [r2, #0]
   e2fc4:	1e10      	subs	r0, r2, #0
   e2fc6:	bf18      	it	ne
   e2fc8:	2001      	movne	r0, #1
   e2fca:	b002      	add	sp, #8
   e2fcc:	4770      	bx	lr
   e2fce:	4610      	mov	r0, r2
   e2fd0:	e7fb      	b.n	e2fca <__ascii_mbtowc+0x16>
   e2fd2:	f06f 0001 	mvn.w	r0, #1
   e2fd6:	e7f8      	b.n	e2fca <__ascii_mbtowc+0x16>

000e2fd8 <_Balloc>:
   e2fd8:	b570      	push	{r4, r5, r6, lr}
   e2fda:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e2fdc:	4604      	mov	r4, r0
   e2fde:	460d      	mov	r5, r1
   e2fe0:	b93e      	cbnz	r6, e2ff2 <_Balloc+0x1a>
   e2fe2:	2010      	movs	r0, #16
   e2fe4:	f7fa f868 	bl	dd0b8 <malloc>
   e2fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e2fec:	6260      	str	r0, [r4, #36]	; 0x24
   e2fee:	6006      	str	r6, [r0, #0]
   e2ff0:	60c6      	str	r6, [r0, #12]
   e2ff2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   e2ff4:	68f3      	ldr	r3, [r6, #12]
   e2ff6:	b183      	cbz	r3, e301a <_Balloc+0x42>
   e2ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e2ffa:	68db      	ldr	r3, [r3, #12]
   e2ffc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   e3000:	b9b8      	cbnz	r0, e3032 <_Balloc+0x5a>
   e3002:	2101      	movs	r1, #1
   e3004:	fa01 f605 	lsl.w	r6, r1, r5
   e3008:	1d72      	adds	r2, r6, #5
   e300a:	0092      	lsls	r2, r2, #2
   e300c:	4620      	mov	r0, r4
   e300e:	f000 fc22 	bl	e3856 <_calloc_r>
   e3012:	b160      	cbz	r0, e302e <_Balloc+0x56>
   e3014:	e9c0 5601 	strd	r5, r6, [r0, #4]
   e3018:	e00e      	b.n	e3038 <_Balloc+0x60>
   e301a:	2221      	movs	r2, #33	; 0x21
   e301c:	2104      	movs	r1, #4
   e301e:	4620      	mov	r0, r4
   e3020:	f000 fc19 	bl	e3856 <_calloc_r>
   e3024:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3026:	60f0      	str	r0, [r6, #12]
   e3028:	68db      	ldr	r3, [r3, #12]
   e302a:	2b00      	cmp	r3, #0
   e302c:	d1e4      	bne.n	e2ff8 <_Balloc+0x20>
   e302e:	2000      	movs	r0, #0
   e3030:	bd70      	pop	{r4, r5, r6, pc}
   e3032:	6802      	ldr	r2, [r0, #0]
   e3034:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   e3038:	2300      	movs	r3, #0
   e303a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   e303e:	e7f7      	b.n	e3030 <_Balloc+0x58>

000e3040 <_Bfree>:
   e3040:	b570      	push	{r4, r5, r6, lr}
   e3042:	6a46      	ldr	r6, [r0, #36]	; 0x24
   e3044:	4605      	mov	r5, r0
   e3046:	460c      	mov	r4, r1
   e3048:	b93e      	cbnz	r6, e305a <_Bfree+0x1a>
   e304a:	2010      	movs	r0, #16
   e304c:	f7fa f834 	bl	dd0b8 <malloc>
   e3050:	e9c0 6601 	strd	r6, r6, [r0, #4]
   e3054:	6268      	str	r0, [r5, #36]	; 0x24
   e3056:	6006      	str	r6, [r0, #0]
   e3058:	60c6      	str	r6, [r0, #12]
   e305a:	b13c      	cbz	r4, e306c <_Bfree+0x2c>
   e305c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   e305e:	6862      	ldr	r2, [r4, #4]
   e3060:	68db      	ldr	r3, [r3, #12]
   e3062:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e3066:	6021      	str	r1, [r4, #0]
   e3068:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   e306c:	bd70      	pop	{r4, r5, r6, pc}

000e306e <__multadd>:
   e306e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3072:	690e      	ldr	r6, [r1, #16]
   e3074:	4607      	mov	r7, r0
   e3076:	4698      	mov	r8, r3
   e3078:	460c      	mov	r4, r1
   e307a:	f101 0014 	add.w	r0, r1, #20
   e307e:	2300      	movs	r3, #0
   e3080:	6805      	ldr	r5, [r0, #0]
   e3082:	b2a9      	uxth	r1, r5
   e3084:	fb02 8101 	mla	r1, r2, r1, r8
   e3088:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   e308c:	0c2d      	lsrs	r5, r5, #16
   e308e:	fb02 c505 	mla	r5, r2, r5, ip
   e3092:	b289      	uxth	r1, r1
   e3094:	3301      	adds	r3, #1
   e3096:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   e309a:	429e      	cmp	r6, r3
   e309c:	f840 1b04 	str.w	r1, [r0], #4
   e30a0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   e30a4:	dcec      	bgt.n	e3080 <__multadd+0x12>
   e30a6:	f1b8 0f00 	cmp.w	r8, #0
   e30aa:	d01b      	beq.n	e30e4 <__multadd+0x76>
   e30ac:	68a3      	ldr	r3, [r4, #8]
   e30ae:	42b3      	cmp	r3, r6
   e30b0:	dc12      	bgt.n	e30d8 <__multadd+0x6a>
   e30b2:	6861      	ldr	r1, [r4, #4]
   e30b4:	4638      	mov	r0, r7
   e30b6:	3101      	adds	r1, #1
   e30b8:	f7ff ff8e 	bl	e2fd8 <_Balloc>
   e30bc:	6922      	ldr	r2, [r4, #16]
   e30be:	3202      	adds	r2, #2
   e30c0:	f104 010c 	add.w	r1, r4, #12
   e30c4:	4605      	mov	r5, r0
   e30c6:	0092      	lsls	r2, r2, #2
   e30c8:	300c      	adds	r0, #12
   e30ca:	f7fe facd 	bl	e1668 <memcpy>
   e30ce:	4621      	mov	r1, r4
   e30d0:	4638      	mov	r0, r7
   e30d2:	f7ff ffb5 	bl	e3040 <_Bfree>
   e30d6:	462c      	mov	r4, r5
   e30d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   e30dc:	3601      	adds	r6, #1
   e30de:	f8c3 8014 	str.w	r8, [r3, #20]
   e30e2:	6126      	str	r6, [r4, #16]
   e30e4:	4620      	mov	r0, r4
   e30e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e30ea <__s2b>:
   e30ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e30ee:	460c      	mov	r4, r1
   e30f0:	4615      	mov	r5, r2
   e30f2:	461f      	mov	r7, r3
   e30f4:	2209      	movs	r2, #9
   e30f6:	3308      	adds	r3, #8
   e30f8:	4606      	mov	r6, r0
   e30fa:	fb93 f3f2 	sdiv	r3, r3, r2
   e30fe:	2100      	movs	r1, #0
   e3100:	2201      	movs	r2, #1
   e3102:	429a      	cmp	r2, r3
   e3104:	db20      	blt.n	e3148 <__s2b+0x5e>
   e3106:	4630      	mov	r0, r6
   e3108:	f7ff ff66 	bl	e2fd8 <_Balloc>
   e310c:	9b08      	ldr	r3, [sp, #32]
   e310e:	6143      	str	r3, [r0, #20]
   e3110:	2d09      	cmp	r5, #9
   e3112:	f04f 0301 	mov.w	r3, #1
   e3116:	6103      	str	r3, [r0, #16]
   e3118:	dd19      	ble.n	e314e <__s2b+0x64>
   e311a:	f104 0909 	add.w	r9, r4, #9
   e311e:	46c8      	mov	r8, r9
   e3120:	442c      	add	r4, r5
   e3122:	f818 3b01 	ldrb.w	r3, [r8], #1
   e3126:	4601      	mov	r1, r0
   e3128:	3b30      	subs	r3, #48	; 0x30
   e312a:	220a      	movs	r2, #10
   e312c:	4630      	mov	r0, r6
   e312e:	f7ff ff9e 	bl	e306e <__multadd>
   e3132:	45a0      	cmp	r8, r4
   e3134:	d1f5      	bne.n	e3122 <__s2b+0x38>
   e3136:	f1a5 0408 	sub.w	r4, r5, #8
   e313a:	444c      	add	r4, r9
   e313c:	1b2d      	subs	r5, r5, r4
   e313e:	1963      	adds	r3, r4, r5
   e3140:	42bb      	cmp	r3, r7
   e3142:	db07      	blt.n	e3154 <__s2b+0x6a>
   e3144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e3148:	0052      	lsls	r2, r2, #1
   e314a:	3101      	adds	r1, #1
   e314c:	e7d9      	b.n	e3102 <__s2b+0x18>
   e314e:	340a      	adds	r4, #10
   e3150:	2509      	movs	r5, #9
   e3152:	e7f3      	b.n	e313c <__s2b+0x52>
   e3154:	f814 3b01 	ldrb.w	r3, [r4], #1
   e3158:	4601      	mov	r1, r0
   e315a:	3b30      	subs	r3, #48	; 0x30
   e315c:	220a      	movs	r2, #10
   e315e:	4630      	mov	r0, r6
   e3160:	f7ff ff85 	bl	e306e <__multadd>
   e3164:	e7eb      	b.n	e313e <__s2b+0x54>

000e3166 <__hi0bits>:
   e3166:	0c03      	lsrs	r3, r0, #16
   e3168:	041b      	lsls	r3, r3, #16
   e316a:	b9d3      	cbnz	r3, e31a2 <__hi0bits+0x3c>
   e316c:	0400      	lsls	r0, r0, #16
   e316e:	2310      	movs	r3, #16
   e3170:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e3174:	bf04      	itt	eq
   e3176:	0200      	lsleq	r0, r0, #8
   e3178:	3308      	addeq	r3, #8
   e317a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e317e:	bf04      	itt	eq
   e3180:	0100      	lsleq	r0, r0, #4
   e3182:	3304      	addeq	r3, #4
   e3184:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e3188:	bf04      	itt	eq
   e318a:	0080      	lsleq	r0, r0, #2
   e318c:	3302      	addeq	r3, #2
   e318e:	2800      	cmp	r0, #0
   e3190:	db05      	blt.n	e319e <__hi0bits+0x38>
   e3192:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   e3196:	f103 0301 	add.w	r3, r3, #1
   e319a:	bf08      	it	eq
   e319c:	2320      	moveq	r3, #32
   e319e:	4618      	mov	r0, r3
   e31a0:	4770      	bx	lr
   e31a2:	2300      	movs	r3, #0
   e31a4:	e7e4      	b.n	e3170 <__hi0bits+0xa>

000e31a6 <__lo0bits>:
   e31a6:	6803      	ldr	r3, [r0, #0]
   e31a8:	f013 0207 	ands.w	r2, r3, #7
   e31ac:	4601      	mov	r1, r0
   e31ae:	d00b      	beq.n	e31c8 <__lo0bits+0x22>
   e31b0:	07da      	lsls	r2, r3, #31
   e31b2:	d424      	bmi.n	e31fe <__lo0bits+0x58>
   e31b4:	0798      	lsls	r0, r3, #30
   e31b6:	bf49      	itett	mi
   e31b8:	085b      	lsrmi	r3, r3, #1
   e31ba:	089b      	lsrpl	r3, r3, #2
   e31bc:	2001      	movmi	r0, #1
   e31be:	600b      	strmi	r3, [r1, #0]
   e31c0:	bf5c      	itt	pl
   e31c2:	600b      	strpl	r3, [r1, #0]
   e31c4:	2002      	movpl	r0, #2
   e31c6:	4770      	bx	lr
   e31c8:	b298      	uxth	r0, r3
   e31ca:	b9b0      	cbnz	r0, e31fa <__lo0bits+0x54>
   e31cc:	0c1b      	lsrs	r3, r3, #16
   e31ce:	2010      	movs	r0, #16
   e31d0:	f013 0fff 	tst.w	r3, #255	; 0xff
   e31d4:	bf04      	itt	eq
   e31d6:	0a1b      	lsreq	r3, r3, #8
   e31d8:	3008      	addeq	r0, #8
   e31da:	071a      	lsls	r2, r3, #28
   e31dc:	bf04      	itt	eq
   e31de:	091b      	lsreq	r3, r3, #4
   e31e0:	3004      	addeq	r0, #4
   e31e2:	079a      	lsls	r2, r3, #30
   e31e4:	bf04      	itt	eq
   e31e6:	089b      	lsreq	r3, r3, #2
   e31e8:	3002      	addeq	r0, #2
   e31ea:	07da      	lsls	r2, r3, #31
   e31ec:	d403      	bmi.n	e31f6 <__lo0bits+0x50>
   e31ee:	085b      	lsrs	r3, r3, #1
   e31f0:	f100 0001 	add.w	r0, r0, #1
   e31f4:	d005      	beq.n	e3202 <__lo0bits+0x5c>
   e31f6:	600b      	str	r3, [r1, #0]
   e31f8:	4770      	bx	lr
   e31fa:	4610      	mov	r0, r2
   e31fc:	e7e8      	b.n	e31d0 <__lo0bits+0x2a>
   e31fe:	2000      	movs	r0, #0
   e3200:	4770      	bx	lr
   e3202:	2020      	movs	r0, #32
   e3204:	4770      	bx	lr

000e3206 <__i2b>:
   e3206:	b510      	push	{r4, lr}
   e3208:	460c      	mov	r4, r1
   e320a:	2101      	movs	r1, #1
   e320c:	f7ff fee4 	bl	e2fd8 <_Balloc>
   e3210:	2201      	movs	r2, #1
   e3212:	6144      	str	r4, [r0, #20]
   e3214:	6102      	str	r2, [r0, #16]
   e3216:	bd10      	pop	{r4, pc}

000e3218 <__multiply>:
   e3218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e321c:	4615      	mov	r5, r2
   e321e:	690a      	ldr	r2, [r1, #16]
   e3220:	692b      	ldr	r3, [r5, #16]
   e3222:	429a      	cmp	r2, r3
   e3224:	bfb8      	it	lt
   e3226:	460b      	movlt	r3, r1
   e3228:	460c      	mov	r4, r1
   e322a:	bfbc      	itt	lt
   e322c:	462c      	movlt	r4, r5
   e322e:	461d      	movlt	r5, r3
   e3230:	6927      	ldr	r7, [r4, #16]
   e3232:	f8d5 9010 	ldr.w	r9, [r5, #16]
   e3236:	68a3      	ldr	r3, [r4, #8]
   e3238:	6861      	ldr	r1, [r4, #4]
   e323a:	eb07 0609 	add.w	r6, r7, r9
   e323e:	42b3      	cmp	r3, r6
   e3240:	bfb8      	it	lt
   e3242:	3101      	addlt	r1, #1
   e3244:	b085      	sub	sp, #20
   e3246:	f7ff fec7 	bl	e2fd8 <_Balloc>
   e324a:	f100 0114 	add.w	r1, r0, #20
   e324e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   e3252:	460b      	mov	r3, r1
   e3254:	2200      	movs	r2, #0
   e3256:	4543      	cmp	r3, r8
   e3258:	d31d      	bcc.n	e3296 <__multiply+0x7e>
   e325a:	f104 0314 	add.w	r3, r4, #20
   e325e:	f105 0214 	add.w	r2, r5, #20
   e3262:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   e3266:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e326a:	9302      	str	r3, [sp, #8]
   e326c:	1b3b      	subs	r3, r7, r4
   e326e:	3b15      	subs	r3, #21
   e3270:	f023 0303 	bic.w	r3, r3, #3
   e3274:	3304      	adds	r3, #4
   e3276:	f104 0515 	add.w	r5, r4, #21
   e327a:	42af      	cmp	r7, r5
   e327c:	bf38      	it	cc
   e327e:	2304      	movcc	r3, #4
   e3280:	9301      	str	r3, [sp, #4]
   e3282:	9b02      	ldr	r3, [sp, #8]
   e3284:	9203      	str	r2, [sp, #12]
   e3286:	4293      	cmp	r3, r2
   e3288:	d808      	bhi.n	e329c <__multiply+0x84>
   e328a:	2e00      	cmp	r6, #0
   e328c:	dc5a      	bgt.n	e3344 <__multiply+0x12c>
   e328e:	6106      	str	r6, [r0, #16]
   e3290:	b005      	add	sp, #20
   e3292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3296:	f843 2b04 	str.w	r2, [r3], #4
   e329a:	e7dc      	b.n	e3256 <__multiply+0x3e>
   e329c:	f8b2 a000 	ldrh.w	sl, [r2]
   e32a0:	f1ba 0f00 	cmp.w	sl, #0
   e32a4:	d024      	beq.n	e32f0 <__multiply+0xd8>
   e32a6:	f104 0e14 	add.w	lr, r4, #20
   e32aa:	4689      	mov	r9, r1
   e32ac:	f04f 0c00 	mov.w	ip, #0
   e32b0:	f85e 5b04 	ldr.w	r5, [lr], #4
   e32b4:	f8d9 b000 	ldr.w	fp, [r9]
   e32b8:	b2ab      	uxth	r3, r5
   e32ba:	fa1f fb8b 	uxth.w	fp, fp
   e32be:	fb0a b303 	mla	r3, sl, r3, fp
   e32c2:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   e32c6:	f8d9 5000 	ldr.w	r5, [r9]
   e32ca:	4463      	add	r3, ip
   e32cc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e32d0:	fb0a c50b 	mla	r5, sl, fp, ip
   e32d4:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   e32d8:	b29b      	uxth	r3, r3
   e32da:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   e32de:	4577      	cmp	r7, lr
   e32e0:	f849 3b04 	str.w	r3, [r9], #4
   e32e4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   e32e8:	d8e2      	bhi.n	e32b0 <__multiply+0x98>
   e32ea:	9b01      	ldr	r3, [sp, #4]
   e32ec:	f841 c003 	str.w	ip, [r1, r3]
   e32f0:	9b03      	ldr	r3, [sp, #12]
   e32f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   e32f6:	3204      	adds	r2, #4
   e32f8:	f1b9 0f00 	cmp.w	r9, #0
   e32fc:	d020      	beq.n	e3340 <__multiply+0x128>
   e32fe:	680b      	ldr	r3, [r1, #0]
   e3300:	f104 0c14 	add.w	ip, r4, #20
   e3304:	468e      	mov	lr, r1
   e3306:	f04f 0a00 	mov.w	sl, #0
   e330a:	f8bc 5000 	ldrh.w	r5, [ip]
   e330e:	f8be b002 	ldrh.w	fp, [lr, #2]
   e3312:	fb09 b505 	mla	r5, r9, r5, fp
   e3316:	44aa      	add	sl, r5
   e3318:	b29b      	uxth	r3, r3
   e331a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   e331e:	f84e 3b04 	str.w	r3, [lr], #4
   e3322:	f85c 3b04 	ldr.w	r3, [ip], #4
   e3326:	f8be 5000 	ldrh.w	r5, [lr]
   e332a:	0c1b      	lsrs	r3, r3, #16
   e332c:	fb09 5303 	mla	r3, r9, r3, r5
   e3330:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   e3334:	4567      	cmp	r7, ip
   e3336:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   e333a:	d8e6      	bhi.n	e330a <__multiply+0xf2>
   e333c:	9d01      	ldr	r5, [sp, #4]
   e333e:	514b      	str	r3, [r1, r5]
   e3340:	3104      	adds	r1, #4
   e3342:	e79e      	b.n	e3282 <__multiply+0x6a>
   e3344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   e3348:	2b00      	cmp	r3, #0
   e334a:	d1a0      	bne.n	e328e <__multiply+0x76>
   e334c:	3e01      	subs	r6, #1
   e334e:	e79c      	b.n	e328a <__multiply+0x72>

000e3350 <__pow5mult>:
   e3350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3354:	4615      	mov	r5, r2
   e3356:	f012 0203 	ands.w	r2, r2, #3
   e335a:	4606      	mov	r6, r0
   e335c:	460f      	mov	r7, r1
   e335e:	d007      	beq.n	e3370 <__pow5mult+0x20>
   e3360:	4c21      	ldr	r4, [pc, #132]	; (e33e8 <__pow5mult+0x98>)
   e3362:	3a01      	subs	r2, #1
   e3364:	2300      	movs	r3, #0
   e3366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e336a:	f7ff fe80 	bl	e306e <__multadd>
   e336e:	4607      	mov	r7, r0
   e3370:	10ad      	asrs	r5, r5, #2
   e3372:	d035      	beq.n	e33e0 <__pow5mult+0x90>
   e3374:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e3376:	b93c      	cbnz	r4, e3388 <__pow5mult+0x38>
   e3378:	2010      	movs	r0, #16
   e337a:	f7f9 fe9d 	bl	dd0b8 <malloc>
   e337e:	e9c0 4401 	strd	r4, r4, [r0, #4]
   e3382:	6270      	str	r0, [r6, #36]	; 0x24
   e3384:	6004      	str	r4, [r0, #0]
   e3386:	60c4      	str	r4, [r0, #12]
   e3388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e338c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e3390:	b94c      	cbnz	r4, e33a6 <__pow5mult+0x56>
   e3392:	f240 2171 	movw	r1, #625	; 0x271
   e3396:	4630      	mov	r0, r6
   e3398:	f7ff ff35 	bl	e3206 <__i2b>
   e339c:	2300      	movs	r3, #0
   e339e:	f8c8 0008 	str.w	r0, [r8, #8]
   e33a2:	4604      	mov	r4, r0
   e33a4:	6003      	str	r3, [r0, #0]
   e33a6:	f04f 0900 	mov.w	r9, #0
   e33aa:	07eb      	lsls	r3, r5, #31
   e33ac:	d50a      	bpl.n	e33c4 <__pow5mult+0x74>
   e33ae:	4639      	mov	r1, r7
   e33b0:	4622      	mov	r2, r4
   e33b2:	4630      	mov	r0, r6
   e33b4:	f7ff ff30 	bl	e3218 <__multiply>
   e33b8:	4639      	mov	r1, r7
   e33ba:	4680      	mov	r8, r0
   e33bc:	4630      	mov	r0, r6
   e33be:	f7ff fe3f 	bl	e3040 <_Bfree>
   e33c2:	4647      	mov	r7, r8
   e33c4:	106d      	asrs	r5, r5, #1
   e33c6:	d00b      	beq.n	e33e0 <__pow5mult+0x90>
   e33c8:	6820      	ldr	r0, [r4, #0]
   e33ca:	b938      	cbnz	r0, e33dc <__pow5mult+0x8c>
   e33cc:	4622      	mov	r2, r4
   e33ce:	4621      	mov	r1, r4
   e33d0:	4630      	mov	r0, r6
   e33d2:	f7ff ff21 	bl	e3218 <__multiply>
   e33d6:	6020      	str	r0, [r4, #0]
   e33d8:	f8c0 9000 	str.w	r9, [r0]
   e33dc:	4604      	mov	r4, r0
   e33de:	e7e4      	b.n	e33aa <__pow5mult+0x5a>
   e33e0:	4638      	mov	r0, r7
   e33e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e33e6:	bf00      	nop
   e33e8:	000e4d90 	.word	0x000e4d90

000e33ec <__lshift>:
   e33ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e33f0:	460c      	mov	r4, r1
   e33f2:	6849      	ldr	r1, [r1, #4]
   e33f4:	6923      	ldr	r3, [r4, #16]
   e33f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   e33fa:	68a3      	ldr	r3, [r4, #8]
   e33fc:	4607      	mov	r7, r0
   e33fe:	4691      	mov	r9, r2
   e3400:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e3404:	f108 0601 	add.w	r6, r8, #1
   e3408:	42b3      	cmp	r3, r6
   e340a:	db3f      	blt.n	e348c <__lshift+0xa0>
   e340c:	4638      	mov	r0, r7
   e340e:	f7ff fde3 	bl	e2fd8 <_Balloc>
   e3412:	2300      	movs	r3, #0
   e3414:	4605      	mov	r5, r0
   e3416:	f100 0114 	add.w	r1, r0, #20
   e341a:	f100 0210 	add.w	r2, r0, #16
   e341e:	4618      	mov	r0, r3
   e3420:	4553      	cmp	r3, sl
   e3422:	db36      	blt.n	e3492 <__lshift+0xa6>
   e3424:	6920      	ldr	r0, [r4, #16]
   e3426:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   e342a:	f104 0314 	add.w	r3, r4, #20
   e342e:	f019 091f 	ands.w	r9, r9, #31
   e3432:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   e3436:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   e343a:	d02e      	beq.n	e349a <__lshift+0xae>
   e343c:	f1c9 0e20 	rsb	lr, r9, #32
   e3440:	468a      	mov	sl, r1
   e3442:	2200      	movs	r2, #0
   e3444:	6818      	ldr	r0, [r3, #0]
   e3446:	fa00 f009 	lsl.w	r0, r0, r9
   e344a:	4302      	orrs	r2, r0
   e344c:	f84a 2b04 	str.w	r2, [sl], #4
   e3450:	f853 2b04 	ldr.w	r2, [r3], #4
   e3454:	459c      	cmp	ip, r3
   e3456:	fa22 f20e 	lsr.w	r2, r2, lr
   e345a:	d8f3      	bhi.n	e3444 <__lshift+0x58>
   e345c:	ebac 0304 	sub.w	r3, ip, r4
   e3460:	3b15      	subs	r3, #21
   e3462:	f023 0303 	bic.w	r3, r3, #3
   e3466:	3304      	adds	r3, #4
   e3468:	f104 0015 	add.w	r0, r4, #21
   e346c:	4560      	cmp	r0, ip
   e346e:	bf88      	it	hi
   e3470:	2304      	movhi	r3, #4
   e3472:	50ca      	str	r2, [r1, r3]
   e3474:	b10a      	cbz	r2, e347a <__lshift+0x8e>
   e3476:	f108 0602 	add.w	r6, r8, #2
   e347a:	3e01      	subs	r6, #1
   e347c:	4638      	mov	r0, r7
   e347e:	612e      	str	r6, [r5, #16]
   e3480:	4621      	mov	r1, r4
   e3482:	f7ff fddd 	bl	e3040 <_Bfree>
   e3486:	4628      	mov	r0, r5
   e3488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e348c:	3101      	adds	r1, #1
   e348e:	005b      	lsls	r3, r3, #1
   e3490:	e7ba      	b.n	e3408 <__lshift+0x1c>
   e3492:	f842 0f04 	str.w	r0, [r2, #4]!
   e3496:	3301      	adds	r3, #1
   e3498:	e7c2      	b.n	e3420 <__lshift+0x34>
   e349a:	3904      	subs	r1, #4
   e349c:	f853 2b04 	ldr.w	r2, [r3], #4
   e34a0:	f841 2f04 	str.w	r2, [r1, #4]!
   e34a4:	459c      	cmp	ip, r3
   e34a6:	d8f9      	bhi.n	e349c <__lshift+0xb0>
   e34a8:	e7e7      	b.n	e347a <__lshift+0x8e>

000e34aa <__mcmp>:
   e34aa:	b530      	push	{r4, r5, lr}
   e34ac:	6902      	ldr	r2, [r0, #16]
   e34ae:	690c      	ldr	r4, [r1, #16]
   e34b0:	1b12      	subs	r2, r2, r4
   e34b2:	d10e      	bne.n	e34d2 <__mcmp+0x28>
   e34b4:	f100 0314 	add.w	r3, r0, #20
   e34b8:	3114      	adds	r1, #20
   e34ba:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   e34be:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   e34c2:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   e34c6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   e34ca:	42a5      	cmp	r5, r4
   e34cc:	d003      	beq.n	e34d6 <__mcmp+0x2c>
   e34ce:	d305      	bcc.n	e34dc <__mcmp+0x32>
   e34d0:	2201      	movs	r2, #1
   e34d2:	4610      	mov	r0, r2
   e34d4:	bd30      	pop	{r4, r5, pc}
   e34d6:	4283      	cmp	r3, r0
   e34d8:	d3f3      	bcc.n	e34c2 <__mcmp+0x18>
   e34da:	e7fa      	b.n	e34d2 <__mcmp+0x28>
   e34dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   e34e0:	e7f7      	b.n	e34d2 <__mcmp+0x28>

000e34e2 <__mdiff>:
   e34e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e34e6:	460c      	mov	r4, r1
   e34e8:	4606      	mov	r6, r0
   e34ea:	4611      	mov	r1, r2
   e34ec:	4620      	mov	r0, r4
   e34ee:	4617      	mov	r7, r2
   e34f0:	f7ff ffdb 	bl	e34aa <__mcmp>
   e34f4:	1e05      	subs	r5, r0, #0
   e34f6:	d108      	bne.n	e350a <__mdiff+0x28>
   e34f8:	4629      	mov	r1, r5
   e34fa:	4630      	mov	r0, r6
   e34fc:	f7ff fd6c 	bl	e2fd8 <_Balloc>
   e3500:	2301      	movs	r3, #1
   e3502:	e9c0 3504 	strd	r3, r5, [r0, #16]
   e3506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e350a:	bfa4      	itt	ge
   e350c:	463b      	movge	r3, r7
   e350e:	4627      	movge	r7, r4
   e3510:	4630      	mov	r0, r6
   e3512:	6879      	ldr	r1, [r7, #4]
   e3514:	bfa6      	itte	ge
   e3516:	461c      	movge	r4, r3
   e3518:	2500      	movge	r5, #0
   e351a:	2501      	movlt	r5, #1
   e351c:	f7ff fd5c 	bl	e2fd8 <_Balloc>
   e3520:	693e      	ldr	r6, [r7, #16]
   e3522:	60c5      	str	r5, [r0, #12]
   e3524:	6925      	ldr	r5, [r4, #16]
   e3526:	f107 0114 	add.w	r1, r7, #20
   e352a:	f104 0914 	add.w	r9, r4, #20
   e352e:	f100 0e14 	add.w	lr, r0, #20
   e3532:	f107 0210 	add.w	r2, r7, #16
   e3536:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   e353a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   e353e:	46f2      	mov	sl, lr
   e3540:	2700      	movs	r7, #0
   e3542:	f859 3b04 	ldr.w	r3, [r9], #4
   e3546:	f852 bf04 	ldr.w	fp, [r2, #4]!
   e354a:	fa1f f883 	uxth.w	r8, r3
   e354e:	fa17 f78b 	uxtah	r7, r7, fp
   e3552:	0c1b      	lsrs	r3, r3, #16
   e3554:	eba7 0808 	sub.w	r8, r7, r8
   e3558:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   e355c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   e3560:	fa1f f888 	uxth.w	r8, r8
   e3564:	141f      	asrs	r7, r3, #16
   e3566:	454d      	cmp	r5, r9
   e3568:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   e356c:	f84a 3b04 	str.w	r3, [sl], #4
   e3570:	d8e7      	bhi.n	e3542 <__mdiff+0x60>
   e3572:	1b2b      	subs	r3, r5, r4
   e3574:	3b15      	subs	r3, #21
   e3576:	f023 0303 	bic.w	r3, r3, #3
   e357a:	3304      	adds	r3, #4
   e357c:	3415      	adds	r4, #21
   e357e:	42a5      	cmp	r5, r4
   e3580:	bf38      	it	cc
   e3582:	2304      	movcc	r3, #4
   e3584:	4419      	add	r1, r3
   e3586:	4473      	add	r3, lr
   e3588:	469e      	mov	lr, r3
   e358a:	460d      	mov	r5, r1
   e358c:	4565      	cmp	r5, ip
   e358e:	d30e      	bcc.n	e35ae <__mdiff+0xcc>
   e3590:	f10c 0203 	add.w	r2, ip, #3
   e3594:	1a52      	subs	r2, r2, r1
   e3596:	f022 0203 	bic.w	r2, r2, #3
   e359a:	3903      	subs	r1, #3
   e359c:	458c      	cmp	ip, r1
   e359e:	bf38      	it	cc
   e35a0:	2200      	movcc	r2, #0
   e35a2:	441a      	add	r2, r3
   e35a4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   e35a8:	b17b      	cbz	r3, e35ca <__mdiff+0xe8>
   e35aa:	6106      	str	r6, [r0, #16]
   e35ac:	e7ab      	b.n	e3506 <__mdiff+0x24>
   e35ae:	f855 8b04 	ldr.w	r8, [r5], #4
   e35b2:	fa17 f488 	uxtah	r4, r7, r8
   e35b6:	1422      	asrs	r2, r4, #16
   e35b8:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   e35bc:	b2a4      	uxth	r4, r4
   e35be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   e35c2:	f84e 4b04 	str.w	r4, [lr], #4
   e35c6:	1417      	asrs	r7, r2, #16
   e35c8:	e7e0      	b.n	e358c <__mdiff+0xaa>
   e35ca:	3e01      	subs	r6, #1
   e35cc:	e7ea      	b.n	e35a4 <__mdiff+0xc2>
	...

000e35d0 <__ulp>:
   e35d0:	b082      	sub	sp, #8
   e35d2:	ed8d 0b00 	vstr	d0, [sp]
   e35d6:	9b01      	ldr	r3, [sp, #4]
   e35d8:	4912      	ldr	r1, [pc, #72]	; (e3624 <__ulp+0x54>)
   e35da:	4019      	ands	r1, r3
   e35dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   e35e0:	2900      	cmp	r1, #0
   e35e2:	dd05      	ble.n	e35f0 <__ulp+0x20>
   e35e4:	2200      	movs	r2, #0
   e35e6:	460b      	mov	r3, r1
   e35e8:	ec43 2b10 	vmov	d0, r2, r3
   e35ec:	b002      	add	sp, #8
   e35ee:	4770      	bx	lr
   e35f0:	4249      	negs	r1, r1
   e35f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   e35f6:	ea4f 5021 	mov.w	r0, r1, asr #20
   e35fa:	f04f 0200 	mov.w	r2, #0
   e35fe:	f04f 0300 	mov.w	r3, #0
   e3602:	da04      	bge.n	e360e <__ulp+0x3e>
   e3604:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   e3608:	fa41 f300 	asr.w	r3, r1, r0
   e360c:	e7ec      	b.n	e35e8 <__ulp+0x18>
   e360e:	f1a0 0114 	sub.w	r1, r0, #20
   e3612:	291e      	cmp	r1, #30
   e3614:	bfda      	itte	le
   e3616:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   e361a:	fa20 f101 	lsrle.w	r1, r0, r1
   e361e:	2101      	movgt	r1, #1
   e3620:	460a      	mov	r2, r1
   e3622:	e7e1      	b.n	e35e8 <__ulp+0x18>
   e3624:	7ff00000 	.word	0x7ff00000

000e3628 <__b2d>:
   e3628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e362a:	6905      	ldr	r5, [r0, #16]
   e362c:	f100 0714 	add.w	r7, r0, #20
   e3630:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   e3634:	1f2e      	subs	r6, r5, #4
   e3636:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e363a:	4620      	mov	r0, r4
   e363c:	f7ff fd93 	bl	e3166 <__hi0bits>
   e3640:	f1c0 0320 	rsb	r3, r0, #32
   e3644:	280a      	cmp	r0, #10
   e3646:	f8df c07c 	ldr.w	ip, [pc, #124]	; e36c4 <__b2d+0x9c>
   e364a:	600b      	str	r3, [r1, #0]
   e364c:	dc14      	bgt.n	e3678 <__b2d+0x50>
   e364e:	f1c0 0e0b 	rsb	lr, r0, #11
   e3652:	fa24 f10e 	lsr.w	r1, r4, lr
   e3656:	42b7      	cmp	r7, r6
   e3658:	ea41 030c 	orr.w	r3, r1, ip
   e365c:	bf34      	ite	cc
   e365e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e3662:	2100      	movcs	r1, #0
   e3664:	3015      	adds	r0, #21
   e3666:	fa04 f000 	lsl.w	r0, r4, r0
   e366a:	fa21 f10e 	lsr.w	r1, r1, lr
   e366e:	ea40 0201 	orr.w	r2, r0, r1
   e3672:	ec43 2b10 	vmov	d0, r2, r3
   e3676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e3678:	42b7      	cmp	r7, r6
   e367a:	bf3a      	itte	cc
   e367c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e3680:	f1a5 0608 	subcc.w	r6, r5, #8
   e3684:	2100      	movcs	r1, #0
   e3686:	380b      	subs	r0, #11
   e3688:	d017      	beq.n	e36ba <__b2d+0x92>
   e368a:	f1c0 0c20 	rsb	ip, r0, #32
   e368e:	fa04 f500 	lsl.w	r5, r4, r0
   e3692:	42be      	cmp	r6, r7
   e3694:	fa21 f40c 	lsr.w	r4, r1, ip
   e3698:	ea45 0504 	orr.w	r5, r5, r4
   e369c:	bf8c      	ite	hi
   e369e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   e36a2:	2400      	movls	r4, #0
   e36a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   e36a8:	fa01 f000 	lsl.w	r0, r1, r0
   e36ac:	fa24 f40c 	lsr.w	r4, r4, ip
   e36b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e36b4:	ea40 0204 	orr.w	r2, r0, r4
   e36b8:	e7db      	b.n	e3672 <__b2d+0x4a>
   e36ba:	ea44 030c 	orr.w	r3, r4, ip
   e36be:	460a      	mov	r2, r1
   e36c0:	e7d7      	b.n	e3672 <__b2d+0x4a>
   e36c2:	bf00      	nop
   e36c4:	3ff00000 	.word	0x3ff00000

000e36c8 <__d2b>:
   e36c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e36cc:	4689      	mov	r9, r1
   e36ce:	2101      	movs	r1, #1
   e36d0:	ec57 6b10 	vmov	r6, r7, d0
   e36d4:	4690      	mov	r8, r2
   e36d6:	f7ff fc7f 	bl	e2fd8 <_Balloc>
   e36da:	f3c7 550a 	ubfx	r5, r7, #20, #11
   e36de:	4604      	mov	r4, r0
   e36e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   e36e4:	bb35      	cbnz	r5, e3734 <__d2b+0x6c>
   e36e6:	2e00      	cmp	r6, #0
   e36e8:	9301      	str	r3, [sp, #4]
   e36ea:	d028      	beq.n	e373e <__d2b+0x76>
   e36ec:	4668      	mov	r0, sp
   e36ee:	9600      	str	r6, [sp, #0]
   e36f0:	f7ff fd59 	bl	e31a6 <__lo0bits>
   e36f4:	9900      	ldr	r1, [sp, #0]
   e36f6:	b300      	cbz	r0, e373a <__d2b+0x72>
   e36f8:	9a01      	ldr	r2, [sp, #4]
   e36fa:	f1c0 0320 	rsb	r3, r0, #32
   e36fe:	fa02 f303 	lsl.w	r3, r2, r3
   e3702:	430b      	orrs	r3, r1
   e3704:	40c2      	lsrs	r2, r0
   e3706:	6163      	str	r3, [r4, #20]
   e3708:	9201      	str	r2, [sp, #4]
   e370a:	9b01      	ldr	r3, [sp, #4]
   e370c:	61a3      	str	r3, [r4, #24]
   e370e:	2b00      	cmp	r3, #0
   e3710:	bf14      	ite	ne
   e3712:	2202      	movne	r2, #2
   e3714:	2201      	moveq	r2, #1
   e3716:	6122      	str	r2, [r4, #16]
   e3718:	b1d5      	cbz	r5, e3750 <__d2b+0x88>
   e371a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   e371e:	4405      	add	r5, r0
   e3720:	f8c9 5000 	str.w	r5, [r9]
   e3724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e3728:	f8c8 0000 	str.w	r0, [r8]
   e372c:	4620      	mov	r0, r4
   e372e:	b003      	add	sp, #12
   e3730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e3734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e3738:	e7d5      	b.n	e36e6 <__d2b+0x1e>
   e373a:	6161      	str	r1, [r4, #20]
   e373c:	e7e5      	b.n	e370a <__d2b+0x42>
   e373e:	a801      	add	r0, sp, #4
   e3740:	f7ff fd31 	bl	e31a6 <__lo0bits>
   e3744:	9b01      	ldr	r3, [sp, #4]
   e3746:	6163      	str	r3, [r4, #20]
   e3748:	2201      	movs	r2, #1
   e374a:	6122      	str	r2, [r4, #16]
   e374c:	3020      	adds	r0, #32
   e374e:	e7e3      	b.n	e3718 <__d2b+0x50>
   e3750:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   e3754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e3758:	f8c9 0000 	str.w	r0, [r9]
   e375c:	6918      	ldr	r0, [r3, #16]
   e375e:	f7ff fd02 	bl	e3166 <__hi0bits>
   e3762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   e3766:	e7df      	b.n	e3728 <__d2b+0x60>

000e3768 <__ratio>:
   e3768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e376c:	4688      	mov	r8, r1
   e376e:	4669      	mov	r1, sp
   e3770:	4681      	mov	r9, r0
   e3772:	f7ff ff59 	bl	e3628 <__b2d>
   e3776:	a901      	add	r1, sp, #4
   e3778:	4640      	mov	r0, r8
   e377a:	ec55 4b10 	vmov	r4, r5, d0
   e377e:	f7ff ff53 	bl	e3628 <__b2d>
   e3782:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e3786:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e378a:	eba3 0c02 	sub.w	ip, r3, r2
   e378e:	e9dd 3200 	ldrd	r3, r2, [sp]
   e3792:	1a9b      	subs	r3, r3, r2
   e3794:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   e3798:	ec51 0b10 	vmov	r0, r1, d0
   e379c:	2b00      	cmp	r3, #0
   e379e:	bfd6      	itet	le
   e37a0:	460a      	movle	r2, r1
   e37a2:	462a      	movgt	r2, r5
   e37a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   e37a8:	468b      	mov	fp, r1
   e37aa:	462f      	mov	r7, r5
   e37ac:	bfd4      	ite	le
   e37ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   e37b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   e37b6:	4620      	mov	r0, r4
   e37b8:	ee10 2a10 	vmov	r2, s0
   e37bc:	465b      	mov	r3, fp
   e37be:	4639      	mov	r1, r7
   e37c0:	f7fd fcd8 	bl	e1174 <__aeabi_ddiv>
   e37c4:	ec41 0b10 	vmov	d0, r0, r1
   e37c8:	b003      	add	sp, #12
   e37ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e37ce <__copybits>:
   e37ce:	3901      	subs	r1, #1
   e37d0:	b570      	push	{r4, r5, r6, lr}
   e37d2:	1149      	asrs	r1, r1, #5
   e37d4:	6914      	ldr	r4, [r2, #16]
   e37d6:	3101      	adds	r1, #1
   e37d8:	f102 0314 	add.w	r3, r2, #20
   e37dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e37e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e37e4:	1f05      	subs	r5, r0, #4
   e37e6:	42a3      	cmp	r3, r4
   e37e8:	d30c      	bcc.n	e3804 <__copybits+0x36>
   e37ea:	1aa3      	subs	r3, r4, r2
   e37ec:	3b11      	subs	r3, #17
   e37ee:	f023 0303 	bic.w	r3, r3, #3
   e37f2:	3211      	adds	r2, #17
   e37f4:	42a2      	cmp	r2, r4
   e37f6:	bf88      	it	hi
   e37f8:	2300      	movhi	r3, #0
   e37fa:	4418      	add	r0, r3
   e37fc:	2300      	movs	r3, #0
   e37fe:	4288      	cmp	r0, r1
   e3800:	d305      	bcc.n	e380e <__copybits+0x40>
   e3802:	bd70      	pop	{r4, r5, r6, pc}
   e3804:	f853 6b04 	ldr.w	r6, [r3], #4
   e3808:	f845 6f04 	str.w	r6, [r5, #4]!
   e380c:	e7eb      	b.n	e37e6 <__copybits+0x18>
   e380e:	f840 3b04 	str.w	r3, [r0], #4
   e3812:	e7f4      	b.n	e37fe <__copybits+0x30>

000e3814 <__any_on>:
   e3814:	f100 0214 	add.w	r2, r0, #20
   e3818:	6900      	ldr	r0, [r0, #16]
   e381a:	114b      	asrs	r3, r1, #5
   e381c:	4298      	cmp	r0, r3
   e381e:	b510      	push	{r4, lr}
   e3820:	db11      	blt.n	e3846 <__any_on+0x32>
   e3822:	dd0a      	ble.n	e383a <__any_on+0x26>
   e3824:	f011 011f 	ands.w	r1, r1, #31
   e3828:	d007      	beq.n	e383a <__any_on+0x26>
   e382a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e382e:	fa24 f001 	lsr.w	r0, r4, r1
   e3832:	fa00 f101 	lsl.w	r1, r0, r1
   e3836:	428c      	cmp	r4, r1
   e3838:	d10b      	bne.n	e3852 <__any_on+0x3e>
   e383a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e383e:	4293      	cmp	r3, r2
   e3840:	d803      	bhi.n	e384a <__any_on+0x36>
   e3842:	2000      	movs	r0, #0
   e3844:	bd10      	pop	{r4, pc}
   e3846:	4603      	mov	r3, r0
   e3848:	e7f7      	b.n	e383a <__any_on+0x26>
   e384a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e384e:	2900      	cmp	r1, #0
   e3850:	d0f5      	beq.n	e383e <__any_on+0x2a>
   e3852:	2001      	movs	r0, #1
   e3854:	e7f6      	b.n	e3844 <__any_on+0x30>

000e3856 <_calloc_r>:
   e3856:	b513      	push	{r0, r1, r4, lr}
   e3858:	434a      	muls	r2, r1
   e385a:	4611      	mov	r1, r2
   e385c:	9201      	str	r2, [sp, #4]
   e385e:	f7f9 fc6b 	bl	dd138 <_malloc_r>
   e3862:	4604      	mov	r4, r0
   e3864:	b118      	cbz	r0, e386e <_calloc_r+0x18>
   e3866:	9a01      	ldr	r2, [sp, #4]
   e3868:	2100      	movs	r1, #0
   e386a:	f7fd ff25 	bl	e16b8 <memset>
   e386e:	4620      	mov	r0, r4
   e3870:	b002      	add	sp, #8
   e3872:	bd10      	pop	{r4, pc}

000e3874 <_open_r>:
   e3874:	b538      	push	{r3, r4, r5, lr}
   e3876:	4d07      	ldr	r5, [pc, #28]	; (e3894 <_open_r+0x20>)
   e3878:	4604      	mov	r4, r0
   e387a:	4608      	mov	r0, r1
   e387c:	4611      	mov	r1, r2
   e387e:	2200      	movs	r2, #0
   e3880:	602a      	str	r2, [r5, #0]
   e3882:	461a      	mov	r2, r3
   e3884:	f7f9 f9c0 	bl	dcc08 <_open>
   e3888:	1c43      	adds	r3, r0, #1
   e388a:	d102      	bne.n	e3892 <_open_r+0x1e>
   e388c:	682b      	ldr	r3, [r5, #0]
   e388e:	b103      	cbz	r3, e3892 <_open_r+0x1e>
   e3890:	6023      	str	r3, [r4, #0]
   e3892:	bd38      	pop	{r3, r4, r5, pc}
   e3894:	2003e7ec 	.word	0x2003e7ec

000e3898 <_read_r>:
   e3898:	b538      	push	{r3, r4, r5, lr}
   e389a:	4d07      	ldr	r5, [pc, #28]	; (e38b8 <_read_r+0x20>)
   e389c:	4604      	mov	r4, r0
   e389e:	4608      	mov	r0, r1
   e38a0:	4611      	mov	r1, r2
   e38a2:	2200      	movs	r2, #0
   e38a4:	602a      	str	r2, [r5, #0]
   e38a6:	461a      	mov	r2, r3
   e38a8:	f7f9 f9be 	bl	dcc28 <_read>
   e38ac:	1c43      	adds	r3, r0, #1
   e38ae:	d102      	bne.n	e38b6 <_read_r+0x1e>
   e38b0:	682b      	ldr	r3, [r5, #0]
   e38b2:	b103      	cbz	r3, e38b6 <_read_r+0x1e>
   e38b4:	6023      	str	r3, [r4, #0]
   e38b6:	bd38      	pop	{r3, r4, r5, pc}
   e38b8:	2003e7ec 	.word	0x2003e7ec

000e38bc <nanf>:
   e38bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; e38c4 <nanf+0x8>
   e38c0:	4770      	bx	lr
   e38c2:	bf00      	nop
   e38c4:	7fc00000 	.word	0x7fc00000

000e38c8 <__ascii_wctomb>:
   e38c8:	b149      	cbz	r1, e38de <__ascii_wctomb+0x16>
   e38ca:	2aff      	cmp	r2, #255	; 0xff
   e38cc:	bf85      	ittet	hi
   e38ce:	238a      	movhi	r3, #138	; 0x8a
   e38d0:	6003      	strhi	r3, [r0, #0]
   e38d2:	700a      	strbls	r2, [r1, #0]
   e38d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   e38d8:	bf98      	it	ls
   e38da:	2001      	movls	r0, #1
   e38dc:	4770      	bx	lr
   e38de:	4608      	mov	r0, r1
   e38e0:	4770      	bx	lr
	...

000e38e4 <__aeabi_d2lz>:
   e38e4:	b538      	push	{r3, r4, r5, lr}
   e38e6:	2200      	movs	r2, #0
   e38e8:	2300      	movs	r3, #0
   e38ea:	4604      	mov	r4, r0
   e38ec:	460d      	mov	r5, r1
   e38ee:	f7fd fd89 	bl	e1404 <__aeabi_dcmplt>
   e38f2:	b928      	cbnz	r0, e3900 <__aeabi_d2lz+0x1c>
   e38f4:	4620      	mov	r0, r4
   e38f6:	4629      	mov	r1, r5
   e38f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e38fc:	f7fd be58 	b.w	e15b0 <__aeabi_d2ulz>
   e3900:	4620      	mov	r0, r4
   e3902:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   e3906:	f7fd fe53 	bl	e15b0 <__aeabi_d2ulz>
   e390a:	4240      	negs	r0, r0
   e390c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e3910:	bd38      	pop	{r3, r4, r5, pc}
   e3912:	bf00      	nop

000e3914 <dynalib_user>:
   e3914:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   e3924:	0000 0000                                   ....

000e3928 <_ZTVN5spark10LogHandlerE>:
	...
   e3938:	40a9 000d 40cd 000d                         .@...@..

000e3940 <_ZTVN5spark16SerialLogHandlerE>:
	...
   e3948:	4101 000d 4135 000d f365 000d 40cf 000d     .A..5A..e....@..

000e3958 <_ZTV8MB85RC64>:
	...
   e3960:	40d9 000d 40ed 000d 84c1 000d 8557 000d     .@...@......W...
   e3970:	85d9 000d 6e49 7469 6c61 7a69 6e69 2067     ....Initalizing 
   e3980:	6874 2065 6970 4d6e 646f 7365 0000          the pinModes..

000e398e <BUTTON_PIN>:
   e398e:	0004                                        ..

000e3990 <SOIL_MOISTURE_PIN>:
   e3990:	0013                                        ..

000e3992 <SOIL_POWER_PIN>:
   e3992:	0011                                        ..

000e3994 <SOIL_TEMP_PIN>:
   e3994:	0012                                        ..

000e3996 <TMP36_SENSE_PIN>:
   e3996:	000f 414e 2500 3a69 3030 2500 7369 6365     ..NA.%i:00.%isec
   e39a6:	2500 2e32 6631 2520 0025 6559 0073 6f4e     .%2.1f %%.Yes.No
   e39b6:	5500 6b6e 6f6e 6e77 4e00 746f 4320 6168     .Unknown.Not Cha
   e39c6:	6772 6e69 0067 6843 7261 6567 0064 6944     rging.Charged.Di
   e39d6:	6373 6168 6772 6e69 0067 6146 6c75 0074     scharging.Fault.
   e39e6:	6944 6f63 6e6e 6365 6574 0064 6e49 7469     Diconnected.Init
   e39f6:	6169 696c 697a 676e 5020 7261 6974 6c63     ializing Particl
   e3a06:	2065 7566 636e 6974 6e6f 2073 6e61 2064     e functions and 
   e3a16:	6176 6972 6261 656c 0073 6e49 6574 6e72     variables.Intern
   e3a26:	6c61 5420 6d65 0070 6c53 6565 2070 6e45     al Temp.Sleep En
   e3a36:	6261 656c 0064 6552 656c 7361 0065 6953     abled.Release.Si
   e3a46:	6e67 6c61 7300 6174 6574 664f 6843 0067     gnal.stateOfChg.
   e3a56:	6142 7474 7265 4379 6e6f 6574 7478 5300     BatteryContext.S
   e3a66:	696f 4d6c 696f 7473 7275 0065 6f53 6c69     oilMoisture.Soil
   e3a76:	5420 6d65 0070 6157 6574 6972 676e 6350      Temp.WateringPc
   e3a86:	0074 6157 6574 6972 676e 7544 6172 6974     t.WateringDurati
   e3a96:	6e6f 4500 616e 6c62 2065 6c53 6565 0070     on.Enable Sleep.
   e3aa6:	6553 2074 6157 656b 5420 6d69 0065 6553     Set Wake Time.Se
   e3ab6:	2074 6c53 6565 2070 6954 656d 5300 7465     t Sleep Time.Set
   e3ac6:	6157 6574 5472 7268 7365 6f68 646c 5300     WaterThreshold.S
   e3ad6:	7465 6157 6574 4472 7275 7461 6f69 006e     etWaterDuration.
   e3ae6:	6157 656b 7420 6d69 2065 6573 2074 6f74     Wake time set to
   e3af6:	2520 0069 6c53 6565 2070 6974 656d 7320      %i.Sleep time s
   e3b06:	7465 7420 206f 6925 7400 7572 0065 6166     et to %i.true.fa
   e3b16:	736c 0065 6e45 6261 656c 7320 656c 7065     lse.Enable sleep
   e3b26:	6920 2073 7325 4d00 646f 0065 6157 6574      is %s.Mode.Wate
   e3b36:	6972 676e 6620 6e75 7463 6f69 206e 6964     ring function di
   e3b46:	6173 6c62 6465 5300 7379 6574 006d 7362     sabled.System.bs
   e3b56:	7300 006d 7473 7700 0073 6f57 656b 6f20     .sm.st.ws.Woke o
   e3b66:	206e 7562 7474 6e6f 7020 6572 7373 4200     n button press.B
   e3b76:	7475 6f74 206e 7270 7365 2073 202d 6c73     utton press - sl
   e3b86:	6565 2070 6e65 6261 656c 6920 2073 7325     eep enable is %s
   e3b96:	5300 6e65 6964 676e 7720 6265 6f68 6b6f     .Sending webhook
   e3ba6:	7420 206f 7473 7261 2074 6177 6574 6972      to start wateri
   e3bb6:	676e 7b00 6422 7275 7461 6f69 226e 253a     ng.{"duration":%
   e3bc6:	7d69 5200 6361 6968 2d6f 6157 6574 4772     i}.Rachio-WaterG
   e3bd6:	7261 6564 006e 6576 7463 726f 3a3a 4d5f     arden.vector::_M
   e3be6:	725f 6165 6c6c 636f 695f 736e 7265 0074     _realloc_insert.
   e3bf6:	5345 3554 4445 2c54 334d 322e 302e 302f     EST5EDT,M3.2.0/0
   e3c06:	3a32 3030 303a 2c30 314d 2e31 2e31 2f30     2:00:00,M11.1.0/
   e3c16:	3230 303a 3a30 3030 2f00 7375 2f72 7665     02:00:00./usr/ev
   e3c26:	6e65 7374 742e 7478 6500 0068 7566 6c6c     ents.txt.eh.full
   e3c36:	3000 3a35 3030 303a 0030 3132 353a 3a39     .05:00:00.21:59:
   e3c46:	3935 4c00 616f 6964 676e 5320 7379 6574     59.Loading Syste
   e3c56:	206d 6544 6166 6c75 7374 4c00 616f 6964     m Defaults.Loadi
   e3c66:	676e 7320 7379 6574 206d 6564 6166 6c75     ng system defaul
   e3c76:	7374 7300 7379 7453 7561 2073 626f 656a     ts.sysStaus obje
   e3c86:	7463 7320 6f74 6572 2064 6e61 2064 6168     ct stored and ha
   e3c96:	6873 7520 6470 7461 6465 6300 7275 6572     sh updated.curre
   e3ca6:	746e 6f20 6a62 6365 2074 7473 726f 6465     nt object stored
   e3cb6:	6120 646e 6820 7361 2068 7075 6164 6574      and hash update
   e3cc6:	0064 5246 4d41 6920 696e 6974 6c61 7a69     d.FRAM initializ
   e3cd6:	6465 202c 6f6c 6461 6e69 2067 626f 656a     ed, loading obje
   e3ce6:	7463 0073 0000                              cts...

000e3cec <_ZL17FRAMversionNumber>:
   e3cec:	0001 0000 6f4e 656e 5700 4669 0069 5347     ....None.WiFi.GS
   e3cfc:	004d 4d55 5354 4300 4d44 0041 544c 0045     M.UMTS.CDMA.LTE.
   e3d0c:	4549 4545 3038 3132 3435 4c00 4554 435f     IEEE802154.LTE_C
   e3d1c:	5441 4d5f 0031 544c 5f45 4143 5f54 424e     AT_M1.LTE_CAT_NB
   e3d2c:	0031 6f56 203a 3425 322e 2066 566d 2020     1.Vo: %4.2f mV  
   e3d3c:	7452 203d 3425 322e 2066 566d 2020 2054     Rt= %4.2f mV  T 
   e3d4c:	203d 3425 322e 0066 7325 5320 253a 2e32     = %4.2f.%s S:%2.
   e3d5c:	6630 2525 202c 3a51 3225 302e 2566 2025     0f%%, Q:%2.0f%% 
   e3d6c:	2500 2e34 6632 4320 4900 746e 7265 616e     .%4.2f C.Interna
   e3d7c:	206c 6554 706d 7265 7461 7275 2065 7369     l Temperature is
   e3d8c:	2520 0073 6f53 6c69 5420 6d65 6570 6172      %s.Soil Tempera
   e3d9c:	7574 6572 6920 2073 7325 2500 2e34 6632     ture is %s.%4.2f
   e3dac:	2525 5300 696f 206c 6f4d 7369 7574 6572     %%.Soil Moisture
   e3dbc:	6920 2073 7325 0000 39b7 000e 3cf0 000e      is %s...9...<..
   e3dcc:	3cf5 000e 3cfa 000e 3cfe 000e 3d03 000e     .<...<...<...=..
   e3ddc:	3d08 000e 3d0c 000e 3d17 000e 3d22 000e     .=...=...=.."=..
   e3dec:	6166 6c69 6465 7420 206f 6572 6461 7220     failed to read r
   e3dfc:	6765 6441 7264 253d 3230 2078 6f63 6e75     egAddr=%02x coun
   e3e0c:	3d74 7525 6600 6961 656c 2064 6f74 7220     t=%u.failed to r
   e3e1c:	6165 2064 6572 4167 6464 3d72 3025 7832     ead regAddr=%02x
   e3e2c:	7320 6174 3d74 6425 4600 554f 2054 6964      stat=%d.FOUT di
   e3e3c:	2064 6f6e 2074 6f67 4820 4749 0048 6f6e     d not go HIGH.no
   e3e4c:	2074 6564 6574 7463 6465 6600 6961 656c     t detected.faile
   e3e5c:	2064 6f74 7720 6972 6574 7220 6765 6441     d to write regAd
   e3e6c:	7264 253d 3230 2078 7473 7461 253d 0064     dr=%02x stat=%d.
   e3e7c:	6573 5774 5444 2520 0064 6177 6374 6468     setWDT %d.watchd
   e3e8c:	676f 6320 656c 7261 6465 6220 6552 7573     og cleared bResu
   e3e9c:	746c 253d 0064 6177 6374 6468 676f 7320     lt=%d.watchdog s
   e3eac:	7465 6620 756f 5372 6365 3d73 6425 6220     et fourSecs=%d b
   e3ebc:	6552 7573 746c 253d 0064 6572 6573 4374     Result=%d.resetC
   e3ecc:	6e6f 6966 2867 7830 3025 6c38 2978 5700     onfig(0x%08lx).W
   e3edc:	5441 4843 4f44 0047 4544 5045 505f 574f     ATCHDOG.DEEP_POW
   e3eec:	5245 445f 574f 004e 4f43 4e55 4454 574f     ER_DOWN.COUNTDOW
   e3efc:	5f4e 4954 454d 0052 4c41 5241 004d 6166     N_TIMER.ALARM.fa
   e3f0c:	6c69 7275 2065 6e69 7520 6470 7461 5765     ilure in updateW
   e3f1c:	6b61 5265 6165 6f73 206e 6425 7700 6b61     akeReason %d.wak
   e3f2c:	2065 6572 7361 6e6f 3d20 2520 0073 3025     e reason = %s.%0
   e3f3c:	6434 252d 3230 2d64 3025 6432 2520 3230     4d-%02d-%02d %02
   e3f4c:	3a64 3025 6432 253a 3230 0064 6567 5274     d:%02d:%02d.getR
   e3f5c:	6374 7341 6d54 2520 0073 6573 2074 7973     tcAsTm %s.set sy
   e3f6c:	7473 6d65 6320 6f6c 6b63 6620 6f72 206d     stem clock from 
   e3f7c:	5452 2043 7325 6600 6961 656c 2064 6f74     RTC %s.failed to
   e3f8c:	6420 7465 6365 2074 4241 3831 3530 7300      detect AB1805.s
   e3f9c:	7465 7452 4163 5473 206d 7325 6600 6961     etRtcAsTm %s.fai
   e3fac:	756c 6572 6920 206e 6573 5274 6374 7246     lure in setRtcFr
   e3fbc:	6d6f 6d54 2520 0064 6573 2074 5452 2043     omTm %d.set RTC 
   e3fcc:	7266 6d6f 6320 6f6c 6475 2520 0073 7061     from cloud %s.ap
   e3fdc:	2e70 6261 3831 3530 0000 0000               p.ab1805....

000e3fe8 <_ZTV6AB1805>:
	...
   e3ff0:	5f51 000d 5f53 000d 64bf 000d 6545 000d     Q_..S_...d..Ee..
   e4000:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   e4010:	5268 004b                                   hRK.

000e4014 <_ZTV19BackgroundPublishRK>:
	...
   e401c:	6a61 000d 6a7d 000d                         aj..}j..

000e4024 <_ZTV10JsonBuffer>:
	...
   e402c:	6d39 000d 6d55 000d                         9m..Um..

000e4034 <_ZTV10JsonParser>:
	...
   e403c:	6d69 000d 6d8d 000d 6425 253a 3a64 6425     im...m..%d:%d:%d
   e404c:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   e405c:	3935 4d00 6425 252e 2e64 6425 2c00 0000     59.M%d.%d.%d.,..

000e406c <_ZTV9LocalTime>:
	...
   e4074:	6e21 000d 6e39 000d                         !n..9n..

000e407c <_ZTV12LocalTimeHMS>:
	...
   e4084:	6dc1 000d 6dd3 000d                         .m...m..

000e408c <_ZTV15LocalTimeChange>:
	...
   e4094:	6dc3 000d 6de1 000d                         .m...m..

000e409c <_ZTV22LocalTimePosixTimezone>:
	...
   e40a4:	6df1 000d 6e0d 000d 7277 7469 4465 7461     .m...n..writeDat
   e40b4:	2061 6166 6c69 6465 6420 7275 6e69 2067     a failed during 
   e40c4:	7265 7361 2065 7266 6d61 6441 7264 253d     erase framAddr=%
   e40d4:	0075 0000                                   u...

000e40d8 <_ZTV6MB85RC>:
	...
   e40e0:	8411 000d 8413 000d 84c1 000d 8557 000d     ............W...
   e40f0:	85d9 000d 6966 656c 754e 3d6d 6425 7320     ....fileNum=%d s
   e4100:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   e4110:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   e4120:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   e4130:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   e4140:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   e4150:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   e4160:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   e4170:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   e4180:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   e4190:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   e41a0:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   e41b0:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   e41c0:	4e65 6d75 253d 0064 6572 6573 2074 726f     eNum=%d.reset or
   e41d0:	6420 7369 6f63 6e6e 6365 2074 7665 6e65      disconnect even
   e41e0:	2c74 7320 7661 2065 6966 656c 2073 6f74     t, save files to
   e41f0:	7120 6575 6575 7200 6d61 6400 7369 6163      queue.ram.disca
   e4200:	6472 6e69 2067 6f63 7272 7075 6574 2064     rding corrupted 
   e4210:	6966 656c 2520 0064 7570 6c62 7369 6968     file %d.publishi
   e4220:	676e 2520 2073 7665 6e65 3d74 7325 6420     ng %s event=%s d
   e4230:	7461 3d61 7325 6400 7369 6163 6472 6465     ata=%s.discarded
   e4240:	6520 6576 746e 2520 0064 5953 5453 4d45      event %d.SYSTEM
   e4250:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   e4260:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   e4270:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   e4280:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   e4290:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   e42a0:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   e42b0:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   e42c0:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   e42d0:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   e42e0:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   e42f0:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   e4300:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   e4310:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   e4320:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   e4330:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   e4340:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   e4350:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   e4360:	7061 2e70 7570 7162 0000 0000               app.pubq....

000e436c <_ZTV17PublishQueuePosix>:
	...
   e4374:	8e85 000d 915d 000d 9181 000d 3025 6438     ....].......%08d
   e4384:	2f00 7200 6d65 766f 6465 2520 0073 7325     ./.removed %s.%s
   e4394:	6520 6978 7473 2073 6e61 2064 7369 6120      exists and is a
   e43a4:	6420 7269 6365 6f74 7972 6600 6c69 2065      directory.file 
   e43b4:	6e69 7420 6568 7720 7961 202c 6564 656c     in the way, dele
   e43c4:	6974 676e 2520 0073 7473 7461 6620 6c69     ting %s.stat fil
   e43d4:	6465 6520 7272 6f6e 253d 0064 7263 6165     ed errno=%d.crea
   e43e4:	6574 2064 6964 2072 7325 6d00 646b 7269     ted dir %s.mkdir
   e43f4:	6620 6961 656c 2064 7265 6e72 3d6f 6425      failed errno=%d
   e4404:	7500 636e 6e6f 6966 7567 6572 2064 6964     .unconfigured di
   e4414:	5072 7461 0068 6373 6e61 696e 676e 2520     rPath.scanning %
   e4424:	2073 6977 6874 7020 7461 6574 6e72 2520     s with pattern %
   e4434:	0073 6461 6964 676e 7420 206f 7571 7565     s.adding to queu
   e4444:	2065 6425 2520 0073 6567 4674 6c69 4665     e %d %s.getFileF
   e4454:	6f72 516d 6575 6575 7220 7465 7275 656e     romQueue returne
   e4464:	2064 6425 6100 7070 732e 7165 6966 656c     d %d.app.seqfile
   e4474:	0000 0000                                   ....

000e4478 <_ZTV14SequentialFile>:
	...
   e4480:	94dd 000d 9509 000d 9195 000d 742e 706d     .............tmp
   e4490:	7300 656c 7065 6548 706c 7265 6100 7070     .sleepHelper.app
   e44a0:	732e 656c 7065 2f00 7375 2f72 6c73 6565     .sleep./usr/slee
   e44b0:	5370 7465 6974 676e 2e73 736a 6e6f 2f00     pSettings.json./
   e44c0:	7375 2f72 6c73 6565 4470 7461 2e61 6164     usr/sleepData.da
   e44d0:	0074 7645 6e65 4874 7369 6f74 7972 3a3a     t.EventHistory::
   e44e0:	6461 4564 6576 746e 0d00 000a 6944 6373     addEvent....Disc
   e44f0:	6e6f 656e 7463 6e69 2067 6563 6c6c 6c75     onnecting cellul
   e4500:	7261 7300 6174 6574 6148 646e 656c 5372     ar.stateHandlerS
   e4510:	6174 7472 7200 6e75 696e 676e 6920 206e     tart.running in 
   e4520:	6f6e 6320 6e6f 656e 7463 6f69 206e 6f6d     no connection mo
   e4530:	6564 6300 6e6f 656e 7463 6465 7420 206f     de.connected to 
   e4540:	656e 7774 726f 206b 6e69 2520 756c 6d20     network in %lu m
   e4550:	0073 6974 656d 2064 756f 2074 6f63 6e6e     s.timed out conn
   e4560:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e4570:	6974 656d 2064 756f 2074 6572 6f63 6e6e     timed out reconn
   e4580:	6365 6974 676e 7420 206f 6c63 756f 0064     ecting to cloud.
   e4590:	7473 7461 4865 6e61 6c64 7265 6c53 6565     stateHandlerSlee
   e45a0:	0070 6c73 6565 6970 676e 6620 726f 2520     p.sleeping for %
   e45b0:	2064 6573 2063 6461 756a 7473 656d 746e     d sec adjustment
   e45c0:	734d 253d 0064 6570 6972 646f 7420 6f6f     Ms=%d.period too
   e45d0:	7320 6f68 7472 7420 206f 6c73 6565 2070      short to sleep 
   e45e0:	6425 7200 6d65 766f 6e69 2067 7469 6d65     %d.removing item
   e45f0:	6620 6f72 206d 7570 6c62 7369 4468 7461      from publishDat
   e4600:	0061 6f63 6e6e 6365 6574 2064 6f74 6320     a.connected to c
   e4610:	6f6c 6475 6920 206e 6c25 2075 736d 7100     loud in %lu ms.q
   e4620:	6975 6b63 7000 6275 696c 6873 6e69 2067     uick.publishing 
   e4630:	616e 656d 253d 2073 6c66 6761 3d73 7830     name=%s flags=0x
   e4640:	7825 7700 0072 7474 0063 7272 7300 636f     %x.wr.ttc.rr.soc
   e4650:	6e00 206f 5452 2043 6974 656d 202c 6f64     .no RTC time, do
   e4660:	6e69 2067 7566 6c6c 7720 6b61 0065 6974     ing full wake.ti
   e4670:	656d 7420 206f 6f64 6620 6c75 206c 6177     me to do full wa
   e4680:	656b 6400 6e6f 2065 6977 6874 6e20 206f     ke.done with no 
   e4690:	6f63 6e6e 6365 6974 6e6f 6d20 646f 2c65     connection mode,
   e46a0:	7020 6572 6170 6972 676e 7420 206f 6c73      preparing to sl
   e46b0:	6565 0070 6c73 6565 2070 7963 6c63 2065     eep.sleep cycle 
   e46c0:	7369 7320 6f68 7472 202c 7375 6e69 2067     is short, using 
   e46d0:	6563 6c6c 6c75 7261 7320 6174 646e 7962     cellular standby
   e46e0:	6400 7369 6f63 6e6e 6365 6974 676e 6620     .disconnecting f
   e46f0:	6f72 206d 6c63 756f 0064 0000               rom cloud...

000e46fc <_ZTV16JsonParserStaticILj622ELj50EE>:
	...
   e4704:	9915 000d 9929 000d                         ....)...

000e470c <_ZTVN11SleepHelper12SettingsFileE>:
	...
   e4714:	9b35 000d 9b7d 000d                         5...}...

000e471c <_ZTVN11SleepHelper14PersistentDataE>:
	...
   e4724:	b1e1 000d 9cf3 000d 9d3d 000d 993f 000d     ........=...?...
   e4734:	99a3 000d 9981 000d 9a1f 000d 9af9 000d     ................
   e4744:	9b21 000d                                   !...

000e4748 <_ZTV11SleepHelper>:
	...
   e4750:	c379 000d c56d 000d                         y...m...

000e4758 <_ZTVN11SleepHelper18PersistentDataBaseE>:
	...
   e4760:	9839 000d 9ccb 000d 9835 000d 9837 000d     9.......5...7...
   e4770:	99a3 000d 9981 000d                         ........

000e4778 <_ZTVN11SleepHelper18PersistentDataFileE>:
	...
   e4780:	b1e1 000d 9cf3 000d 9d3d 000d 993f 000d     ........=...?...
   e4790:	99a3 000d 9981 000d 9a1f 000d               ............

000e479c <_ZTVN5spark13CellularClassE>:
	...
   e47a4:	d25f 000d d255 000d d24b 000d d201 000d     _...U...K.......
   e47b4:	d23f 000d d233 000d f6bd 000d f6c5 000d     ?...3...........
   e47c4:	d227 000d d21f 000d d215 000d d20b 000d     '...............
   e47d4:	f6f5 000d                                   ....

000e47d8 <_ZTV14CellularSignal>:
	...
   e47e0:	d30d 000d d335 000d d30f 000d d345 000d     ....5.......E...
   e47f0:	d379 000d d3a5 000d d3d9 000d d429 000d     y...........)...
   e4800:	d313 000d d32f 000d fffc ffff 0000 0000     ..../...........
   e4810:	d44f 000d                                   O...

000e4814 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e481c:	d46f 000d d475 000d d4b3 000d d483 000d     o...u...........
   e482c:	d471 000d                                   q...

000e4830 <_ZTVN5spark13EthernetClassE>:
	...
   e4838:	da87 000d da7d 000d da73 000d da69 000d     ....}...s...i...
   e4848:	da5d 000d da51 000d f6bd 000d f6c5 000d     ]...Q...........
   e4858:	da45 000d da3d 000d da33 000d da29 000d     E...=...3...)...
   e4868:	f6f5 000d                                   ....

000e486c <_ZTV7TwoWire>:
	...
   e4874:	dc2b 000d dc75 000d dc4d 000d dc2d 000d     +...u...M...-...
   e4884:	dc55 000d dc5d 000d dc65 000d dc6d 000d     U...]...e...m...

000e4894 <_ZTV9IPAddress>:
	...
   e489c:	dd81 000d dd71 000d dd73 000d 2e30 0030     ....q...s...0.0.
   e48ac:	2e25 6c2a 0066 6725 6e00 6c75 006c 2575     %.*lf.%g.null.u%
   e48bc:	3430 0078                                   04x.

000e48c0 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e48c8:	de81 000d de97 000d dead 000d dea5 000d     ................
   e48d8:	de85 000d                                   ....

000e48dc <_ZTVN5spark16JSONBufferWriterE>:
	...
   e48e4:	de83 000d de89 000d ded5 000d defb 000d     ................
   e48f4:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   e4904:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   e4914:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   e4924:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   e4934:	005b 6f63 6564 3d20 0020 6564 6174 6c69     [.code = .detail
   e4944:	2073 203d 6c00 006e 6e66 6300 646f 0065     s = .ln.fn.code.
   e4954:	6564 6174 6c69 0000                         detail..

000e495c <_ZTVN5spark16JSONStreamWriterE>:
	...
   e4964:	e7a5 000d e7cb 000d e789 000d df31 000d     ............1...

000e4974 <_ZTVN5spark16StreamLogHandlerE>:
	...
   e497c:	eb81 000d eb99 000d f365 000d 40cf 000d     ........e....@..

000e498c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   e4994:	ebad 000d ebc1 000d f509 000d e791 000d     ................

000e49a4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   e49ac:	e7a3 000d e7d9 000d f2a1 000d e793 000d     ................

000e49bc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   e49c4:	e7a1 000d e7e7 000d eac9 000d e805 000d     ................

000e49d4 <_ZTVN5spark12NetworkClassE>:
	...
   e49dc:	f67d 000d f687 000d f691 000d f69b 000d     }...............
   e49ec:	f6a5 000d f6b1 000d f6bd 000d f6c5 000d     ................
   e49fc:	f6cd 000d f6d9 000d f6e1 000d f6eb 000d     ................
   e4a0c:	f6f5 000d 6977 6972 676e 5300 7379 6574     ....wiring.Syste
   e4a1c:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   e4a2c:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   e4a3c:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   e4a4c:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e4a5c:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e4a68 <_ZTV11USARTSerial>:
	...
   e4a70:	0169 000e 01d7 000e 01af 000e f93b 000d     i...........;...
   e4a80:	017f 000e 019b 000e 018d 000e 01a9 000e     ................
   e4a90:	016b 000e 0171 000e                         k...q...

000e4a98 <_ZTV9USBSerial>:
	...
   e4aa0:	0277 000e 02df 000e 02b5 000e f93b 000d     w...........;...
   e4ab0:	02a7 000e 0279 000e 0289 000e 02d9 000e     ....y...........
   e4ac0:	0299 000e 0271 000e                         ....q...

000e4ac8 <_ZSt7nothrow>:
   e4ac8:	0000 0000 6f6c 6667 2500 332e 2073 2e25     ....logf.%.3s %.
   e4ad8:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   e4ae8:	2e25 6432 2520 0a64                          %.2d %d..

000e4af1 <day_name.6145>:
   e4af1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   e4b01:	6972 6153                                    riSat

000e4b06 <mon_name.6146>:
   e4b06:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   e4b16:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   e4b26:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000e4b38 <fpi.7566>:
   e4b38:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e4b48:	0000 0000                                   ....

000e4b4c <fpinan.7602>:
   e4b4c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e4b5c:	0000 0000                                   ....

000e4b60 <tinytens>:
   e4b60:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e4b70:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e4b80:	6f43 64ac 0628 1168                         Co.d(.h.

000e4b88 <_ctype_>:
   e4b88:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e4b98:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e4ba8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e4bb8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e4bc8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e4bd8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e4be8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e4bf8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e4c08:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e4c8c <_C_numeric_locale>:
   e4c8c:	4a3c 000e 44eb 000e e240 2003 4f50 4953     <J...D..@.. POSI
   e4c9c:	0058 0000                                   X...

000e4ca0 <__mprec_bigtens>:
   e4ca0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e4cb0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e4cc0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e4cc8 <__mprec_tens>:
   e4cc8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e4cd8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e4ce8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e4cf8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e4d08:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e4d18:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e4d28:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e4d38:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e4d48:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e4d58:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e4d68:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e4d78:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e4d88:	9db4 79d9 7843 44ea                         ...yCx.D

000e4d90 <p05.7490>:
   e4d90:	0005 0000 0019 0000 007d 0000               ........}...

000e4d9c <link_const_variable_data_end>:
   e4d9c:	000d4299 	.word	0x000d4299
   e4da0:	000d48e1 	.word	0x000d48e1
   e4da4:	000d567d 	.word	0x000d567d
   e4da8:	000d5985 	.word	0x000d5985
   e4dac:	000d5f45 	.word	0x000d5f45
   e4db0:	000d6941 	.word	0x000d6941
   e4db4:	000d914d 	.word	0x000d914d
   e4db8:	000d9825 	.word	0x000d9825
   e4dbc:	000dc305 	.word	0x000dc305
   e4dc0:	000dd1f1 	.word	0x000dd1f1
   e4dc4:	000dd2dd 	.word	0x000dd2dd
   e4dc8:	000dda91 	.word	0x000dda91
   e4dcc:	000df355 	.word	0x000df355
   e4dd0:	000df7c9 	.word	0x000df7c9
   e4dd4:	000dfa49 	.word	0x000dfa49
   e4dd8:	000dfec9 	.word	0x000dfec9
   e4ddc:	000e0155 	.word	0x000e0155
